<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/master/template/acl_threads_server.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STRCASECMP_IN_STRINGS_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"init/acl_init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_chroot_uid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_core_limit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stringops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_myflock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_watchdog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_access.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_tcp_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_vstream_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>

<comment type="block">/* Application-specific */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_flow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_threads_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_server_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master_log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_procname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_log_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_rw_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_pool_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_thread_stacksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_thread_idle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_idle_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_use_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_delay_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_delay_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_daemon_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_master_maxproc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_max_accept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_enable_dog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_quick_abort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_enable_core</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_disable_core_onexit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_max_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_status_notify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_batadd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_check_inter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_qlen_warn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_schedule_warn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_threads_schedule_wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_INT_TABLE</name></type> <name><name>__conf_int_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"master_maxproc"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_master_maxproc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_buf_size"</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_buf_size</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_rw_timeout"</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_rw_timeout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_max_threads"</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_pool_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_stacksize"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_thread_stacksize</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_thread_idle_limit"</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_thread_idle</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_idle_limit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_idle_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_use_limit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_use_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_delay_sec"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_delay_sec</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_delay_usec"</literal></expr>, <expr><literal type="number">5000</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_delay_usec</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_daemon_timeout"</literal></expr>, <expr><literal type="number">1800</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_daemon_timeout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_max_accept"</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_max_accept</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr><block>{ <expr><literal type="string">"ioctl_enable_dog"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_enable_dog</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr><block>{ <expr><literal type="string">"ioctl_enable_dog"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_enable_dog</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{ <expr><literal type="string">"ioctl_quick_abort"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_quick_abort</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_enable_core"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_enable_core</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_disable_core_onexit"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_disable_core_onexit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_debug_max"</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_max_debug</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_status_notify"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_status_notify</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_batadd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_batadd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_qlen_warn"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_qlen_warn</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_schedule_warn"</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_schedule_warn</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_schedule_wait"</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_schedule_wait</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_check_inter"</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_check_inter</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>acl_var_threads_core_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_INT64_TABLE</name></type> <name><name>__conf_int64_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"ioctl_core_limit"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_core_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_queue_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_event_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_log_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_deny_banner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_access_allow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_dispatch_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_dispatch_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_master_service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_master_reuseport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_threads_master_private</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>var_threads_master_reuseport</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_STR_TABLE</name></type> <name><name>__conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"ioctl_queue_dir"</literal></expr>, <expr><literal type="string">"/opt/acl_master/var/queue"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_queue_dir</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_owner"</literal></expr>, <expr><literal type="string">"root"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_owner</name></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr><block>{ <expr><literal type="string">"ioctl_event_mode"</literal></expr>, <expr><literal type="string">"kernel"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_event_mode</name></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr><block>{ <expr><literal type="string">"ioctl_event_mode"</literal></expr>, <expr><literal type="string">"select"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_event_mode</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{ <expr><literal type="string">"ioctl_deny_banner"</literal></expr>, <expr><literal type="string">"You'are not Welcome!"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_deny_banner</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_access_allow"</literal></expr>, <expr><literal type="string">"all"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_access_allow</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_dispatch_addr"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_dispatch_addr</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ioctl_dispatch_type"</literal></expr>, <expr><literal type="string">"default"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_dispatch_type</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"master_debug"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_log_debug</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_service"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_master_service</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_reuseport"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_master_reuseport</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_private"</literal></expr>, <expr><literal type="string">"n"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_threads_master_private</name></expr> }</block></expr>,

        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

 <comment type="block">/*
  * Global state.
  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__daemon_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__client_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>__use_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__use_limit_delay</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__listen_disabled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__aborting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_EVENT</name> <modifier>*</modifier></type><name>__event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>__threads</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>__sstreams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>__threads_server_generation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>__last_closing_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__closing_time_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__counter_mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__service_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>__service_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>__server_accept</name>) <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_THREADS_SERVER_FN</name></type>		<name>__service_main</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_EXIT_FN</name></type>	<name>__server_onexit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_ON_LISTEN_FN</name></type>	<name>__server_on_listen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_ON_ACCEPT_FN</name></type>	<name>__server_on_accept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_HANDSHAKE_FN</name></type>	<name>__server_on_handshake</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_DISCONN_FN</name></type>	<name>__server_on_close</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_TIMEOUT_FN</name></type>	<name>__server_on_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_EXIT_TIMER_FN</name></type>	<name>__server_exit_timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_SIGHUP_FN</name></type>      <name>__sighup_handler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__deny_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>__conf_file</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_close</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_open</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lock_closing_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__closing_time_mutex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unlock_closing_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__closing_time_mutex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lock_counter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__counter_mutex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unlock_counter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__counter_mutex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_closing_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>lock_closing_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__last_closing_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlock_closing_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type> <name>last_closing_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>time_t</name></type>  <name>last</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>lock_closing_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>last</name> <operator>=</operator> <name>__last_closing_time</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlock_closing_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>increase_client_counter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>lock_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__client_count</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlock_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decrease_client_counter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>lock_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__client_count</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlock_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_client_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>lock_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>__client_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlock_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_threads_server_conf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__conf_file</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_threads_server_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__event</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>acl_threads_server_threads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__threads</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>acl_threads_server_streams</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sstreams</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"server streams NULL!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>__sstreams</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_close</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>streams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>streams</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"All listener closed now!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listen_cleanup_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sstreams</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>server_close</name><argument_list>(<argument><expr><name>__sstreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__sstreams</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listen_cleanup</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sstreams</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>__sstreams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_disable_readwrite</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>__sstreams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block" format="doxygen">/**
	 * µ±Ç°Ïß³Ì·ÇÖ÷Ïß³ÌÊ±£¬ÐèÒª²ÉÓÃ¶¨Ê±Æ÷¹Ø±Õ¼àÌýÁ÷£¬ÒòÎª¼àÌýÁ÷ÔÚÊÂ¼þ¼¯ºÏ
	 * ÖÐÊÇ¡°³£×¤Áô¡±µÄ£¬Èç¹ûÖ±½Ó¹Ø±Õ¼àÌýÁ÷£¬»áÔì³ÉÊÂ¼þÑ­»·Ö÷Ïß³ÌÔÚ
	 * select() Ê±±¨ÃèÊö·û·Ç·¨£¬¶øµ±¼ÓÁË¶¨Ê±Æ÷¹Ø±Õ·½·¨ºó£¬¶¨Ê±Æ÷µÄÔËÐÐÏß
	 * ³Ì¿Õ¼äÓëÊÂ¼þÑ­»·µÄÔËÐÐÏß³Ì¿Õ¼äÊÇÏàÍ¬µÄ£¬ËùÒÔ²»»áÔì³É³åÍ»¡£ÕâÖ÷Òª
	 * ÒòÎªÊÂ¼þÑ­»·Ïß³ÌÖÐÏÈÖ´ÐÐ select(), ºóÖ´ÐÐ¶¨Ê±Æ÷£¬Èç¹û select() Ö´
	 * ÐÐºó¶¨Ê±Æ÷Æô¶¯²¢½«¼àÌýÁ÷´ÓÊÂ¼þ¼¯ºÏÖÐÉ¾³ý£¬Ôò¼´Ê¹¸Ã¼àÌýÁ÷ÒÑ¾­×¼±¸ºÃ
	 * Ò²»áÒòÆä´ÓÊÂ¼þ¼¯ºÏÖÐ±»É¾³ý¶ø²»»á±»´¥·¢£¬ÕâÑùÔÚÏÂ´ÎÊÂ¼þÑ­»·Ê±
	 * select Ëùµ÷ÓÃµÄÊÂ¼þ¼¯ºÏÖÐ¾Í²»´æÔÚ¸Ã¼àÌýÁ÷ÁË¡£
	 */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>listen_cleanup_timer</name></expr></argument>,
			<argument><expr><name>__sstreams</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>server_close</name><argument_list>(<argument><expr><name>__sstreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__sstreams</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* server_exit - normal termination */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_disable_core_onexit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_core_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>__server_onexit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__server_onexit</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_procname</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>acl_var_threads_procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_log_file</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>acl_var_threads_log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sstreams</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>server_close</name><argument_list>(<argument><expr><name>__sstreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__sstreams</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>__daemon_mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__event</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_event_free</name><argument_list>(<argument><expr><name>__event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>__threads</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_pthread_pool_destroy</name><argument_list>(<argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_free_app_conf_str_table</name><argument_list>(<argument><expr><name>__conf_str_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_app_conf_unload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"---- SERVER EXIT NOW ----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_exiting</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_exiting"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><call><name>get_client_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>nthreads</name> <init>= <expr><call><name>acl_pthread_pool_busy</name><argument_list>(<argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: invalid clients count: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: invalid threads count: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nthreads</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>__listen_disabled</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__listen_disabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/* ¹Ø±ÕËùÓÐ¼àÌýÌ×½Ó¿Ú */</comment>
		<expr_stmt><expr><call><name>listen_cleanup</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<comment type="block">/* ¹Ø±ÕÓë TCP Á¬½ÓÅÉ·¢Æ÷ master_dispatch µÄÍ¨µÀ */</comment>
		<expr_stmt><expr><call><name>dispatch_close</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__server_exit_timer</name> <operator>!=</operator> <name>NULL</name>
		<operator>&amp;&amp;</operator> <call><name>__server_exit_timer</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: master disconnect -- timer exiting, "</literal>
			<literal type="string">"client: %d, threads: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>server_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: master disconnect -- exiting, "</literal>
			<literal type="string">"clinet: %d, threads: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>server_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>__aborting</name> <operator>&amp;&amp;</operator> <name>acl_var_threads_quick_abort</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: master disconnect -- quick exiting, "</literal>
			<literal type="string">"client: %d, threads: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>server_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: waiting exiting, client: %d, threads: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>server_exiting</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* server_timeout - idle time exceeded */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_timeout</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_timeout"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>inter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>last</name>  <operator>=</operator> <call><name>last_closing_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inter</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>last</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>inter</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>inter</name> <operator>&lt;</operator> <name>acl_var_threads_idle_limit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>server_timeout</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
			<argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <operator>(</operator><name>acl_var_threads_idle_limit</name> <operator>-</operator> <name>inter</name><operator>)</operator>
				<operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: idle timeout -- exiting, idle: %ld, "</literal>
			<literal type="string">"limit: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>inter</name></expr></argument>,
			<argument><expr><name>acl_var_threads_idle_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>server_exiting</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* server_abort - terminate after abnormal master exit */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_abort</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__aborting</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>__aborting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>server_exiting</name><argument_list>(<argument><expr><name>event_type</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_use_timer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_use_timer"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_use_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: invalid acl_var_threads_use_limit: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>acl_var_threads_use_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>__use_count</name> <operator>&gt;=</operator> <name>acl_var_threads_use_limit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: use limit reached(%u, %d) -- exiting"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__use_count</name></expr></argument>, <argument><expr><name>acl_var_threads_use_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>server_exiting</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>server_use_timer</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
			<argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>__use_limit_delay</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>event_type</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>read_callback</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>ACL_THREADS_SERVER_FN</name></type> <name>serv_callback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_ON_ACCEPT_FN</name></type> <name>serv_accept</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_HANDSHAKE_FN</name></type> <name>serv_handshake</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_DISCONN_FN</name></type> <name>serv_close</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_TIMEOUT_FN</name></type> <name>serv_timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>serv_arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>READ_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>client_wakeup</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>READ_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>READ_CTX</name><operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>peer</name> <init>= <expr><call><name>ACL_VSTREAM_PEER</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>peer</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>acl_access_permit</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__deny_info</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>__deny_info</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>__deny_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_handshake</name></name> <operator>!=</operator> <name>NULL</name>
		<operator>&amp;&amp;</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>serv_handshake</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_callback</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>READ_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>READ_CTX</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <name>ACL_EVENT_READ</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>serv_callback</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
				<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>,
				<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_callback</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <name>ACL_EVENT_ACCEPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>client_wakeup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): unknown event type(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_timeout</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>ctx</name><operator>-&gt;</operator><name>serv_timeout</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_callback</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_callback1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>READ_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>READ_CTX</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_pool_bat_add_job</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_callback2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>READ_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>READ_CTX</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_pool_add_job</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_fire_begin</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><operator>(</operator><name>acl_pthread_pool_t</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>acl_pthread_pool_bat_add_begin</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_fire_end</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><operator>(</operator><name>acl_pthread_pool_t</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>acl_pthread_pool_bat_add_end</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_ctx</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>READ_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>READ_CTX</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>job</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_free_job</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decrease_counter_callback</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>update_closing_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>decrease_client_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>READ_CTX</name> <modifier>*</modifier></type><name>create_job</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>READ_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>READ_CTX</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>READ_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name>         <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name>        <operator>=</operator> <name>threads</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name>          <operator>=</operator> <name>event</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name>     <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_accept</name></name>    <operator>=</operator> <name>__server_on_accept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_handshake</name></name> <operator>=</operator> <name>__server_on_handshake</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name>     <operator>=</operator> <name>__server_on_close</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_timeout</name></name>   <operator>=</operator> <name>__server_on_timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_callback</name></name>  <operator>=</operator> <name>__service_main</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name>       <operator>=</operator> <name>__service_ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>job</name></name> <operator>=</operator> <call><name>acl_pthread_pool_alloc_job</name><argument_list>(<argument><expr><name>thread_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_batadd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_callback</name></name> <operator>=</operator> <name>read_callback1</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_callback</name></name> <operator>=</operator> <name>read_callback2</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>free_ctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>client_open</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>,
	<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>READ_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>increase_client_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__use_count</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>acl_var_threads_buf_size</name></expr></argument>,
			<argument><expr><name>acl_var_threads_rw_timeout</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>remote</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_local</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block" format="doxygen">/**
	 * when the stream is closed, the callback will be called
	 * to decrease the counter
	 */</comment>
	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>decrease_counter_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* create one job running in one thread*/</comment>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>create_job</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_accept</name></name> <operator>!=</operator> <name>NULL</name>
		<operator>&amp;&amp;</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>serv_accept</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>serv_close</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>serv_arg</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>ACL_EVENT_ACCEPT</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_pool_add_job</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_threads_server_enable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>READ_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>READ_CTX</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>read_callback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>create_job</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>,
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_callback</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_threads_server_disable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_event_disable_readwrite</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* restart listening */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restart_listen_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>ACL_VSTREAM</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"restart listen now!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_event_enable_listen</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__server_accept</name></expr></argument>, <argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* server_accept_sock - accept client connection request */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_accept_sock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_accept_sock"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>listen_fd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>time_left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delay_listen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sock_type</name></decl>, <decl><type ref="prev"/><name>errnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>remote</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>local</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><operator>(</operator><name>acl_pthread_pool_t</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sstreams</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Server stoping ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>event_type</name> <operator>!=</operator> <name>ACL_EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): unknown event_type(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_idle_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>time_left</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>acl_event_cancel_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>,
			<argument><expr><name>server_timeout</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">999999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>time_left</name> <operator>=</operator> <name>acl_var_threads_idle_limit</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>acl_var_threads_max_accept</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>acl_accept</name><argument_list>(<argument><expr><name>listen_fd</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sock_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* set NODELAY for TCP socket */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name>sock_type</name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name>sock_type</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><name>sock_type</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>acl_tcp_set_nodelay</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>acl_getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>client_open</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* else: fd &lt; 0 */</comment>

		<expr_stmt><expr><name>errnum</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name>ACL_EMFILE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay_listen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"accept error: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name>ACL_EAGAIN</name> <operator>||</operator> <name>errnum</name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"accept connection: %s(%d, %d), stoping ..."</literal></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>ACL_EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_disable_readwrite</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>server_abort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>delay_listen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_disable_readwrite</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>restart_listen_timer</name></expr></argument>,
			<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">2000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_enable_listen</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><name>__server_accept</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>time_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>server_timeout</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>,
			<argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>time_left</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>inited</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>procname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>procname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d); procname null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Don't die when a process goes away unexpectedly.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGPIPE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Don't die for frivolous reasons.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGXFSZ</name></cpp:ifdef>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGXFSZ</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * May need this every now and then.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>acl_var_threads_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>acl_var_threads_pid</name> <operator>=</operator> <call><name>_getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>acl_var_threads_pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>acl_var_threads_procname</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>acl_safe_basename</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_getenv</name><argument_list>(<argument><expr><literal type="string">"SERVICE_LOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>acl_getenv</name><argument_list>(<argument><expr><literal type="string">"SERVICE_LOG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>acl_var_threads_log_file</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>acl_var_threads_log_file</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">"acl_master.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: can't get SERVICE_LOG's env value,"</literal>
			<literal type="string">" use %s log"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>acl_var_threads_log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_get_app_conf_int_table</name><argument_list>(<argument><expr><name>__conf_int_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_get_app_conf_int64_table</name><argument_list>(<argument><expr><name>__conf_int64_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_get_app_conf_str_table</name><argument_list>(<argument><expr><name>__conf_str_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__deny_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__deny_info</name> <operator>=</operator> <name>acl_var_threads_deny_banner</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_access_allow</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>acl_var_threads_access_allow</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_access_add</name><argument_list>(<argument><expr><name>acl_var_threads_access_allow</name></expr></argument>, <argument><expr><literal type="string">", \t"</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQ</name></cpp:macro> <cpp:value>!strcasecmp</cpp:value></cpp:define>
	<if_stmt><if>if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>acl_var_threads_master_reuseport</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call>
		<operator>||</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>acl_var_threads_master_reuseport</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call>
		<operator>||</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>acl_var_threads_master_reuseport</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name>var_threads_master_reuseport</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_event_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"log_event_mode"</literal></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>event_mode</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_EVENT_SELECT</name></expr>:</case>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): use select event"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_POLL</name></expr>:</case>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): use poll event"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_KERNEL</name></expr>:</case>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): use kernel_event"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): use select event"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>open_service_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* first, close the master's log */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>master_log_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* second, open the service's log */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_master_log_enabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_open</name><argument_list>(<argument><expr><name>acl_var_threads_log_file</name></expr></argument>, <argument><expr><name>acl_var_threads_procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_log_debug</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>acl_var_threads_log_debug</name>
		<operator>&amp;&amp;</operator> <name>acl_var_threads_max_debug</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_debug_init2</name><argument_list>(<argument><expr><name>acl_var_threads_log_debug</name></expr></argument>,
			<argument><expr><name>acl_var_threads_max_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>log_event_mode</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_EVENT</name> <modifier>*</modifier></type><name>event_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>acl_event_new</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>acl_var_threads_delay_sec</name></expr></argument>,
			<argument><expr><name>acl_var_threads_delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the event fire begin and fire end callback */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_batadd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_set_fire_hook</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>event_fire_begin</name></expr></argument>,
			<argument><expr><name>event_fire_end</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_check_inter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_set_check_inter</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>acl_var_threads_check_inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_qlen_warn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_set_qlen_warn</name><argument_list>(<argument><expr><name>threads</name></expr></argument>,
			<argument><expr><name>acl_var_threads_qlen_warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Running as a semi-resident server. Service connection requests.
	 * Terminate when we have serviced a sufficient number of clients,
	 * when no-one has been talking to us for a configurable amount of
	 * time, or when the master process terminated abnormally.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_idle_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>server_timeout</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>,
			<argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>acl_var_threads_idle_limit</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_use_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>server_use_timer</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>,
			<argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>__use_limit_delay</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_enable_dog</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_add_dog</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>event</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*==========================================================================*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_connect_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><operator>(</operator><name>acl_pthread_pool_t</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dispatch_open</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>__dispatch_conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dispatch_report</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dispatch_report"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__dispatch_conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
		<if_stmt><if>if <condition>(<expr><name>__aborting</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: dispatch connection not available"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"count=%d&amp;used=%u&amp;pid=%u&amp;type=%s"</literal>
		<literal type="string">"&amp;max_threads=%d&amp;curr_threads=%d&amp;busy_threads=%d&amp;qlen=%d\r\n"</literal></expr></argument>,
		<argument><expr><call><name>get_client_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__use_count</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><name>acl_var_threads_dispatch_type</name></expr></argument>,
		<argument><expr><call><name>acl_pthread_pool_limit</name><argument_list>(<argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>acl_pthread_pool_size</name><argument_list>(<argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>acl_pthread_pool_busy</name><argument_list>(<argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>acl_pthread_pool_qlen</name><argument_list>(<argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>__dispatch_conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		<operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: write to master_dispatch(%s) failed"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>acl_var_threads_dispatch_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><operator>(</operator><name>acl_pthread_pool_t</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>dispatch_report</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>dispatch_timer</name></expr></argument>,
			<argument><expr><name>threads</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_receive</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dispatch_receive"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><operator>(</operator><name>acl_pthread_pool_t</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>remote</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>local</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <name>__dispatch_conn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: conn invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* xxx: must set read_ready 0 for avoiding trigger read again */</comment>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_read_fd</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: read from master_dispatch(%s) error"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>acl_var_threads_dispatch_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__dispatch_conn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>dispatch_connect_timer</name></expr></argument>,
			<argument><expr><name>threads</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>local</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>remote</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* begin handle one client connection same as accept */</comment>
	<expr_stmt><expr><call><name>client_open</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dispatch_receive</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_close</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__dispatch_conn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_cancel_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>dispatch_connect_timer</name></expr></argument>,
			<argument><expr><name>__dispatch_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_disable_readwrite</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>__dispatch_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>__dispatch_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__dispatch_conn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__aborting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_open</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dispatch_open"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__aborting</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: master disconnect -- aborting"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_dispatch_addr</name> <operator>==</operator> <name>NULL</name>
		<operator>||</operator> <operator>*</operator><name>acl_var_threads_dispatch_addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_var_threads_dispatch_addr null"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__dispatch_conn</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>acl_var_threads_dispatch_addr</name></expr></argument>,
			<argument><expr><name>ACL_BLOCKING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__dispatch_conn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>__dispatch_conn</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__dispatch_conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"connect master_dispatch(%s) failed"</literal></expr></argument>,
			<argument><expr><name>acl_var_threads_dispatch_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>dispatch_connect_timer</name></expr></argument>,
			<argument><expr><name>threads</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>dispatch_report</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>__dispatch_conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><name>dispatch_receive</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>dispatch_timer</name></expr></argument>,
			<argument><expr><name>threads</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>dispatch_connect_timer</name></expr></argument>,
			<argument><expr><name>threads</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>

<comment type="block">/*==========================================================================*/</comment>

<function><type><specifier>static</specifier> <name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads_create</name><parameter_list>(<parameter><decl><type><name>ACL_MASTER_SERVER_THREAD_INIT_FN</name></type> <name>init_fn</name></decl></parameter>,
	<parameter><decl><type><name>ACL_MASTER_SERVER_THREAD_EXIT_FN</name></type> <name>exit_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>init_ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exit_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>threads</name> <operator>=</operator> <call><name>acl_thread_pool_create</name><argument_list>(<argument><expr><name>acl_var_threads_pool_limit</name></expr></argument>,
			<argument><expr><name>acl_var_threads_thread_idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_schedule_warn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_set_schedule_warn</name><argument_list>(<argument><expr><name>threads</name></expr></argument>,
			<argument><expr><name>acl_var_threads_schedule_warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_schedule_wait</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_set_schedule_wait</name><argument_list>(<argument><expr><name>threads</name></expr></argument>,
			<argument><expr><name>acl_var_threads_schedule_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_thread_stacksize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_set_stacksize</name><argument_list>(<argument><expr><name>threads</name></expr></argument>,
			<argument><expr><name>acl_var_threads_thread_stacksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>init_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_atinit</name><argument_list>(<argument><expr><name>threads</name></expr></argument>, <argument><expr><name>init_fn</name></expr></argument>, <argument><expr><name>init_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>exit_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_atfree</name><argument_list>(<argument><expr><name>threads</name></expr></argument>, <argument><expr><name>exit_fn</name></expr></argument>, <argument><expr><name>exit_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__closing_time_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__counter_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__last_closing_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__use_limit_delay</name> <operator>=</operator> <ternary><condition><expr><name>acl_var_threads_delay_sec</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then>
		<expr><name>acl_var_threads_delay_sec</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

	<return>return <expr><name>threads</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_status_init</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stat_stream</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>stat_stream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>ACL_MASTER_STATUS_FD</name></expr></argument>,
		<argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stat_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>server_abort</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_STATUS_FD</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_FLOW_READ</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_FLOW_WRITE</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>server_daemon_open</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_daemon_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type>   <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* socket count is as same listen_fd_count in parent process */</comment>

	<expr_stmt><expr><name>streams</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>ACL_MASTER_LISTEN_FD</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <name>ACL_MASTER_LISTEN_FD</name> <operator>+</operator> <name>count</name></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>,
				<argument><expr><name>acl_var_threads_buf_size</name></expr></argument>,
				<argument><expr><name>acl_var_threads_rw_timeout</name></expr></argument>, <argument><expr><name>fdtype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: stream null, fd = %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_enable_listen</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><name>__server_accept</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>__server_on_listen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>__server_on_listen</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>streams</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>server_status_init</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>streams</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_ipaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Just only the port, such as: 8088</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_alldig</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Such as: ip:port, or ip|port, or :port, or |port</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strrchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_ADDR_SEP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_valid_ipv6_hostaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>acl_valid_ipv4_hostaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>correct_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>is_ipaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pri</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>acl_var_threads_master_private</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
			<expr><literal type="string">"private"</literal></expr> </then><else>: <expr><literal type="string">"public"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s"</literal></expr></argument>, <argument><expr><name>acl_var_threads_queue_dir</name></expr></argument>, <argument><expr><name>pri</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s"</literal></expr></argument>, <argument><expr><name>acl_var_threads_queue_dir</name></expr></argument>, <argument><expr><name>pri</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>server_alone_open</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_alone_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name><modifier>*</modifier></type>     <name>tokens</name> <init>= <expr><call><name>acl_argv_split</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><literal type="string">";, \t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>      <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>           <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>flag</name> <init>= <expr><name>ACL_INET_FLAG_NONE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>streams</name> <init>= <expr><operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_threads_master_reuseport</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>ACL_INET_FLAG_REUSEPORT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>tokens</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>addr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>correct_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type> <name>sstream</name> <init>= <expr><call><name>acl_vstream_listen_ex</name><argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>,
				<argument><expr><name>flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>sstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): listen %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>acl_event_enable_listen</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>sstream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><name>__server_accept</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>__server_on_listen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>__server_on_listen</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>, <argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>streams</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>sstream</name></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>streams</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): argc %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"usage: %s -H[help]"</literal>
		<literal type="string">" -c [use chroot]"</literal>
		<literal type="string">" -n service_name"</literal>
		<literal type="string">" -s socket_count"</literal>
		<literal type="string">" -u [use setgid initgroups setuid]"</literal>
		<literal type="string">" -f conf_file"</literal>
		<literal type="string">" -L listen_addrs"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_threads_server_main - the real main program */</comment>

<function><type><name>void</name></type> <name>acl_threads_server_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>,
	<parameter><decl><type><name>ACL_THREADS_SERVER_FN</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>service_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_threads_server_main"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>root_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service_name</name> <init>= <expr><call><name>acl_safe_basename</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>c</name></decl>, <decl><type ref="prev"/><name>fdtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>event_mode</name></decl>, <decl><type ref="prev"/><name>socket_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>thread_init_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>thread_exit_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_INIT_FN</name></type> <name>pre_jail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_INIT_FN</name></type> <name>post_init</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_THREAD_INIT_FN</name></type> <name>thread_init_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_THREAD_EXIT_FN</name></type> <name>thread_exit_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  <modifier>*</modifier></type><name>generation</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>opterr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>optind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>optarg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

	<comment type="block">/* ÔÚ×Ó½ø³ÌÇÐ»»ÓÃ»§Éí·ÝÖ®Ç°£¬ÏÈÓÃ acl_master µÄÈÕÖ¾¾ä±ú¼ÇÈÕÖ¾ */</comment>
	<expr_stmt><expr><call><name>master_log_open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Pick up policy settings from master process. Shut up error
	 * messages to stderr, because no-one is going to see them.
	 */</comment>

	<expr_stmt><expr><name><name>__conf_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"Hc:n:s:t:uf:L:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'H'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<expr_stmt><expr><call><name>acl_app_conf_load</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>__conf_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__conf_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><name>root_dir</name> <operator>=</operator> <literal type="string">"setme"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>service_name</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><name>socket_count</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'u'</literal></expr>:</case>
			<expr_stmt><expr><name>user</name> <operator>=</operator> <literal type="string">"setme"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<comment type="block">/* deprecated, just go through */</comment>
			<break>break;</break>
		<case>case <expr><literal type="char">'L'</literal></expr>:</case>
			<expr_stmt><expr><name>addrs</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>__conf_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: no configure file"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: configure file = %s"</literal></expr></argument>, 
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__conf_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__daemon_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"MASTER_SERVICE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"ALONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__daemon_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>__daemon_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>__daemon_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

	<comment type="block">/* Application-specific initialization. */</comment>

	<comment type="block">/* load configure, set signal */</comment>
	<expr_stmt><expr><call><name>server_init</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_APP_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_MASTER_SERVER_BOOL_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_bool_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_BOOL_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_INT_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_int_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_INT_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_INT64_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_int64_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_INT64_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_STR_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_str_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_STR_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_PRE_INIT</name></expr>:</case>
			<expr_stmt><expr><name>pre_jail</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_POST_INIT</name></expr>:</case>
			<expr_stmt><expr><name>post_init</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_ON_LISTEN</name></expr>:</case>
			<expr_stmt><expr><name>__server_on_listen</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_ON_LISTEN_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_ON_ACCEPT</name></expr>:</case>
			<expr_stmt><expr><name>__server_on_accept</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_ON_ACCEPT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_ON_HANDSHAKE</name></expr>:</case>
			<expr_stmt><expr><name>__server_on_handshake</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_HANDSHAKE_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_ON_TIMEOUT</name></expr>:</case>
			<expr_stmt><expr><name>__server_on_timeout</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_TIMEOUT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_ON_CLOSE</name></expr>:</case>
			<expr_stmt><expr><name>__server_on_close</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_DISCONN_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_EXIT_TIMER</name></expr>:</case>
			<expr_stmt><expr><name>__server_exit_timer</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_EXIT_TIMER_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_EXIT</name></expr>:</case>
			<expr_stmt><expr><name>__server_onexit</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_EXIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_THREAD_INIT</name></expr>:</case>
			<expr_stmt><expr><name>thread_init_fn</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_THREAD_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_THREAD_INIT_CTX</name></expr>:</case>
			<expr_stmt><expr><name>thread_init_ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_THREAD_EXIT</name></expr>:</case>
			<expr_stmt><expr><name>thread_exit_fn</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_THREAD_EXIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_THREAD_EXIT_CTX</name></expr>:</case>
			<expr_stmt><expr><name>thread_exit_ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_DENY_INFO</name></expr>:</case>
			<expr_stmt><expr><name>__deny_info</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_SIGHUP</name></expr>:</case>
			<expr_stmt><expr><name>__sighup_handler</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_SIGHUP_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: bad name(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

	<if_stmt><if>if <condition>(<expr><name>root_dir</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>root_dir</name> <operator>=</operator> <name>acl_var_threads_queue_dir</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>user</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>user</name> <operator>=</operator> <name>acl_var_threads_owner</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__server_accept</name> <operator>=</operator> <name>server_accept_sock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>fdtype</name> <operator>=</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name> <operator>|</operator> <name>ACL_VSTREAM_TYPE_LISTEN_INET</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>acl_var_threads_event_mode</name></expr></argument>, <argument><expr><literal type="string">"poll"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>event_mode</name> <operator>=</operator> <name>ACL_EVENT_POLL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>acl_var_threads_event_mode</name></expr></argument>, <argument><expr><literal type="string">"kernel"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>event_mode</name> <operator>=</operator> <name>ACL_EVENT_KERNEL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>event_mode</name> <operator>=</operator> <name>ACL_EVENT_SELECT</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<comment type="block">/* Retrieve process generation from environment. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>generation</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>ACL_MASTER_GEN_NAME</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_alldig</name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"bad generation: %s"</literal></expr></argument>, <argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>generation</name></expr></argument>, <argument><expr><literal type="string">"%o"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__threads_server_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

	<comment type="block">/* Set up call-back info. */</comment>
	<expr_stmt><expr><name>__service_main</name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__service_ctx</name>  <operator>=</operator> <name>service_ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>__service_name</name></expr></argument>, <argument><expr><name>service_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__service_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<comment type="block">/* Run pre-jail initialization. */</comment>
	<if_stmt><if>if <condition>(<expr><name>__daemon_mode</name> <operator>&amp;&amp;</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>acl_var_threads_queue_dir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"chdir(\"%s\"): %s"</literal></expr></argument>, <argument><expr><name>acl_var_threads_queue_dir</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* create threads pool */</comment>
	<expr_stmt><expr><name>__threads</name> <operator>=</operator> <call><name>threads_create</name><argument_list>(<argument><expr><name>thread_init_fn</name></expr></argument>, <argument><expr><name>thread_exit_fn</name></expr></argument>,
		<argument><expr><name>thread_init_ctx</name></expr></argument>, <argument><expr><name>thread_exit_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* create event */</comment>
	<expr_stmt><expr><name>__event</name> <operator>=</operator> <call><name>event_open</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>, <argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* open all listen streams */</comment>

	<if_stmt><if>if <condition>(<expr><name>__daemon_mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>addrs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>addrs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>addrs</name> <operator>=</operator> <name>acl_var_threads_master_service</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>__sstreams</name> <operator>=</operator> <call><name>server_alone_open</name><argument_list>(<argument><expr><name>__event</name></expr></argument>, <argument><expr><name>__threads</name></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>var_threads_master_reuseport</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>acl_var_threads_master_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>acl_var_threads_master_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>addrs</name> <operator>=</operator> <name>acl_var_threads_master_service</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>__sstreams</name> <operator>=</operator> <call><name>server_alone_open</name><argument_list>(<argument><expr><name>__event</name></expr></argument>, <argument><expr><name>__threads</name></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>server_status_init</name><argument_list>(<argument><expr><name>__event</name></expr></argument>, <argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>socket_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__sstreams</name> <operator>=</operator> <call><name>server_daemon_open</name><argument_list>(<argument><expr><name>__event</name></expr></argument>, <argument><expr><name>__threads</name></expr></argument>,
			<argument><expr><name>socket_count</name></expr></argument>, <argument><expr><name>fdtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid socket_count: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>socket_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	</block_content>}</block></function> <if_stmt><else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): addrs NULL"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>pre_jail</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pre_jail</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_chroot_uid</name><argument_list>(<argument><expr><name>root_dir</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* open the server's log */</comment>
	<expr_stmt><expr><call><name>open_service_log</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<comment type="block">/* if enable dump core when program crashed ? */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_enable_core</name> <operator>&amp;&amp;</operator> <name>acl_var_threads_core_limit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_core_limit</name><argument_list>(<argument><expr><name>acl_var_threads_core_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Run post-jail initialization. */</comment>
	<if_stmt><if>if <condition>(<expr><name>post_init</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>post_init</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_LINUX</name></cpp:ifdef>
	<comment type="block">/* notify master that child started ok */</comment>
	<if_stmt><if>if <condition>(<expr><name>__daemon_mode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_master_notify</name><argument_list>(<argument><expr><name>acl_var_threads_pid</name></expr></argument>,
			<argument><expr><name>__threads_server_generation</name></expr></argument>, <argument><expr><name>ACL_MASTER_STAT_START_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* connect the dispatch server */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_var_threads_dispatch_addr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>acl_var_threads_dispatch_addr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>dispatch_open</name><argument_list>(<argument><expr><name>__event</name></expr></argument>, <argument><expr><name>__threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>acl_server_sighup_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_server_sigterm_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s daemon started, log: %s"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>acl_var_threads_log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_loop</name><argument_list>(<argument><expr><name>__event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>acl_var_server_gotsighup</name> <operator>&amp;&amp;</operator> <name>__sighup_handler</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>acl_var_server_gotsighup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>__sighup_handler</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_master_notify</name><argument_list>(<argument><expr><name>acl_var_threads_pid</name></expr></argument>,
					<argument><expr><name>__threads_server_generation</name></expr></argument>,
					<argument><expr><name>ACL_MASTER_STAT_SIGHUP_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>acl_master_notify</name><argument_list>(<argument><expr><name>acl_var_threads_pid</name></expr></argument>,
					<argument><expr><name>__threads_server_generation</name></expr></argument>,
					<argument><expr><name>ACL_MASTER_STAT_SIGHUP_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></while>

	<comment type="block">/* not reached here */</comment>
	<comment type="block">/* acl_vstring_free(buf); */</comment>
</block_content>}</block></while></block_content></block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
