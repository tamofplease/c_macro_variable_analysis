<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/thread/acl_pthread.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"init/acl_init.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../private/private_fifo.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>

<comment type="block">/*--------------------  ACL_WINDOWS ÏÂÄ£ÄâÊµÏÖ Posix ±ê×¼½Ó¿Úº¯Êý ----------------*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_STACK_MIN</name></cpp:macro>      <cpp:value>16384</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>acl_pthread_key_t</name></type> <name>key</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>TLS_KEY</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>TLS_KEY</name> <modifier>*</modifier></type><name>tls_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>TLS_VALUE</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__thread_inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__create_thread_control_once</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TLS_KEY</name></type> <name><name>__tls_key_list</name><index>[<expr><name>ACL_PTHREAD_KEYS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__thread_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>__tls_value_list_key</name> <init>= <expr><name>ACL_TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tls_value_list_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>acl_pthread_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__thread_ended</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tls_value_list_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_ended</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__thread_ended</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__thread_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_PTHREAD_KEYS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>&lt;</operator> <name>ACL_PTHREAD_KEYS_MAX</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>TlsFree</name><argument_list>(<argument><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>destructor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Ã¿¸ö½ø³ÌµÄÎ¨Ò»³õÊ¼»¯º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acl_pthread_init_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_init_once"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__thread_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__thread_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_PTHREAD_KEYS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>destructor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>__tls_value_list_key</name> <operator>=</operator> <call><name>TlsAlloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__tls_value_list_key</name> <operator>==</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): TlsAlloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>__tls_value_list_key</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>__tls_value_list_key</name>
		<operator>&gt;=</operator> <name>ACL_PTHREAD_KEYS_MAX</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): TlsAlloc error(%s), not in(%d, %d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACL_PTHREAD_KEYS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>__tls_value_list_key</name></expr>]</index></name><operator>.</operator><name>destructor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>__tls_value_list_key</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>__tls_value_list_key</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* »ñµÃÏß³Ì¾Ö²¿±äÁ¿Á´±í */</comment>

<function><type><specifier>static</specifier> <name>ACL_FIFO</name> <modifier>*</modifier></type><name>tls_value_list_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>tls_value_list_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tls_value_list_ptr</name> <operator>=</operator> <call><name>TlsGetValue</name><argument_list>(<argument><expr><name>__tls_value_list_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_value_list_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tls_value_list_ptr</name> <operator>=</operator> <call><name>private_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TlsSetValue</name><argument_list>(<argument><expr><name>__tls_value_list_key</name></expr></argument>, <argument><expr><name>tls_value_list_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>tls_value_list_ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tls_value_list_on_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tls_value_list_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>tls_value_list_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tls_value_list_ptr</name> <operator>=</operator> <call><name>TlsGetValue</name><argument_list>(<argument><expr><name>__tls_value_list_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_value_list_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>TlsSetValue</name><argument_list>(<argument><expr><name>__tls_value_list_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>private_fifo_free</name><argument_list>(<argument><expr><name>tls_value_list_ptr</name></expr></argument>, <argument><expr><name>tls_value_list_on_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WIN32_STDC</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>RunThreadWrap</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>DWORD</name> <name>WINAPI</name> <name>RunThreadWrap</name><argument_list>(<argument><expr><name>LPVOID</name> <name>data</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_t</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><operator>(</operator><name>acl_pthread_t</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>return_arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>tls_value_list_ptr</name> <init>= <expr><call><name>tls_value_list_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ö»ÊÇÎªÁË±ÜÃâÓëÖ÷Ïß³ÌµÄ h_thread-&gt;handle = handle ²úÉú³åÍ» */</comment>
	<if_stmt><if>if <condition>(<expr><name>__thread_inited</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__thread_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>__thread_inited</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__thread_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>return_arg</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name><name>thread</name><operator>-&gt;</operator><name>start_routine</name></name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>routine_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÊÍ·ÅÓÉ acl_pthread_setspecific Ìí¼ÓµÄÏß³Ì¾Ö²¿±äÁ¿ */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>TLS_VALUE</name> <modifier>*</modifier></type><name>tls_value</name> <init>= <expr><call><name>private_fifo_pop</name><argument_list>(<argument><expr><name>tls_value_list_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>tls_value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name></name> <operator>==</operator> <name>NULL</name>
			<operator>||</operator> <name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>destructor</name></name> <operator>==</operator> <name>NULL</name>
			<operator>||</operator> <name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
			<operator>||</operator> <name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>key</name></name> <operator>&gt;=</operator> <name>ACL_PTHREAD_KEYS_MAX</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>tls_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>destructor</name></name><argument_list>(<argument><expr><name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>tls_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>private_fifo_free</name><argument_list>(<argument><expr><name>tls_value_list_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûÏß³Ì´´½¨Ê±Îª·ÖÀë·½Ê½ÔòÐèÒª¹Ø±ÕÏß³Ì¾ä±ú */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>detached</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"close handle error(%s)"</literal></expr></argument>, 
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name>return_arg</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type>  <name>acl_pthread_create</name><parameter_list>(<parameter><decl><type><name>acl_pthread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name> <modifier>*</modifier></type><name>h_thread</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__create_thread_control_once</name></expr></argument>, <argument><expr><name>acl_pthread_init_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>h_thread</name> <operator>=</operator> <call><name>acl_default_calloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>h_thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_ENOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h_thread</name><operator>-&gt;</operator><name>detached</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>detached</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h_thread</name><operator>-&gt;</operator><name>detached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>h_thread</name><operator>-&gt;</operator><name>start_routine</name></name> <operator>=</operator> <name>start_routine</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h_thread</name><operator>-&gt;</operator><name>routine_arg</name></name>   <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_inited</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__thread_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>CREATE_SUSPENDED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MIN_STACK</name></cpp:macro>	<cpp:value>(1024 * 4096)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WIN32_STDC</name></cpp:ifdef>
	<expr_stmt><expr><name><name>h_thread</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&gt;</operator> <name>MIN_STACK</name></expr> ?</condition><then>
				<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>attr</name><operator>-&gt;</operator><name>stacksize</name></name></expr> </then><else>: <expr><name>MIN_STACK</name></expr></else></ternary></expr></argument>,
			<argument><expr><name>RunThreadWrap</name></expr></argument>,
			<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>h_thread</name></expr></argument>,
			<argument><expr><name>flag</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>h_thread</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&gt;</operator> <name>MIN_STACK</name></expr> ?</condition><then>
				<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>attr</name><operator>-&gt;</operator><name>stacksize</name></name></expr> </then><else>: <expr><name>MIN_STACK</name></expr></else></ternary></expr></argument>,
			<argument><expr><name>RunThreadWrap</name></expr></argument>,
			<argument><expr><name>h_thread</name></expr></argument>,
			<argument><expr><name>flag</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>__thread_inited</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__thread_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>flag</name> <operator>==</operator> <name>CREATE_SUSPENDED</name> <operator>&amp;&amp;</operator> <name>handle</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ResumeThread</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): CreateThread error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>start_routine</name></name> <operator>=</operator> <name>start_routine</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>routine_arg</name></name>   <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>id</name></name>            <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>handle</name></name>        <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* ¸ù¾ÝÏß³ÌµÄÊôÐÔÀ´È·¶¨Ïß³Ì´´½¨Ê±ÊÇ·ÖÀëÄ£Ê½»¹ÊÇ·Ç·ÖÀëÄ£Ê½ */</comment>

	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>detached</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>detached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>detached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_ONCE</name></cpp:ifdef>
<function><type><name>BOOL</name> <name>CALLBACK</name></type> <name>once_callback</name><parameter_list>(<parameter><decl><type><name>_Inout_</name> <name>PINIT_ONCE</name></type> <name>InitOnce</name></decl></parameter>,
	<parameter><decl><type><name>_Inout_opt_</name> <name>PVOID</name></type> <name>Parameter</name></decl></parameter>, <parameter><decl><type><name>_Out_opt_</name> <name>PVOID</name><modifier>*</modifier></type> <name>Context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>void</name><operator>)</operator></call><operator>)</operator> <name>Parameter</name></expr></init>;</function_decl>
	<expr_stmt><expr><call><name>init_routine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_once</name><parameter_list>(<parameter><decl><type><name>acl_pthread_once_t</name> <modifier>*</modifier></type><name>once_control</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PVOID</name></type> <name>lpContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><ternary><condition><expr><call><name>InitOnceExecuteOnce</name><argument_list>(<argument><expr><name>once_control</name></expr></argument>, <argument><expr><name>once_callback</name></expr></argument>,
		<argument><expr><name>init_routine</name></expr></argument>, <argument><expr><name>lpContext</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>acl_pthread_once</name><parameter_list>(<parameter><decl><type><name>acl_pthread_once_t</name> <modifier>*</modifier></type><name>once_control</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>once_control</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>init_routine</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ö»ÓÐµÚÒ»¸öµ÷ÓÃ InterlockedCompareExchange µÄÏß³Ì²Å»áÖ´ÐÐ
	 * init_routine, ºóÐøÏß³ÌÓÀÔ¶ÔÚ InterlockedCompareExchange
	 * ÍâÔËÐÐ£¬²¢ÇÒÒ»Ö±½øÈë¿ÕÑ­»·Ö±ÖÁµÚÒ»¸öÏß³ÌÖ´ÐÐ init_routine
	 * Íê±Ï²¢ÇÒ½« *once_control ÖØÐÂ¸³Öµ, Ö»ÓÐÔÚ¶àºË»·¾³ÖÐ¶à¸öÏß³Ì
	 * Í¬Ê±ÔËÐÐÖÁ´ËÊ±²ÅÓÐ¿ÉÄÜ³öÏÖ¶ÌÔÝµÄºóÐøÏß³Ì¿ÕÑ­»·ÏÖÏó£¬Èç¹û
	 * ¶à¸öÏß³ÌË³ÐòÖÁ´Ë£¬ÔòÒòÎª *once_control ÒÑ¾­±»µÚÒ»¸öÏß³ÌÖØÐÂ
	 * ¸³Öµ¶ø²»»á½øÈëÑ­»·ÌåÄÚÖ»ËùÒÔÈç´Ë´¦Àí£¬ÊÇÎªÁË±£Ö¤ËùÓÐÏß³ÌÔÚ
	 * µ÷ÓÃ acl_pthread_once ·µ»ØÇ° init_routine ±ØÐë±»µ÷ÓÃÇÒ½öÄÜ
	 * ±»µ÷ÓÃÒ»´Î, µ«ÔÚVC6ÏÂ£¬InterlockedCompareExchange ½Ó¿Ú¶¨Òå
	 * ÓÐÐ©¹ÖÒì£¬ÐèÒª×öÓ²ÐÔÖ¸¶¨²ÎÊýÀàÐÍ£¬²Î¼û &lt;Windows ¸ß¼¶±à³ÌÖ¸ÄÏ&gt;
	 * Jeffrey Richter, 366 Ò³
	 */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_VC6</name></cpp:ifdef>
		<decl_stmt><decl><type><name>LONG</name></type> <name>prev</name> <init>= <expr><call><name>InterlockedCompareExchange</name><argument_list>(<argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator> <name>once_control</name></expr></argument>,
			<argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator> <name>ACL_PTHREAD_ONCE_INIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>LONG</name></type> <name>prev</name> <init>= <expr><call><name>InterlockedCompareExchange</name><argument_list>(
			<argument><expr><name>once_control</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Ö»ÓÐµÚÒ»¸öÏß³Ì²Å»áÖÁ´Ë */</comment>
			<expr_stmt><expr><call><name>init_routine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* ½« *conce_control ÖØÐÂ¸³ÖµÒÔÊ¹ºóÐøÏß³Ì²»½øÈë while
			 * Ñ­»·»ò´Ó while Ñ­»·ÖÐÌø³ö
			 */</comment>
			<expr_stmt><expr><call><name>InterlockedExchange</name><argument_list>(<argument><expr><name>once_control</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>prev</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ·ÀÖ¹¿ÕÑ­»·¹ý¶àµØÀË·ÑCPU */</comment>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" format="doxygen">/** sleep 1ms */</comment>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* ²»¿É´ï´úÂë£¬±ÜÃâ±àÒëÆ÷±¨¾¯¸æ */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>acl_pthread_attr_init</name><parameter_list>(<parameter><decl><type><name>acl_pthread_attr_t</name> <modifier>*</modifier></type><name>thr_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>thr_attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_attr</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>thr_attr</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_attr</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_attr</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_attr</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_attr</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_attr</name><operator>-&gt;</operator><name>detached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_attr_setstacksize</name><parameter_list>(<parameter><decl><type><name>acl_pthread_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>stacksize</name> <operator>&lt;</operator> <name>PTHREAD_STACK_MIN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>stacksize</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_attr_setdetachstate</name><parameter_list>(<parameter><decl><type><name>acl_pthread_attr_t</name> <modifier>*</modifier></type><name>thr_attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>detached</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>thr_attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>thr_attr</name><operator>-&gt;</operator><name>detached</name></name> <operator>=</operator> <name>detached</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_attr_destroy</name><parameter_list>(<parameter><decl><type><name>acl_pthread_attr_t</name> <modifier>*</modifier></type><name>thr_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>thr_attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_attr</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>thr_attr</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>acl_pthread_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_key_create</name><parameter_list>(<parameter><decl><type><name>acl_pthread_key_t</name> <modifier>*</modifier></type><name>key_ptr</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_key_create"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__create_thread_control_once</name></expr></argument>, <argument><expr><name>acl_pthread_init_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>key_ptr</name> <operator>=</operator> <call><name>TlsAlloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key_ptr</name> <operator>==</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_ENOMEM</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>key_ptr</name> <operator>&gt;=</operator> <name>ACL_PTHREAD_KEYS_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%d) &gt; ACL_PTHREAD_KEYS_MAX(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>*</operator><name>key_ptr</name></expr></argument>, <argument><expr><name>ACL_PTHREAD_KEYS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TlsFree</name><argument_list>(<argument><expr><operator>*</operator><name>key_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>key_ptr</name> <operator>=</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_ENOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><operator>*</operator><name>key_ptr</name></expr>]</index></name><operator>.</operator><name>destructor</name> <operator>=</operator> <name>destructor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><operator>*</operator><name>key_ptr</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key_ptr</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_pthread_getspecific</name><parameter_list>(<parameter><decl><type><name>acl_pthread_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_setspecific</name><parameter_list>(<parameter><decl><type><name>acl_pthread_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_setspecific"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>tls_value_list_ptr</name> <init>= <expr><call><name>tls_value_list_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>key</name> <operator>&gt;=</operator> <name>ACL_PTHREAD_KEYS_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>__tls_key_list</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>!=</operator> <name>key</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_key_list[%d].key(%d) != key(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>__tls_key_list</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>tls_value_list_ptr</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>TLS_VALUE</name> <modifier>*</modifier></type><name>tls_value</name> <init>= <expr><operator>(</operator><name>TLS_VALUE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name></name> <operator>!=</operator> <name>NULL</name>
			<operator>&amp;&amp;</operator> <name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>key</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Èç¹ûÏàÍ¬µÄ¼ü´æÔÚÔòÐèÒªÏÈÊÍ·Å¾ÉÊý¾Ý */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>destructor</name></name> <operator>&amp;&amp;</operator> <name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>destructor</name></name><argument_list>(<argument><expr><name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><call><name>TlsSetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>TLS_VALUE</name> <modifier>*</modifier></type><name>tls_value</name> <init>= <expr><operator>(</operator><name>TLS_VALUE</name><operator>*</operator><operator>)</operator>
			<call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TLS_VALUE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>__tls_key_list</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>private_fifo_push</name><argument_list>(<argument><expr><name>tls_value_list_ptr</name></expr></argument>, <argument><expr><name>tls_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): TlsSetValue(key=%d) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_detach</name><parameter_list>(<parameter><decl><type><name>acl_pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_detach"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>.</operator><name>detached</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>thread</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"close handle error(%s)"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_join</name><parameter_list>(<parameter><decl><type><name>acl_pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>thread_return</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_join"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>return_arg</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>.</operator><name>detached</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): thread has been detached"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): thread-&gt;handle == 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>thread</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>GetExitCodeThread</name><argument_list>(<argument><expr><name><name>thread</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPDWORD</name><operator>)</operator> <operator>&amp;</operator><name>return_arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>thread_return</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>thread_return</name> <operator>=</operator> <name>return_arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>thread</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"close handle error(%s)"</literal></expr></argument>, 
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_WINDOWS */</comment>

<comment type="block">/*----------------- ¿çÆ½Ì¨µÄÍ¨ÓÃº¯Êý¼¯£¬ÊÇ Posix ±ê×¼µÄÀ©Õ¹ ----------------*/</comment>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<typedef>typedef <type><struct>struct <name>pthread_atexit</name> <block>{
	<function_decl><type><name>void</name></type>   (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>pthread_atexit_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>__pthread_atexit_key</name> <init>= <expr><operator>(</operator><name>acl_pthread_key_t</name> <operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__pthread_atexit_control_once</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pthread_atexit_done</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>id_list</name> <init>= <expr><operator>(</operator><name>ACL_FIFO</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_atexit_t</name> <modifier>*</modifier></type><name>id_ptr</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>id_ptr</name> <operator>=</operator> <operator>(</operator><name>pthread_atexit_t</name><operator>*</operator><operator>)</operator> <call><name>private_fifo_pop</name><argument_list>(<argument><expr><name>id_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>id_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>id_ptr</name><operator>-&gt;</operator><name>free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>id_ptr</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name><name>id_ptr</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>id_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>private_fifo_free</name><argument_list>(<argument><expr><name>id_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pthread_atexit_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__pthread_atexit_key</name></expr></argument>, <argument><expr><name>pthread_atexit_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_atexit_add</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_atexit_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_atexit_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>id_list</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__pthread_atexit_control_once</name></expr></argument>, <argument><expr><name>pthread_atexit_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__pthread_atexit_key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __pthread_atexit_key(%ld) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>__pthread_atexit_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>pthread_atexit_t</name><operator>*</operator><operator>)</operator> <call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>,
		<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_atexit_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): malloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_ENOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>id_list</name> <operator>=</operator> <operator>(</operator><name>ACL_FIFO</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__pthread_atexit_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>id_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>id_list</name> <operator>=</operator> <call><name>private_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>__pthread_atexit_key</name></expr></argument>, <argument><expr><name>id_list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pthread_setspecific: %s, key(%ld)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>__pthread_atexit_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>private_fifo_push</name><argument_list>(<argument><expr><name>id_list</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_atexit_remove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_atexit_remove"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>id_list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>__pthread_atexit_key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __pthread_atexit_key(%ld)  invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>__pthread_atexit_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>id_list</name> <operator>=</operator> <operator>(</operator><name>ACL_FIFO</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__pthread_atexit_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>id_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __pthread_atexit_key(%ld) no exist"</literal>
			<literal type="string">" in tid(%lu)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>__pthread_atexit_key</name></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>id_list</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>pthread_atexit_t</name> <modifier>*</modifier></type><name>id_ptr</name> <init>= <expr><operator>(</operator><name>pthread_atexit_t</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>id_ptr</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>==</operator> <name>free_fn</name> <operator>&amp;&amp;</operator> <name><name>id_ptr</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>arg</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>id_info</name> <init>= <expr><call><name>acl_iter_info</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>id_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>private_delete_info</name><argument_list>(<argument><expr><name>id_list</name></expr></argument>, <argument><expr><name>id_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>id_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>acl_pthread_key_t</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>TLS_CTX</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>acl_tls_ctx_max</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__tls_ctx_control_once</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>__tls_ctx_key</name> <init>= <expr><operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TLS_CTX</name> <modifier>*</modifier></type><name>__main_tls_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>acl_pthread_tls_set_max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>acl_tls_ctx_max</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_tls_get_max</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>acl_tls_ctx_max</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Ïß³ÌÍË³öÊ±µ÷ÓÃ´Ëº¯ÊýÊÍ·ÅÊôÓÚ±¾Ïß³ÌµÄ¾Ö²¿±äÁ¿ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tls_ctx_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TLS_CTX</name> <modifier>*</modifier></type><name>tls_ctxes</name> <init>= <expr><operator>(</operator><name>TLS_CTX</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>acl_tls_ctx_max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>free_fn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>free_fn</name><argument_list>(<argument><expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>tls_ctxes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Ö÷Ïß³ÌÍË³öÊ±ÊÍ·Å¾Ö²¿±äÁ¿ */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>main_tls_ctx_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__main_tls_ctx</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tls_ctx_free</name><argument_list>(<argument><expr><name>__main_tls_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dummy_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tls_ctx_once_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator>
		<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__tls_ctx_key</name></expr></argument>, <argument><expr><name>dummy_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>main_tls_ctx_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__tls_ctx_key</name></expr></argument>, <argument><expr><name>tls_ctx_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_pthread_tls_get</name><parameter_list>(<parameter><decl><type><name>acl_pthread_key_t</name> <modifier>*</modifier></type><name>key_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_tls_get"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TLS_CTX</name> <modifier>*</modifier></type><name>tls_ctxes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>  <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__tls_ctx_control_once</name></expr></argument>, <argument><expr><name>tls_ctx_once_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__tls_ctx_key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_ctx_key invalid, tid(%lu)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>tls_ctxes</name> <operator>=</operator> <operator>(</operator><name>TLS_CTX</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__tls_ctx_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_ctxes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÒòÎª¸ÃÏß³ÌÖÐ²»´æÔÚ¸ÃÏß³Ì¾Ö²¿±äÁ¿£¬ËùÒÔÐèÒª·ÖÅäÒ»¸öÐÂµÄ */</comment>
		<expr_stmt><expr><name>tls_ctxes</name> <operator>=</operator> <operator>(</operator><name>TLS_CTX</name><operator>*</operator><operator>)</operator> <call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>acl_tls_ctx_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TLS_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>__tls_ctx_key</name></expr></argument>, <argument><expr><name>tls_ctxes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>tls_ctxes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pthread_setspecific: %s, tid(%lu)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* ³õÊ¼»¯ */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>acl_tls_ctx_max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>free_fn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call>
			<operator>==</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>__main_tls_ctx</name> <operator>=</operator> <name>tls_ctxes</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û¸Ã¼üÒÑ¾­´æÔÚÔòÈ¡³ö¶ÔÓ¦Êý¾Ý */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator> <operator>&lt;</operator> <name>acl_tls_ctx_max</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>key</name> <operator>==</operator> <operator>*</operator><name>key_ptr</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>ptr</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>key</name>
			<operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key_ptr</name></expr>;</expr_stmt>
			<return>return <expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>ptr</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): tls_ctxes[%ld].key(%ld)!= key(%ld)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>key_ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÕÒ³öÒ»¸ö¿ÕÎ» */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>acl_tls_ctx_max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Èç¹ûÃ»ÓÐ¿ÕÎ»¿ÉÓÃÔò·µ»Ø¿Õ²¢ÖÃ´íÎó±êÖ¾Î» */</comment>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>acl_tls_ctx_max</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no space for tls key"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>key_ptr</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÎªÐÂ·ÖÅäµÄ¼ü³õÊ¼»¯Ïß³Ì¾Ö²¿Êý¾Ý¶ÔÏó */</comment>
	<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>free_fn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>key_ptr</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_tls_set</name><parameter_list>(<parameter><decl><type><name>acl_pthread_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_tls_set"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TLS_CTX</name> <modifier>*</modifier></type><name>tls_ctxes</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name> <operator>&gt;=</operator> <name>acl_tls_ctx_max</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%ld) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__tls_ctx_key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_ctx_key invalid, tid(%lu)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_ENOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>tls_ctxes</name> <operator>=</operator> <operator>(</operator><name>TLS_CTX</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__tls_ctx_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_ctxes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_ctx_key(%ld) no exist"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>__tls_ctx_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>!=</operator> <name>key</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%ld) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Èç¹û¸Ã¼üÖµ´æÔÚ¾ÉÊý¾ÝÔòÊ×ÏÈÐèÒªÊÍ·Åµô¾ÉÊý¾Ý */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>free_fn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><call><name>free_fn</name><argument_list>(<argument><expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>free_fn</name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_tls_del</name><parameter_list>(<parameter><decl><type><name>acl_pthread_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_tls_del"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TLS_CTX</name> <modifier>*</modifier></type><name>tls_ctxes</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name> <operator>&gt;=</operator> <name>acl_tls_ctx_max</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%ld) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__tls_ctx_key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_ctx_key invalid, tid(%lu)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_ENOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tls_ctxes</name> <operator>=</operator> <operator>(</operator><name>TLS_CTX</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__tls_ctx_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_ctxes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_ctx_key(%ld) no exist"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>__tls_ctx_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>!=</operator> <name>key</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%ld) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>free_fn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_ctxes</name><index>[<expr><operator>(</operator><name>long</name><operator>)</operator> <name>key</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_tls_once_get</name><parameter_list>(<parameter><decl><type><name>acl_pthread_once_t</name> <modifier>*</modifier></type><name>control_once</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>control_once</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tls_ctx_control_once</name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_once_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_tls_once_set</name><parameter_list>(<parameter><decl><type><name>acl_pthread_once_t</name></type> <name>control_once</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__tls_ctx_control_once</name> <operator>=</operator> <name>control_once</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>acl_pthread_key_t</name></type> <name>acl_pthread_tls_key_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__tls_ctx_key</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_tls_key_set</name><parameter_list>(<parameter><decl><type><name>acl_pthread_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__tls_ctx_key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
