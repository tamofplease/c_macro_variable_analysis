<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/thread/acl_pthread_rwlock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive>	<name>ACL_HAVE_NO_RWLOCK</name></cpp:ifdef>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread_rwlock.h"</cpp:file></cpp:include>

<comment type="block">/* maximum number of times a read lock may be obtained */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_READ_LOCKS</name></cpp:macro>		<cpp:value>65535</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>acl_pthread_rwlock_destroy</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlock_t</name></type> <name>prwlock</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prwlock</name> <operator>=</operator> <operator>*</operator><name>rwlock</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>read_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>write_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>prwlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>rwlock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlock_init</name> <parameter_list>(<parameter><decl><type><name>acl_pthread_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>acl_pthread_rwlockattr_t</name> <modifier>*</modifier><name>attr</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlock_t</name></type> <name>prwlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* allocate rwlock object */</comment>
	<expr_stmt><expr><name>prwlock</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_rwlock_t</name><operator>)</operator>
		<call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>acl_pthread_rwlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>prwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* initialize the lock */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>prwlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* initialize the read condition signal */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>read_signal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>prwlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* initialize the write condition signal */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>write_signal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>read_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>prwlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* success */</comment>
	<expr_stmt><expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prwlock</name><operator>-&gt;</operator><name>blocked_writers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>rwlock</name> <operator>=</operator> <name>prwlock</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlock_rdlock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlock_t</name></type> <name>prwlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prwlock</name> <operator>=</operator> <operator>*</operator><name>rwlock</name></expr>;</expr_stmt>

	<comment type="block">/* check for static initialization */</comment>
	<if_stmt><if>if <condition>(<expr><name>prwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* grab the monitor lock */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* give writers priority over readers */</comment>
	<while>while <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>blocked_writers</name></name> <operator>||</operator> <name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>read_signal</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* can't do a whole lot if this fails */</comment>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ret</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* check lock count */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MAX_READ_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>++</operator><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* indicate we are locked for reading */</comment>

	<comment type="block">/*
	 * Something is really wrong if this call fails.  Returning
	 * error won't do because we've already obtained the read
	 * lock.  Decrementing 'state' is no good because we probably
	 * don't have the monitor lock.
	 */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlock_tryrdlock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlock_t</name></type> <name>prwlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prwlock</name> <operator>=</operator> <operator>*</operator><name>rwlock</name></expr>;</expr_stmt>

	<comment type="block">/* check for static initialization */</comment>
	<if_stmt><if>if <condition>(<expr><name>prwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* grab the monitor lock */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* give writers priority over readers */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>blocked_writers</name></name> <operator>||</operator> <name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ACL_EWOULDBLOCK</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MAX_READ_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ACL_EAGAIN</name></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* too many read locks acquired */</comment>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>++</operator><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* indicate we are locked for reading */</comment>

	<comment type="block">/* see the comment on this in pthread_rwlock_rdlock */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlock_trywrlock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlock_t</name></type> <name>prwlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prwlock</name> <operator>=</operator> <operator>*</operator><name>rwlock</name></expr>;</expr_stmt>

	<comment type="block">/* check for static initialization */</comment>
	<if_stmt><if>if <condition>(<expr><name>prwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* grab the monitor lock */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ACL_EWOULDBLOCK</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/* indicate we are locked for writing */</comment>
		<expr_stmt><expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* see the comment on this in pthread_rwlock_rdlock */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlock_unlock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlock_t</name></type> <name>prwlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prwlock</name> <operator>=</operator> <operator>*</operator><name>rwlock</name></expr>;</expr_stmt>

	<comment type="block">/* check for static initialization */</comment>
	<if_stmt><if>if <condition>(<expr><name>prwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* grab the monitor lock */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prwlock</name><operator>-&gt;</operator><name>blocked_writers</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>write_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>blocked_writers</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>write_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>read_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* see the comment on this in pthread_rwlock_rdlock */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlock_wrlock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlock_t</name></type> <name>prwlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prwlock</name> <operator>=</operator> <operator>*</operator><name>rwlock</name></expr>;</expr_stmt>

	<comment type="block">/* check for static initialization */</comment>
	<if_stmt><if>if <condition>(<expr><name>prwlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* grab the monitor lock */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>++</operator><name><name>prwlock</name><operator>-&gt;</operator><name>blocked_writers</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>write_signal</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>--</operator><name><name>prwlock</name><operator>-&gt;</operator><name>blocked_writers</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ret</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>--</operator><name><name>prwlock</name><operator>-&gt;</operator><name>blocked_writers</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* indicate we are locked for writing */</comment>
	<expr_stmt><expr><name><name>prwlock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* see the comment on this in pthread_rwlock_rdlock */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prwlock</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlockattr_destroy</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlockattr_t</name> <modifier>*</modifier></type><name>rwlockattr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlockattr_t</name></type> <name>prwlockattr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rwlockattr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prwlockattr</name> <operator>=</operator> <operator>*</operator><name>rwlockattr</name></expr>;</expr_stmt>

	<comment type="block">/* check for static initialization */</comment>
	<if_stmt><if>if <condition>(<expr><name>prwlockattr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>prwlockattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlockattr_getpshared</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>acl_pthread_rwlockattr_t</name> <modifier>*</modifier></type><name>rwlockattr</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pshared</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>pshared</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rwlockattr</name><operator>)</operator><operator>-&gt;</operator><name>pshared</name></name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlockattr_init</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlockattr_t</name> <modifier>*</modifier></type><name>rwlockattr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_rwlockattr_t</name></type> <name>prwlockattr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rwlockattr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prwlockattr</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_rwlockattr_t</name><operator>)</operator>
		<call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>acl_pthread_rwlockattr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>prwlockattr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>prwlockattr</name><operator>-&gt;</operator><name>pshared</name></name> 	<operator>=</operator> <name>ACL_PTHREAD_PROCESS_PRIVATE</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>rwlockattr</name>		<operator>=</operator> <name>prwlockattr</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_rwlockattr_setpshared</name><parameter_list>(<parameter><decl><type><name>acl_pthread_rwlockattr_t</name> <modifier>*</modifier></type><name>rwlockattr</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>pshared</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Only PTHREAD_PROCESS_PRIVATE is supported. */</comment>
	<if_stmt><if>if <condition>(<expr><name>pshared</name> <operator>!=</operator> <name>ACL_PTHREAD_PROCESS_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>rwlockattr</name><operator>)</operator><operator>-&gt;</operator><name>pshared</name></name> <operator>=</operator> <name>pshared</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_HAVE_NO_RWLOCK */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _GNU_SOURCE */</comment>
</unit>
