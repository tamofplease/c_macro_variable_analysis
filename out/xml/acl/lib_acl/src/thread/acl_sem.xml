<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/thread/acl_sem.c"><comment type="block">/* Semaphore functions using the Win32 API */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_sem.h"</cpp:file></cpp:include>

<comment type="block">/* Create a semaphore */</comment>
<function><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>acl_sem_create2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>initial_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_sem_create2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>sem</name></decl>;</decl_stmt>

	<comment type="block">/* Allocate sem memory */</comment>
	<expr_stmt><expr><name>sem</name> <operator>=</operator> <operator>(</operator><name>ACL_SEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): malloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create the semaphore, with max value 32K */</comment>
	<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>initial_value</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>initial_value</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sem</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): Couldn't create semaphore(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>sem</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>acl_sem_create</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>initial_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_sem_create2</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>initial_value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free the semaphore */</comment>
<function><type><name>void</name></type> <name>acl_sem_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>sem</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>sem</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_sem_wait_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_sem_wait_timeout"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwMilliseconds</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <name>ACL_MUTEX_MAXWAIT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dwMilliseconds</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dwMilliseconds</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <name>timeout</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<switch>switch <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>dwMilliseconds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>WAIT_OBJECT_0</name></expr>:</case>
		<expr_stmt><expr><operator>--</operator><name><name>sem</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>WAIT_TIMEOUT</name></expr>:</case>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>ACL_ETIMEDOUT</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): WaitForSingleObject() failed"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_sem_try_wait</name><parameter_list>(<parameter><decl><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_sem_wait_timeout</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_sem_wait</name><parameter_list>(<parameter><decl><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_sem_wait_timeout</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><name>ACL_MUTEX_MAXWAIT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns the current count of the semaphore */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>acl_sem_value</name><parameter_list>(<parameter><decl><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_sem_value"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>sem</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_sem_post</name><parameter_list>(<parameter><decl><type><name>ACL_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_sem_post"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Increase the counter in the first place, because
	 * after a successful release the semaphore may
	 * immediately get destroyed by another thread which
	 * is waiting for this semaphore.
	 */</comment>
	<expr_stmt><expr><operator>++</operator><name><name>sem</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>--</operator><name><name>sem</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>	<comment type="block">/* restore */</comment>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ReleaseSemaphore() failed"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_WINDOWS */</comment>
</unit>
