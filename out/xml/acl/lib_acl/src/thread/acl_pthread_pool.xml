<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/thread/acl_pthread_pool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread_pool.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ACL_PTHREAD_POOL_VALID</name></cpp:macro>		<cpp:value>0x0decca62</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SEC_TO_NS</name></cpp:macro>			<cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SEC_TO_MS</name></cpp:macro>			<cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MS_TO_NS</name></cpp:macro>			<cpp:value>1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TIME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	struct timeval t; \
	gettimeofday(&amp;t, NULL); \
	(x) = ((acl_int64) t.tv_sec) * 1000 + ((acl_int64) t.tv_usec / 1000); \
} while (0)</cpp:value></cpp:define>

<struct>struct <name>acl_pthread_job_t</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_pthread_job_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>worker_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>         <comment type="block">/* user function              */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>worker_arg</name></decl>;</decl_stmt>                     <comment type="block">/* user function's arg        */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>fixed</name></decl>;</decl_stmt>                          <comment type="block">/* if can be freed ?          */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>start</name></decl>;</decl_stmt>                     <comment type="block">/* start time stamp           */</comment>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>thread_cond</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>thread_cond</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_cond_t</name></type>  <name>cond</name></decl>;</decl_stmt>
}</block></struct></type> <name>thread_cond</name>;</typedef>

<typedef>typedef <type><struct>struct <name>thread_worker</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>thread_worker</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>thread_worker</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>quit</name></decl>;</decl_stmt>                           <comment type="block">/* if thread need quit ?      */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>idle</name></decl>;</decl_stmt>                           <comment type="block">/* thread wait timeout        */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>wait_base</name></decl>;</decl_stmt>                  <comment type="block">/* once wait: nanosecond      */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>wait_sec</name></decl>;</decl_stmt>                   <comment type="block">/* once wait: second          */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>wait_nsec</name></decl>;</decl_stmt>                  <comment type="block">/* once wait: nanosecond      */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>wait_count</name></decl>;</decl_stmt>                 <comment type="block">/* timeout of total wait      */</comment>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name>    <modifier>*</modifier></type><name>job_first</name></decl>;</decl_stmt>      <comment type="block">/* thread's work queue first  */</comment>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name>    <modifier>*</modifier></type><name>job_last</name></decl>;</decl_stmt>       <comment type="block">/* thread's work queue last   */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>qlen</name></decl>;</decl_stmt>                           <comment type="block">/* the work queue's length    */</comment>
	<decl_stmt><decl><type><name>thread_cond</name>          <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name>  <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
}</block></struct></type> <name>thread_worker</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>USE_SLOT</name></cpp:undef>                              <comment type="block">/* it's just for experiment   */</comment>

<struct>struct <name>acl_pthread_pool_t</name> <block>{
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type>   <name>worker_mutex</name></decl>;</decl_stmt>   <comment type="block">/* control access to queue    */</comment>
	<decl_stmt><decl><type><name>acl_pthread_cond_t</name></type>    <name>cond</name></decl>;</decl_stmt>           <comment type="block">/* wait for worker quit       */</comment>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type>   <name>poller_mutex</name></decl>;</decl_stmt>   <comment type="block">/* just for wait poller exit  */</comment>
	<decl_stmt><decl><type><name>acl_pthread_cond_t</name></type>    <name>poller_cond</name></decl>;</decl_stmt>    <comment type="block">/* just for wait poller exit  */</comment>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type>    <name>attr</name></decl>;</decl_stmt>           <comment type="block">/* create detached            */</comment>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name>    <modifier>*</modifier></type><name>job_first</name></decl>;</decl_stmt>      <comment type="block">/* work queue first           */</comment>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name>    <modifier>*</modifier></type><name>job_last</name></decl>;</decl_stmt>       <comment type="block">/* work queue last            */</comment>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name>    <modifier>*</modifier></type><name>job_slot_first</name></decl>;</decl_stmt> <comment type="block">/* work queue first           */</comment>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name>    <modifier>*</modifier></type><name>job_slot_last</name></decl>;</decl_stmt>  <comment type="block">/* work queue last            */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type>   <name>slot_mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>thread_worker</name>        <modifier>*</modifier></type><name>thr_first</name></decl>;</decl_stmt>      <comment type="block">/* first idle thread          */</comment>
	<decl_stmt><decl><type><name>thread_worker</name>        <modifier>*</modifier></type><name>thr_iter</name></decl>;</decl_stmt>       <comment type="block">/* for bat operation          */</comment>
	<decl_stmt><decl><type><name>thread_cond</name>          <modifier>*</modifier></type><name>cond_first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>poller_running</name></decl>;</decl_stmt>                 <comment type="block">/* is poller thread running ? */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>qlen</name></decl>;</decl_stmt>                           <comment type="block">/* the work queue's length    */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>job_nslot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>qlen_warn</name></decl>;</decl_stmt>                      <comment type="block">/* the work queue's length    */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>valid</name></decl>;</decl_stmt>                          <comment type="block">/* valid                      */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>quit</name></decl>;</decl_stmt>                           <comment type="block">/* worker should quit         */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>poller_quit</name></decl>;</decl_stmt>                    <comment type="block">/* poller should quit         */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>parallelism</name></decl>;</decl_stmt>                    <comment type="block">/* maximum threads            */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>count</name></decl>;</decl_stmt>                          <comment type="block">/* current threads            */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>idle</name></decl>;</decl_stmt>                           <comment type="block">/* idle threads               */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>idle_timeout</name></decl>;</decl_stmt>                   <comment type="block">/* idle timeout second        */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>schedule_warn</name></decl>;</decl_stmt>              <comment type="block">/* schedule warn: millisecond */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>schedule_wait</name></decl>;</decl_stmt>              <comment type="block">/* schedule wait: millisecond */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>overload_wait</name></decl>;</decl_stmt>                  <comment type="block">/* when too busy, sleep time  */</comment>
	<decl_stmt><decl><type><name>time_t</name></type> <name>last_warn</name></decl>;</decl_stmt>                     <comment type="block">/* last warn time             */</comment>
	<function_decl><type><name>int</name></type>  (<modifier>*</modifier><name>poller_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>         <comment type="block">/* worker poll function       */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>poller_arg</name></decl>;</decl_stmt>                     <comment type="block">/* the arg of poller_fn       */</comment>
	<function_decl><type><name>int</name></type>  (<modifier>*</modifier><name>worker_init_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>    <comment type="block">/* the arg is worker_init_arg */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>worker_init_arg</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>worker_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>    <comment type="block">/* the arg is worker_free_arg */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>worker_free_arg</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>SET_ERRNO</name></cpp:undef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive>	<cpp:macro><name>SET_ERRNO</name><parameter_list>(<parameter><type><name>_x_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) 0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive>	<cpp:macro><name>SET_ERRNO</name><parameter_list>(<parameter><type><name>_x_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(acl_set_error(_x_))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS type"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>sleep</name><parameter_list>(<parameter><type><name>_x_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	Sleep(_x_ * 1000);  \
} while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>poller_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"poller_thread"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name>   <modifier>*</modifier></type><name>thr_pool</name> <init>= <expr><operator>(</operator><name>acl_pthread_pool_t</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wait_sec</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_loop_persec</name> <init>= <expr><literal type="number">81920</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>loop_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>now_t</name></decl>, <decl><type ref="prev"/><name>pre_loop_t</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>id</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>id</name> <init>= <expr><call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): poller_fn is null!"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): poller(tid=%lu) started."</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>loop_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pre_loop_t</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_running</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_quit</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>now_t</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>loop_count</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loop_count</name> <operator>&gt;=</operator> <name>max_loop_persec</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* avoid loop too quickly in one second */</comment>
			<if_stmt><if>if <condition>(<expr><name>now_t</name> <operator>-</operator> <name>pre_loop_t</name> <operator>&lt;=</operator> <name>wait_sec</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: loop too fast, sleep %d "</literal>
					<literal type="string">"seconds"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>wait_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name>wait_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* adjust the time of now */</comment>
				<expr_stmt><expr><name>now_t</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/*adjust the pre_loop_t time */</comment>
			<expr_stmt><expr><name>pre_loop_t</name> <operator>=</operator> <name>now_t</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>loop_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_fn</name></name><argument_list>(<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_arg</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): poller(%lu) thread quit."</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_running</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_cond</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"poller broadcast ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"poller unlock ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>thread_cond</name> <modifier>*</modifier></type><name>thread_cond_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>thread_cond</name> <modifier>*</modifier></type><name>cond</name> <init>= <expr><operator>(</operator><name>thread_cond</name><operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>thread_cond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>cond</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_cond_free</name><parameter_list>(<parameter><decl><type><name>thread_cond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>thread_worker</name> <modifier>*</modifier></type><name>worker_create</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr</name> <init>= <expr><operator>(</operator><name>thread_worker</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>thread_worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>idle</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>idle_timeout</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>idle</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_wait</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>wait_sec</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_wait</name></name> <operator>/</operator> <name>SEC_TO_MS</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>wait_nsec</name></name> <operator>=</operator> <operator>(</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_wait</name></name> <operator>*</operator> <name>MS_TO_NS</name><operator>)</operator>
			<operator>%</operator> <name>SEC_TO_NS</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>wait_count</name></name> <operator>=</operator> <operator>(</operator><name>SEC_TO_MS</name> <operator>*</operator> <name><name>thr</name><operator>-&gt;</operator><name>idle</name></name><operator>)</operator>
			<operator>/</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_wait</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>wait_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>idle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>idle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>thread_cond_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr>;</expr_stmt>
	<return>return <expr><name>thr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_free</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>, <parameter><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>cond</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_run</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"worker_run"</literal></expr></init></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>worker_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>job</name><operator>-&gt;</operator><name>worker_fn</name></name></expr></init>;</function_decl>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>worker_arg</name> <init>= <expr><name><name>job</name><operator>-&gt;</operator><name>worker_arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<comment type="block">/* shuld unlock before enter working process */</comment>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>thr</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: unlock error: %s, tid: %lu"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>acl_int64</name></type> <name>now</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>now</name> <operator>-=</operator> <name><name>job</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_warn</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: schedule: %lld &gt;= %lld, qlen=%d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_warn</name></name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>slot_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>fixed</name></name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></if>  <comment type="block">/* do nothing */</comment>
		<if type="elseif">else if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_nslot</name></name> <operator>&lt;</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>qlen_warn</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* must reset the job's next before
			 * add it to jobs slot
			 */</comment>
			<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_last</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_nslot</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>slot_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>job</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>fixed</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>job</name><operator>-&gt;</operator><name>fixed</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>worker_fn</name><argument_list>(<argument><expr><name>worker_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* lock again */</comment>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>thr</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: lock error: %s, sid: %lu"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>worker_wait</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>, <parameter><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"worker_wait"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>idle_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_job</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type>  <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>   <name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>n</name></decl>;</decl_stmt>

	<comment type="block">/* add the thread to the idle threads pool */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>=</operator> <name>thr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>thr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>=</operator> <name>thr</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name><operator>++</operator></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>idle</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <name><name>thr</name><operator>-&gt;</operator><name>wait_sec</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>thr</name><operator>-&gt;</operator><name>wait_nsec</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>SEC_TO_NS</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>n</name> <operator>-</operator> <name>SEC_TO_NS</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>,
					<argument><expr><name><name>thr</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>,
					<argument><expr><name><name>thr</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* if thr-&gt;job_first not null, the thread had been remove
		 * from idle threads pool by the main thread in job_deliver(),
		 * so just return 1 here.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>job_first</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* else if threads pool's job not empty, the thread should
		 * handle it and remove itself from the idle threads pool
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>got_job</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>quit</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ACL_ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>idle_count</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>idle_count</name> <operator>&lt;</operator> <name><name>thr</name><operator>-&gt;</operator><name>wait_count</name></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>idle_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* xxx */</comment>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: tid: %lu, cond timewait error: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator>
			<call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></while>

	<comment type="block">/* remove the thread from thread pool */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>==</operator> <name>thr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/* if none job got, this must because the thread need to quit */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_job</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>got_job</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>worker_thread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"worker_thread"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name> <init>= <expr><operator>(</operator><name>acl_pthread_pool_t</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_init_fn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_init_fn</name></name><argument_list>(<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_init_arg</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: thread(%lu) init error"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* lock the thread pool's global mutex at first */</comment>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: lock failed: %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>thr</name> <operator>=</operator> <call><name>worker_create</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mutex</name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>mutex</name></name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

		<comment type="block">/* handle thread self's job first */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>job_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>job_first</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>job_first</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>job_last</name></name> <operator>==</operator> <name>job</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>job_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>qlen</name></name><operator>--</operator></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>worker_run</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>thr</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>

		<comment type="block">/* then handle thread pool's job */</comment>
		<if type="elseif">else if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_last</name></name> <operator>==</operator> <name>job</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name><operator>--</operator></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>worker_run</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>thr</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>job_first</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if>

		<if type="elseif">else if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>quit</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if>

		<if type="elseif">else if <condition>(<expr><call><name>worker_wait</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>thr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* when wait timeout, wait error or thread pool is quiting */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>quit</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): thread(%lu) exit now"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_free_fn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_free_fn</name></name><argument_list>(<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_free_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>worker_free</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>quit</name></name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* &amp;&amp; thr_pool-&gt;count == 0) */</comment>
		<expr_stmt><expr><call><name>acl_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): unlock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>job_deliver</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>, <parameter><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr</name></decl></parameter>,
	<parameter><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"job_deliver"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thread_cond</name> <modifier>*</modifier></type><name>cond</name> <init>= <expr><name><name>thr</name><operator>-&gt;</operator><name>cond</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>job_first</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>job_last</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>qlen</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>==</operator> <name>thr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name><operator>--</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_cond_signal: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>job_add</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"job_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<comment type="block">/* must reset the job's next to NULL */</comment>
	<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_warn</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_lock: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* at first, select one idle thread which qlen is 0 */</comment>

	<expr_stmt><expr><name>thr</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>thr</name> <operator>&amp;&amp;</operator> <name><name>thr</name><operator>-&gt;</operator><name>qlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>job_deliver</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>thr</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* then, add job to the pool's queue and anyone can handle it */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_last</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* if not reach the max threads limit, create one thread */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>parallelism</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>id</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>,
				<argument><expr><name>worker_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_create: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* if qlen is too long, should warning, event sleep a while */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name> <operator>&gt;</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>qlen_warn</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>last_warn</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>last_warn</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: OVERLOADED! max_thread: %d,"</literal>
				<literal type="string">" qlen: %d, idle: %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>parallelism</name></name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>,
				<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>overload_wait</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: sleep %d seconds"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>overload_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>overload_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_add_one</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>run_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>run_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: thr_pool invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>run_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: run_fn null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>slot_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_last</name></name> <operator>==</operator> <name>job</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_nslot</name></name><operator>--</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>worker_fn</name></name>  <operator>=</operator> <name>run_fn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>worker_arg</name></name> <operator>=</operator> <name>run_arg</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>fixed</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>slot_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>acl_pthread_pool_alloc_job</name><argument_list>(<argument><expr><name>run_fn</name></expr></argument>, <argument><expr><name>run_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>acl_pthread_pool_alloc_job</name><argument_list>(<argument><expr><name>run_fn</name></expr></argument>, <argument><expr><name>run_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>job_add</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_add_job</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_add_job"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: thr_pool invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: job null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>job_add</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_bat_add_begin</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_bat_add_begin"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid thr_pool-&gt;valid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_lock, serr = %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>job_append</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"job_append"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<comment type="block">/* must reset the job's next to NULL */</comment>
	<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

		<comment type="block">/* if the idle thread has no job append, just it */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>qlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>job_first</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>job_last</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>qlen</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* iterator the left idle threads */</comment>

		<for>for <control>(<init><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</init>
			<condition><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
			<incr><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* skip busy thread */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>qlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>job_first</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>job_last</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>qlen</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* add the job to the thread pool's queue, anyone can handle it */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_last</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* if not reach the max threads limit, create one thread */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>parallelism</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>id</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>,
				<argument><expr><name>worker_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_create: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* if there are too many jobs in thread pool's queue, do warning */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name> <operator>&gt;</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>qlen_warn</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>last_warn</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>last_warn</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: OVERLOADED! max_thread: %d"</literal>
				<literal type="string">", qlen: %d, idle: %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>parallelism</name></name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>,
				<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>overload_wait</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: sleep %d seconds"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			       	<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>overload_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>overload_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_bat_add_one</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>run_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>run_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_bat_add_one"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name> <operator>||</operator> <name>run_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid thr_pool or run_fn"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>slot_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* if there are some slot of job, reuse it */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_last</name></name> <operator>==</operator> <name>job</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_nslot</name></name><operator>--</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>worker_fn</name></name>  <operator>=</operator> <name>run_fn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>worker_arg</name></name> <operator>=</operator> <name>run_arg</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>fixed</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>slot_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>acl_pthread_pool_alloc_job</name><argument_list>(<argument><expr><name>run_fn</name></expr></argument>, <argument><expr><name>run_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>acl_pthread_pool_alloc_job</name><argument_list>(<argument><expr><name>run_fn</name></expr></argument>, <argument><expr><name>run_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>job_append</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_bat_add_job</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_bat_add_job"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid thr_pool-&gt;valid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>job_append</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_bat_add_end</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_bat_add_end"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>qlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr_iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid thr_pool-&gt;valid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>qlen</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>thr_iter</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name></expr>;</expr_stmt>

	<comment type="block">/* iterator all the idle threads, signal one if it has job */</comment>

	<for>for <control>(<init>;</init> <condition><expr><name>thr_iter</name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><name>thr_iter</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

		<comment type="block">/* handle thread self's job first */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>thr_iter</name><operator>-&gt;</operator><name>qlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>==</operator> <name>thr_iter</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>thr_iter</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>=</operator> <name><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>thr_iter</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>thr_iter</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>thr_iter</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_iter</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_cond_signal: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>

		<comment type="block">/* if thread pool's job not empty , let idle thread handle */</comment>

		<if type="elseif">else if <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_iter</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>qlen</name><operator>--</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_cond_signal: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>thr_iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_pool_init</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>quit</name></name>              <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_quit</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_running</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_first</name></name>         <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_last</name></name>          <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_last</name></name>     <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_nslot</name></name>         <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name>         <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_iter</name></name>          <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name>              <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>overload_wait</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name>             <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name>              <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_warn</name></name>     <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_wait</name></name>     <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name>        <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* create work queue */</comment>

<function><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>acl_thread_pool_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threads_limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idle_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_pool_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_pool_attr_set_threads_limit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>threads_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_pool_attr_set_idle_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>idle_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>thr_pool</name> <operator>=</operator> <call><name>acl_pthread_pool_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>thr_pool</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_set_schedule_warn</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_warn</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_set_schedule_wait</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>schedule_wait</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>acl_pthread_pool_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>acl_pthread_pool_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>thr_pool</name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>thr_pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_attr_init: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>stack_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_attr_setstacksize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>,
			<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>,
			<argument><expr><name>ACL_PTHREAD_CREATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_attr_setdetachstate: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MINGW</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pthread_attr_setscope</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>PTHREAD_SCOPE_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_attr_setscope: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_init: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_cond_init: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>slot_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_init: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_init: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_cond_init: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>thread_pool_init</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>parallelism</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>threads_limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
		<expr><name><name>attr</name><operator>-&gt;</operator><name>threads_limit</name></name></expr> </then><else>: <expr><name>ACL_PTHREAD_POOL_DEF_THREADS</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen_warn</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>parallelism</name></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle_timeout</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>idle_timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
		<expr><name><name>attr</name><operator>-&gt;</operator><name>idle_timeout</name></name></expr> </then><else>: <expr><name>ACL_PTHREAD_POOL_DEF_IDLE</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_init_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_init_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_free_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_free_arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>;</expr_stmt>

	<return>return <expr><name>thr_pool</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_set_qlen_warn</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>qlen_warn</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_set_timewait</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timewait</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_set_timewait"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>thr_pool</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name>
		<operator>||</operator> <name>timewait</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid input"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>overload_wait</name></name> <operator>=</operator> <name>timewait</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_atinit</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>init_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_atinit"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>thr_pool</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_init_fn</name></name> <operator>=</operator> <name>init_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_init_arg</name></name> <operator>=</operator> <name>init_arg</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_atfree</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>free_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_atfree"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>thr_pool</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_free_fn</name></name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_free_arg</name></name> <operator>=</operator> <name>free_arg</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wait_poller_exit</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"wait_poller_exit"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>nwait</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name>  <name>timeval</name></name></type>   <name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name>	<name>timespec</name></name></type> <name>timeout</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: begin to lock"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_quit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): pthread_mutex_lock: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>status</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: begin to wait cond"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_running</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_cond</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ACL_ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
				<argument_list>(<argument><expr><literal type="string">"%s: nwait=%d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>nwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): pthread_cond_wait: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>status</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: begin to unlock"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): pthread_mutex_unlock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wait_worker_exit</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"wait_worker_exit"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>nwait</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_lock: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>status</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: count: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: count: 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* 1. set quit flag
	 * 2. broadcast to wakeup any sleeping
	 * 4. wait till all quit
	 */</comment>
	<comment type="block">/* then: thr_pool-&gt;count &gt; 0 */</comment>
	
	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>thread_worker</name> <modifier>*</modifier></type><name>thr</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: idle: %d, notifying"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>thr</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>thr_first</name></name></expr>;</init> <condition><expr><name>thr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>thr</name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr</name><operator>-&gt;</operator><name>cond</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
			<argument_list>(<argument><expr><literal type="string">"debug(2): count = %d, nwait=%d, idle=%d"</literal></expr></argument>,
			<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>nwait</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* status = pthread_cond_timedwait(&amp;thr_pool-&gt;cond,
		 * 		&amp;thr_pool-&gt;worker_mutex, &amp;timeout);
		 */</comment>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>ACL_ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
				<argument_list>(<argument><expr><literal type="string">"%s: timeout nwait=%d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>nwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_cond_timedwait"</literal>
				<literal type="string">" err: %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>status</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock err: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_destroy</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_destroy"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>   <name>s6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>thr_pool</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* prevent any other operations */</comment>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>wait_poller_exit</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): wait_poller_exit: %s, ret: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>status</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): poller thread exits ok, worker count: %d"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>wait_worker_exit</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): wait_worker_exit: %s, ret: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>status</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>job_slot_first</name></name></expr>;</init> <condition><expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>job</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_pool_free_job</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>job_nslot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): worker threads exit ok, conter: %d"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>acl_pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>thread_cond</name> <modifier>*</modifier></type><name>cond</name> <init>= <expr><name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name></name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>cond_first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>thread_cond_free</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s4</name> <operator>=</operator> <call><name>acl_pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>acl_pthread_attr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<expr_stmt><expr><name>s6</name> <operator>=</operator> <call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>slot_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_SLOT</name></cpp:ifdef>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <ternary><condition><expr><name>s1</name></expr> ?</condition><then> <expr><name>s1</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>s2</name></expr> ?</condition><then> <expr><name>s2</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>s3</name></expr> ?</condition><then> <expr><name>s3</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>s4</name></expr> ?</condition><then> <expr><name>s4</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>s5</name></expr> ?</condition><then> <expr><name>s5</name></expr> </then><else>: <expr><name>s6</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <ternary><condition><expr><name>s1</name></expr> ?</condition><then> <expr><name>s1</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>s2</name></expr> ?</condition><then> <expr><name>s2</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>s3</name></expr> ?</condition><then> <expr><name>s3</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>s4</name></expr> ?</condition><then> <expr><name>s4</name></expr> </then><else>: <expr><name>s5</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_stop</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_stop"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>thr_pool</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* prevent any other operations */</comment>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>wait_poller_exit</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): wait_poller_exit: %s, ret: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>status</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): poller thread exits ok, worker count: %d"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>wait_worker_exit</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): wait_worker_exit: %s, ret: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>status</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* restore the valid status */</comment>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_THR_POOL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): worker threads exit ok, conter: %d"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_set_poller</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>poller_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>poller_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_set_poller"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name> <operator>||</operator> <name>poller_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_fn</name></name> <operator>=</operator> <name>poller_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_arg</name></name> <operator>=</operator> <name>poller_arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_start_poller</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_start_poller"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>valid</name></name> <operator>!=</operator> <name>ACL_PTHREAD_POOL_VALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): poller_fn null, needn't call %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): lock poller_mutex error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_running</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): server is running"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>poller_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): unlock poller_mutex error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>thread_pool_init</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>,
				<argument><expr><name>poller_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SET_ERRNO</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_create poller: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>status</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_add_dispatch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dispatch_arg</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>run_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>run_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_add_dispatch"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dispatch_arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>run_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid input"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>thr_pool</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_pool_t</name> <operator>*</operator><operator>)</operator> <name>dispatch_arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_pool_bat_add_one</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>run_fn</name></expr></argument>, <argument><expr><name>run_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_dispatch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dispatch_arg</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>run_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>run_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_dispatch"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dispatch_arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>run_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid input"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>thr_pool</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_pool_t</name> <operator>*</operator><operator>)</operator> <name>dispatch_arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_pthread_pool_add</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>run_fn</name></expr></argument>, <argument><expr><name>run_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_limit</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>thr_pool</name><operator>-&gt;</operator><name>parallelism</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_size</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_size"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_lock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_idle</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_idle"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_lock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_busy</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_busy"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_lock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: threads's count(%d) &lt; idle(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>,
			<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_pool_qlen</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_pool_qlen"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_lock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>thr_pool</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>worker_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: threads's count(%d) &lt; idle(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>count</name></name></expr></argument>,
			<argument><expr><name><name>thr_pool</name><operator>-&gt;</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_set_stacksize</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>thr_pool</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_attr_setstacksize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr_pool</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_attr_init</name><parameter_list>(<parameter><decl><type><name>acl_pthread_pool_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_pool_attr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_attr_set_stacksize</name><parameter_list>(
	<parameter><decl><type><name>acl_pthread_pool_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>stack_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_attr_set_threads_limit</name><parameter_list>(
	<parameter><decl><type><name>acl_pthread_pool_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threads_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name>threads_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>threads_limit</name></name> <operator>=</operator> <name>threads_limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_attr_set_idle_timeout</name><parameter_list>(
	<parameter><decl><type><name>acl_pthread_pool_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idle_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;&amp;</operator> <name>idle_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>idle_timeout</name></name> <operator>=</operator> <name>idle_timeout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>acl_pthread_pool_alloc_job</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>run_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>run_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fixed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><operator>(</operator><name>acl_pthread_job_t</name><operator>*</operator><operator>)</operator>
		<call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_job_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>worker_fn</name></name>  <operator>=</operator> <name>run_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>worker_arg</name></name> <operator>=</operator> <name>run_arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>next</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>fixed</name></name>      <operator>=</operator> <name>fixed</name></expr>;</expr_stmt>
	<return>return <expr><name>job</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_pthread_pool_free_job</name><parameter_list>(<parameter><decl><type><name>acl_pthread_job_t</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
