<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/thread/acl_pthread_mutex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_dbuf_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>

<function><type><name>int</name></type> <name>acl_pthread_mutexattr_init</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutexattr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>attr</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_mutexattr_destroy</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutexattr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>attr</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_mutexattr_settype</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutexattr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>attr</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>type</name></expr>;</expr_stmt>
	<comment type="block">/* The mutex on Windows is recursive by default. */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_mutex_init</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>acl_pthread_mutexattr_t</name> <modifier>*</modifier></type><name>mattr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_mutex_init"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>mattr</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>dynamic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Create the mutex, with initial value signaled */</comment>
	<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>(<comment type="block">/* (SECURITY_ATTRIBUTES *) mattr */</comment> <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): CreateMutex error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free the mutex */</comment>
<function><type><name>int</name></type> <name>acl_pthread_mutex_destroy</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>dynamic</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_mutex_lock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_mutex_lock"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_FAILED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): WaitForSingleObject error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_pthread_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_mutex_unlock"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ReleaseMutex error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_WINDOWS */</comment>

<typedef>typedef <type><name><name>struct</name> <name>acl_pthread_nested_mutex_t</name></name></type> <name>acl_pthread_nested_mutex_t</name>;</typedef>

<struct>struct <name>acl_pthread_nested_mutex_t</name> <block>{
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>ring</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>nrefer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>__header_key</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_header</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>header_ptr</name> <init>= <expr><operator>(</operator><name>ACL_RING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_nested_mutex_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>header_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>header_ptr</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>,
			<argument><expr><name>acl_pthread_nested_mutex_t</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>mutex</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acl_thread_mutex_init_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__header_key</name></expr></argument>, <argument><expr><name>free_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>thread_mutex_once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>acl_thread_mutex_lock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_nested_mutex_t</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nested_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>header_ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread_mutex_once_control</name></expr></argument>,
		<argument><expr><name>acl_thread_mutex_init_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>header_ptr</name> <operator>=</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__header_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>header_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>header_ptr</name> <operator>=</operator> <operator>(</operator><name>ACL_RING</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_RING</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><name>header_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>__header_key</name></expr></argument>, <argument><expr><name>header_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>header_ptr</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>,
			<argument><expr><name>acl_pthread_nested_mutex_t</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <name>mutex</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nested_mutex</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>nested_mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>nested_mutex</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_nested_mutex_t</name><operator>*</operator><operator>)</operator>
			<call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_nested_mutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nested_mutex</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name>mutex</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nested_mutex</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_RING_APPEND</name><argument_list>(<argument><expr><name>header_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nested_mutex</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>nested_mutex</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_thread_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_nested_mutex_t</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nested_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>header_ptr</name> <init>= <expr><call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__header_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>header_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>header_ptr</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>,
			<argument><expr><name>acl_pthread_nested_mutex_t</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <name>mutex</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nested_mutex</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	
	<if_stmt><if>if <condition>(<expr><name>nested_mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>nested_mutex</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_RING_DETACH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nested_mutex</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>nested_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_thread_mutex_nested</name><parameter_list>(<parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_nested_mutex_t</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nested_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>header_ptr</name> <init>= <expr><call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__header_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>header_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>header_ptr</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>,
			<argument><expr><name>acl_pthread_nested_mutex_t</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>mutex</name></name> <operator>==</operator> <name>mutex</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nested_mutex</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>nested_mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>nested_mutex</name><operator>-&gt;</operator><name>nrefer</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
