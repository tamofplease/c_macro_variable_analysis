<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/thread/acl_pthread_cond.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>ACL_HAS_PTHREAD</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_sem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>acl_pthread_cond_init</name><parameter_list>(<parameter><decl><type><name>acl_pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>,
	<parameter><decl><type><name>acl_pthread_condattr_t</name> <modifier>*</modifier></type><name>cond_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_cond_init"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cond_attr</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name>      <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_mutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): acl_pthread_mutex_init error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>dynamic</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name>  <operator>=</operator> <call><name>acl_sem_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_done</name></name> <operator>=</operator> <call><name>acl_sem_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>waiting</name></name>   <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>nsignal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name> <operator>||</operator> <operator>!</operator><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name> <operator>||</operator> <operator>!</operator><name><name>cond</name><operator>-&gt;</operator><name>wait_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create a condition variable */</comment>
<function><type><name>acl_pthread_cond_t</name> <modifier>*</modifier></type> <name>acl_thread_cond_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_thread_cond_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cond</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_cond_t</name> <operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_cond_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_cond_init</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_cond_destroy</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>dynamic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>cond</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Destroy a condition variable */</comment>

<function><type><name>int</name></type> <name>acl_pthread_cond_destroy</name><parameter_list>(<parameter><decl><type><name>acl_pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_sem_destroy</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>wait_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_sem_destroy</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>dynamic</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Restart one of the threads that are waiting on the condition variable */</comment>
<function><type><name>int</name></type> <name>acl_pthread_cond_signal</name><parameter_list>(<parameter><decl><type><name>acl_pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_cond_signal"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If there are waiting threads not already signalled, then
	 *  signal the condition and wait for the thread to respond.
	 */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>waiting</name></name> <operator>&gt;</operator> <name><name>cond</name><operator>-&gt;</operator><name>nsignal</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>++</operator><name><name>cond</name><operator>-&gt;</operator><name>nsignal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_sem_post</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_sem_wait</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Restart all threads that are waiting on the condition variable */</comment>
<function><type><name>int</name></type> <name>acl_pthread_cond_broadcast</name><parameter_list>(<parameter><decl><type><name>acl_pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_cond_broadcast"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If there are waiting threads not already signalled, then
	 * signal the condition and wait for the thread to respond.
	 */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>waiting</name></name> <operator>&gt;</operator> <name><name>cond</name><operator>-&gt;</operator><name>nsignal</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_waiting</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>num_waiting</name> <operator>=</operator> <operator>(</operator><name><name>cond</name><operator>-&gt;</operator><name>waiting</name></name> <operator>-</operator> <name><name>cond</name><operator>-&gt;</operator><name>nsignal</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>nsignal</name></name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>waiting</name></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_waiting</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_sem_post</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<comment type="block">/* Now all released threads are blocked here, waiting for us.
		 * Collect them all (and win fabulous prizes!) :-)
		 */</comment>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_waiting</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_sem_wait</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wait on the condition variable for at most 'ms' milliseconds.
 * The mutex must be locked before entering this function!
 * The mutex is unlocked during the wait, and locked again after the wait.

Typical use:

Thread A:
	pthread_mutex_lock(lock);
	while ( ! condition ) {
		SDL_CondWait(cond);
	}
	pthread_mutex_unlock(lock);

Thread B:
	pthread_mutex_lock(lock);
	...
	condition = true;
	...
	pthread_mutex_unlock(lock);
 */</comment>
<function><type><name>int</name></type> <name>acl_pthread_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>acl_pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>,
	<parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_pthread_cond_timedwait"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>retval</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Obtain the protection mutex, and increment the number of waiters.
	 * This allows the signal mechanism to only perform a signal if there
	 * are waiting threads.
	 */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>++</operator><name><name>cond</name><operator>-&gt;</operator><name>waiting</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Unlock the mutex, as is required by condition variable semantics */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Wait for a signal */</comment>
	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>acl_sem_wait</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ms</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ms</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ms</name> <operator>-=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>acl_sem_wait_timeout</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Let the signaler know we have completed the wait, otherwise
         * the signaler can race ahead and get the condition semaphore
         * if we are stopped between the mutex unlock and semaphore wait,
         * giving a deadlock.  See the following URL for details:
         * http://www-classic.be.com/aboutbe/benewsletter/volume_III/Issue40.html
	 */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>nsignal</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If we timed out, we need to eat a condition signal */</comment>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_sem_wait</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* We always notify the signal thread that we are done */</comment>
		<expr_stmt><expr><call><name>acl_sem_post</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Signal handshake complete */</comment>
		<expr_stmt><expr><operator>--</operator><name><name>cond</name><operator>-&gt;</operator><name>nsignal</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>--</operator><name><name>cond</name><operator>-&gt;</operator><name>waiting</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Lock the mutex, as is required by condition variable semantics */</comment>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wait on the condition variable forever */</comment>

<function><type><name>int</name></type> <name>acl_pthread_cond_wait</name><parameter_list>(<parameter><decl><type><name>acl_pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_pthread_cond_timedwait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !ACL_HAS_PTHREAD */</comment>
</unit>
