<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/unit_test/acl_test_outer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unit_test/acl_unit_test.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*---------------------------- ·ÖÎöÍâ²¿ÃüÁîÅäÖÃÐÐ --------------------------*/</comment>

<function><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_add_outer_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_add_outer_cmd"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: cmd_name=%s, ncount=%d, input error, "</literal>
				<literal type="string">"please check configure file"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>test_line</name> <operator>=</operator> <operator>(</operator><name>AUT_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>test_line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: can't malloc AUT_LINE, err_msg=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>line_number</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>result</name></name>      <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>argc</name></name>        <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>args_str</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>test_line</name><operator>-&gt;</operator><name>args_str</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: cmd_name=%s, strdup for "</literal>
					<literal type="string">"args_str, err_msg=%s"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>,
					<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>aut_parse_args_list</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: cmd_name=%s, aut_parse_args_list error"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>args_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>test_line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: cmd_name=%s, acl_array_append error, err_msg=%s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>valid_line_idx</name></name> <operator>=</operator> <name>var_aut_valid_line_idx</name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
