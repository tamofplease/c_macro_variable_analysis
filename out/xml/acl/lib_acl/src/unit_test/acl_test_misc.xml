<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/unit_test/acl_test_misc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unit_test/acl_unit_test.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_line_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>test_line</name> <operator>=</operator> <operator>(</operator><name>AUT_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AUT_LINE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>line_number</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>obj_type</name></name>  <operator>=</operator> <name>AUT_OBJ_OUTER</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aut_line_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name> <init>= <expr><operator>(</operator><name>AUT_LINE</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>test_line</name><operator>-&gt;</operator><name>args_str</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>args_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_free_args_list</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>&amp;&amp;</operator> <name><name>test_line</name><operator>-&gt;</operator><name>free_arg_inner</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>test_line</name><operator>-&gt;</operator><name>free_arg_inner</name></name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>aut_args_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_args_get"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_aut_line_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: var_aut_line_array=NULL"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>test_line</name> <operator>=</operator> <operator>(</operator><name>AUT_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aut_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aust_size"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_aut_line_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: var_aut_line_array=NULL"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_cfg_index"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_aut_line_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: var_aut_line_array=NULL"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>idx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>idx</name></expr></argument> &gt;</argument_list></name> <name>n</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: idx=%d, acl_array_size=%d, err_msg=invalid idx\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>test_line</name> <operator>=</operator> <operator>(</operator><name>AUT_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ±È½ÏËù¸øµÄÃüÁî×ÖÓëÅäÖÃÐÐÖÐµÄÃüÁî×ÖÊÇ·ñÏàµÈ */</comment>
<function><type><name>int</name></type> <name>aut_line_cmdcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_cmdcmp"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cmd_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ±È½Ï³ÌÐòÖ´ÐÐ½á¹ûÓëÅäÖÃÐÐÖÐµÄÆÚÍû½á¹ûÖµ */</comment>
<function><type><name>int</name></type> <name>aut_line_resultcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_resultcmp"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>test_line</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* È¡µÃ¸ÃÅäÖÃÐÐÔÚÅäÖÃÎÄ¼þÖÐµÄÐÐºÅ */</comment>
<function><type><name>int</name></type> <name>aut_line_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_number"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name><name>test_line</name><operator>-&gt;</operator><name>line_number</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aut_line_valid_linenum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name><name>test_line</name><operator>-&gt;</operator><name>valid_line_idx</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* È¡µÃ¸ÃÅäÖÃÐÐµÄÃüÁî×Ö */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aut_line_cmdname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_cmdname"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* È¡µÃ¸ÃÅäÖÃÐÐÖÐÅäÖÃ²ÎÊýµÄ¸öÊý */</comment>
<function><type><name>int</name></type> <name>aut_line_argc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_argc"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>test_line</name><operator>-&gt;</operator><name>argc</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aut_line_getvalue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_getvalue"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_ARG_ITEM</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>AUT_ARG_ITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>arg</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* È¡µÃ¸ÃÅäÖÃÐÐÖÐ²ÎÊýÄÚÈÝ  */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aut_line_argstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_argstr"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>test_line</name><operator>-&gt;</operator><name>args_str</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* È¡µÃ¸ÃÅäÖÃÐÐÖÐµÄÆÚÍû½á¹ûÖµ */</comment>
<function><type><name>int</name></type> <name>aut_line_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_result"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>test_line</name><operator>-&gt;</operator><name>result</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÅÐ¶ÏÊÇ·ñÍ£Ö¹¼ÌÐøÖ´ÐÐµÄÅäÖÃÐÐ */</comment>
<function><type><name>int</name></type> <name>aut_line_stop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_stop"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><name>VAR_AUT_STOP</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÅÐ¶ÏÊÇ·ñÊÇ±£ÁôÅäÖÃÐÐ */</comment>
<function><type><name>int</name></type> <name>aut_line_reserved</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_reserved"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><name>VAR_AUT_LOG</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ½«ÓÃ»§×Ô¼ºµÄ²ÎÊýÏî´æ´¢ÔÚ test_line ÄÚµÄ arg_inner ÖÐ */</comment>
<function><type><name>int</name></type> <name>aut_line_add_arg</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_add_arg"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_outer</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aut_line_del_arg</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_outer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_outer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>aut_line_get_arg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name><name>test_line</name><operator>-&gt;</operator><name>arg_outer</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aut_end_linenum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start_linenum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_end_linenum"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_aut_line_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: var_aut_line_array=NULL\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>test_line_start</name> <operator>=</operator> <call><name>aut_index</name><argument_list>(<argument><expr><name>start_linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>test_line_start</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>test_line_start</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><name>VAR_AUT_LOOP_BEGIN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>test_line_end</name> <operator>=</operator> <call><name>aut_loop_end</name><argument_list>(<argument><expr><name>test_line_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>aut_line_number</name><argument_list>(<argument><expr><name>test_line_end</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_lookup_from_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>dst_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>aut_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>aut_line_valid_linenum</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>dst_line</name> <operator>=</operator> <call><name>aut_index</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>dst_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>dst_line</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>dst_line</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
