<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/unit_test/acl_test_inner.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unit_test/acl_unit_test.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__if_nested_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__if_count</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/* static int _else_count = 0; */</comment>
<comment type="block">/* static int _elif_count = 0; */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__endif_count</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><specifier>static</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>__mkcmd_if</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>if_token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>__if_nested_count</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>if_token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>if_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>if_token</name><operator>-&gt;</operator><name>flag</name></name>         <operator>=</operator> <name>AUT_FLAG_IF</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>if_token</name><operator>-&gt;</operator><name>match_number</name></name> <operator>=</operator> <operator>++</operator><name>__if_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>if_token</name><operator>-&gt;</operator><name>peer</name></name>         <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>test_line</name> <operator>=</operator> <call><name>aut_line_new</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>if_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>free_arg_inner</name></name> <operator>=</operator> <name>acl_myfree_fn</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>__mkcmd_endif</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__mkcmd_endif"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>test_line_peer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>if_token</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>if_token_peer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>__if_nested_count</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>if_token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>if_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>if_token</name><operator>-&gt;</operator><name>flag</name></name>         <operator>=</operator> <name>AUT_FLAG_ENDIF</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>if_token</name><operator>-&gt;</operator><name>match_number</name></name> <operator>=</operator> <operator>++</operator><name>__endif_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>if_token</name><operator>-&gt;</operator><name>peer</name></name>         <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>test_line</name> <operator>=</operator> <call><name>aut_line_new</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>if_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>free_arg_inner</name></name> <operator>=</operator> <name>acl_myfree_fn</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>test_line_peer</name> <operator>=</operator> <operator>(</operator><name>AUT_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>test_line_peer</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>if_token_peer</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_line_peer</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>if_token_peer</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>AUT_FLAG_IF</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>if_token_peer</name><operator>-&gt;</operator><name>match_number</name></name> <operator>!=</operator> <name><name>if_token</name><operator>-&gt;</operator><name>match_number</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* ÕÒµ½Æ¥ÅäµÄÑ­»·¿ªÊ¼¶ÔµÈ½áµã */</comment>
		<expr_stmt><expr><name><name>if_token_peer</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <name>test_line</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>if_token</name><operator>-&gt;</operator><name>peer</name></name>      <operator>=</operator> <name>test_line_peer</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>if_token</name><operator>-&gt;</operator><name>peer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: line_number=%d, cmd=%s, "</literal>
				<literal type="string">"if_nested=%d, if_count=%d, "</literal>
				<literal type="string">"endif_count=%d, please check configure, "</literal>
				<literal type="string">"err_msg=not found peer loop begin"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>line_number</name></name></expr></argument>,
				<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><name>__if_nested_count</name></expr></argument>,
				<argument><expr><name>__if_count</name></expr></argument>, <argument><expr><name>__endif_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>__mkcmd_stop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>inner_token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>test_line</name> <operator>=</operator> <call><name>aut_line_new</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inner_token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>inner_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inner_token</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>AUT_FLAG_STOP</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>inner_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>free_arg_inner</name></name> <operator>=</operator> <name>acl_myfree_fn</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*---------------------------- ·ÖÎöÓëÄÚ²¿ÃüÁîÏàÆ¥ÅäµÄÅäÖÃÐÐ ---------------- */</comment>
<comment type="block">/* ÄÚ²¿±£ÁôµÄÃüÁîÏîÊý¾Ý½á¹¹¶¨Òå */</comment>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_name</name></decl>;</decl_stmt>
	<function_decl><type><name>AUT_LINE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>match_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>__MATCH_CMD</name>;</typedef>

<comment type="block">/* ÄÚ²¿±£ÁôµÄÃüÁî¶ÔÏó±í */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>__MATCH_CMD</name></type> <name><name>__inner_cmd_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>VAR_AUT_LOOP_BEGIN</name></expr>, <expr><name>aut_loop_make_begin</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_LOOP_BREAK</name></expr>, <expr><name>aut_loop_make_break</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_LOOP_END</name></expr>, <expr><name>aut_loop_make_end</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_IF</name></expr>, <expr><name>__mkcmd_if</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_ENDIF</name></expr>, <expr><name>__mkcmd_endif</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_STOP</name></expr>, <expr><name>__mkcmd_stop</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ´ÓÄÚ²¿ÃüÁî±íÖÐÈ¡µÃÏàÓ¦µÄ¶ÔÏó */</comment>

<function><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_add_inner_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_add_inner_cmd"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__MATCH_CMD</name> <modifier>*</modifier></type><name>pmatch_cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>inner_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>ncount</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s: ncount=%d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>ncount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>__inner_cmd_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pmatch_cmd</name> <operator>=</operator> <operator>&amp;</operator><name><name>__inner_cmd_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pmatch_cmd</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ÓÉÄÚ²¿ÃüÁî±£Áôº¯Êý¶¯Ì¬·ÖÅäÒ»¸öÏà¶ÔÓ¦µÄ
			 * AUT_LINE ¶ÔÏó
			 */</comment>
			<expr_stmt><expr><name>test_line</name> <operator>=</operator> <call><name><name>pmatch_cmd</name><operator>-&gt;</operator><name>match_fn</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>test_line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: cmd_name=%s, "</literal>
			<literal type="string">"acl_array_append error, err_msg=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÉèÖÃÓÐÐ§ÐÐºÅ */</comment>
	<expr_stmt><expr><name>inner_token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>inner_token</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>valid_line_idx</name></name> <operator>=</operator> <name>var_aut_valid_line_idx</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* µ÷ÕûÓÐÐ§ÐÐºÅ */</comment>
	<expr_stmt><expr><name><name>inner_token</name><operator>-&gt;</operator><name>valid_line_idx</name></name> <operator>=</operator> <name><name>test_line</name><operator>-&gt;</operator><name>valid_line_idx</name></name></expr>;</expr_stmt>

	<comment type="block">/* Ö»¶ÔÑ­»·ÃüÁîÆð×÷ÓÃ, ÉèÖÃÏà¶ÔÃüÁîÎ»ÒÆ */</comment>
	<expr_stmt><expr><name><name>inner_token</name><operator>-&gt;</operator><name>offset_valid_line_idx</name></name> <operator>=</operator> <name><name>inner_token</name><operator>-&gt;</operator><name>valid_line_idx</name></name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
