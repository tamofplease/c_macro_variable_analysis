<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/unit_test/acl_test_token.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unit_test/acl_unit_test.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>aut_line_peer_token</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_peer_token"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_peer</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>test_peer</name> <operator>=</operator> <call><name>aut_line_peer</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>test_peer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_peer</name><operator>-&gt;</operator><name>arg_inner</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_line_peer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_line_peer"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_peer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token_peer</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: input error"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ´Ó acl_test_line ÖÐÈ¡³öÒÔÇ°×¢²áµÄ²ÎÊý */</comment>
	<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>

	<comment type="block">/* È¡µÃÏàÅä¶ÔµÄµÄÖ¸Õë */</comment>
	<expr_stmt><expr><name>test_peer</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>peer</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>test_peer</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>test_peer</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: peers null, cmd_name=%s, err=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>,	<argument><expr><name>test_line</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>test_peer</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"test_line null"</literal></expr></then><else>: <expr><literal type="string">"arg_inner null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´Ó acl_test_line ÖÐÈ¡³öÒÔÇ°×¢²áµÄ²ÎÊý */</comment>
	<expr_stmt><expr><name>token_peer</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_peer</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>

	<comment type="block">/* ±È½Ï begin Óë end ÊÇ·ñÊÇÒ»¶Ô */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>token_peer</name><operator>-&gt;</operator><name>peer</name></name> <operator>!=</operator> <name>test_line</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: not peers"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>test_peer</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
