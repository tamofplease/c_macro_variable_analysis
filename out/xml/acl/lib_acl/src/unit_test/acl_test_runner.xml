<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/unit_test/acl_test_runner.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Util */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unit_test/acl_unit_test.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>var_aut_verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>__all_callback_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* forward declare */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__fn_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_stop</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__test_stop"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>aut_log_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Stop here, line=%d, cmd=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>aut_line_number</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>aut_line_cmdname</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÄÚ²¿Ë¯ÃßÃüÁîº¯Êý */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_sleep</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__test_sleep"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>sleep_second</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>aut_line_getvalue</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><name>VAR_AUT_ITEM_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s: can't get name=%s' value"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>VAR_AUT_ITEM_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>sleep_second</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>aut_log_info</name><argument_list>(<argument><expr><literal type="string">"%s: sleep %s seconds now!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>sleep_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sleep_second</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name>sleep_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÄÚ²¿ÔÝÍ£º¯Êý */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_pause</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__test_pause"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>aut_log_info</name><argument_list>(<argument><expr><literal type="string">"%s: PAUSE, exit when type Ctrl + c"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_loop_begin</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__test_loop_begin"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>aut_loop_count</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no loop count"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>aut_loop_from</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>to</name>   <operator>=</operator> <call><name>aut_loop_to</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): from(%d) &gt; to(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>stop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__fn_callback</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>stop</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_loop_break</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__test_loop_break"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>loop_end_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>num_break</name></decl>, <decl><type ref="prev"/><name>num_end</name></decl>;</decl_stmt> 

	<expr_stmt><expr><name>loop_end_line</name> <operator>=</operator> <call><name>aut_lookup_from_line</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><name>AUT_FLAG_LOOP_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>loop_end_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): failed, no loop end, line=%d, cmd=%d"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>aut_line_number</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>aut_line_cmdname</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>num_break</name> <operator>=</operator> <call><name>aut_line_valid_linenum</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_end</name>   <operator>=</operator> <call><name>aut_line_valid_linenum</name><argument_list>(<argument><expr><name>loop_end_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>num_break</name> <operator>&gt;=</operator> <name>num_end</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): failed, num_break(%d) &gt;= num_end(%d), "</literal>
				<literal type="string">"line=%d, cmd=%s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>num_break</name></expr></argument>, <argument><expr><name>num_end</name></expr></argument>,
				<argument><expr><call><name>aut_line_number</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>aut_line_cmdname</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>num_end</name> <operator>-</operator> <name>num_break</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_loop_end</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* not complete yet */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_if</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* not complete yet */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_else</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* not complete yet */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_endif</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* not complete yet */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__test_goto</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÄÚ²¿ÓÃ¶¯×÷ÃüÁî±í */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>AUT_FN_ITEM</name></type> <name><name>__inner_fn_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* ÓÃÀ´Í£Ö¹Ö´ÐÐÏÂÒ»²½²âÊÔ²Ù×÷ */</comment>
	<expr><block>{ <expr><name>VAR_AUT_STOP</name></expr>, <expr><literal type="string">"__test_stop"</literal></expr>, <expr><name>__test_stop</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_SLEEP</name></expr>, <expr><literal type="string">"__test_sleep"</literal></expr>, <expr><name>__test_sleep</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_PAUSE</name></expr>, <expr><literal type="string">"__test_pause"</literal></expr>, <expr><name>__test_pause</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>VAR_AUT_LOOP_BEGIN</name></expr>, <expr><literal type="string">"__test_loop_begin"</literal></expr>, <expr><name>__test_loop_begin</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_LOOP_BREAK</name></expr>, <expr><literal type="string">"__test_loop_break"</literal></expr>, <expr><name>__test_loop_break</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_LOOP_END</name></expr>, <expr><literal type="string">"__test_loop_end"</literal></expr>, <expr><name>__test_loop_end</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>VAR_AUT_IF</name></expr>, <expr><literal type="string">"__test_if"</literal></expr>, <expr><name>__test_if</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_ELSE</name></expr>, <expr><literal type="string">"__test_else"</literal></expr>, <expr><name>__test_else</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>VAR_AUT_ENDIF</name></expr>, <expr><literal type="string">"__testt_endif"</literal></expr>, <expr><name>__test_endif</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>VAR_AUT_GOTO</name></expr>, <expr><literal type="string">"__test_goto"</literal></expr>, <expr><name>__test_goto</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>AUT_FN_ITEM</name> <modifier>*</modifier></type><name>__lookup_fn_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__lookup_fn_item"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_FN_ITEM</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>__all_callback_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>AUT_FN_ITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>__all_callback_fn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): idx=%d, null rebuild from array"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>aut_line_cmdcmp</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>item</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>item</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__fn_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__fn_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_FN_ITEM</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): from(%d) &gt; to(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <name>to</name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>test_line</name> <operator>=</operator> <call><name>aut_index</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>__lookup_fn_item</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid cmd(%s), line=%d"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><call><name>aut_line_cmdname</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>aut_line_number</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>inner</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>item</name><operator>-&gt;</operator><name>fn_callback</name></name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>AUT_DEBUG</name></cpp:ifdef>
				<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): failed, line=%d, cmd=%s"</literal></expr></argument>,
						<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
						<argument><expr><call><name>aut_line_number</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name><name>item</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>stop</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>stop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>fn_callback</name></name> <operator>==</operator> <name>__test_stop</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>item</name><operator>-&gt;</operator><name>fn_callback</name></name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>aut_line_resultcmp</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): failed, line=%d, cmd=%s"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><call><name>aut_line_number</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name><name>item</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>stop</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>stop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>aut_log_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): success, function=%s, cmd=%s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name><name>item</name><operator>-&gt;</operator><name>fn_name</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>from</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aut_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_start"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>max</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__all_callback_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: please call aut_register first\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* È¡µÃËùÓÐÓÐÐ§ÅäÖÃÐÐµÄ×ÜºÍ */</comment>
	<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>aut_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): configure's size is null"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>__fn_callback</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_fn_item</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_FN_ITEM</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>(</operator><name>AUT_FN_ITEM</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aut_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>var_aut_line_array</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>, <argument><expr><name>aut_line_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>var_aut_line_array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>__all_callback_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>__all_callback_fn</name></expr></argument>, <argument><expr><name>free_fn_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__all_callback_fn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__add_fn_item</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>fn_tab</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AUT_FN_ITEM</name> <modifier>*</modifier></type><name>fn_item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__add_fn_item"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_FN_ITEM</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>AUT_FN_ITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AUT_FN_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>cmd_name</name></name>    <operator>=</operator> <name><name>fn_item</name><operator>-&gt;</operator><name>cmd_name</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>fn_name</name></name>     <operator>=</operator> <name><name>fn_item</name><operator>-&gt;</operator><name>fn_name</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>fn_callback</name></name> <operator>=</operator> <name><name>fn_item</name><operator>-&gt;</operator><name>fn_callback</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>arg</name></name>         <operator>=</operator> <name><name>fn_item</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>inner</name></name>       <operator>=</operator> <name>inner</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>fn_tab</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): array_append error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aut_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_FN_ITEM</name></type> <name><name>test_fn_tab</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__all_callback_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__all_callback_fn</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ÏÈÔö¼Ó×¢²áÄÚ²¿ÓÃÃüÁî */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>__inner_fn_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__add_fn_item</name><argument_list>(<argument><expr><name>__all_callback_fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>__inner_fn_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* ÔÙ×¢²áÍâ²¿´«À´µÄÃüÁîÈÎÎñ */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>test_fn_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__add_fn_item</name><argument_list>(<argument><expr><name>__all_callback_fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>test_fn_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
