<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/unit_test/acl_test_loop.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unit_test/acl_unit_test.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__loop_nested_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__loop_begin_count</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__loop_end_count</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_loop_make_begin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>loop_token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/* ¼ÇÊýÆ÷, ¶Ô loop_begin ±ê¼Ç¼ÇÊý¼Ó 1 */</comment>
	<expr_stmt><expr><name>__loop_begin_count</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* Ñ­»·¶ÔÇ¶Ì×¼Ó 1 */</comment>
	<expr_stmt><expr><name>__loop_nested_count</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>loop_token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>loop_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>flag</name></name>            <operator>=</operator> <name>AUT_FLAG_LOOP_BEGIN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>status</name></name>          <operator>=</operator> <name>AUT_STAT_FREE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>match_number</name></name>    <operator>=</operator> <name>__loop_nested_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>nloop_cur</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>nloop_max</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>nloop_cur</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>peer</name></name>            <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>test_line</name>                    <operator>=</operator> <call><name>aut_line_new</name><argument_list>(<argument><expr><name>cfg_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>obj_type</name></name>          <operator>=</operator> <name>AUT_OBJ_INNER</name></expr>;</expr_stmt>

	<comment type="block">/* ½« loop_token ×÷ÎªÄÚ²¿²ÎÊý´æ´¢ÔÚ test_line-&gt;arg_inner ÖÐ */</comment>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name>         <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>loop_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>free_arg_inner</name></name>   <operator>=</operator> <name>acl_myfree_fn</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>nloop_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ÖÎöÅäÖÃÐÐ²ÎÊý */</comment>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>aut_parse_args_list</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´ÓÅäÖÃÎÄ¼þÖÐÈ¡³öÒªÑ­»·µÄ´ÎÊý */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>aut_line_getvalue</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><name>VAR_AUT_ITEM_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>nloop_max</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>loop_token</name><operator>-&gt;</operator><name>nloop_max</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>nloop_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_loop_make_break</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_loop_make_break"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>break_line</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_line</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>begin_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>break_token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>begin_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>break_line</name> <operator>=</operator> <call><name>aut_line_new</name><argument_list>(<argument><expr><name>cfg_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>break_line</name><operator>-&gt;</operator><name>obj_type</name></name> <operator>=</operator> <name>AUT_OBJ_INNER</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>break_token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AUT_CMD_TOKEN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>break_token</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>AUT_FLAG_LOOP_BREAK</name></expr>;</expr_stmt>

	<comment type="block">/* ½« breaktoken ×÷ÎªÄÚ²¿²ÎÊý´æ´¢ÔÚ break_line-&gt;arg_inner ÖÐ */</comment>
	<expr_stmt><expr><name><name>break_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>break_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>break_line</name><operator>-&gt;</operator><name>free_arg_inner</name></name> <operator>=</operator> <name>acl_myfree_fn</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>begin_line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>begin_token</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>tmp_line</name> <operator>=</operator> <operator>(</operator><name>AUT_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): loop_begin null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp_line</name><operator>-&gt;</operator><name>obj_type</name></name> <operator>!=</operator> <name>AUT_OBJ_INNER</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>tmp_token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>tmp_line</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp_token</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>AUT_FLAG_LOOP_BEGIN</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>begin_line</name> <operator>=</operator> <name>tmp_line</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>begin_token</name> <operator>=</operator> <name>tmp_token</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>begin_line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>begin_token</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no LOOP_BEGIN before LOOP_BREAK"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>break_token</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <name>begin_line</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>break_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_loop_make_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"aut_loop_make_end"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>test_line_peer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>loop_token</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>loop_token_peer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<comment type="block">/* ¼ÇÊýÆ÷, ¶Ô loop_end ±ê¼Ç¼ÇÊý¼õ  1 */</comment>
	<expr_stmt><expr><name>__loop_end_count</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>loop_token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>loop_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>flag</name></name>   <operator>=</operator> <name>AUT_FLAG_LOOP_END</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>AUT_STAT_BUSY</name></expr>;</expr_stmt>

	<comment type="block">/* ÓëÇ°ÃæµÄ loop_begin ÏàÆ¥Åä */</comment>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>match_number</name></name> <operator>=</operator> <name>__loop_nested_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Ñ­»·¶ÔÇ¶Ì×¼õ 1 */</comment>
	<expr_stmt><expr><name>__loop_nested_count</name><operator>--</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>test_line</name> <operator>=</operator> <call><name>aut_line_new</name><argument_list>(<argument><expr><name>cfg_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>obj_type</name></name> <operator>=</operator> <name>AUT_OBJ_INNER</name></expr>;</expr_stmt>

	<comment type="block">/* ½« loop_token ×÷ÎªÄÚ²¿²ÎÊý´æ´¢ÔÚ test_line-&gt;arg_inner ÖÐ */</comment>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>loop_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_line</name><operator>-&gt;</operator><name>free_arg_inner</name></name> <operator>=</operator> <name>acl_myfree_fn</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ²éÕÒÓëÑ­»·½áÊø±êÖ¾ÏàÅä¶ÔµÄÑ­»·¿ªÊ¼¶ÔÏó */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>test_line_peer</name> <operator>=</operator> <operator>(</operator><name>AUT_LINE</name> <operator>*</operator><operator>)</operator>
				<call><name>acl_array_index</name><argument_list>(<argument><expr><name>var_aut_line_array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* xxx: ²»Ó¦¸Ã·¢Éú´ËÖÖÇé¿ö, ³ý·Ç¶¯Ì¬Êý×é³öÁË¹ÊÕÏ */</comment>
		<if_stmt><if>if <condition>(<expr><name>test_line_peer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* ÏÈÅÐ¶ÏÊÇ·ñÊÇÄÚ²¿¶ÔÏó */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>test_line_peer</name><operator>-&gt;</operator><name>obj_type</name></name> <operator>!=</operator> <name>AUT_OBJ_INNER</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* ÏÈ²é¿´ÊÇ·ñÓÐÄÚ²¿Êý¾Ý²ÎÊý´æ´¢ÔÚ test_line_peer ÖÐ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>test_line_peer</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>loop_token_peer</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_line_peer</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>

		<comment type="block">/* ¿´¸Ã loopbegin ¶ÔÏóÊÇ·ñÒÑ¾­±» Ò»¸ö loopend ¶ÔÏó¸øÆ¥ÅäÁË */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>loop_token_peer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>AUT_STAT_BUSY</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* ÊÇ·ñÊÇ Ñ­»·¿ªÊ¼±êÖ¾, ÒÔÅÐ¶ÏÊÇ·ñÊÇÒ»¸öÑ­»·µÄ¿ªÊ¼ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>loop_token_peer</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>AUT_FLAG_LOOP_BEGIN</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* ±È½ÏÆ¥ÅäÐÐºÅÊÇ·ñÏàµÈ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>loop_token_peer</name><operator>-&gt;</operator><name>match_number</name></name> <operator>!=</operator> <name><name>loop_token</name><operator>-&gt;</operator><name>match_number</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* ÕÒµ½Æ¥ÅäµÄÑ­»·¿ªÊ¼¶ÔµÈ½áµã */</comment>
		<expr_stmt><expr><name><name>loop_token_peer</name><operator>-&gt;</operator><name>peer</name></name>   <operator>=</operator> <name>test_line</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>loop_token_peer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>AUT_STAT_BUSY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>loop_token</name><operator>-&gt;</operator><name>peer</name></name>        <operator>=</operator> <name>test_line_peer</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>loop_token</name><operator>-&gt;</operator><name>peer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>aut_log_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: line_number=%d, cmd=%s, "</literal>
				<literal type="string">"loop_nested=%d, loop_begin=%d, "</literal>
				<literal type="string">"loop_end=%d, please check configure, "</literal>
				<literal type="string">"err_msg=not found peer loop begin"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>line_number</name></name></expr></argument>,
				<argument><expr><name><name>test_line</name><operator>-&gt;</operator><name>cmd_name</name></name></expr></argument>, <argument><expr><name>__loop_nested_count</name></expr></argument>,
				<argument><expr><name>__loop_begin_count</name></expr></argument>, <argument><expr><name>__loop_end_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>test_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*-------------------------- ÓëÃüÁîÑ­»·Ïà¹ØµÄº¯Êý½Ó¿Ú ----------------------*/</comment>
<function><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>aut_loop_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_begin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>test_begin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><call><name>aut_line_peer</name><argument_list>(<argument><expr><name>test_begin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aut_loop_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>AUT_FLAG_LOOP_BEGIN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>nloop_max</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>AUT_FLAG_LOOP_END</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>aut_line_peer_token</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>AUT_FLAG_LOOP_BEGIN</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>nloop_max</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aut_loop_from</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_begin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>AUT_FLAG_LOOP_BEGIN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>test_begin</name> <operator>=</operator> <name>test_line</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>AUT_FLAG_LOOP_END</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>test_begin</name> <operator>=</operator> <call><name>aut_line_peer</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_begin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>test_begin</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_begin</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>AUT_FLAG_LOOP_BEGIN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>aut_line_valid_linenum</name><argument_list>(<argument><expr><name>test_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>ret</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aut_loop_to</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AUT_CMD_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AUT_LINE</name> <modifier>*</modifier></type><name>test_end</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_line</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>AUT_FLAG_LOOP_END</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>test_end</name> <operator>=</operator> <name>test_line</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>AUT_FLAG_LOOP_BEGIN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>test_end</name> <operator>=</operator> <call><name>aut_line_peer</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>test_end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>test_end</name><operator>-&gt;</operator><name>arg_inner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><name>AUT_CMD_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>test_end</name><operator>-&gt;</operator><name>arg_inner</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>AUT_FLAG_LOOP_END</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>aut_line_valid_linenum</name><argument_list>(<argument><expr><name>test_end</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
