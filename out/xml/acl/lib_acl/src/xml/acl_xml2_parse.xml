<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/xml/acl_xml2_parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code/acl_xmlcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xml/acl_xml2.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DOCTYPE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(ptr) == 'd' || *(ptr) == 'D')  \
	&amp;&amp; (*(ptr + 1) == 'o' || *(ptr + 1) == 'O')  \
	&amp;&amp; (*(ptr + 2) == 'c' || *(ptr + 2) == 'C')  \
	&amp;&amp; (*(ptr + 3) == 't' || *(ptr + 3) == 'T')  \
	&amp;&amp; (*(ptr + 4) == 'y' || *(ptr + 4) == 'Y')  \
	&amp;&amp; (*(ptr + 5) == 'p' || *(ptr + 5) == 'P')  \
	&amp;&amp; (*(ptr + 5) == 'E' || *(ptr + 6) == 'E'))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ID</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(ptr) == 'i' || *(ptr) == 'I')  \
	&amp;&amp; (*(ptr + 1) == 'd' || *(ptr + 1) == 'D'))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_QUOTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == '\"' || (x) == '\'')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == ' ' || (c) == '\t' || (c) == '\r' || (c) == '\n')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_WHILE</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ while(*(ptr) &amp;&amp; (cond)) (ptr)++; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_SPACE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ while(IS_SPACE(*(ptr))) (ptr)++; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>		<cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>		<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>END</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>acl_vstring_end((x)-&gt;vbuf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>ACL_VSTRING_ADDCH((x)-&gt;vbuf, (ch))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>APPEND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>acl_vstring_strcat((x)-&gt;vbuf, (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>TERM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>ACL_VSTRING_TERMINATE((x)-&gt;vbuf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NO_SPACE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>acl_vbuf_eof(&amp;((x)-&gt;vbuf-&gt;vbuf))</cpp:value></cpp:define>

<comment type="block">/* ×´Ì¬»úÊý¾Ý½á¹¹ÀàÐÍ */</comment>

<struct>struct <name>XML_STATUS_MACHINE</name> <block>{
	<comment type="block" format="doxygen">/**&lt; ×´Ì¬Âë */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<comment type="block" format="doxygen">/**&lt; ×´Ì¬»ú´¦Àíº¯Êý */</comment>
	<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>callback</name>) <parameter_list>(<parameter><decl><type><name>ACL_XML2</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_parse_check_self_closed</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_LEAF</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_xml2_tag_leaf</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_F_LEAF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_SELF_CL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>==</operator> <literal type="char">'/'</literal>
		    <operator>||</operator> <call><name>acl_xml2_tag_selfclosed</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_F_SELF_CL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_next_left_lt</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SKIP_WHILE</name><argument_list>(<argument><expr><operator>*</operator><name>data</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_LLT</name></expr>;</expr_stmt>
	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_left_lt</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_LCH</name></expr>;</expr_stmt>
	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_left_ch</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>  <name>ch</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_LEM</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_F_META_QM</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_MTAG</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_LTAG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_left_em</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_F_META_CM</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_MCMT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_F_META_EM</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_MTAG</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_cdata</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>curr_node</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal>
				<operator>&amp;&amp;</operator> <name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_MEND</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
					<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>curr_node</name><operator>-&gt;</operator><name>text</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>data</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>TERM</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CDATA_SIZE</name></cpp:macro>	<cpp:value>(sizeof("[CDATA[") - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IS_CDATA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(x) == '[' \
	&amp;&amp; (*(x + 1) == 'C' || *(x + 1) == 'c') \
	&amp;&amp; (*(x + 2) == 'D' || *(x + 2) == 'd') \
	&amp;&amp; (*(x + 3) == 'A' || *(x + 3) == 'a') \
	&amp;&amp; (*(x + 4) == 'T' || *(x + 4) == 't') \
	&amp;&amp; (*(x + 5) == 'A' || *(x + 5) == 't') \
	&amp;&amp; *(x + 6) == '[')</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_meta_tag</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>CDATA_SIZE</name>
			<operator>&amp;&amp;</operator> <call><name>IS_CDATA</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
				<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_CDATA</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_F_CDATA</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
				<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_MTXT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_meta_attr_name</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>name_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_meta_attr_value</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>xml</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_QUOTE</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>quote</name></name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_XML_DECODE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_xml_decode</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip one byte */</comment>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_meta_attr</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>dummy</name></name> <operator>||</operator> <operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>acl_xml2_attr_alloc</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>xml_meta_attr_name</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>xml_meta_attr_value</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_meta_text</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_QUOTE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>nlt</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>nlt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
				<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_MEND</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_META_QM</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>last</name> <operator>&gt;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
						<operator>(</operator><name>last</name> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>xml_meta_attr</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>nlt</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ACL_XML2_S_MEND</name>
		<operator>&amp;&amp;</operator> <operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_XML_DECODE</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_xml_decode</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> 
			<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip one byte */</comment>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_meta_comment</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_QUOTE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>nlt</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>nlt</name></name> <operator>==</operator> <literal type="number">0</literal>
				<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>
				<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
					<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_MEND</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>nlt</name></name><operator>--</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>nlt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ACL_XML2_S_MEND</name>
		<operator>&amp;&amp;</operator> <operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_XML_DECODE</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <operator>!</operator><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_xml_decode</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
			<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip one byte */</comment>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_meta_end</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* meta ±êÇ©ÊÇ×Ô¹Ø±ÕÀàÐÍ£¬Ö±½ÓÌøÖÁÓÒ±ß '&gt;' ´¦ÀíÎ»ÖÃ */</comment>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_RGT</name></expr>;</expr_stmt>
	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_left_tag</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
				<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>xml_parse_check_self_closed</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_SELF_CL</name><operator>)</operator>
				<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag_size</name></name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag_size</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_RGT</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_LGT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
				<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_ATTR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_attr</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>curr_attr</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SKIP_WHILE</name><argument_list>(<argument><expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'='</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>xml_parse_check_self_closed</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_SELF_CL</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_RGT</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_LGT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>curr_attr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <operator>*</operator><name>data</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* ´Ë´¦·µ»Øºó»á´¥·¢±¾º¯ÊýÔÙ´Î±»µ÷ÓÃ£¬µ±ÏÂÒ»¸ö×Ö½ÚÎª '&gt;' Ê±£¬
		 * ÉÏÃæÍ¨¹ýµ÷ÓÃ xml_parse_check_self_closed ¼ì²éÊÇ·ñÎª×Ô·â±Õ
		 * ±êÇ©: "/&gt;"
		 */</comment>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>acl_xml2_attr_alloc</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>curr_attr</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_AVAL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_attr_val</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>curr_attr</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_QUOTE</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
					<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_ATTR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>xml_parse_check_self_closed</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_SELF_CL</name><operator>)</operator>
				<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_RGT</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_LGT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_ATTR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* ËµÃ÷ÊôÐÔÖµ»¹Î´½âÎöÍê£¬ÐèÒª¼ÌÐø½âÎö */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ACL_XML2_S_AVAL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* µ±×´Ì¬·¢Éú¸Ä±äÊ±£¬ÔòËµÃ÷ÊôÐÔÖµÒÑ¾­Íê±Ï */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_XML_DECODE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_xml_decode</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>attr</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip one byte */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«¸Ã±êÇ©IDºÅÓ³ÉäÖÁ¹þÏ£±íÖÐ£¬ÒÔ±ãÓÚ¿ìËÙ²éÑ¯ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ID</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* ·ÀÖ¹ÖØ¸´ID±»²åÈëÏÖÏó */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>id_table</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>id_table</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* µ±¸ÃÊôÐÔ±»¼ÓÈë¹þÏ£±íºó²Å»á¸³ÓÚ½Úµã id */</comment>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ±ØÐë½«¸Ã½ÚµãµÄµ±Ç°ÊôÐÔ¶ÔÏóÖÃ¿Õ£¬ÒÔ±ãÓÚ¼ÌÐø½âÎöÊ±
	 * ¿ÉÒÔ´´½¨ÐÂµÄÊôÐÔ¶ÔÏó
	 */</comment>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>curr_attr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_left_gt</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>last_ch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_TXT</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_text</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
				<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_RLT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ACL_XML2_S_RLT</name>
		<operator>&amp;&amp;</operator> <operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_XML_DECODE</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
		<operator>&amp;&amp;</operator> <operator>!</operator><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>txt</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_xml_decode</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
			<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>txt</name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>txt</name> <operator>&gt;=</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>*</operator><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>txt</name><operator>--</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>text_size</name></name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_right_lt</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt> 

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* get: "&lt;/" */</comment>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_RTAG</name></expr>;</expr_stmt>

		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_LEAF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="block">/* XXX: some error ? */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_TXT</name></expr>;</expr_stmt>

		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ËµÃ÷Óöµ½ÁËµ±Ç°½ÚµãµÄ×Ó½Úµã */</comment>

	<comment type="block">/* ÖØÐÂÉèÖÃµ±Ç°½Úµã×´Ì¬£¬ÒÔ±ãÓÚÆä±»×Ó½Úµãµ¯³öÊ±¿ÉÒÔÕÒµ½ "&lt;/" */</comment>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_TXT</name></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨ÐÂµÄ×Ó½Úµã£¬²¢½«Æä¼ÓÈëÖÁµ±Ç°½ÚµãµÄ×Ó½Úµã¼¯ºÏÖÐ */</comment>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>acl_xml2_node_alloc</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml2_node_add_child</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name><name>xml</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_LLT</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÒòÎª¸Ã¸¸½ÚµãÆäÊµÎªÒ¶½Úµã£¬ËùÒÔÐèÒª¸üÐÂ¸½ÊôÓÚ¸ÃÎ±¸¸½ÚµãµÄ
 * ×Ó½ÚµãµÄÉî¶ÈÖµ£¬¶¼Ó¦Óë¸ÃÎ±¸¸½ÚµãÏàÍ¬
 */</comment> 
<function><type><specifier>static</specifier> <name>void</name></type> <name>update_children_depth</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>parent</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <operator>(</operator><name>ACL_XML2_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update_children_depth</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* ²éÕÒÓëÓÒ±êÇ©ÏàÍ¬µÄ¸¸½Úµã */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>search_match_node</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>parent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>nodes</name> <init>= <expr><call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_xml2_node_parent</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>parent</name> <operator>!=</operator> <name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_strcasecmp</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>rtag</name></name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>rtag</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>APPEND</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>rtag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_RGT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_xml2_node_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>nodes</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>ACL_XML2_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_F_LEAF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update_children_depth</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_xml2_node_add_child</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_right_tag</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>curr_node</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* after: "&lt;/" */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>rtag</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>rtag</name></name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>rtag</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>rtag_size</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>
				<operator>(</operator><call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>curr_node</name><operator>-&gt;</operator><name>rtag</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_RGT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>ACL_XML2_S_RGT</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_strcasecmp</name><argument_list>(<argument><expr><name><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name><name>curr_node</name><operator>-&gt;</operator><name>rtag</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_IGNORE_SLASH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>search_match_node</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Èç¹û½Úµã±êÇ©ÃûÓë¿ªÊ¼±êÇ©Ãû²»Æ¥Åä£¬
			 * ÔòÐèÒª¼ÌÐøÑ°ÕÒÕæÕýµÄ½áÊø±êÇ©
			 */</comment> 
			<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>text</name></name> <operator>=</operator> <call><name>END</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>APPEND</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name><name>curr_node</name><operator>-&gt;</operator><name>rtag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ÖØÐÂÉèÖÃµ±Ç°½Úµã×´Ì¬£¬ÒÔ±ãÓÚÆä¿ÉÒÔÕÒµ½ "&lt;/" */</comment>
			<expr_stmt><expr><name><name>curr_node</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_XML2_S_TXT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_parse_right_gt</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* µ±Ç°½Úµã·ÖÎöÍê±Ï£¬ÐèÒªµ¯³öµ±Ç°½ÚµãµÄ¸¸½Úµã¼ÌÐø·ÖÎö */</comment>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>acl_xml2_node_parent</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_META</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>root_cnt</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>XML_STATUS_MACHINE</name></name></type> <name><name>status_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>ACL_XML2_S_NXT</name></expr>,   <expr><name>xml_parse_next_left_lt</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_LLT</name></expr>,   <expr><name>xml_parse_left_lt</name></expr>      }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_LGT</name></expr>,   <expr><name>xml_parse_left_gt</name></expr>      }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_LCH</name></expr>,   <expr><name>xml_parse_left_ch</name></expr>      }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_LEM</name></expr>,   <expr><name>xml_parse_left_em</name></expr>      }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_LTAG</name></expr>,  <expr><name>xml_parse_left_tag</name></expr>     }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_RLT</name></expr>,   <expr><name>xml_parse_right_lt</name></expr>     }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_RGT</name></expr>,   <expr><name>xml_parse_right_gt</name></expr>     }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_RTAG</name></expr>,  <expr><name>xml_parse_right_tag</name></expr>    }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_ATTR</name></expr>,  <expr><name>xml_parse_attr</name></expr>         }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_AVAL</name></expr>,  <expr><name>xml_parse_attr_val</name></expr>     }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_TXT</name></expr>,   <expr><name>xml_parse_text</name></expr>         }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_MTAG</name></expr>,  <expr><name>xml_parse_meta_tag</name></expr>     }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_MTXT</name></expr>,  <expr><name>xml_parse_meta_text</name></expr>    }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_MCMT</name></expr>,  <expr><name>xml_parse_meta_comment</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_MEND</name></expr>,  <expr><name>xml_parse_meta_end</name></expr>     }</block></expr>,
	<expr><block>{ <expr><name>ACL_XML2_S_CDATA</name></expr>, <expr><name>xml_parse_cdata</name></expr>        }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_xml2_update</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_xml2_update"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_MULTI_ROOT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>root_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* XML ½âÎöÆ÷×´Ì¬»úÑ­»·´¦Àí¹ý³Ì */</comment>

	<while>while <condition>(<expr><operator>*</operator><name>data</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_MULTI_ROOT</name><operator>)</operator>
				<operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>root_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <call><name>acl_xml2_node_alloc</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_xml2_node_add_child</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name><name>xml</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>status_tab</name><index>[<expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>status</name></name></expr>]</index></name><operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>NO_SPACE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: space not enougth!"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>
</unit>
