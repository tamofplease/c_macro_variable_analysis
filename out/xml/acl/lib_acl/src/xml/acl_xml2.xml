<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/xml/acl_xml2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_dbuf_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xml/acl_xml2.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

<function><type><name>ACL_XML2_ATTR</name> <modifier>*</modifier></type><name>acl_xml2_attr_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML2_ATTR</name><operator>*</operator><operator>)</operator>
		<call><name>acl_dbuf_pool_calloc</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_XML2_ATTR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>node</name></name>       <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name>       <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>name_size</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name>      <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>quote</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>backslash</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>attr_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>attr_cnt</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ACL_XML2_NODE</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>(</operator>struct <name>ACL_XML2_NODE</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ACL_XML2_NODE</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>(</operator>struct <name>ACL_XML2_NODE</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>acl_xml2_node_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML2_NODE</name><operator>*</operator><operator>)</operator>
		<call><name>acl_dbuf_pool_calloc</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_XML2_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>xml</name></name>       <operator>=</operator> <name>xml</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>status</name></name>    <operator>=</operator> <name>ACL_XML2_S_NXT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name>      <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rtag</name></name>      <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ltag_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rtag_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name>      <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>dummy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>text_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>attr_list</name></name> <operator>=</operator> <call><name>acl_array_dbuf_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>node_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>node_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>node_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>node_iter_prev</name></expr>;</expr_stmt>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_xml2_node_delete</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node_next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node_next</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>acl_xml2_node_delete</name><argument_list>(<argument><expr><name>node_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>id_table</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>attr_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>attr_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>attr_cnt</name></name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>attr_cnt</name></name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name><operator>--</operator></expr>;</expr_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_node_append</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node1</name></decl></parameter>, <parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node1</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node2</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node2</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>node1</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node1</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_node_add_child</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>acl_xml2_node_parent</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>acl_xml2_node_next</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name> <init>= <expr><call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>acl_xml2_node_prev</name><parameter_list>(<parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name> <init>= <expr><call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>xml_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name><operator>==</operator> <operator>&amp;</operator><name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>xml_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ACL_XML2_NODE</name></name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator>struct <name>ACL_XML2_NODE</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<comment type="block">/* ÏÈ±éÀúµ±Ç°½ÚµãµÄ×Ó½Úµã */</comment>

	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°½ÚµãµÄ×Ó½Úµã±éÀúÍê±Ï£¬ÔÙ±éÀúµ±Ç°½ÚµãµÄÐÖµÜ½Úµã */</comment>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_xml2_node_parent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°½ÚµãµÄÐÖµÜ½Úµã±éÀúÍê±Ï£¬×îºó±éÀúµ±Ç°½ÚµãµÄ¸¸½ÚµãµÄÐÖµÜ½Úµã */</comment>

	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_xml2_node_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): parent null"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>,
					<argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
			<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition>;</do>

	<comment type="block">/* ±éÀúÍêËùÓÐ½Úµã */</comment>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>xml_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name><operator>==</operator> <operator>&amp;</operator><name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>xml_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ACL_XML2_NODE</name></name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator>struct <name>ACL_XML2_NODE</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<comment type="block">/* ÏÈ±éÀúµ±Ç°½ÚµãµÄ×Ó½Úµã */</comment>

	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°½ÚµãµÄ×Ó½Úµã±éÀúÍê±Ï£¬ÔÙ±éÀúµ±Ç°½ÚµãµÄÐÖµÜ½Úµã */</comment>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_xml2_node_parent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°½ÚµãµÄÐÖµÜ½Úµã±éÀúÍê±Ï£¬×îºó±éÀúµ±Ç°½ÚµãµÄ¸¸½ÚµãµÄÐÖµÜ½Úµã */</comment>

	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_xml2_node_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): parent null"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>,
					<argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
			<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition>;</do>

	<comment type="block">/* ±éÀúÍêËùÓÐ½Úµã */</comment>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_multi_root</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_FLAG_MULTI_ROOT</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_XML2_FLAG_MULTI_ROOT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_slash</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ignore</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_FLAG_IGNORE_SLASH</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator><operator>~</operator><name>ACL_XML2_FLAG_IGNORE_SLASH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_decode_enable</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_FLAG_XML_DECODE</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_XML2_FLAG_XML_DECODE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_encode_enable</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_XML2_FLAG_XML_ENCODE</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator><operator>~</operator><name>ACL_XML2_FLAG_XML_ENCODE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>acl_xml2_mmap_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_len</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>init_len</name></decl></parameter>, <parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_xml2_mmap_alloc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>filepath</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: open %s error: %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>xml</name> <operator>=</operator> <call><name>acl_xml2_mmap_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>init_len</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xml</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_file_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* save the fd will be closed in acl_vstring_free */</comment>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

	<return>return <expr><name>xml</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>acl_xml2_mmap_fd</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_len</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>init_len</name></decl></parameter>, <parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vbuf</name> <init>= <expr><call><name>acl_vstring_mmap_alloc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>max_len</name></expr></argument>,
		<argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>init_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>xml</name> <operator>=</operator> <call><name>acl_xml2_dbuf_alloc</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf_inner</name></name> <operator>=</operator> <name>vbuf</name></expr>;</expr_stmt>
	<return>return <expr><name>xml</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>acl_xml2_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>ACL_VBUF_FLAG_FIXED</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>acl_xml2_dbuf_alloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>acl_xml2_dbuf_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vbuf</name></decl></parameter>, <parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <call><name>acl_dbuf_pool_create</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>xml</name> <operator>=</operator> <operator>(</operator><name>ACL_XML2</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_calloc</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_XML2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>xml</name> <operator>=</operator> <operator>(</operator><name>ACL_XML2</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_calloc</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_XML2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>fd</name></name>         <operator>=</operator> <name>ACL_FILE_INVALID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf</name></name>       <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name>       <operator>=</operator> <name>vbuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf_inner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>dummy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>   <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf_keep</name></name>  <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_XML2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name>       <operator>=</operator> <name>ACL_XML2_FLAG_MULTI_ROOT</name> <operator>|</operator>
			  <name>ACL_XML2_FLAG_XML_ENCODE</name> <operator>|</operator>
			  <name>ACL_XML2_FLAG_XML_DECODE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>iter_head</name></name>  <operator>=</operator> <name>xml_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>iter_next</name></name>  <operator>=</operator> <name>xml_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>iter_tail</name></name>  <operator>=</operator> <name>xml_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>iter_prev</name></name>  <operator>=</operator> <name>xml_iter_prev</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>id_table</name></name>   <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>root</name></name>       <operator>=</operator> <call><name>acl_xml2_node_alloc</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name>   <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>attr_cnt</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>xml</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_xml2_space</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_space_clear</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_xml2_free</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>  <name>node_cnt</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>id_table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <name>ACL_FILE_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>acl_file_close</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf_inner</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf_inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dbuf_pool_destroy</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf_inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>node_cnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_reset</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_htable_reset</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>id_table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dbuf_pool_reset</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf_inner</name></name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>dbuf_keep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>root</name></name>      <operator>=</operator> <call><name>acl_xml2_node_alloc</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>depth</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name>  <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>root_cnt</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>attr_cnt</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_xml2_foreach_init</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>xml_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>xml_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>xml_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>xml_iter_prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_xml2_is_closure</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<comment type="block">/* »ñµÃ xml-&gt;root ½ÚµãµÄ×îºóÒ»¸öÒ»¼¶×Ó½Úµã */</comment>
	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>xml</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷Ã»ÓÐÕæÊµ×Ó½Úµã */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_XML2_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_SELF_CL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷¸Ã½ÚµãÊÇ×Ô±ÕºÏ½Úµã */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ACL_XML2_S_RGT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ËµÃ÷×îºóÒ»¸öÒ»¼¶×Ó½Úµã»¹Î´´¦ÀíÍê±Ï */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_xml2_is_complete</name><parameter_list>(<parameter><decl><type><name>ACL_XML2</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>last_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xml</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_FLAG_MULTI_ROOT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>xml</name><operator>-&gt;</operator><name>root_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>xml-&gt;root</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_XML2_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML2_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_META</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>last_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>last_node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* ËµÃ÷Ã»ÓÐÕæÊµ×Ó½Úµã */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>last_node</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_XML2_F_SELF_CL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* ËµÃ÷¸Ã½ÚµãÊÇ×Ô±ÕºÏ½Úµã */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>last_node</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>ACL_XML2_S_RGT</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* ËµÃ÷×îºóÒ»¸öÒ»¼¶×Ó½Úµã»¹Î´´¦ÀíÍê±Ï */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>last_node</name><operator>-&gt;</operator><name>rtag</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ËµÃ÷ xml ÖÐµÄ×îºóÒ»¸ö½ÚµãÓëËù¸ø±êÇ©²»Æ¥Åä */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
