<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/aio/acl_aio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio/acl_aio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_dns.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../event/events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>acl_aio_check</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>aio_delay_check</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_free</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_aio_free2</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_free2</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_dns_close</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_check</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep</name> <operator>&amp;&amp;</operator> <name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_free</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>dead_streams</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>acl_aio_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_aio_create2</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>acl_aio_create2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nMsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>event_mode</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_EVENT_KERNEL</name></expr>:</case>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>acl_event_new_kernel</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_SELECT</name></expr>:</case>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>acl_event_new_select</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_POLL</name></expr>:</case>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>acl_event_new_poll</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_WMSG</name></expr>:</case>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>acl_event_new_wmsg</name><argument_list>(<argument><expr><name>nMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): event_mode(%d) not support"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* avoid compiling warning */</comment>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><call><name>acl_aio_create3</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>acl_aio_create3</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_AIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>tid</name></name>          <operator>=</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name>        <operator>=</operator> <name>event</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>delay_sec</name></name>    <operator>=</operator> <call><name>acl_event_get_delay_sec</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>delay_usec</name></name>   <operator>=</operator> <call><name>acl_event_get_delay_usec</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>keep_read</name></name>    <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>rbuf_size</name></name>    <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name>   <operator>=</operator> <call><name>acl_event_mode</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>dead_streams</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>fdsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>aio</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_aio_dns</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_set_dns</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dns_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>dns_list</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dns_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>dns_list</name></expr></argument>, <argument><expr><literal type="string">",; \t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid dns_list=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>dns_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name> <operator>=</operator> <call><name>acl_dns_create</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_dns_create error=%s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* acl_dns_check_dns_ip(aio-&gt;dns); */</comment>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>tokens</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>port</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>++</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">53</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_dns_add_dns</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_del_dns</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dns_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>dns_list</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dns_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>dns_list</name></expr></argument>, <argument><expr><literal type="string">",; \t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid dns_list=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>dns_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>tokens</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>port</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>++</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">53</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_dns_del_dns</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_clear_dns</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_dns_clear_dns</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_event_mode</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_get_keep_read</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>aio</name><operator>-&gt;</operator><name>keep_read</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_set_keep_read</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>=</operator> <name>onoff</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_get_delay_sec</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name><name>aio</name><operator>-&gt;</operator><name>delay_sec</name></name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_get_delay_usec</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>aio</name><operator>-&gt;</operator><name>delay_usec</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_set_delay_sec</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>delay_sec</name></name> <operator>=</operator> <name>delay_sec</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_set_delay_sec</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_set_delay_usec</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>delay_usec</name></name> <operator>=</operator> <name>delay_usec</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_set_delay_usec</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_set_check_inter</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_inter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>&amp;&amp;</operator> <name>check_inter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_set_check_inter</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>check_inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_loop</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>	
	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>&amp;&amp;</operator> <name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_loop</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>aio_delay_check</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_last_nready</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>aio</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>acl_event_last_nready</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_aio_event</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_set_rbuf_size</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rbuf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>rbuf_size</name></name> <operator>=</operator> <name>rbuf_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>

<function><type><name>acl_int64</name></type> <name>acl_aio_request_timer</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>timer_fn</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>idle_limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_request_timer"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>aio</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>timer_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>timer_fn</name></expr></argument>, <argument><expr><name>context</name></expr></argument>,
			<argument><expr><name>idle_limit</name></expr></argument>, <argument><expr><name>keep</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_aio_cancel_timer</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>timer_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_cancel_timer"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>aio</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>timer_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_event_cancel_timer</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>timer_fn</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_keep_timer</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_keep_timer"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>aio</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_event_keep_timer</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_timer_ifkeep</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_timer_ifkeep"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>aio</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>acl_event_timer_ifkeep</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
