<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/aio/acl_aio_write.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio/acl_aio.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>WRITE_SAFE_ENABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>callback</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (((x)-&gt;flag &amp; ACL_AIO_FLAG_ISWR) == 0) {  \
		(x)-&gt;flag |= ACL_AIO_FLAG_ISWR;  \
		acl_event_enable_write((x)-&gt;aio-&gt;event, (x)-&gt;stream,  \
			(x)-&gt;timeout, callback, (x));  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_SAFE_DIABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (((x)-&gt;flag &amp; ACL_AIO_FLAG_ISWR) != 0) {  \
		(x)-&gt;flag &amp;= ~ACL_AIO_FLAG_ISWR;  \
		(x)-&gt;can_write_fn = NULL;  \
		(x)-&gt;can_write_ctx = NULL;  \
		acl_event_disable_write((x)-&gt;aio-&gt;event, (x)-&gt;stream);  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_IOCP_CLOSE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	WRITE_SAFE_DIABLE((x));  \
	(x)-&gt;flag |= ACL_AIO_FLAG_IOCP_CLOSE;  \
	acl_aio_iocp_close((x));  \
} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_complete_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Á÷ÒýÓÃ¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Á÷±»Òì³£¹Ø±Õ */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>write_handles</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AIO_WRITE_HOOK</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

		<comment type="block">/* ±ØÐë½«¸÷¸ö»Øµ÷¾ä±ú´Ó»Øµ÷¶ÓÁÐÖÐÒ»Ò»Ìá³öÖÃÈëÒ»¸öµ¥¶À¶ÓÁÐÖÐ,
		 * ÒòÎª ACL_AIO ÔÚ»Øµ÷¹ý³ÌÖÐÓÐ¿ÉÄÜ·¢ÉúÇ¶Ì×£¬·ÀÖ¹±»ÖØ¸´µ÷ÓÃ
		 */</comment>

		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name><name>astream</name><operator>-&gt;</operator><name>write_handles</name><operator>-&gt;</operator><name>pop_back</name></name><argument_list>(
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_handles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name><name>astream</name><operator>-&gt;</operator><name>writer_fifo</name><operator>.</operator><name>push_back</name></name><argument_list>(
					<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>writer_fifo</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>&amp;astream-&gt;writer_fifo</argument>)</argument_list></macro> <block>{<block_content>
			<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>AIO_WRITE_HOOK</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* »Øµ÷Ð´³É¹¦×¢²áº¯Êý */</comment>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
				<return>return <expr><name>ret</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ³¢ÊÔ·¢ËÍÁ÷Ð´¶ÓÁÐÀïµÄÊý¾Ý£¬·µ»ØÖµÎªÐ´¶ÓÁÐÀï»¹Ê£ÓàµÄÊý¾Ý³¤¶È»òÐ´Ê§°Ü */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__try_fflush</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__try_fflush"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Õë¶ÔÐ´¶ÓÁÐ£¬Ò²Ðíµ÷ÓÃ writev »á¸üºÃ£¬Ó¦¸ÃÄÇ¸öÐ´µÄÐ§ÂÊ»á¸ü¸ßÐ©
	 * --- zsx */</comment>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÌáÈ¡Á÷Ð´¶ÓÁÐµÄÊý¾ÝÍ·²¿·Ö */</comment>
		<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>acl_fifo_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>write_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ËµÃ÷Ð´¶ÓÁÐÒÑ¾­Îª¿Õ */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: write_left(%d) != 0"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ¼ÆËã±¾Êý¾Ý¿éµÄ³¤¶È¼°Êý¾Ý¿ªÊ¼Î»ÖÃ, write_offset ½öÊÇ±¾Êý¾Ý¿é
		 * µÄÏà¶ÔÎ»ÖÃ, ¼´Ïà¶ÔÓÚÊý¾Ý¿éµÄÆðÊ¼Î»ÖÃµÄÏà¶Ô³¤¶È£¬ËùÒÔ dlen
		 * ½öÊÇ±¾Êý¾Ý¿éÖÐÔÚ±¾´ÎÐ´²Ù×÷ÐèÒª±»Ð´µÄÊý¾ÝµÄ³¤¶È£»¶ø
		 * write_left ÔòÊÇÈ«¾ÖÐÔµÄ£¬ÊÇÕû¸öÐ´¶ÓÁÐµÄÊý¾Ý³¤¶È£¬ÐèÒª½«¸Ã
		 * ÕâÁ½¸ö±äÁ¿Çø·Ö¿ª£¬½«À´Ò²ÐíÓ¦¸Ã½« write_offset Ò²Éè¶¨ÎªÈ«¾Ö
		 * ÐÔµÄ¡£--- zsx :)
		 */</comment>

		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>astream</name><operator>-&gt;</operator><name>write_offset</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>astream</name><operator>-&gt;</operator><name>write_offset</name></name></expr>;</expr_stmt>
		<comment type="block">/* ¿ªÊ¼½øÐÐ·Ç×èÈûÊ½Ð´²Ù×÷ */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_write</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* ±¾´ÎÐ´²Ù×÷Î´Ð´ÈëÊý¾Ý£¬½öÐèÒª·µ»ØÊ£ÓàÊý¾Ý³¤¶È¼´¿É */</comment>
			<return>return <expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ÖØÐÂ¼ÆËãÐ´¶ÓÁÐÀïÊ£ÓàÊý¾ÝµÄ×Ü³¤¶È */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>dlen</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Î´ÄÜ½«±¾Êý¾Ý¿éµÄ¿ÉÐ´Êý¾ÝÈ«²¿Ð´Èë£¬ËùÒÔÐèÒªÖØÐÂ¼ÆËã
			 * ¸ÃÊý¾Ý¿éµÄ¿ÉÐ´Êý¾ÝµÄÏà¶ÔÆ«ÒÆÎ»ÖÃ
			 */</comment>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<return>return <expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ½«±¾Êý¾Ý¿é´ÓÐ´¶ÓÁÐÖÐÌÞ³ý²¢ÊÍ·Å¸ÃÊý¾Ý¿éËùÕ¼µÄÄÚ´æ */</comment>

		<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>write_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ÖØÖÃ write_offset ÒÔÎªÐ´ÈëÏÂÒ»¸öÊý¾Ý¿é×ö×¼±¸, ½«À´¸Ã±äÁ¿
		 * ×÷ÎªÐ´¶ÓÁÐµÄÏà¶ÔÆ«ÒÆ±äÁ¿ºó»á¸üºÃÐ©. --- zsx
		 */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/* Èç¹û±¾ÂÖÐ´¶ÓÁÐ²Ù×÷µÄÑ­»·´ÎÊý¹ý¶à£¬ÔòÓ¦·µ»Ø£¬ÒÔ¸øÆäËüµÄÊý¾Ý
		 * Á¬½Ó¿É¶ÁÐ´µÄ»ú»á, ±ðÍüÁË£¬ÔÚµ¥Ïß³ÌÌõ¼þÏÂ½øÐÐ·Ç×èÈûÐ´Ê±¿ÉÄÜ
		 * »áÓÐºÜ¶àÊý¾ÝÁ¬½ÓÐèÒª±»´¦Àí£¬×ÜÖ®£¬Êý¾ÝÃæÇ°´ó¼ÒÆ½µÈ:)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: write_left=%d, loop=%d"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Á÷³ö´í»òÁ÷¿ÉÐ´Ê±´¥·¢ÁËÁ÷µÄÐ´ÊÂ¼þ´¦Àíº¯Êý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__writen_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__write_notify_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name> <init>= <expr><operator>(</operator><name>ACL_ASTREAM</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>nleft</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WRITE_SAFE_DIABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Á÷·¢ÉúÁË´íÎó£¬Æô¶¯IOÍê³ÉÑÓ³Ù¹Ø±Õ¹Ø±Õ */</comment>
		<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ð´²Ù×÷³¬Ê±£¬ÈôÓÃ»§µÄ»Øµ÷º¯Êý·µ»Ø -1 Ôò²ÉÓÃ IO Íê³ÉÑÓ³Ù
		 * ¹Ø±Õ¹ý³Ì */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>aio_timeout_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ¸ÃÁ÷Õý´¦ÓÚIOÑÓ³Ù¹Ø±Õ×´Ì¬£¬Òò±¾´ÎÐ´IOÒÑ¾­³É¹¦Íê³É£¬
			 * ËùÒÔÐèÒªÍê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
			 */</comment>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* ËµÃ÷ÓÃ»§Ï£Íû¼ÌÐøµÈ´ýÐ´ÊÂ¼þ */</comment>
			<expr_stmt><expr><call><name>WRITE_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>__writen_notify_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_WRITE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown event: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ³¢ÊÔ·¢ËÍÁ÷µÄÐ´¶ÓÁÐÀïµÄÊý¾Ý */</comment>
	<expr_stmt><expr><name>nleft</name> <operator>=</operator> <call><name>__try_fflush</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nleft</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ³¢ÊÔÐ´Ê§°ÜÔòÆô¶¯IOÍê³ÉÑÓ³Ù¹ý³Ì */</comment>
		<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nleft</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ö®Ç°Á÷µÄÐ´¶ÓÁÐÎª¿Õ»òÒÑ¾­³É¹¦Çå¿ÕÁËÐ´¶ÓÁÐÀïµÄËùÓÐÊý¾Ý */</comment>
		<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ÓÃ»§Ï£Íû¹Ø±Õ¸ÃÁ÷£¬ÔòÆô¶¯IOÍê³ÉÑÓ³Ù¹Ø±Õ¹ý³Ì */</comment>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Ö®Ç°¸ÃÁ÷ÒÑ¾­±»ÉèÖÃÁËIOÍê³ÉÑÓ³Ù¹Ø±Õ±êÖ¾Î»£¬
			 * ÔòÔÙ´ÎÆô¶¯IOÍê³ÉÑÓ³Ù¹Ø±Õ¹ý³Ì
			 */</comment>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* ËµÃ÷Ð´¶ÓÁÐÀïµÄÊý¾ÝÎ´·¢ËÍÍê±Ï£¬ÐèÒªÔÙ´Î·¢ËÍ£¬ËùÒÔ½«Ð´ÊÂ¼þÖÃ
		 * ÈëÊÂ¼þ¼à¿ØÖÐ */</comment>
		<expr_stmt><expr><call><name>WRITE_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>__writen_notify_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_writen</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_writen"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_AIO_FLAG_DELAY_CLOSE</name> <operator>|</operator> <name>ACL_AIO_FLAG_DEAD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«Ç¶Ì×¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Ç¶Ì×²ã´ÎÌ«Éî¶øÊ¹Õ»Òç³ö */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name> <operator>&gt;=</operator> <name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* µÝ¹éÐ´´ÎÊý´ïµ½ÁË·§Öµ£¬Ö»Ðè¼Ç¸ö¾¯¸æÐÅÏ¢£¬ÒòÎªÓÐÇ¶Ì×ÏÞÖÆ */</comment>
		<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write_nested(%d) &gt;= max(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name></expr></argument>,
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* Èç¹ûÇ¶Ì×µ÷ÓÃ´ÎÊýÐ¡ÓÚ·§Öµ£¬ÔòÔÊÐí½øÐÐÇ¶Ì×µ÷ÓÃ */</comment>
	<comment type="block">/* ÏÈ³¢ÊÔÐ´Á÷µÄÐ´¶ÓÁÐÖÐµÄÊý¾Ý */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>__try_fflush</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷³¢ÊÔÐ´Ê§°Ü£¬ÐèÒª¹Ø±ÕÁ÷ */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* __try_fflush ²¢Î´È«²¿Ð´ÍêÐ´¶ÓÁÐµÄËùÓÐµÄÊý¾Ý£¬ËùÒÔ
		 * Ò²ÐèÒª±¾´ÎµÄÊý¾ÝÈ«²¿¼ÓÈëÁ÷µÄÐ´¶ÓÁÐÖÐ
		 */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* __try_fflush ·µ»Ø 0, ¶ÓÁÐÖÐÊý¾ÝÒÑ¾­Çå¿Õ£¬¿ÉÒÔÕæÕýµ÷ÓÃÒ»´ÎÐ´²Ù×÷ */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>acl_vstream_write</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>dlen</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* ËµÃ÷ÒÑ¾­³É¹¦Ð´ÈëÁËÈ«²¿µÄÊý¾Ý */</comment>

		<if_stmt><if>if <condition>(<expr><call><name>write_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>

			<comment type="block">/* µ÷ÓÃÕßÏ£Íû¹Ø±ÕÁ÷ */</comment>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>

			<comment type="block">/* ÒòÎª±¾´ÎÐ´IOÒÑ¾­³É¹¦Íê³É£¬ËùÒÔÐèÒª
			 * Íê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
			 */</comment>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ÈôÎ´Ð´ÈÎºÎÊý¾ÝÇÒÕï¶Ï¸ÃÁ÷µÄ¶ÔµÈµã²¢Î´¹Ø±Õ£¬
		 * Ôò½«´Ë´ÎÊý¾ÝÖÃÈë¸ÃÁ÷µÄÐ´¶ÓÁÐÖÐ
		 */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ñÔò£¬½ûÖ¹¼ÌÐøÇ¶Ì×£¬½«Ð´ÊÂ¼þÖÃÓÚÊÂ¼þ¼à¿ØÖÐ£¬´Ó¶ø¼õÉÙÇ¶Ì×²ã´Î */</comment>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/* XXX: In acl_vstring_memcpy, vstring_extend should not be called */</comment>

	<comment type="block">/* ½«Êý¾ÝÖÃÈë¸ÃÁ÷µÄÐ´¶ÓÁÐÖÐ */</comment>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>dlen</name> <operator>-</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>dlen</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>write_fifo</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name> <operator>+=</operator> <name>dlen</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>

	<comment type="block">/* ½«¸ÃÁ÷µÄÐ´ÊÂ¼þÖÃÈëÊÂ¼þ¼à¿ØÖÐ */</comment>
	<expr_stmt><expr><call><name>WRITE_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>__writen_notify_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_vfprintf</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_vfprintf"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_AIO_FLAG_DELAY_CLOSE</name> <operator>|</operator> <name>ACL_AIO_FLAG_DEAD</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>__default_line_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_vsprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«Ç¶Ì×¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Ç¶Ì×²ã´ÎÌ«Éî¶øÊ¹Õ»Òç³ö */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name> <operator>&gt;=</operator> <name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* µÝ¹éÇ¶Ì×Ð´´ÎÊý´ïµ½ÁË¹æ¶¨µÄ·§Öµ£¬Ö»Ðè¼Ç¸ö¾¯¸æÐÅÏ¢¼´¿É£¬
		 * ÒòÎªÓÐÇ¶Ì×ÏÞÖÆ */</comment>
		<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: write_nested(%d) &gt;= max(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name></expr></argument>,
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* Èç¹ûÇ¶Ì×µ÷ÓÃ´ÎÊýÐ¡ÓÚ·§Öµ£¬ÔòÔÊÐí½øÐÐÇ¶Ì×µ÷ÓÃ */</comment>
	<comment type="block">/* ÏÈ³¢ÊÔÐ´Á÷µÄÐ´¶ÓÁÐÖÐµÄÊý¾Ý */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>__try_fflush</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷³¢ÊÔÐ´Ê§°Ü£¬ÐèÒª¹Ø±ÕÁ÷ */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* __try_fflush ·µ»ØµÄÊÇ¶ÓÁÐÖÐµÄÊý¾ÝÒÑ¾­Çå¿Õ£¬
		 * ±¾´Î¿ÉÒÔÕæÕýµ÷ÓÃÒ»´ÎÐ´²Ù×÷
		 */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_write</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Èç¹ûÎ´Ð´ÈÎºÎÊý¾ÝÇÒÕï¶Ï¸ÃÁ÷µÄ¶ÔµÈµã²¢Î´¹Ø±Õ£¬
			 * Ôò½«´Ë´ÎÊý¾ÝÖÃÈë¸ÃÁ÷µÄÐ´¶ÓÁÐÖÐ
			 */</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ËµÃ÷ÒÑ¾­³É¹¦Ð´ÈëÁËÈ«²¿µÄÊý¾Ý */</comment>

			<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>write_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* µ÷ÓÃÕßÏ£Íû¹Ø±ÕÁ÷ */</comment>
				<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<comment type="block">/* ÒòÎª±¾´ÎÐ´IOÒÑ¾­³É¹¦Íê³É£¬ËùÒÔÐèÒª
				 * Íê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì */</comment>
				<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* Ö»ÊÇ³É¹¦Ð´ÈëÁË²¿·ÖÁ÷£¬n ±íÊ¾»¹Ê£ÓàµÄÊý¾Ý³¤¶È */</comment>
	<else>else <block>{<block_content>
		<comment type="block">/* __try_fflush ²¢Î´È«²¿Ð´ÍêÐ´¶ÓÁÐµÄËùÓÐµÄÊý¾Ý£¬ËùÒÔÒ²
		 * ÐèÒª±¾´ÎµÄÊý¾ÝÈ«²¿¼ÓÈëÁ÷µÄÐ´¶ÓÁÐÖÐ
		 */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* ·ñÔò£¬½ûÖ¹¼ÌÐøÇ¶Ì×£¬½«Ð´ÊÂ¼þÖÃÓÚÊÂ¼þ¼à¿ØÖÐ£¬´Ó¶ø¼õÉÙÇ¶Ì×²ã´Î */</comment>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_memmove</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«Êý¾ÝÖÃÈë¸ÃÁ÷µÄÐ´¶ÓÁÐÖÐ */</comment>
	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>write_fifo</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«¸ÃÁ÷µÄÐ´ÊÂ¼þÖÃÈëÊÂ¼þ¼à¿ØÖÐ */</comment>
	<expr_stmt><expr><call><name>WRITE_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>__writen_notify_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_fprintf</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_vfprintf</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_writev</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_writev"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_AIO_FLAG_DELAY_CLOSE</name> <operator>|</operator> <name>ACL_AIO_FLAG_DEAD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«Ç¶Ì×¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Ç¶Ì×²ã´ÎÌ«Éî¶øÊ¹Õ»Òç³ö */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name> <operator>&gt;=</operator> <name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* µÝ¹éÇ¶Ì×Ð´´ÎÊý´ïµ½ÁË¹æ¶¨µÄ·§Öµ£¬Ö»Ðè¼Ç¸ö¾¯¸æÐÅÏ¢¼´¿É£¬
		 * ÒòÎªÓÐÇ¶Ì×ÏÞÖÆ */</comment>
		<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write_nested(%d) &gt;= max(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name></expr></argument>,
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if>

	<comment type="block">/* Èç¹ûÇ¶Ì×µ÷ÓÃ´ÎÊýÐ¡ÓÚ·§Öµ£¬ÔòÔÊÐí½øÐÐÇ¶Ì×µ÷ÓÃ */</comment>
	<comment type="block">/* ÏÈ³¢ÊÔÐ´Á÷µÄÐ´¶ÓÁÐÖÐµÄÊý¾Ý */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>__try_fflush</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷³¢ÊÔÐ´Ê§°Ü£¬ÐèÒª¹Ø±ÕÁ÷ */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* __try_fflush ²¢Î´È«²¿Ð´ÍêÐ´¶ÓÁÐµÄËùÓÐµÄÊý¾Ý£¬ËùÒÔÒ²
		 * ÐèÒª±¾´ÎµÄÊý¾ÝÈ«²¿¼ÓÈëÁ÷µÄÐ´¶ÓÁÐÖÐ
		 */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* __try_fflush ·µ»ØµÄÊÇ¶ÓÁÐÖÐµÄÊý¾ÝÒÑ¾­Çå¿Õ£¬
	 * ±¾´Î¿ÉÒÔÕæÕýµ÷ÓÃÒ»´ÎÐ´²Ù×÷
	 */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>acl_vstream_writev</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>vector</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>

		<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Èç¹ûÎ´Ð´ÈÎºÎÊý¾ÝÇÒÕï¶Ï¸ÃÁ÷µÄ¶ÔµÈµã²¢Î´¹Ø±Õ£¬
		 * Ôò½«´Ë´ÎÊý¾ÝÖÃÈë¸ÃÁ÷µÄÐ´¶ÓÁÐÖÐ
		 */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ÆËãÊ£ÓàµÄÎ´·¢ËÍµÄÊý¾Ý³¤¶È */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* written */</comment>
			<expr_stmt><expr><name>n</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* partially written */</comment>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* µ÷ÓÃÕßÏ£Íû¹Ø±ÕÁ÷ */</comment>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ÒòÎª±¾´ÎÐ´IOÒÑ¾­³É¹¦Íê³É£¬ËùÒÔÐèÒªÍê³ÉÁ÷µÄIOÑÓ³Ù
			 * ¹Ø±Õ¹ý³Ì */</comment>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ñÔò£¬½ûÖ¹¼ÌÐøÇ¶Ì×£¬½«Ð´ÊÂ¼þÖÃÓÚÊÂ¼þ¼à¿ØÖÐ£¬´Ó¶ø¼õÉÙÇ¶Ì×²ã´Î */</comment>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/* ¼ÆËãÊ£ÓàµÄÊý¾Ý×Ü³¤¶È */</comment>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skipt this */</comment>

	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* ½«Êý¾ÝÖÃÈë¸ÃÁ÷µÄÐ´¶ÓÁÐÖÐ */</comment>

	<comment type="block">/* ÏÈ·ÖÅäÒ»¸ö×ã¹»´óµÄ»º³åÇøÒÔÄÜÈÝÏÂËùÓÐµÄÊ£ÓàµÄÊý¾Ý */</comment>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>dlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
	<expr_stmt><expr><call><name>acl_vstring_memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>+</operator> <name>n</name></expr></argument>,
		<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>write_fifo</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>

	<comment type="block">/* ½«¸ÃÁ÷µÄÐ´ÊÂ¼þÖÃÈëÊÂ¼þ¼à¿ØÖÐ */</comment>
	<expr_stmt><expr><call><name>WRITE_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>__writen_notify_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_aio_send_pending</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;astream-&gt;write_fifo</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>astream</name><operator>-&gt;</operator><name>write_offset</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>-=</operator> <name><name>astream</name><operator>-&gt;</operator><name>write_offset</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>can_write_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"can_write_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name> <init>= <expr><operator>(</operator><name>ACL_ASTREAM</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WRITE_SAFE_DIABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>aio_timeout_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ¸ÃÁ÷Õý´¦ÓÚIOÑÓ³Ù¹Ø±Õ×´Ì¬£¬ÒòÎª±¾´Î¶ÁIOÒÑ¾­³É¹¦Íê³É£¬
			* ËùÒÔÐèÒªÍê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
			*/</comment>
			<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>WRITE_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>can_write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>can_write_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): can_write_fn null for astream(%p)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>astream</name><operator>-&gt;</operator><name>can_write_fn</name></name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>can_write_ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WRITE_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>acl_aio_enable_write</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_NOTIFY_FN</name></type> <name>can_write_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_AIO_FLAG_DELAY_CLOSE</name> <operator>|</operator> <name>ACL_AIO_FLAG_DEAD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>can_write_fn</name></name> <operator>=</operator> <name>can_write_fn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>can_write_ctx</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WRITE_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>can_write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_disable_write</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISWR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_AIO_FLAG_ISWR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>can_write_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>can_write_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_disable_write</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_iswset</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_iswset"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>astream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_event_iswset</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
