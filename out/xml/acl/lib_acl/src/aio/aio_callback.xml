<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/aio/aio_callback.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio/acl_aio.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>aio_timeout_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÐèÒª½«»º³åÇøÇå¿Õ£¬ÒÔ·À±»ÖØ¸´ÀûÓÃ */</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Á÷ÒýÓÃ¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Á÷±»Òì³£¹Ø±Õ */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>timeo_handles</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_FIFO</name></type> <name>timeo_handles</name></decl>;</decl_stmt>

		<comment type="block">/* XXX: ±ØÐë½«¸÷¸ö»Øµ÷¾ä±ú´Ó»Øµ÷¶ÓÁÐÖÐÒ»Ò»Ìá³öÖÃÈëÒ»¸öµ¥¶À¶ÓÁÐÖÐ,
		 * ÒòÎª ACL_AIO ÔÚ»Øµ÷¹ý³ÌÖÐÓÐ¿ÉÄÜ·¢ÉúÇ¶Ì×£¬·ÀÖ¹±»ÖØ¸´µ÷ÓÃ
		 */</comment>

		<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeo_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;timeo_handles</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>AIO_TIMEO_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_TIMEO_HOOK</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeo_handles</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>AIO_TIMEO_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeo_handles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
				<return>return <expr><name>ret</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aio_close_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ÐèÒª½«»º³åÇøÇå¿Õ£¬ÒÔ·À±»ÖØ¸´ÀûÓÃ */</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Á÷ÒýÓÃ¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Á÷±»Òì³£¹Ø±Õ */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>close_handles</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_FIFO</name></type> <name>close_handles</name></decl>;</decl_stmt>

		<comment type="block">/* XXX: ±ØÐë½«¸÷¸ö»Øµ÷¾ä±ú´Ó»Øµ÷¶ÓÁÐÖÐÒ»Ò»Ìá³öÖÃÈëÒ»¸öµ¥¶À¶ÓÁÐÖÐ,
		 * ÒòÎª ACL_AIO ÔÚ»Øµ÷¹ý³ÌÖÐÓÐ¿ÉÄÜ·¢ÉúÇ¶Ì×£¬·ÀÖ¹±»ÖØ¸´µ÷ÓÃ
		 */</comment>

		<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>close_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;close_handles</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>AIO_CLOSE_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_CLOSE_HOOK</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>close_handles</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>AIO_CLOSE_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>close_handles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* xxx: ¹Ø±Õ»Øµ÷½öÄÜ±»µ÷ÓÃÒ»´Î */</comment>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
