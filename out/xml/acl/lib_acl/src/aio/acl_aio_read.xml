<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/aio/acl_aio_read.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio/acl_aio.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../event/events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_SAFE_ENABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>callback</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (((x)-&gt;flag &amp; ACL_AIO_FLAG_ISRD) == 0) {  \
		(x)-&gt;flag |= ACL_AIO_FLAG_ISRD;  \
		acl_event_enable_read((x)-&gt;aio-&gt;event, (x)-&gt;stream,  \
			(x)-&gt;timeout, callback, (x));  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_SAFE_DISABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (((x)-&gt;flag &amp; ACL_AIO_FLAG_ISRD) != 0) {  \
		(x)-&gt;flag &amp;= ~ACL_AIO_FLAG_ISRD;  \
		(x)-&gt;can_read_fn = NULL;  \
		(x)-&gt;can_read_ctx = NULL;  \
		acl_event_disable_read((x)-&gt;aio-&gt;event, (x)-&gt;stream);  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_SAFE_ENABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>callback</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (((x)-&gt;flag &amp; ACL_AIO_FLAG_ISRD) == 0) {  \
		(x)-&gt;flag |= ACL_AIO_FLAG_ISRD;  \
		(x)-&gt;aio-&gt;event-&gt;enable_read_fn((x)-&gt;aio-&gt;event,  \
			(x)-&gt;stream, (x)-&gt;timeout, callback, (x));  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_SAFE_DISABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (((x)-&gt;flag &amp; ACL_AIO_FLAG_ISRD) != 0) {  \
		(x)-&gt;flag &amp;= ~ACL_AIO_FLAG_ISRD;  \
		(x)-&gt;can_read_fn = NULL;  \
		(x)-&gt;can_read_ctx = NULL;  \
		(x)-&gt;aio-&gt;event-&gt;disable_read_fn((x)-&gt;aio-&gt;event, (x)-&gt;stream);  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>READ_IOCP_CLOSE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	READ_SAFE_DISABLE((x));  \
	(x)-&gt;flag |= ACL_AIO_FLAG_IOCP_CLOSE;  \
	acl_aio_iocp_close((x));  \
} while (0)</cpp:value></cpp:define>

<comment type="block">/* Í³Ò»µÄ¶ÁÊÂ¼þ´¦Àí»Øµ÷½Ó¿Ú */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>main_read_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name> <init>= <expr><operator>(</operator><name>ACL_ASTREAM</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* µ÷ÓÃ __gets_notify_callback/__read_notify_callback/__readn_notify_callback */</comment>

	<expr_stmt><expr><call><name><name>astream</name><operator>-&gt;</operator><name>event_read_callback</name></name><argument_list>(<argument><expr><name>event_type</name></expr></argument>, <argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_complete_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ±ØÐë½«»º´æÇø¸´Î»£¬·ñÔòÔÚÏÂÒ»´Î¶ÁÊÂ¼þ(ÈçÓÐÊý¾Ý»ò³ö´í)´¥·¢Ê±£¬
	 * ÒòÎªÉÏÊöµÄ if (astream-&gt;count &lt;= n) {} ¶øµ¼ÖÂ fatal
	 * ---2008.11.5, zsx
	 */</comment>
	<comment type="block">/* ÐèÒª½«»º³åÇøÇå¿Õ£¬ÒÔ·À±»ÖØ¸´ÀûÓÃ */</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Á÷ÒýÓÃ¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Á÷±»Òì³£¹Ø±Õ */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>read_handles</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AIO_READ_HOOK</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

		<comment type="block">/* XXX: ±ØÐë½«¸÷¸ö»Øµ÷¾ä±ú´Ó»Øµ÷¶ÓÁÐÖÐÒ»Ò»Ìá³öÖÃÈëÒ»¸öµ¥¶À¶ÓÁÐÖÐ,
		 * ÒòÎª ACL_AIO ÔÚ»Øµ÷¹ý³ÌÖÐÓÐ¿ÉÄÜ·¢ÉúÇ¶Ì×£¬·ÀÖ¹±»ÖØ¸´µ÷ÓÃ
		 */</comment>

		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name><name>astream</name><operator>-&gt;</operator><name>read_handles</name><operator>-&gt;</operator><name>pop_back</name></name><argument_list>(
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_handles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name><name>astream</name><operator>-&gt;</operator><name>reader_fifo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>reader_fifo</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>&amp;astream-&gt;reader_fifo</argument>)</argument_list></macro> <block>{<block_content>
			<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>AIO_READ_HOOK</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
				<return>return <expr><name>ret</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ³¢ÊÔÐÔ¶ÁÒ»ÐÐÊý¾Ý
 * @param astream {ACL_ASTREAM*}
 * @return {int} ·µ»ØÖµ
 *  -1: ±íÊ¾³ö´í£¬»òÏ£Íû¹Ø±ÕÁ÷
 *   0: ±íÊ¾Êý¾ÝÎ´×¼±¸ºÃ»òÓÃ»§ÉèÖÃÁË·ÇÁ¬Ðø¶Á
 *   1: ±íÊ¾Êý¾ÝÒÑ×¼±¸ºÃ£¬ÇÒÒÑ¾­µ÷ÓÃ¹ýÒ»´ÎÓÃ»§µÄ»Øµ÷º¯ÊýÇÒÓÃ»§Ï£Íû¼ÌÐø¶Á
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__gets_peek</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>astream</name><operator>-&gt;</operator><name>read_ready_fn</name></name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name>
			<operator>||</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EAGAIN</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<block>{<block_content>
			<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* XXX: ±ØÐë²é¿´»º³åÇøÖÐÊÇ·ñ»¹ÓÐÊý¾Ý,
		 * ±ØÐë¼æÈÝÊý¾Ý¶Á²»¹»µÄÇé¿ö!
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>read_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* ¶Á³ö´í£¬ÐèÒª¹Ø±ÕÁ÷ */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ready</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* »Øµ÷ÓÃ»§µÄ¶ÁÐÐ³É¹¦´¦Àíº¯Êý */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* µ±ÓÃ»§Ï£Íû¹Ø±ÕÁ÷»ò¸ÃÁ÷Õý´¦ÓÚÑÓ³Ù¹Ø±Õ×´Ì¬£¬ÔòÐèÒªµ÷ÓÃ
		 * Á÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal>
			 <operator>||</operator> <operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISRD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>len</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Î´¶Áµ½ËùÒªÇóµÄÒ»ÐÐÊý¾Ý£¬¼ÌÐø¼à¿Ø¸ÃÁ÷µÄ¶ÁÐÐÊÂ¼þ */</comment>
	<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÓÉÊÂ¼þ¼à¿Ø¹ý³Ì»Øµ÷´¥·¢µÄ¶ÁÐÐÊÂ¼þ´¦Àí¹ý³Ì */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__gets_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__gets_notify_callback"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>READ_SAFE_DISABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¸ÃÁ÷³ö´í£¬µ«ÊÇÓÐ¿ÉÄÜ¹Ø±ÕµÄÊÂ¼þÍ¨Öªµ½´ïÊ±Á÷ÒÀÈ»¿É¶Á£¬
		 * ÔòÓ¦¸Ã±£Ö¤¶ÁÓÅÏÈ£¬Ö±µ½°Ñ²Ù×÷ÏµÍ³»º³åÇøÖÐµÄÊý¾Ý¶ÁÍê
		 * ÎªÖ¹£¬×îºóÔÙ´¦Àí¹Ø±ÕÊÂ¼þ£¬¼´¹Ø±ÕÁ÷
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__gets_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¶ÁÁ÷³¬Ê±£¬Èç¹ûÓ¦ÓÃ·µ»ØÖµ´óÓÚµÈÓÚ0£¬ÔòÏ£Íû¼ÌÐø¶Á,
		 * Èç¹û·µ»ØÖµÐ¡ÓÚ0ÔòÏ£Íû¹Ø±ÕÁ÷¡£ÓÐÈË»áÓÐÕâÖÖÐèÇóÂð£¿
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>aio_timeout_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ¸ÃÁ÷Õý´¦ÓÚIOÑÓ³Ù¹Ø±Õ×´Ì¬£¬ÒòÎª±¾´Î¶ÁIOÒÑ¾­
			 * ³É¹¦Íê³É£¬ËùÒÔÐèÒªÍê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
			 */</comment>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_READ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown event: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ³¢ÊÔÐÔµØ¶ÁÊý¾Ý */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>__gets_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Òì²½¶ÁÒ»ÐÐÊý¾Ý
 * @param astream {ACL_ASTREAM*}
 * @param nonl {int} ÊÇ·ñ×Ô¶¯È¥µôÎ²²¿µÄ \r\n
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__aio_gets</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__aio_gets"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: astream-&gt;stream null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÉèÖÃ¶ÁÁ÷º¯Êý */</comment>
	<if_stmt><if>if <condition>(<expr><name>nonl</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_ready_fn</name></name> <operator>=</operator> <name>acl_vstream_gets_nonl_peek</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_ready_fn</name></name> <operator>=</operator> <name>acl_vstream_gets_peek</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>line_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name><name>astream</name><operator>-&gt;</operator><name>line_length</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>event_read_callback</name></name> <operator>=</operator> <name>__gets_notify_callback</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«Ç¶Ì×¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Ç¶Ì×²ã´ÎÌ«Éî¶øÊ¹Õ»Òç³ö */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* µ±Âú×ã»Øµ÷Ìõ¼þÊ±£¬ÓÐ¿ÉÄÜÊÇ´ÓÏµÍ³»º³åÇøÖÐ¶ÁÈ¡Êý¾Ý£¬Ò²ÓÐ¿ÉÄÜ´ÓÓÃ»§
	 * »º³åÇø¶ÁÊý¾Ý£¬¶ÔÓÚ³ÖÐø¶Á¹ý³Ì£¬µ±ÓÃ»§ÔÚ»Øµ÷ÖÐÈ¡ÏûÁË¶Á¼àÌý£¬Ôòµ±ÓÃ»§
	 * »º³åÇøÖÐÎÞÊý¾ÝÊ±£¬¶øÎÞ·¨¼à¿Ø¸ÃÁ÷µÄÏµÍ³»º³åÇø£¬ËùÒÔ¶ÔÓÚ³ÖÐøÁ÷µÄ¶Á
	 * ²Ù×÷£¬±ØÐë±£Ö¤Á÷´¦ÓÚ¶Á¼àÌý×´Ì¬
	 */</comment> 
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÇ¶Ì×µ÷ÓÃ´ÎÊýÐ¡ÓÚ·§Öµ£¬ÔòÔÊÐí½øÐÐÇ¶Ì×µ÷ÓÃ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name> <operator>&lt;</operator> <name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ³¢ÊÔÐÔµØ¶ÁÊý¾Ý */</comment>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>__gets_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>--</operator></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µÝ¹éÇ¶Ì×¶Á´ÎÊý´ïµ½ÁË¹æ¶¨µÄ·§Öµ£¬
	 * Ö»Ðè¼Ç¸ö¾¯¸æÐÅÏ¢¼´¿É£¬ÒòÎªÓÐÇ¶Ì×ÏÞÖÆ
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: read_nested(%d) &gt;= max(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* ·ñÔò£¬²»ÔÊÐí¼ÌÐøÇ¶Ì×£¬½«¶ÁÊÂ¼þÖÃÓÚÊÂ¼þ¼à¿ØÑ­»·ÖÐ£¬ÒÔ¼õÉÙÇ¶Ì×²ã´Î */</comment>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/* ½«¸ÃÁ÷µÄ¶ÁÊÂ¼þÖÃÈëÊÂ¼þ¼à¿ØÖÐ */</comment>
	<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_gets</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>__aio_gets</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_gets_nonl</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>__aio_gets</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ³¢ÊÔÐÔ¶ÁÊý¾Ý
 * @param astream {ACL_ASTREAM*}
 * @return {int} ·µ»ØÖµ
 *  -1: ±íÊ¾³ö´í£¬»òÏ£Íû¹Ø±ÕÁ÷
 *   0: ±íÊ¾Êý¾ÝÎ´×¼±¸ºÃ»òÓÃ»§ÉèÖÃÁË·ÇÁ¬Ðø¶Á
 *   1: ±íÊ¾Êý¾ÝÒÑ×¼±¸ºÃ£¬ÇÒÒÑ¾­µ÷ÓÃ¹ýÒ»´ÎÓÃ»§µÄ»Øµ÷º¯ÊýÇÒÓÃ»§Ï£Íû¼ÌÐø¶Á
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read_peek</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<comment type="block">/* ³¢ÊÔÐÔµØ¶ÁÊý¾Ý */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_read_peek</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EAGAIN</name>
			<operator>||</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<block>{<block_content>
			<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* ±ØÐë²é¿´»º³åÇøÖÐÊÇ·ñ»¹ÓÐÊý¾Ý, ±ØÐë¼æÈÝÊý¾Ý¶Á²»¹»µÄÇé¿ö! */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>read_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* ¶Á³ö´í£¬ÐèÒª¹Ø±ÕÁ÷ */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* »Øµ÷ÓÃ»§µÄ¶Á³É¹¦´¦Àíº¯Êý */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* µ±ÓÃ»§Ï£Íû¹Ø±ÕÁ÷»ò¸ÃÁ÷Õý´¦ÓÚÑÓ³Ù¹Ø±Õ×´Ì¬£¬ÔòÐèÒªµ÷ÓÃ
		 * Á÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal>
			 <operator>||</operator> <operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISRD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>len</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* ¶ÁÊý¾Ý²»·ûºÏÒªÇó£¬¼ÌÐø¼à¿Ø¸Ã¶ÁÊÂ¼þ */</comment>
		<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ÓÉÊÂ¼þ¼à¿Ø¹ý³Ì»Øµ÷´¥·¢µÄ¶ÁÊÂ¼þ´¦Àí¹ý³Ì */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__read_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__read_notify_callback"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>READ_SAFE_DISABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¸ÃÁ÷³ö´í£¬µ«ÊÇÓÐ¿ÉÄÜ¹Ø±ÕµÄÊÂ¼þÍ¨Öªµ½´ïÊ±Á÷ÒÀÈ»¿É¶Á£¬
		 * ÔòÓ¦¸Ã±£Ö¤¶ÁÓÅÏÈ£¬Ö±µ½°Ñ²Ù×÷ÏµÍ³»º³åÇøÖÐµÄÊý¾Ý¶ÁÍê
		 * ÎªÖ¹£¬×îºóÔÙ´¦Àí¹Ø±ÕÊÂ¼þ£¬¼´¹Ø±ÕÁ÷
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__read_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¶ÁÁ÷³¬Ê±£¬Èç¹ûÓ¦ÓÃ·µ»ØÖµ´óÓÚµÈÓÚ0£¬ÔòÏ£Íû¼ÌÐø¶Á,
		 * Èç¹û·µ»ØÖµÐ¡ÓÚ0ÔòÏ£Íû¹Ø±ÕÁ÷¡£ÓÐÈË»áÓÐÕâÖÖÐèÇóÂð£¿
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>aio_timeout_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ÓÃ»§Ï£Íû¹Ø±ÕÁ÷ */</comment>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ¸ÃÁ÷Õý´¦ÓÚIOÑÓ³Ù¹Ø±Õ×´Ì¬£¬ÒòÎª±¾´Î¶ÁIOÒÑ¾­³É¹¦Íê³É£¬
			 * ËùÒÔÐèÒªÍê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
			 */</comment>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_READ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown event: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ³¢ÊÔÐÔµØ¶ÁÊý¾Ý */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>__read_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_read</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_read"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: astream(%p)-&gt;stream null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>event_read_callback</name></name> <operator>=</operator> <name>__read_notify_callback</name></expr>;</expr_stmt>
	<comment type="block">/* XXX: ±ØÐë½«»º³åÇøÖØÖÃ */</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* µ±Âú×ã»Øµ÷Ìõ¼þÊ±£¬ÓÐ¿ÉÄÜÊÇ´ÓÏµÍ³»º³åÇøÖÐ¶ÁÈ¡Êý¾Ý£¬Ò²ÓÐ¿ÉÄÜ´ÓÓÃ»§
	 * »º³åÇø¶ÁÊý¾Ý£¬¶ÔÓÚ³ÖÐø¶Á¹ý³Ì£¬µ±ÓÃ»§ÔÚ»Øµ÷ÖÐÈ¡ÏûÁË¶Á¼àÌý£¬Ôòµ±ÓÃ»§
	 * »º³åÇøÖÐÎÞÊý¾ÝÊ±£¬¶øÎÞ·¨¼à¿Ø¸ÃÁ÷µÄÏµÍ³»º³åÇø£¬ËùÒÔ¶ÔÓÚ³ÖÐøÁ÷µÄ¶Á
	 * ²Ù×÷£¬±ØÐë±£Ö¤Á÷´¦ÓÚ¶Á¼àÌý×´Ì¬
	 */</comment> 
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«Ç¶Ì×¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Ç¶Ì×²ã´ÎÌ«Éî¶øÊ¹Õ»Òç³ö */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûÇ¶Ì×µ÷ÓÃ´ÎÊýÐ¡ÓÚ·§Öµ£¬ÔòÔÊÐí½øÐÐÇ¶Ì×µ÷ÓÃ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name> <operator>&lt;</operator> <name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ³¢ÊÔÐÔµØ¶ÁÊý¾Ý */</comment>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>__read_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>--</operator></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µÝ¹éÇ¶Ì×¶Á´ÎÊý´ïµ½ÁË¹æ¶¨µÄ·§Öµ£¬Ö»Ðè¼Ç¸ö¾¯¸æÐÅÏ¢£¬ÒòÎªÓÐÇ¶Ì×ÏÞÖÆ */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: read_nested(%d) &gt;= max(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ñÔò£¬²»ÔÊÐí¼ÌÐøÇ¶Ì×£¬½«¶ÁÊÂ¼þÖÃÓÚÊÂ¼þ¼à¿ØÑ­»·ÖÐ£¬¼õÉÙÇ¶Ì×²ã´Î */</comment>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/* ½«¸ÃÁ÷µÄ¶ÁÊÂ¼þÖÃÈëÊÂ¼þ¼à¿ØÖÐ */</comment>
	<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ³¢ÊÔÐÔ¶Á¹æ¶¨Êý¾ÝÁ¿µÄÊý¾Ý
 * @param astream {ACL_ASTREAM*}
 * @return {int} ·µ»ØÖµ
 *  -1: ±íÊ¾³ö´í£¬»òÏ£Íû¹Ø±ÕÁ÷
 *   0: ±íÊ¾Êý¾ÝÎ´×¼±¸ºÃ»òÓÃ»§ÉèÖÃÁË·ÇÁ¬Ðø¶Á
 *   1: ±íÊ¾Êý¾ÝÒÑ×¼±¸ºÃ£¬ÇÒÒÑ¾­µ÷ÓÃ¹ýÒ»´ÎÓÃ»§µÄ»Øµ÷º¯ÊýÇÒÓÃ»§Ï£Íû¼ÌÐø¶Á
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__readn_peek</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__readn_peek"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: count(%d) &lt; strlen(%d), read_netsted(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ³¢ÊÔÐÔµØ¶ÁÊý¾Ý */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_readn_peek</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>,
		<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EAGAIN</name>
			<operator>||</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<block>{<block_content>
			<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* XXX: ²é¿´»º³åÇøÖÐÊÇ·ñ»¹ÓÐÊý¾Ý, ±ØÐë¼æÈÝÊý¾Ý¶Á²»¹»µÄÇé¿ö! */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: nneed(%d), nread(%d), read_netsted(%d),"</literal>
				<literal type="string">" nrefer(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>read_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* ¶Á³ö´í»ò¶Á¹Ø±Õ£¬ÐèÒª¹Ø±ÕÁ÷ */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ready</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ok, ÒÑ¾­Âú×ã¶ÁÌõ¼þ£¬¼´ÒÑ¾­»ñµÃÁËËùÒªÇóÊý¾Ý³¤¶ÈµÄÊý¾Ý */</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name><name>astream</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: len: %d != count: %d"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* »Øµ÷ÓÃ»§µÄ¶Á³É¹¦´¦Àíº¯Êý */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_complete_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal>
			<operator>||</operator> <operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISRD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>len</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* ¶ÁÊý¾Ý²»·ûºÏÒªÇó£¬¼ÌÐø¼à¿Ø¸Ã¶ÁÊÂ¼þ */</comment>
		<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ¶ÁÊÂ¼þ´¥·¢»Øµ÷´¦Àíº¯Êý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__readn_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__readn_notify_callback"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>READ_SAFE_DISABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¸ÃÁ÷³ö´í£¬µ«ÊÇÓÐ¿ÉÄÜ¹Ø±ÕµÄÊÂ¼þÍ¨Öªµ½´ïÊ±Á÷ÒÀÈ»¿É¶Á£¬
		 * ÔòÓ¦¸Ã±£Ö¤¶ÁÓÅÏÈ£¬Ö±µ½°Ñ²Ù×÷ÏµÍ³»º³åÇøÖÐµÄÊý¾Ý¶ÁÍê
		 * ÎªÖ¹£¬×îºóÔÙ´¦Àí¹Ø±ÕÊÂ¼þ£¬¼´¹Ø±ÕÁ÷
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__readn_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¶ÁÁ÷³¬Ê±£¬Èç¹ûÓ¦ÓÃ·µ»ØÖµ´óÓÚµÈÓÚ0£¬ÔòÏ£Íû¼ÌÐø¶Á,
		 * Èç¹û·µ»ØÖµÐ¡ÓÚ0ÔòÏ£Íû¹Ø±ÕÁ÷¡£ÓÐÈË»áÓÐÕâÖÖÐèÇóÂð£¿
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>aio_timeout_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ¸ÃÁ÷Õý´¦ÓÚIOÑÓ³Ù¹Ø±Õ×´Ì¬£¬ÒòÎª±¾´Î¶ÁIOÒÑ¾­³É¹¦Íê³É£¬
			 * ËùÒÔÐèÒªÍê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
			 */</comment>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_READ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown event: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: stream null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>__readn_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_readn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_readn"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: count(%d) &lt;= 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÉèÖÃ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>event_read_callback</name></name> <operator>=</operator> <name>__readn_notify_callback</name></expr>;</expr_stmt>
	<comment type="block">/* count ±íÊ¾ÓÃ»§Ï£Íû¶ÁµÄÊý¾Ý×Ü³¤¶È */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

	<comment type="block">/* Ô¤Áô³ö×ã¹»µÄ¿Õ¼ä */</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_SPACE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ³õÊ¼»¯ÄÚ´æ»º´æÇø¶ÔÏó*/</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* µ±Âú×ã»Øµ÷Ìõ¼þÊ±£¬ÓÐ¿ÉÄÜÊÇ´ÓÏµÍ³»º³åÇøÖÐ¶ÁÈ¡Êý¾Ý£¬Ò²ÓÐ¿ÉÄÜ´ÓÓÃ»§
	 * »º³åÇø¶ÁÊý¾Ý£¬¶ÔÓÚ³ÖÐø¶Á¹ý³Ì£¬µ±ÓÃ»§ÔÚ»Øµ÷ÖÐÈ¡ÏûÁË¶Á¼àÌý£¬Ôòµ±ÓÃ»§
	 * »º³åÇøÖÐÎÞÊý¾ÝÊ±£¬¶øÎÞ·¨¼à¿Ø¸ÃÁ÷µÄÏµÍ³»º³åÇø£¬ËùÒÔ¶ÔÓÚ³ÖÐøÁ÷µÄ¶Á
	 * ²Ù×÷£¬±ØÐë±£Ö¤Á÷´¦ÓÚ¶Á¼àÌý×´Ì¬
	 */</comment> 
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«Ç¶Ì×¼ÆÊý¼Ó1£¬ÒÔ·ÀÖ¹Ç¶Ì×²ã´ÎÌ«Éî¶øÊ¹Õ»Òç³ö */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûÇ¶Ì×µ÷ÓÃ´ÎÊýÐ¡ÓÚ·§Öµ£¬ÔòÔÊÐí½øÐÐÇ¶Ì×µ÷ÓÃ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name> <operator>&lt;</operator> <name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ³¢ÊÔÐÔµØ¶ÁÊý¾Ý */</comment>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>__readn_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>--</operator></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µÝ¹éÇ¶Ì×¶Á´ÎÊý´ïµ½ÁË¹æ¶¨µÄ·§Öµ£¬Ö»Ðè¼Ç¸ö¾¯¸æÐÅÏ¢£¬ÒòÎªÓÐÇ¶Ì×ÏÞÖÆ */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: read_nested(%d) &gt;= max(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ñÔò£¬²»ÔÊÐí¼ÌÐøÇ¶Ì×£¬½«¶ÁÊÂ¼þÖÃÓÚÊÂ¼þ¼à¿ØÑ­»·ÖÐ£¬¼õÉÙÇ¶Ì×²ã´Î */</comment>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name><operator>--</operator></expr>;</expr_stmt>
	
	<comment type="block">/* ½«¸ÃÁ÷µÄ¶ÁÊÂ¼þÖÃÈëÊÂ¼þ¼à¿ØÖÐ */</comment>
	<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>main_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_aio_gets_peek</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_gets_peek</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ready</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
		<operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EAGAIN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name><operator>)</operator></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ready</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_aio_gets_nonl_peek</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_gets_nonl_peek</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ready</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
		<operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EAGAIN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ready</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_aio_read_peek</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_read_peek</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
		<operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EAGAIN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_aio_readn_peek</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_readn_peek</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
		<operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EAGAIN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ready</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_can_read</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstream_can_read</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>can_read_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name> <init>= <expr><operator>(</operator><name>ACL_ASTREAM</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>READ_SAFE_DISABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>aio_timeout_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ¸ÃÁ÷Õý´¦ÓÚIOÑÓ³Ù¹Ø±Õ×´Ì¬£¬ÒòÎª±¾´Î¶ÁIOÒÑ¾­³É¹¦Íê³É£¬
			 * ËùÒÔÐèÒªÍê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
			 */</comment>
			<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>can_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>astream</name><operator>-&gt;</operator><name>can_read_fn</name></name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>can_read_ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* else if ((event_type &amp; ACL_EVENT_XCPT) != 0) {
		astream-&gt;nrefer--;
		READ_IOCP_CLOSE(astream);
	} */</comment>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_enable_read</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_NOTIFY_FN</name></type> <name>can_read_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>READ_SAFE_ENABLE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>can_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>can_read_fn</name></name> <operator>=</operator> <name>can_read_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>can_read_ctx</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>++</operator><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_vstream_can_read</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>READ_IOCP_CLOSE</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name> <operator>&lt;</operator> <name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>can_read_callback</name><argument_list>(<argument><expr><name>ACL_EVENT_READ</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
			<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> , <argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>--</operator><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_disable_read</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISRD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_AIO_FLAG_ISRD</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>can_read_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>can_read_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_disable_read</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_isrset</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_event_isrset</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_stream_set_line_length</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_stream_get_line_length</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>astream</name><operator>-&gt;</operator><name>line_length</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
