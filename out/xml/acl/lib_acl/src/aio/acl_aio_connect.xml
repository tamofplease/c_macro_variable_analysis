<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/aio/acl_aio_connect.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_inet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio/acl_aio.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../event/events_define.h"</cpp:file></cpp:include> <comment type="block">/* just for ACL_EVENTS_STYLE_IOCP define */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>WRITE_SAFE_ENABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>callback</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (((x)-&gt;flag &amp; ACL_AIO_FLAG_ISWR) == 0) {  \
		(x)-&gt;flag |= ACL_AIO_FLAG_ISWR;  \
		acl_event_enable_write((x)-&gt;aio-&gt;event, (x)-&gt;stream,  \
			(x)-&gt;timeout, callback, (x));  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_SAFE_DIABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (((x)-&gt;flag &amp; ACL_AIO_FLAG_ISWR) != 0) {  \
		(x)-&gt;flag &amp;= ~ACL_AIO_FLAG_ISWR;  \
		acl_event_disable_write((x)-&gt;aio-&gt;event, (x)-&gt;stream);  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>__connect_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ConnectTimer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>ACL_ASTREAM</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name> <operator>!=</operator> <name>ACL_EVENT_WMSG</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"event_mode(%d) != ACL_EVENT_WMSG(%d)"</literal></expr></argument>,
			<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name></expr></argument>, <argument><expr><name>ACL_EVENT_WMSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>__connect_notify_callback</name><argument_list>(<argument><expr><name>ACL_EVENT_RW_TIMEOUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__connect_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__connect_notify_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>ACL_ASTREAM</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>errlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WRITE_SAFE_DIABLE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÏÈÅÐ¶ÏÊÇ·ñÊÇ³¬Ê±µ¼ÖÂ·µ»Ø */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>aio_timeout_callback</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ¸ÃÁ÷Õý´¦ÓÚIOÑÓ³Ù¹Ø±Õ×´Ì¬£¬ÒòÎª±¾´ÎÐ´IOÒÑ¾­³É¹¦Íê³É£¬
			 * ËùÒÔÐèÒªÍê³ÉÁ÷µÄIOÑÓ³Ù¹Ø±Õ¹ý³Ì
			 */</comment>
			<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_event_enable_write</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
				<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>__connect_notify_callback</name></expr></argument>,
				<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<comment type="block">/* Èç¹ûÊÇ»ùÓÚ win32 ´°¿ÚÏûÏ¢µÄÊÂ¼þÒýÇæÔòÐèÒªÈ¡ÏûÖ®Ç°ÉèÖÃµÄ³¬Ê±¶¨Ê±Æ÷ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name> <operator>==</operator> <name>ACL_EVENT_WMSG</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_cancel_timer</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>ConnectTimer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>errlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_SUNOS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/*
	 * Solaris 2.4's socket emulation doesn't allow you
	 * to determine the error from a failed non-blocking
	 * connect and just returns EPIPE.  Create a fake
	 * error message for connect.   -- fenner@parc.xerox.com
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EPIPE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOTCONN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ACL_EISCONN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>ACL_EVENT_CONNECT</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>event_type</name> <operator>|=</operator> <name>ACL_EVENT_XCPT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DEAD</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>event_type</name> <operator>&amp;</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown event: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«ÒýÓÃ¼ÆÊý¼Ó1ÒÔ·ÀÖ¹ÔÚ connect_fn ÄÚ²¿µ÷ÓÃÁË¹Ø±Õ¹ý³Ì£¬connect_fn
	 * ¿ÉÍ¨¹ý·µ»Ø-1£¬ÔÚ»Øµ÷·µ»ØºóÕæÕý¹Ø±Õ
	 */</comment>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>connect_handles</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_FIFO</name></type> <name>connect_handles</name></decl>;</decl_stmt>

		<comment type="block">/* ±ØÐë½«¸÷¸ö»Øµ÷¾ä±ú´Ó»Øµ÷¶ÓÁÐÖÐÒ»Ò»Ìá³öÖÃÈëÒ»¸öµ¥¶À¶ÓÁÐÖÐ,
		 * ÒòÎª ACL_AIO ÔÚ»Øµ÷¹ý³ÌÖÐÓÐ¿ÉÄÜ·¢ÉúÇ¶Ì×£¬·ÀÖ¹±»ÖØ¸´µ÷ÓÃ
		 */</comment>

		<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connect_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>conn-&gt;connect_handles</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>AIO_CONNECT_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_CONNECT_HOOK</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connect_handles</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>AIO_CONNECT_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connect_handles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>flag</name></name>  <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return;</return>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>flag</name></name>  <operator>&amp;</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ö®Ç°¸ÃÁ÷ÒÑ¾­±»ÉèÖÃÁËIOÍê³ÉÑÓ³Ù¹Ø±Õ±êÖ¾Î»£¬
		 * ÔòÔÙ´ÎÆô¶¯IOÍê³ÉÑÓ³Ù¹Ø±Õ¹ý³Ì
		 */</comment>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>acl_aio_connect</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_connect"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>cstream</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_EVENTS_STYLE_IOCP</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name> <operator>==</operator> <name>ACL_EVENT_KERNEL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>connfd</name> <init>= <expr><call><name>WSASocket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>,
			<argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WSA_FLAG_OVERLAPPED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>cstream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>connfd</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_FLAG_RW</name></expr></argument>,
				<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>rbuf_size</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>cstream</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>,
				<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>aio</name><operator>-&gt;</operator><name>rbuf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>cstream</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>aio</name><operator>-&gt;</operator><name>rbuf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>cstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: connect addr(%s) error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>cstream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_CONNECTING</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: open connection error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name> <operator>==</operator> <name>ACL_EVENT_WMSG</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>ConnectTimer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
			<argument><expr><name>timeout</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WRITE_SAFE_ENABLE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>__connect_notify_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<struct>struct <name>ACL_ASTREAM_CTX</name> <block>{
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>ns_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>serv_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>ns_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>serv_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO_CONNECT_ADDR_FN</name></type> <name>callback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>ip_list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ip_next</name></decl>;</decl_stmt>
}</block></struct></type> <name>RESOLVE_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resolve_ctx_free</name><parameter_list>(<parameter><decl><type><name>RESOLVE_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>connect_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>connect_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>try_connect_one</name><parameter_list>(<parameter><decl><type><name>RESOLVE_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_failed</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>conn</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RESOLVE_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>RESOLVE_CTX</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM_CTX</name></type> <name>conn_ctx</name></decl>;</decl_stmt>

	<comment type="block">/* ÒòÎªÔÚ connect_callback ºÍ connect_timeout Çå³ýÁË¹Ø±Õ»Øµ÷£¬ËùÒÔµ± 
	 * ±¾º¯Êý±»µ÷ÓÃÊ±£¬Ò»¶¨ÊÇÁ¬½ÓÊ§°ÜËùµ¼ÖÂµÄ£¬¶ø²»ÊÇÓÉÁ¬½Ó³¬Ê±ËùÖÂ¡£
	 */</comment>

	<comment type="block">/* Èç¹û DNS ½âÎö³ö¶à¸ö IP µØÖ·£¬Ôò³¢ÊÔÁ¬½ÓÏÂÒ»¸ö IP µØÖ· */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>try_connect_one</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ·µ»Ø -1 ½ö¹Ø±Õµ±Ç°³¬Ê±µÄÁ¬½Ó¶ÔÏóÁ÷£¬ÓÃÐÂµÄÁ¬½ÓÁ÷¼ÌÐøµÈ´ýÁ¬½Ó³É¹¦ */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ECONNREFUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>ctx</name></name>  <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn_ctx</name><operator>.</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn_ctx</name><operator>.</operator><name>serv_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>serv_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ACL_ASTREAM_STATUS_CONNECT_ERROR</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>resolve_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RESOLVE_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>RESOLVE_CTX</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM_CTX</name></type> <name>conn_ctx</name></decl>;</decl_stmt>

	 <comment type="block">/* °´ acl aio µÄÉè¼Æ£¬µ±³¬Ê±»Øµ÷º¯Êý±»µ÷ÓÃÇÒ·µ»Ø -1 Ê±£¬ÔòËù×¢²áµÄ
	  * ¹Ø±Õ»Øµ÷½Ó×Å»á±»µ÷ÓÃ£¬Í¨¹ýÔÚ´Ë´¦Çå³ýÓòÃû½âÎöºóÒì²½Á¬½ÓËù×¢²áµÄ¹Ø
	  * ±Õ»Øµ÷£¬´Ó¶ø½ûÖ¹ connect_failed ÔÙ±»µ÷ÓÃ¡£
	  */</comment>
	<expr_stmt><expr><call><name>acl_aio_del_close_hook</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connect_failed</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û DNS ½âÎö³ö¶à¸ö IP µØÖ·£¬Ôò³¢ÊÔÁ¬½ÓÏÂÒ»¸ö IP µØÖ· */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>try_connect_one</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ·µ»Ø -1 ½ö¹Ø±Õµ±Ç°³¬Ê±µÄÁ¬½Ó¶ÔÏóÁ÷£¬ÓÃÐÂµÄÁ¬½ÓÁ÷¼ÌÐøµÈ´ýÁ¬½Ó³É¹¦ */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>ctx</name></name>  <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn_ctx</name><operator>.</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn_ctx</name><operator>.</operator><name>serv_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>serv_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ACL_ASTREAM_STATUS_CONNECT_TIMEOUT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>resolve_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RESOLVE_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>RESOLVE_CTX</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM_CTX</name></type> <name>conn_ctx</name></decl>;</decl_stmt>

	<comment type="block">/* Çå³ýÔÚÓòÃû½âÎöºó½øÐÐÁ¬½ÓÊ±×¢²áµÄ»Øµ÷º¯Êý£¬ÕâÑùµ± IO ³¬Ê±»ò¹Ø±ÕÊ±
	 * Ö»»Øµ÷Ó¦ÓÃ×¢²áµÄ»Øµ÷º¯Êý
	 */</comment>
	<expr_stmt><expr><call><name>acl_aio_del_connect_hook</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connect_callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_del_timeo_hook</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connect_timeout</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_del_close_hook</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connect_failed</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>ctx</name></name>  <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn_ctx</name><operator>.</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn_ctx</name><operator>.</operator><name>serv_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>serv_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ACL_ASTREAM_STATUS_OK</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>resolve_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>try_connect_one</name><parameter_list>(<parameter><decl><type><name>RESOLVE_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>acl_argv_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_next</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>acl_argv_index</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_list</name></name></expr></argument>,  <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_next</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>sa</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_next</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>ip</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s|%d"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_sane_pton</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>serv_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>acl_aio_connect</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_aio_add_connect_hook</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>connect_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_add_timeo_hook</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>connect_timeout</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_add_close_hook</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>connect_failed</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr>;</return>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dns_lookup_callback</name><parameter_list>(<parameter><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RESOLVE_CTX</name> <modifier>*</modifier></type><name>ctx</name>  <init>= <expr><operator>(</operator><name>RESOLVE_CTX</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>     <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM_CTX</name></type> <name>conn_ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>msg</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ACL_ASTREAM_STATUS_NS_ERROR</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>resolve_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn_ctx</name><operator>.</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conn_ctx</name><operator>.</operator><name>ns_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>ns_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ns_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>db</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_HOST_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ACL_HOST_INFO</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_list</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><call><name>acl_argv_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_list</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ACL_ASTREAM_STATUS_NS_ERROR</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>resolve_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>try_connect_one</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ECONNREFUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn_ctx</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ACL_ASTREAM_STATUS_CONNECT_ERROR</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>conn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>resolve_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_connect_addr</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_CONNECT_ADDR_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RESOLVE_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid addr=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid port=%d, addr=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>RESOLVE_CTX</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RESOLVE_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>aio</name></name>      <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name>  <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>port</name></name>     <operator>=</operator> <name>port</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>timeout</name></name>  <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ip_list</name></name>  <operator>=</operator> <call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_is_ip</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>acl_valid_unix</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>sa</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_sane_pton</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid addr=%s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>resolve_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>conn</name> <operator>=</operator> <call><name>acl_aio_connect</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>resolve_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>serv_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_aio_add_connect_hook</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connect_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_add_timeo_hook</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connect_timeout</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_add_close_hook</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connect_failed</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: call acl_aio_set_dns first"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_dns_lookup</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>dns</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dns_lookup_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_astream_get_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ASTREAM_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>ctx</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr> </then><else>: <expr><name>ACL_ASTREAM_STATUS_INVALID</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_SOCKADDR</name> <modifier>*</modifier></type><name>acl_astream_get_ns_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ASTREAM_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>ctx</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ns_addr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_SOCKADDR</name> <modifier>*</modifier></type><name>acl_astream_get_serv_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ASTREAM_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>ctx</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>serv_addr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>acl_astream_get_conn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ASTREAM_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>ctx</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_astream_get_ctx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ASTREAM_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>ctx</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
