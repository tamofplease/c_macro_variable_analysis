<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/aio/acl_aio_stream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio/acl_aio.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../event/events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aio.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>accept_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"accept_callback"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: default accept_callback be called"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>listen_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"listen_callback"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: default listen_callback be called"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>acl_aio_handle</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>aio</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_set_ctx</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_aio_get_ctx</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>stream</name></expr> ?</condition><then> <expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>acl_aio_open</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>astream</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_ASTREAM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* ·ÀÖ¹ÔÚ¶ÁÊ±×èÈû */</comment>

	<expr_stmt><expr><call><name>acl_vstring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>, <argument><expr><name>__default_line_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>ACL_AIO_FLAG_FLUSH_CLOSE</name></expr>;</expr_stmt> <comment type="block">/* ¾¡Á¿ÔÚÊý¾ÝÐ´ÍêÇ°¹Ø±ÕÁ¬½Ó */</comment>

	<comment type="block">/* for read */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name> <operator>=</operator> <name>__AIO_NESTED_MAX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_ready_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>=</operator> <name><name>aio</name><operator>-&gt;</operator><name>keep_read</name></name></expr>;</expr_stmt>  <comment type="block">/* ¼Ì³ÐÒì²½¾ä±úµÄ³ÖÐø¶Á±êÖ¾ */</comment>

	<comment type="block">/* just for listen fd */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>=</operator> <name><name>aio</name><operator>-&gt;</operator><name>rbuf_size</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>accept_nloop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* for write */</comment>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>write_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name> <operator>=</operator> <name>__AIO_NESTED_MAX</name></expr>;</expr_stmt>

	<comment type="block">/* set default callback functions */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>accept_fn</name></name> <operator>=</operator> <name>accept_callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>listen_fn</name></name> <operator>=</operator> <name>listen_callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* create callback link */</comment>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_handles</name></name>  <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_handles</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>close_handles</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>timeo_handles</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>connect_handles</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>reader_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>writer_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>astream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_set_accept_nloop</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>accept_nloop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>accept_nloop</name></name> <operator>=</operator> <name>accept_nloop</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_aio_cancel</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_refer_value</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type> <name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_refer_value"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>astream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): astream null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_refer</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>astream</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_unrefer</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>astream</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aio_disable_readwrite</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISRD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_AIO_FLAG_ISRD</name></expr>;</expr_stmt> 
		<expr_stmt><expr><call><name>acl_event_disable_read</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISWR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_AIO_FLAG_ISWR</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_event_disable_write</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_astream</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISRD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_AIO_FLAG_ISRD</name></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>acl_event_disable_read</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISWR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_AIO_FLAG_ISWR</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_event_disable_write</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* bugfix: ÔÚ acl_aio_clean_hooks ÖÐ²¢²»»áÊÍ·ÅÊý×é¶ÔÏó --zsx, 2012.7.2 */</comment>
	<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_handles</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_handles</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>close_handles</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>timeo_handles</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>connect_handles</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aio_delay_close</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹û¸ÃÒì²½Á÷¶ÔÏóµÄÒýÓÃ¼ÆÊý´óÓÚ0£¬ÔòÖ»ÐèÒªÖÃ±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>;</expr_stmt>
		<comment type="block">/* ·ÅÔÚÑÓ³Ù¹Ø±Õ¶ÓÁÐÖÐ */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>dead_streams</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(
				<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>dead_streams</name></name></expr></argument>, <argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÐèÒª¹Ø±Õ¸ÃÒì²½Á÷¶ÔÏó */</comment>
		<expr_stmt><expr><call><name>aio_close_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close_astream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>aio_close_callback</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/* ÕæÕý¹Ø±ÕÒì²½Á÷ */</comment>
	<expr_stmt><expr><call><name>close_astream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aio_delay_check</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>astream</name> <operator>=</operator> <operator>(</operator><name>ACL_ASTREAM</name><operator>*</operator><operator>)</operator>
			<call><name><name>aio</name><operator>-&gt;</operator><name>dead_streams</name><operator>-&gt;</operator><name>pop_back</name></name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>dead_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>astream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>aio_delay_close</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_USE_EVENT_TIMER</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>ACL_USE_TLS_POOL</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>__aio_tls_key</name> <init>= <expr><name>ACL_TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VOID</name> <name>CALLBACK</name></type> <name>CloseTimer</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,
	<parameter><decl><type><name>UINT_PTR</name></type> <name>idEvent</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"CloseTimer"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>tls_aio</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>idEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__aio_tls_key</name> <operator>==</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __aio_tls_key invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tls_aio</name> <operator>=</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__aio_tls_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_aio</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get tls aio error(%s), tls_key: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>__aio_tls_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>aio_delay_check</name><argument_list>(<argument><expr><name>tls_aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_USE_EVENT_TIMER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseTimer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><operator>(</operator><name>ACL_AIO</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>aio_delay_check</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type>  <name>__aio_tls_key</name> <init>= <expr><name>ACL_TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__aio_once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VOID</name> <name>CALLBACK</name></type> <name>CloseTimer</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,
	<parameter><decl><type><name>UINT_PTR</name></type> <name>idEvent</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"CloseTimer"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>tls_aio</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>idEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__aio_tls_key</name> <operator>==</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __aio_tls_key invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tls_aio</name> <operator>=</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__aio_tls_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_aio</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get tls aio error(%s), tls_key: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>__aio_tls_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>aio_delay_check</name><argument_list>(<argument><expr><name>tls_aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_aio</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_thread_aio</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_thread_aio</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__aio_tls_key</name></expr></argument>, <argument><expr><name>finish_thread_aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_USE_TLS_POOL */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_WINDOWS */</comment>

<function><type><name>void</name></type> <name>acl_aio_flush_on_close</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>yes</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_FLUSH_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_AIO_FLAG_FLUSH_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ¸Ãº¯Êý·Ç³£¹Ø¼ü£¬²ÉÓÃµÄIOÍê³ÉÊ±²Å¹Ø±ÕµÄ²ßÂÔ£¬·ÀÖ¹ÖØ¸´¹Ø±Õ */</comment>
<function><type><name>void</name></type> <name>acl_aio_iocp_close</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_iocp_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_DEAD</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_ISWR</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_AIO_FLAG_FLUSH_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_IOCP_CLOSE</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>aio-&gt;dead_streams</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ACL_ASTREAM</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>astream</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): flag: %d, size: %d"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* ·ÅÔÚÑÓ³Ù¹Ø±Õ¶ÓÁÐÖÐ */</comment>
	<expr_stmt><expr><call><name><name>aio</name><operator>-&gt;</operator><name>dead_streams</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>dead_streams</name></name></expr></argument>, <argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_AIO_FLAG_DELAY_CLOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>aio_disable_readwrite</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>ACL_USE_TLS_POOL</name></cpp:ifdef>

	<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name> <operator>==</operator> <name>ACL_EVENT_WMSG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>aio</name><operator>-&gt;</operator><name>timer_active</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name> <init>= <expr><call><name>acl_event_wmsg_hwnd</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>tls_aio</name> <init>= <expr><call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__aio_tls_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>hWnd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__aio_tls_key</name> <operator>==</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_key invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>tls_aio</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_pthread_tls_set</name><argument_list>(<argument><expr><name>__aio_tls_key</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tls_aio</name> <operator>!=</operator> <name>aio</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): tls_aio != aio"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetTimer</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name><name>aio</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>CloseTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_USE_EVENT_TIMER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

	<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name> <operator>==</operator> <name>ACL_EVENT_WMSG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>aio</name><operator>-&gt;</operator><name>timer_active</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>CloseTimer</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>

	<if_stmt><if>if <condition>(<expr><name><name>aio</name><operator>-&gt;</operator><name>event_mode</name></name> <operator>==</operator> <name>ACL_EVENT_WMSG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>aio</name><operator>-&gt;</operator><name>timer_active</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name> <init>= <expr><call><name>acl_event_wmsg_hwnd</name><argument_list>(<argument><expr><name><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>tls_aio</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>hWnd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__aio_once_control</name></expr></argument>, <argument><expr><name>init_thread_aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>__aio_tls_key</name> <operator>==</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_key invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>tls_aio</name> <operator>=</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__aio_tls_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tls_aio</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>__aio_tls_key</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tls_aio</name> <operator>!=</operator> <name>aio</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): tls_aio != aio"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>aio</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetTimer</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name><name>aio</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CloseTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_USE_TLS_POOL */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_WINDOWS */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_add_read_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_READ_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_add_read_hook"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AIO_READ_HOOK</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;astream-&gt;reader_fifo</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>AIO_READ_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AIO_READ_HOOK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_handles</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: add to array error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_add_write_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_WRITE_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_add_write_hook"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AIO_WRITE_HOOK</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;astream-&gt;writer_fifo</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>AIO_WRITE_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AIO_WRITE_HOOK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_handles</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: add to array error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_add_close_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_CLOSE_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_add_close_hook"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AIO_CLOSE_HOOK</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;close_handles</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>AIO_CLOSE_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AIO_CLOSE_HOOK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>close_handles</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: add to array error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_add_timeo_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_TIMEO_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_add_timeo_hook"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AIO_TIMEO_HOOK</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;timeo_handles</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>AIO_TIMEO_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AIO_TIMEO_HOOK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>timeo_handles</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: add to array error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_add_connect_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_CONNECT_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_add_connect_hook"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AIO_CONNECT_HOOK</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;connect_handles</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>AIO_CONNECT_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AIO_TIMEO_HOOK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>connect_handles</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: add to array error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_del_read_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_READ_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;read_handles</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_READ_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_READ_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;astream-&gt;reader_fifo</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_READ_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_READ_HOOK</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_del_write_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_WRITE_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;write_handles</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_WRITE_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_WRITE_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;astream-&gt;writer_fifo</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_WRITE_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_WRITE_HOOK</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_del_close_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_CLOSE_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;close_handles</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_CLOSE_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_CLOSE_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_del_timeo_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_TIMEO_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;timeo_handles</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_TIMEO_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_TIMEO_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_del_connect_hook</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_AIO_CONNECT_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>astream-&gt;connect_handles</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_CONNECT_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>AIO_CONNECT_HOOK</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>callback</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>disable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_handle</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_clean_read_hooks</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>read_handles</name></name></expr></argument>, <argument><expr><name>free_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_READ_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name><name>astream</name><operator>-&gt;</operator><name>reader_fifo</name><operator>.</operator><name>pop_back</name></name><argument_list>(
			<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>reader_fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>free_handle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_vstring_free_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_clean_write_hooks</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>write_handles</name></name></expr></argument>, <argument><expr><name>free_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>AIO_WRITE_HOOK</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name><name>astream</name><operator>-&gt;</operator><name>writer_fifo</name><operator>.</operator><name>pop_back</name></name><argument_list>(
			<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>writer_fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>free_handle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <call><name>acl_fifo_pop</name><argument_list>(
			<argument><expr><operator>&amp;</operator><name><name>astream</name><operator>-&gt;</operator><name>write_fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_clean_close_hooks</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>close_handles</name></name></expr></argument>, <argument><expr><name>free_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_clean_timeo_hooks</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>timeo_handles</name></name></expr></argument>, <argument><expr><name>free_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_clean_connect_hooks</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>connect_handles</name></name></expr></argument>, <argument><expr><name>free_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_clean_hooks</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_aio_clean_read_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_clean_write_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_clean_close_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_clean_timeo_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_clean_connect_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_stream_set_keep_read</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>=</operator> <name>onoff</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_stream_get_keep_read</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_ctl</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_ctl"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO_READ_FN</name></type>    <name>read_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO_WRITE_FN</name></type>   <name>write_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO_ACCEPT_FN</name></type>  <name>accept_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO_LISTEN_FN</name></type>  <name>listen_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO_CONNECT_FN</name></type> <name>connect_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO_TIMEO_FN</name></type>   <name>timeo_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO_CLOSE_FN</name></type>   <name>close_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>astream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: astream null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_AIO_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_AIO_CTL_ACCEPT_FN</name></expr>:</case>
			<expr_stmt><expr><name>accept_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_ACCEPT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>accept_fn</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>accept_fn</name></name> <operator>=</operator> <name>accept_fn</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>accept_fn</name></name> <operator>=</operator> <name>accept_callback</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_LISTEN_FN</name></expr>:</case>
			<expr_stmt><expr><name>listen_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_LISTEN_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>listen_fn</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>listen_fn</name></name> <operator>=</operator> <name>listen_fn</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>listen_fn</name></name> <operator>=</operator> <name>listen_callback</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_CTX</name></expr>:</case>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_TIMEOUT</name></expr>:</case>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_LINE_LENGTH</name></expr>:</case>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_STREAM</name></expr>:</case>
			<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_VSTREAM</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_READ_NESTED</name></expr>:</case>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>read_nested_limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_WRITE_NESTED</name></expr>:</case>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>write_nested_limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_KEEP_READ</name></expr>:</case>
			<expr_stmt><expr><name><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr>:</case>
			<expr_stmt><expr><name>read_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_READ_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_add_read_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>read_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_READ_HOOK_DEL</name></expr>:</case>
			<expr_stmt><expr><name>read_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_READ_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_del_read_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>read_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr>:</case>
			<expr_stmt><expr><name>write_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_WRITE_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_add_write_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>write_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_WRITE_HOOK_DEL</name></expr>:</case>
			<expr_stmt><expr><name>write_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_WRITE_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_del_write_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>write_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr>:</case>
			<expr_stmt><expr><name>close_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_CLOSE_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_add_close_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>close_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_CLOSE_HOOK_DEL</name></expr>:</case>
			<expr_stmt><expr><name>close_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_CLOSE_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_del_close_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>close_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr>:</case>
			<expr_stmt><expr><name>timeo_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_TIMEO_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_add_timeo_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>timeo_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_TIMEO_HOOK_DEL</name></expr>:</case>
			<expr_stmt><expr><name>timeo_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_TIMEO_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_del_timeo_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>timeo_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_CONNECT_HOOK_ADD</name></expr>:</case>
			<expr_stmt><expr><name>connect_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_CONNECT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_add_connect_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>connect_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_AIO_CTL_CONNECT_HOOK_DEL</name></expr>:</case>
			<expr_stmt><expr><name>connect_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_AIO_CONNECT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_del_connect_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>connect_fn</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown name flag(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_aio_vstream</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>astream</name> <operator>&amp;&amp;</operator> <name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_aio_disable_readwrite</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_aio_disable_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_disable_write</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_aio_isset</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_aio_isset"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>astream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_event_isset</name><argument_list>(<argument><expr><name><name>astream</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>astream</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
