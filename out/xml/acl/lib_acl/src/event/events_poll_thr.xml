<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/event/events_poll_thr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_define.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_EVENTS_POLL_STYLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"events_fdtable.h"</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"events_dog.h"</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>EVENT_POLL_THR</name> <block>{
	<decl_stmt><decl><type><name>EVENT_THR</name></type> <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fdset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FD_MAP</name> <modifier>*</modifier></type><name>fdmap</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVENT_POLL_THR</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_enable_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_POLL_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_POLL_THR</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fdp</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>event_fdtable_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: fd %d: multiple I/O request"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>!=</operator> <name>callback</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name> <operator>!=</operator> <name>context</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>timeout</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_READ</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name> <operator>||</operator> <name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fdmap_add</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdmap</name></name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ö÷ÒªÊÇÎªÁË¼õÉÙÍ¨Öª´ÎÊý */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>blocked</name></name> <operator>&amp;&amp;</operator> <name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>evdog</name></name>
	    <operator>&amp;&amp;</operator> <call><name>event_dog_client</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>evdog</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>stream</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_dog_notify</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>evdog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_listen</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_enable_listen"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_POLL_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_POLL_THR</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fdp</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>event_fdtable_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: fd %d: multiple I/O request"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>!=</operator> <name>callback</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name> <operator>!=</operator> <name>context</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>timeout</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_READ</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name> <operator>||</operator> <name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fdmap_add</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdmap</name></name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_write</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_enable_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_POLL_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_POLL_THR</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fdp</name> <operator>=</operator> <operator>(</operator><name>ACL_EVENT_FDTABLE</name><operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>event_fdtable_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: fd %d: multiple I/O request"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>!=</operator> <name>callback</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name> <operator>!=</operator> <name>context</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>timeout</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name> <operator>||</operator> <name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fdmap_add</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdmap</name></name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>blocked</name></name> <operator>&amp;&amp;</operator> <name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>evdog</name></name>
	    <operator>&amp;&amp;</operator> <call><name>event_dog_client</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>evdog</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>stream</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_dog_notify</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>evdog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* event_disable_readwrite - disable request for read or write events */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_disable_readwrite</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_disable_readwrite"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_POLL_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_POLL_THR</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fdp</name> <operator>=</operator> <operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVENT_FDTABLE_FLAG_READ</name>
	    <operator>|</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) not be set"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdidx(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>!=</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdidx(%d)'s fdp invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>fdidx</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>event_thr</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fdmap_del</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdmap</name></name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>event_fdtable_reset</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_isrset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdp</name> <operator>=</operator> <operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_iswset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdp</name> <operator>=</operator> <operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_isxset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdp</name> <operator>=</operator> <operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_loop</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_loop"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_POLL_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_POLL_THR</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>nready</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>revents</name></decl>, <decl><type ref="prev"/><name>fdcnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>delay</name></decl>, <decl><type ref="prev"/><name>when</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>delay_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>eventp</name><operator>-&gt;</operator><name>delay_usec</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <name>DELAY_MIN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>DELAY_MIN</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Find out when the next timer would go off. Timer requests
	 * are sorted. If any timer is scheduled, adjust the delay
	 * appropriately.
	 */</comment>
	<expr_stmt><expr><name>when</name> <operator>=</operator> <call><name>event_timer_when</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>when</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>acl_int64</name></type> <name>n</name> <init>= <expr><name>when</name> <operator>-</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>delay</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>-</operator> <name><name>eventp</name><operator>-&gt;</operator><name>last_check</name></name> <operator>&gt;=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>check_inter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>last_check</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>event_thr_prepare</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

			<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_doze</name><argument_list>(<argument><expr><ternary><condition><expr><name>delay</name> <operator>&gt;</operator> <name>DELAY_MIN</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>delay</name> <operator>/</operator> <literal type="number">1000</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>nready</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<goto>goto <name>TAG_DONE</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>,
			<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fdcnt</name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>,
			<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fdcnt</name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>blocked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nready</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>fdcnt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>delay</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>blocked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nready</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ACL_EINTR</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: event_loop: poll: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>TAG_DONE</name>;</goto>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nready</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>TAG_DONE</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fdcnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>acl_fdmap_ctx</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdmap</name></name></expr></argument>, <argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_XCPT</name> <operator>|</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>revents</name> <operator>=</operator> <name><name>event_thr</name><operator>-&gt;</operator><name>fdset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <name>ACL_EVENT_READ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_ACCEPT</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>revents</name> <operator>&amp;</operator> <name>POLLOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_WRITE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>revents</name> <operator>&amp;</operator> <operator>(</operator><name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_XCPT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>TAG_DONE</name>:</label>

	<comment type="block">/* Deliver timer events */</comment>
	<expr_stmt><expr><call><name>event_timer_trigger_thr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_thr_fire</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_add_dog</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_POLL_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_POLL_THR</name><operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>evdog</name></name> <operator>=</operator> <call><name>event_dog_create</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_EVENT</name><operator>*</operator><operator>)</operator> <name>event_thr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_free</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_POLL_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_POLL_THR</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>eventp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): eventp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LOCK_DESTROY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_DESTROY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fdmap_free</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event_poll_alloc_thr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fdsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_POLL_THR</name> <modifier>*</modifier></type><name>event_thr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>event_thr</name> <operator>=</operator> <operator>(</operator><name>EVENT_POLL_THR</name><operator>*</operator><operator>)</operator> <call><name>event_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_POLL_THR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>name</name></name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"thread events - poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>event_mode</name></name>           <operator>=</operator> <name>ACL_EVENT_POLL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>use_thread</name></name>           <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>loop_fn</name></name>              <operator>=</operator> <name>event_loop</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>free_fn</name></name>              <operator>=</operator> <name>event_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>add_dog_fn</name></name>           <operator>=</operator> <name>event_add_dog</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>enable_read_fn</name></name>       <operator>=</operator> <name>event_enable_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>enable_write_fn</name></name>      <operator>=</operator> <name>event_enable_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>enable_listen_fn</name></name>     <operator>=</operator> <name>event_enable_listen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>disable_readwrite_fn</name></name> <operator>=</operator> <name>event_disable_readwrite</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>isrset_fn</name></name>            <operator>=</operator> <name>event_isrset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>iswset_fn</name></name>            <operator>=</operator> <name>event_iswset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>isxset_fn</name></name>            <operator>=</operator> <name>event_isxset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>timer_request</name></name>        <operator>=</operator> <name>event_timer_request_thr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>timer_cancel</name></name>         <operator>=</operator> <name>event_timer_cancel_thr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>timer_keep</name></name>           <operator>=</operator> <name>event_timer_keep_thr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event</name><operator>.</operator><name>timer_ifkeep</name></name>         <operator>=</operator> <name>event_timer_ifkeep_thr</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOCK_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>tb_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fds</name></name> <operator>=</operator> <operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>fdsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>fdsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event_thr</name><operator>-&gt;</operator><name>fdmap</name></name> <operator>=</operator> <call><name>acl_fdmap_create</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ACL_EVENT</name> <operator>*</operator><operator>)</operator> <name>event_thr</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* ACL_EVENTS_POLL_STYLE */</comment>
</unit>
