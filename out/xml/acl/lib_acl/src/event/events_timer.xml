<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/event/events_timer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<struct>struct <name>EVENT_TIMERS</name> <block>{
	<decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>		<comment type="block" format="doxygen">/**&lt; ¹þÏ£±íÓÃÓÚ°´¼üÖµ²éÑ¯      */</comment>
	<decl_stmt><decl><type><name>avl_tree_t</name></type>  <name>avl</name></decl>;</decl_stmt>		<comment type="block" format="doxygen">/**&lt; ÓÃÓÚ°´Ê±¼äÅÅÐòµÄÆ½ºâ¶þ²æÊ÷ */</comment>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>TIMER_INFO</name></name></type> <name>TIMER_INFO</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>TIMER_NODE</name></name></type> <name>TIMER_NODE</name>;</typedef>

<comment type="block">/* Ã¿¸öÔªËØµÄÄÚ²¿¶ÔÏó£¬ËùÓÐÔªËØÁ¬½ÓÔÚÒ»Æð£¬Í¬Ê±±íÃ÷¸ÃÔªËØËùÊôµÄÊ÷½Úµã */</comment>
<struct>struct <name>TIMER_INFO</name> <block>{
	<decl_stmt><decl><type><name>TIMER_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl>;</decl_stmt> <comment type="block">/* callback function      */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>                  <comment type="block">/* callback context       */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>event_type</name></decl>;</decl_stmt>		<comment type="block">/* event type             */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>delay</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>keep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>tmp</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* ¾ßÓÐÏàÍ¬¹ýÆÚÊ±¼ä½ØµÄÔªËØ´æ·ÅÀï¸ÃÊ÷½ÚµãÉÏ */</comment>
<struct>struct <name>TIMER_NODE</name> <block>{
	<decl_stmt><decl><type><name>acl_int64</name></type>   <name>when</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>avl_node_t</name></type>  <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_KEY</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>char key[128];    \
	snprintf(key, sizeof(key), "%p.%p", x1, x2);</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * AVL ÓÃµÄ±È½Ï»Øµ÷º¯Êý
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>avl_cmp_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>TIMER_NODE</name></name> <modifier>*</modifier></type><name>n1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>TIMER_NODE</name><operator>*</operator><operator>)</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>TIMER_NODE</name></name> <modifier>*</modifier></type><name>n2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>TIMER_NODE</name><operator>*</operator><operator>)</operator> <name>v2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>ret</name> <init>= <expr><name><name>n1</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name><name>n2</name><operator>-&gt;</operator><name>when</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_timer_create</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name></name> <operator>=</operator> <operator>(</operator><name>EVENT_TIMERS</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_TIMERS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>avl_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>avl_cmp_fn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIMER_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		   <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>TIMER_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>event_timer_when</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><ternary><condition><expr><name>node</name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>when</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_timer_free</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_NODE</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TIMER_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* event_timer_request - (re)set timer */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>node_link</name><parameter_list>(<parameter><decl><type><name>TIMER_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* return 1 if the info's node has been freed*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>node_unlink</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>event_timer_request</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_NODE</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"/><name>iter</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>BUILD_KEY</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure we schedule this event at the right time. */</comment>
	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/**
	 * See if they are resetting an existing timer request. If so, take the
	 * request away from the timer queue so that it can be inserted at the
	 * right place.
	 */</comment>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>TIMER_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If not found, schedule a new timer request. */</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>TIMER_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIMER_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>delay</name></name>      <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>keep</name></name>       <operator>=</operator> <name>keep</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>callback</name></name>   <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>context</name></name>    <operator>=</operator> <name>context</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>ACL_EVENT_TIME</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>keep</name></name>  <operator>=</operator> <name>keep</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>node_unlink</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>when</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name>delay</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TIMER_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TIMER_NODE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIMER_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>when</name></name></expr>;</expr_stmt>
		<comment type="block" format="doxygen">/**
		 * Insert the request at the right place. Timer requests are
		 * kept sorted to reduce lookup overhead in the event loop.
		 */</comment>
		<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>node_link</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>when</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* event_timer_cancel - cancel timer */</comment>

<function><type><specifier>static</specifier> <name>acl_int64</name></type> <name>timer_cancel</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_int64</name></type>   <name>time_left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_NODE</name> <modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<comment type="block" format="doxygen">/**
	 * See if they are canceling an existing timer request. Do not complain
	 * when the request is not found. It might have been canceled from some
	 * other thread.
	 */</comment>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_htable_delete_entry</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>node_unlink</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>first</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>node_unlink</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>time_left</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>time_left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>time_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>time_left</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>event_timer_cancel</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>BUILD_KEY</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>TIMER_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>timer_cancel</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_timer_keep</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>BUILD_KEY</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>TIMER_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>keep</name></name> <operator>=</operator> <name>keep</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>  <name>event_timer_ifkeep</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>BUILD_KEY</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>TIMER_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>keep</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_timer_trigger</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>timer_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>timer_arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_NODE</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* collect all the timers that should be triggered */</comment>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>when</name></name> <operator>&gt;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers_ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_TO_INFO</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((TIMER_INFO *) ((char *) (r) - offsetof(TIMER_INFO, tmp)))</cpp:value></cpp:define>

	<while>while <condition>(<expr><operator>(</operator><name>ring</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers_ready</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name>      <operator>=</operator> <call><name>TMP_TO_INFO</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>timer_fn</name>  <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>callback</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>timer_arg</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>delay</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>keep</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>event_timer_request</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>timer_fn</name></expr></argument>,
				<argument><expr><name>timer_arg</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>keep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>timer_cancel</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>timer_fn</name><argument_list>(<argument><expr><name>ACL_EVENT_TIME</name></expr></argument>, <argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>timer_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
