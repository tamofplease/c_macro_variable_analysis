<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/event/acl_timer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_timer.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ring_to_timer</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((ACL_TIMER_INFO *) ((char *) (r) - offsetof(ACL_TIMER_INFO, entry)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>first_timer</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(acl_ring_succ(head) != (head) ? ring_to_timer(acl_ring_succ(head)) : 0)</cpp:value></cpp:define>

<function><type><name>acl_int64</name></type> <name>acl_timer_request</name><parameter_list>(<parameter><decl><type><name>ACL_TIMER</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>pTimerItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;timer-&gt;timer_header</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>pTimerItem</name> <operator>=</operator> <call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pTimerItem</name><operator>-&gt;</operator><name>obj</name></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pTimerItem</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name>delay</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* If not found, schedule a new timer request. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pTimerItem</name> <operator>=</operator> <operator>(</operator><name>ACL_TIMER_INFO</name><operator>*</operator><operator>)</operator>
			<call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_TIMER_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTimerItem</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name>delay</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTimerItem</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;timer-&gt;timer_header</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pTimerItem</name><operator>-&gt;</operator><name>when</name></name> <operator>&lt;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>when</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTimerItem</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name><name>pTimerItem</name><operator>-&gt;</operator><name>when</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_timer_cancel</name><parameter_list>(<parameter><decl><type><name>ACL_TIMER</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>time_left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;timer-&gt;timer_header</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>obj</name></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>time_left</name> <operator>=</operator> <name><name>pItem</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name><name>timer</name><operator>-&gt;</operator><name>present</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>time_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>time_left</name></name> <operator>=</operator> <name>time_left</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>time_left</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_timer_popup</name><parameter_list>(<parameter><decl><type><name>ACL_TIMER</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>pTimerItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pTimerItem</name> <operator>=</operator> <call><name>first_timer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pTimerItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pTimerItem</name><operator>-&gt;</operator><name>when</name></name> <operator>&gt;</operator> <name><name>timer</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTimerItem</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* first this */</comment>
	<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>pTimerItem</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pTimerItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>obj</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_timer_left</name><parameter_list>(<parameter><decl><type><name>ACL_TIMER</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>pTimerItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>time_left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pTimerItem</name> <operator>=</operator> <call><name>first_timer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pTimerItem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>time_left</name> <operator>=</operator> <name><name>pTimerItem</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name><name>timer</name><operator>-&gt;</operator><name>present</name></name></expr>;</expr_stmt>
		<comment type="block">/* Èç¹ûÏÂÒ»¸ö¶¨Ê±ÈÎÎñÒÑ¾­µ½ÆÚ£¬Ôò½«Ê£ÓàÊ±¼äÉè¶¨Îª0£¬
		 * ÒÔÊ¹¶¨Ê±Æ÷¾¡¿ì´¥·¢µ½ÆÚ¶¨Ê±ÈÎÎñ
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>time_left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>time_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Èç¹ûµ±Ê±¶¨Ê±Æ÷Ã»ÓÐ¶¨Ê±ÈÎÎñ£¬Ôò½«Ê±¼äÖµ¸³Îª -1 */</comment>
		<expr_stmt><expr><name>time_left</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>(</operator><name>time_left</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_timer_walk</name><parameter_list>(<parameter><decl><type><name>ACL_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>action</name>)<parameter_list>(<parameter><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;timer-&gt;timer_header</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>action</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>timer_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_TIMER</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>timer_header</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>timer_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_TIMER</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_RING</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>timer_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_TIMER</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>timer_header</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>timer_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_TIMER</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_RING</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>timer_iter_info</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_TIMER</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ring_to_timer</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_TIMER</name> <modifier>*</modifier></type><name>acl_timer_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>timer</name> <operator>=</operator> <operator>(</operator><name>ACL_TIMER</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_TIMER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <name>acl_timer_request</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>cancel</name></name> <operator>=</operator> <name>acl_timer_cancel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>popup</name></name> <operator>=</operator> <name>acl_timer_popup</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>timer_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>timer_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>timer_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>timer_iter_prev</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>iter_info</name></name> <operator>=</operator> <name>timer_iter_info</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>timer</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_timer_free</name><parameter_list>(<parameter><decl><type><name>ACL_TIMER</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TIMER_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>info</name> <operator>=</operator> <call><name>first_timer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>free_fn</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_timer_size</name><parameter_list>(<parameter><decl><type><name>ACL_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>timer_header</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
