<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/event/acl_events.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_epoll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_devpoll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_iocp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_wmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_init</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fdsize</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdsize</name></name> <operator>=</operator> <name>fdsize</name></expr>;</expr_stmt>
	<comment type="block">/* eventp-&gt;fdtab_free_cnt = 0; */</comment>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdpos</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name></name> <operator>=</operator> <operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_EVENT_FDTABLE</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_EVENT_FDTABLE</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>nested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>delay_sec</name></name>  <operator>=</operator> <name>delay_sec</name> <operator>+</operator> <name>delay_usec</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>delay_usec</name></name> <operator>=</operator> <name>delay_usec</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_timer_create</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timers_ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>last_debug</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>check_inter</name></name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>  <comment type="block">/* default: 100 ms */</comment>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>init_fn</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_limit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fdsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_limit"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MINGW</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdsize</name> <operator>=</operator> <call><name>acl_open_limit</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: unable to determine open file limit, err=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>fdsize</name> <operator>&lt;</operator> <literal type="number">10240</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: fdsize(%d) too small, extend it"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <literal type="number">10240</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: max fdsize: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fdsize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_event_new_select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fdsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <call><name>event_limit</name><argument_list>(<argument><expr><name>FD_SETSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_new_select</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_init</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_event_new_select_thr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fdsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <call><name>event_limit</name><argument_list>(<argument><expr><name>FD_SETSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_new_select_thr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_init</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_event_new_poll</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_EVENTS_POLL_STYLE</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fdsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <call><name>event_limit</name><argument_list>(<argument><expr><literal type="number">102400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_new_poll</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_init</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_new_poll"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay_sec</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay_usec</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_event_new_poll_thr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_EVENTS_POLL_STYLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fdsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <call><name>event_limit</name><argument_list>(<argument><expr><literal type="number">102400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_poll_alloc_thr</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_init</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_new_poll_thr"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay_sec</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay_usec</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_event_new_kernel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_EVENTS_KERNEL_STYLE</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fdsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <call><name>event_limit</name><argument_list>(<argument><expr><literal type="number">102400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_new_kernel</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_init</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_EVENTS_STYLE_IOCP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fdsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <literal type="number">102400</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_new_iocp</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_init</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_new_kernel"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay_sec</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay_usec</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_event_new_kernel_thr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_EVENTS_KERNEL_STYLE</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fdsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <call><name>event_limit</name><argument_list>(<argument><expr><literal type="number">102400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ACL_EVENTS_KERNEL_STYLE</name> <operator>==</operator> <name>ACL_EVENTS_STYLE_EPOLL</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_epoll_alloc_thr</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_new_kernel_thr</name><argument_list>(<argument><expr><name>fdsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>event_init</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_new_kernel_thr"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay_sec</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>delay_usec</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_event_new_wmsg</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nMsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_EVENTS_STYLE_WMSG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fdsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fdsize</name> <operator>=</operator> <call><name>event_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_new_wmsg</name><argument_list>(<argument><expr><name>nMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_init</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>fdsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_new_kernel"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>nMsg</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_event_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_thr</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_new"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>use_thr</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>event_mode</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_EVENT_SELECT</name></expr>:</case>
			<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>acl_event_new_select_thr</name><argument_list>(<argument><expr><name>delay_sec</name></expr></argument>,
					<argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_EVENT_KERNEL</name></expr>:</case>
			<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>acl_event_new_kernel_thr</name><argument_list>(<argument><expr><name>delay_sec</name></expr></argument>,
					<argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_EVENT_POLL</name></expr>:</case>
			<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>acl_event_new_poll_thr</name><argument_list>(<argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unsupport %d event"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<switch>switch <condition>(<expr><name>event_mode</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_EVENT_SELECT</name></expr>:</case>
			<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>acl_event_new_select</name><argument_list>(<argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_EVENT_KERNEL</name></expr>:</case>
			<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>acl_event_new_kernel</name><argument_list>(<argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_EVENT_POLL</name></expr>:</case>
			<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>acl_event_new_poll</name><argument_list>(<argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_EVENT_WMSG</name></expr>:</case>
			<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>acl_event_new_wmsg</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>delay_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unsupport %d event"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>eventp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_set_check_inter</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>check_inter</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>n</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_set_fire_hook</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fire_begin</name>)<parameter_list>(<parameter><decl><type><name>ACL_EVENT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fire_end</name>)<parameter_list>(<parameter><decl><type><name>ACL_EVENT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fire_begin</name></name> <operator>=</operator> <name>fire_begin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fire_end</name></name> <operator>=</operator> <name>fire_end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fire_ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_add_dog</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>add_dog_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_free</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>eventp</name><operator>-&gt;</operator><name>free_fn</name></name></expr></init>;</function_decl>

	<expr_stmt><expr><call><name>event_timer_free</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_event_time</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_enable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>read_timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_enable_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>enable_read_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>read_timeout</name></expr></argument>,
			<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_enable_write</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>write_timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_enable_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>enable_write_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>write_timeout</name></expr></argument>,
			<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_enable_listen</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>read_timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>enable_listen_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>read_timeout</name></expr></argument>,
			<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_disable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_disable_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>disable_read_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_disable_write</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_disable_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>disable_write_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_disable_readwrite</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>disable_readwrite_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_isset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_event_isrset</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call>
		<operator>||</operator> <call><name>acl_event_iswset</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_isrset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>eventp</name><operator>-&gt;</operator><name>isrset_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_iswset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>eventp</name><operator>-&gt;</operator><name>iswset_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_isxset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>eventp</name><operator>-&gt;</operator><name>isxset_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_event_request_timer</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_event_request_timer"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: invalid delay: %lld"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name><name>eventp</name><operator>-&gt;</operator><name>timer_request</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>keep</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_event_cancel_timer</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>eventp</name><operator>-&gt;</operator><name>timer_cancel</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_keep_timer</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>timer_keep</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_timer_ifkeep</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>eventp</name><operator>-&gt;</operator><name>timer_ifkeep</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_loop</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>loop_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_set_delay_sec</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>delay_sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_event_set_delay_usec</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>delay_usec</name></name> <operator>=</operator> <name>usec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_get_delay_sec</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>eventp</name><operator>-&gt;</operator><name>delay_sec</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_get_delay_usec</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>eventp</name><operator>-&gt;</operator><name>delay_usec</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_use_thread</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>eventp</name><operator>-&gt;</operator><name>use_thread</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_mode</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>eventp</name><operator>-&gt;</operator><name>event_mode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_event_last_nready</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
