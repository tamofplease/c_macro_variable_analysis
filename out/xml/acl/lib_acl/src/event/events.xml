<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/event/events.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>event_check_fds</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>fdpos</name></name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>fdpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5000</literal> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>fdpos</name></name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ev</name><operator>-&gt;</operator><name>fdpos</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>fdpos</name></name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_BAD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_BAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_XCPT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_BFRD_CNT</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>&gt;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_RW_TIMEOUT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>&gt;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_RW_TIMEOUT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_prepare</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>nwait</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_BAD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_BAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_XCPT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_BFRD_CNT</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>&gt;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_RW_TIMEOUT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>&gt;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_RW_TIMEOUT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>nwait</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_fire</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>   <name>r_timeout</name></decl>, <decl><type ref="prev"/><name>w_timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>r_callback</name></decl>, <decl><type ref="prev"/><name>w_callback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier><modifier>*</modifier></type><name>ready</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>fire_begin</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>fire_begin</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>fire_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <name><name>ready</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* ready[i] maybe been set NULL in timer callback */</comment>
		<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_EVENT_XCPT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r_callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>w_callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>r_callback</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>r_callback</name><argument_list>(<argument><expr><name>ACL_EVENT_XCPT</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
					<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* ready[i] maybe been set NULL in r_callback */</comment>
			<if_stmt><if>if <condition>(<expr><name>w_callback</name> <operator>&amp;&amp;</operator> <name><name>ready</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>w_callback</name><argument_list>(<argument><expr><name>ACL_EVENT_XCPT</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
					<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_EVENT_RW_TIMEOUT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r_timeout</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>w_timeout</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r_callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>w_callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>r_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r_callback</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_RW_TIMEOUT</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
					<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* ready[i] maybe been set NULL in r_callback */</comment>
			<if_stmt><if>if <condition>(<expr><name>w_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>w_callback</name> <operator>&amp;&amp;</operator> <name><name>ready</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_RW_TIMEOUT</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
					<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_READ</name> <operator>|</operator> <name>ACL_EVENT_ACCEPT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_READ</name> <operator>|</operator> <name>ACL_EVENT_ACCEPT</name><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* If there's some data lefting in stream's buf, then
			 * increasing the eventp-&gt;read_ready to trigger the
			 * event_check_fds proccess for next event loop
			 * more quickly.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>ready</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ready</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream</name>
				<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ready</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>||</operator>
				  <call><name>ACL_VSTREAM_BFRD_CNT</name><argument_list>(<argument><expr><name><name>ready</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>read_ready</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ready[i] maybe been set NULL in fdp-&gt;r_callback() */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ready</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_WRITE</name> <operator>|</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_WRITE</name> <operator>|</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>fire_end</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>fire_end</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>fire_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_thr_prepare</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>nwait</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_BAD</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_BAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_XCPT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_BFRD_CNT</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>&gt;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>ACL_EVENT_RW_TIMEOUT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>present</name></name> <operator>&gt;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>ACL_EVENT_RW_TIMEOUT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>nwait</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>nwait</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_thr_fire</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>fire_begin</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>fire_begin</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>fire_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* ev-&gt;ready[i] maybe be set NULL by timer callback */</comment>
		<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_READ</name> <operator>|</operator> <name>ACL_EVENT_ACCEPT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_READ</name> <operator>|</operator> <name>ACL_EVENT_ACCEPT</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>disable_readwrite_fn</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>ACL_EVENT_READ</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_WRITE</name> <operator>|</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_WRITE</name> <operator>|</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>disable_readwrite_fn</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>ACL_EVENT_WRITE</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_EVENT_RW_TIMEOUT</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>callback</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>disable_readwrite_fn</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>ACL_EVENT_RW_TIMEOUT</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>,
					<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ACL_EVENT_XCPT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_EVENT_XCPT</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>callback</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>disable_readwrite_fn</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>ACL_EVENT_XCPT</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>fire_end</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>fire_end</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>fire_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
