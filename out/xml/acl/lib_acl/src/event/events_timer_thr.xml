<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/event/events_timer_thr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<comment type="block">/* event_timer_request_thr - (re)set timer */</comment>

<function><type><name>acl_int64</name></type> <name>event_timer_request_thr</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>keep</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_THR</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>when</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>delay</name> <operator>&gt;=</operator> <literal type="number">4294963950LL</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: invalid delay: %lld"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>when</name> <operator>=</operator> <call><name>event_timer_request</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>when</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* event_timer_cancel_thr - cancel timer */</comment>

<function><type><name>acl_int64</name></type> <name>event_timer_cancel_thr</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_THR</name> <modifier>*</modifier></type><name>event_thr</name> <init>= <expr><operator>(</operator><name>EVENT_THR</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>time_left</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>time_left</name> <operator>=</operator> <call><name>event_timer_cancel</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event_thr</name><operator>-&gt;</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>time_left</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_timer_keep_thr</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name> <name>callback</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>keep</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>int</name></type>  <name>event_timer_ifkeep_thr</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name> <name>callback</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Deliver timer events. Requests are sorted: we can stop when we
 * reach the future or the list end. Allow the application to update
 * the timer queue while it is being called back. To this end, we
 * repeatedly pop the first request off the timer queue before
 * delivering the event to the application.
 */</comment>
<function><type><name>void</name></type> <name>event_timer_trigger_thr</name><parameter_list>(<parameter><decl><type><name>EVENT_THR</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>THREAD_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_timer_trigger</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>THREAD_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>tm_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
