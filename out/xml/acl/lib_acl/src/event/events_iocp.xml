<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/event/events_iocp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_PREPARE_COMPILE */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_EVENTS_STYLE_IOCP</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_fdtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_iocp.h"</cpp:file></cpp:include>

<typedef>typedef <macro><name>BOOL</name> <argument_list>(<argument>PASCAL FAR* LPFN_CONNECTEX</argument>)</argument_list></macro> <expr_stmt><expr><operator>(</operator>
        <name>IN</name>   <name>SOCKET</name> <name>s</name><operator>,</operator>
        <name>IN</name>   <specifier>const</specifier> struct <name>sockaddr</name> <name>FAR</name> <operator>*</operator><name>name</name><operator>,</operator>
        <name>IN</name>   <name>int</name> <name>namelen</name><operator>,</operator>
        <name>IN</name>   <name>PVOID</name> <name>lpSendBuffer</name> <name>OPTIONAL</name><operator>,</operator>
        <name>IN</name>   <name>DWORD</name> <name>dwSendDataLength</name><operator>,</operator>
        <name>OUT</name>  <name>LPDWORD</name> <name>lpdwBytesSent</name><operator>,</operator>
        <name>IN</name>   <name>LPOVERLAPPED</name> <name>lpOverlapped</name>
<operator>)</operator></expr>;</expr_stmt></typedef>

<typedef>typedef <type><struct>struct <name>EVENT_KERNEL</name> <block>{
	<decl_stmt><decl><type><name>ACL_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>fdp_delay_list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>event_fdslots</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>event_fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>h_iocp</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVENT_KERNEL</name>;</typedef>

<struct>struct <name>IOCP_EVENT</name> <block>{
	<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>overlapped</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IOCP_EVENT_READ</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCP_EVENT_WRITE</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCP_EVENT_DEAD</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCEPT_ADDRESS_LENGTH</name></cpp:macro> <cpp:value>((sizeof(struct sockaddr_in) + 16))</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myAddrBlock</name><index>[<expr><name>ACCEPT_ADDRESS_LENGTH</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_on_close</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"stream_on_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_KERNEL</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name><operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>is_completed</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null, sockfd(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_IOCP</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* windows xp »·¾³ÏÂ£¬±ØÐëÔÚ¹Ø±ÕÌ×½Ó×ÖÖ®Ç°µ÷ÓÃ´ËºêÅÐ¶ÏÖØµþ IO
	 * ÊÇ·ñ´¦ÓÚ STATUS_PENDING ×´Ì¬
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>is_completed</name> <operator>=</operator> <call><name>HasOverlappedIoCompleted</name><argument_list>(
			<argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>is_completed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* ±ØÐëÔÚÊÍ·Å fdp-&gt;event_read/fdp-&gt;event_write Ç°¹Ø±ÕÌ×½Ó¿Ú¾ä±ú */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name>
		<operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>close_fn</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>close_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_FILE_INVALID</name>
		<operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>fclose_fn</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>fclose_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ACL_FILE_INVALID</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÍê³É¶Ë¿Ú´¦ÓÚÎ´¾ö×´Ì¬£¬Ôò²»ÄÜÊÍ·ÅÖØµþ½á¹¹£¬ÐèÔÚÖ÷Ñ­»·µÄ
		 * GetQueuedCompletionStatus µ÷ÓÃºóÀ´ÊÍ·Å
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>is_completed</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_DEAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÍê³É¶Ë¿Ú´¦ÓÚÎ´¾ö×´Ì¬£¬Ôò²»ÄÜÊÍ·ÅÖØµþ½á¹¹£¬ÐèÔÚÖ÷Ñ­»·µÄ
		 * GetQueuedCompletionStatus µ÷ÓÃºóÀ´ÊÍ·Å
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>HasOverlappedIoCompleted</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_DEAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_DELAY_OPER</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>delay_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>maxfd</name></name> <operator>==</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>maxfd</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdtabs</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>fdidx</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>ready_cnt</name></name>
		<operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>==</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_fdtable_free</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>read_enable</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_KERNEL</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>event_fdtable_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_ADD_READ</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>fdp_delay_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>delay_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>fdp</name></expr>;</expr_stmt>

		<comment type="block">/* Ìí¼ÓÁ÷¹Ø±ÕÊ±µÄ»Øµ÷º¯Êý */</comment>
		<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_on_close</name></expr></argument>, <argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_ADD_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<goto>goto <name>END</name>;</goto>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DEL_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>

		<comment type="block">/* Í£Ö¹½ûÖ¹¶Á¼àÌý¹ý³Ì */</comment>

		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ÖØÐÂÆôÓÃ¶Á¼àÌý¹ý³Ì, ÒòÎªÖ®Ç°µÄ¹ý³ÌÊÇÕýÔÚ²ð³ý¶Á¼àÌý¹ý³Ìµ«
		 * »¹Ã»ÓÐÕýÊ½²ð³ý£¬ËùÒÔÖ»ÐèÒªÇå³ý²ð³ý±êÖ¾Î»¼´¿É
		 */</comment>

		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_DEL_READ</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_ADD_READ</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>fdp_delay_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>delay_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>END</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name> <operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>!=</operator> <name>callback</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name> <operator>!=</operator> <name>context</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>timeout</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>fdp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_listen</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>read_enable</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>,
			<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <call><name>acl_is_listening_socket</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>read_enable</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>,
			<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <call><name>acl_is_listening_socket</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_write</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_KERNEL</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>event_fdtable_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_ADD_WRITE</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>fdp_delay_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>delay_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>fdp</name></expr>;</expr_stmt>
		<comment type="block">/* Ìí¼ÓÁ÷¹Ø±ÕÊ±µÄ»Øµ÷º¯Êý */</comment>
		<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_on_close</name></expr></argument>, <argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_ADD_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<goto>goto <name>END</name>;</goto>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DEL_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_DEL_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_ADD_WRITE</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>fdp_delay_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>delay_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>END</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name> <operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>!=</operator> <name>callback</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name> <operator>!=</operator> <name>context</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>timeout</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* event_disable_read - disable request for read events */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_disable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_disable_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_KERNEL</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&gt;=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d)'s fdidx(%d) invalid, fdcnt: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr></argument>, <argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DEL_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_ADD_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_ADD_READ</name></expr>;</expr_stmt>
		<goto>goto <name>DEL_READ_TAG</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) not be set"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_DEL_READ</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>fdp_delay_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>delay_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>DEL_READ_TAG</name>:</label>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_READ</name> <operator>|</operator> <name>ACL_EVENT_ACCEPT</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator>
		<operator>||</operator> <operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_ADD_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>fdidx</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&lt;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name>
		<operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>==</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* event_disable_write - disable request for write events */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_disable_write</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_disable_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_KERNEL</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&gt;=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d)'s fdidx(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DEL_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_ADD_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_ADD_WRITE</name></expr>;</expr_stmt>
		<goto>goto <name>DEL_WRITE_TAG</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) not be set"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_DEL_WRITE</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>fdp_delay_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>delay_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_DELAY_OPER</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>DEL_WRITE_TAG</name>:</label>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_WRITE</name> <operator>|</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator>
		<operator>||</operator> <operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_ADD_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>fdidx</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&lt;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name>
		<operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>==</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* event_disable_readwrite - disable request for read or write events */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_disable_readwrite</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>event_disable_read</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_disable_write</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_listen</name><parameter_list>(<parameter><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"enable_listen"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>ReceiveLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>WSASocket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WSA_FLAG_OVERLAPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_LISTEN_IOCP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>iocp_sock</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>AcceptEx</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sock</name></expr></argument>,
		<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>myAddrBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>ACCEPT_ADDRESS_LENGTH</name></expr></argument>, <argument><expr><name>ACCEPT_ADDRESS_LENGTH</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ReceiveLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name>
		<operator>&amp;&amp;</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator><name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): AcceptEx error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_read</name><parameter_list>(<parameter><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"enable_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>recvBytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_ADD_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_READ</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>=</operator> <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name>sockfd</name></expr></argument>,
			<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG_PTR</name><operator>)</operator> <name>fdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>!=</operator> <name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): CreateIoCompletionPort error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_IOCP</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name></name> <operator>=</operator> <operator>(</operator><name>IOCP_EVENT</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOCP_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IOCP_EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_READ</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>enable_listen</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ReadFile</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name>sockfd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>recvBytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name>
		<operator>&amp;&amp;</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ReadFile error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_addr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>port</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>local_ip</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>remote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"parse_addr"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid addr(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid port(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>local_ip</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>remote</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt> 
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>local_ip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>remote</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>remote</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ip buf's length is 0"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_connect</name><parameter_list>(<parameter><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"enable_connect"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>SentLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>local_ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>remote</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPFN_CONNECTEX</name></type> <name>lpfnConnectEx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GUID</name></type>  <name>GuidConnectEx</name> <init>= <expr><name>WSAID_CONNECTEX</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dwErr</name></decl>, <decl><type ref="prev"/><name>dwBytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>any_ip</name> <init>= <expr><literal type="string">"0.0.0.0"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PEER</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>parse_addr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_ip</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>local_ip</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>local_ip</name> <operator>=</operator> <name>any_ip</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name>local_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): bind local ip(%s) error(%s, %d), sock: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>local_ip</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dwErr</name> <operator>=</operator> <call><name>WSAIoctl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,
			<argument><expr><name>SIO_GET_EXTENSION_FUNCTION_POINTER</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>GuidConnectEx</name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GuidConnectEx</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>lpfnConnectEx</name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpfnConnectEx</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>dwBytes</name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>dwErr</name>  <operator>==</operator>  <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): WSAIoctl error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>lpfnConnectEx</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,
			<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name>
		<operator>&amp;&amp;</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator><name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ConnectEx error(%s), sock(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_write</name><parameter_list>(<parameter><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"enable_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>sendBytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_ADD_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>=</operator> <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name>sockfd</name></expr></argument>,
			<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG_PTR</name><operator>)</operator> <name>fdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>!=</operator> <name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): CreateIoCompletionPort error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_IOCP</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name></name> <operator>=</operator> <operator>(</operator><name>IOCP_EVENT</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOCP_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IOCP_EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_WRITE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_CONNECTING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>enable_connect</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_CONNECTING</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WriteFile</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name>sockfd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>sendBytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name>
		<operator>&amp;&amp;</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): WriteFile error(%s), sockfd(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disable_read</name><parameter_list>(<parameter><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_DEL_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_READ</name> <operator>|</operator> <name>ACL_EVENT_ACCEPT</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disable_write</name><parameter_list>(<parameter><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_DEL_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_WRITE</name> <operator>|</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_set_all</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_KERNEL</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* ÓÅÏÈ´¦ÀíÌí¼Ó¶Á/Ð´¼à¿ØÈÎÎñ, ÕâÑù¿ÉÒÔ°Ñ ADD ÖÐ¼äÌ¬×ª»»³ÉÕýÊ½×´Ì¬ */</comment>

	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>-</operator> <name><name>eventp</name><operator>-&gt;</operator><name>last_check</name></name> <operator>&gt;=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>check_inter</name></name>
		<operator>||</operator> <name><name>eventp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>last_check</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>event_check_fds</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´¦ÀíÈÎÎñÏî */</comment>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>fdp_delay_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ACL_EVENT_FDTABLE</name></expr></argument>, <argument><expr><name>delay_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_ADD_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>enable_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_ADD_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>enable_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DEL_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>disable_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_DEL_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>disable_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_DELAY_OPER</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_XCPT</name> <operator>|</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>event_read</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>enable_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>event_write</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>enable_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_loop</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_loop"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_KERNEL</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>delay</name></decl>, <decl><type ref="prev"/><name>when</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>delay_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>eventp</name><operator>-&gt;</operator><name>delay_usec</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <name>DELAY_MIN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>DELAY_MIN</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Find out when the next timer would go off. Timer requests are sorted.
	 * If any timer is scheduled, adjust the delay appropriately.
	 */</comment>
	<expr_stmt><expr><name>when</name> <operator>=</operator> <call><name>event_timer_when</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>when</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>acl_int64</name></type> <name>n</name> <init>= <expr><name>when</name> <operator>-</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>delay</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>nested</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_set_all</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_doze</name><argument_list>(<argument><expr><ternary><condition><expr><name>delay</name> <operator>&gt;</operator> <name>DELAY_MIN</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>delay</name> <operator>/</operator> <literal type="number">1000</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>TAG_DONE</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>TAG_DONE</name>:</label>

	<expr_stmt><expr><call><name>event_timer_trigger</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>BOOL</name></type> <name>isSuccess</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>bytesTransferred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>iocp_event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>isSuccess</name> <operator>=</operator> <call><name>GetQueuedCompletionStatus</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>bytesTransferred</name></expr></argument>, <argument><expr><operator>(</operator><name>PULONG_PTR</name><operator>)</operator> <operator>&amp;</operator><name>fdp</name></expr></argument>,
			<argument><expr><operator>(</operator><name>OVERLAPPED</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>iocp_event</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>delay</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSuccess</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>iocp_event</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>iocp_event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IOCP_EVENT_DEAD</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>iocp_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>iocp_event</name><operator>-&gt;</operator><name>fdp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>iocp_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>iocp_event</name><operator>-&gt;</operator><name>fdp</name></name> <operator>!=</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fdp"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_XCPT</name>
				<operator>|</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_XCPT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* if the close message got after stream_on_close above ? */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>iocp_event</name><operator>-&gt;</operator><name>fdp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>fdp</name> <operator>==</operator> <name><name>iocp_event</name><operator>-&gt;</operator><name>fdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_XCPT</name> <operator>|</operator> <name>ACL_EVENT_RW_TIMEOUT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>iocp_event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IOCP_EVENT_READ</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_read</name></name> <operator>==</operator> <name>iocp_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iocp_event</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IOCP_EVENT_READ</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_READ</name>
				<operator>|</operator> <name>ACL_EVENT_WRITE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_ACCEPT</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>iocp_event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IOCP_EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_write</name></name> <operator>==</operator> <name>iocp_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iocp_event</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IOCP_EVENT_WRITE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_EVENT_READ</name>
				<operator>|</operator> <name>ACL_EVENT_WRITE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>|=</operator> <name>ACL_EVENT_WRITE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_fire</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>nested</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_isrset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_iswset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_isxset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_free</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_KERNEL</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event_new_iocp</name><parameter_list>(<parameter><decl><type><name>int</name> <name>fdsize</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_new_iocp"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_KERNEL</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_KERNEL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"events - %s"</literal></expr></argument>, <argument><expr><name>EVENT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>event_mode</name></name>           <operator>=</operator> <name>ACL_EVENT_KERNEL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>use_thread</name></name>           <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>loop_fn</name></name>              <operator>=</operator> <name>event_loop</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>free_fn</name></name>              <operator>=</operator> <name>event_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>enable_read_fn</name></name>       <operator>=</operator> <name>event_enable_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>enable_write_fn</name></name>      <operator>=</operator> <name>event_enable_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>enable_listen_fn</name></name>     <operator>=</operator> <name>event_enable_listen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>disable_read_fn</name></name>      <operator>=</operator> <name>event_disable_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>disable_write_fn</name></name>     <operator>=</operator> <name>event_disable_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>disable_readwrite_fn</name></name> <operator>=</operator> <name>event_disable_readwrite</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>isrset_fn</name></name>            <operator>=</operator> <name>event_isrset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>iswset_fn</name></name>            <operator>=</operator> <name>event_iswset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>isxset_fn</name></name>            <operator>=</operator> <name>event_isxset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timer_request</name></name>        <operator>=</operator> <name>event_timer_request</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timer_cancel</name></name>         <operator>=</operator> <name>event_timer_cancel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timer_keep</name></name>           <operator>=</operator> <name>event_timer_keep</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timer_ifkeep</name></name>         <operator>=</operator> <name>event_timer_ifkeep</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <operator>(</operator><name>EVENT_KERNEL</name><operator>*</operator><operator>)</operator> <name>eventp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>=</operator> <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): create iocp error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>fdp_delay_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
