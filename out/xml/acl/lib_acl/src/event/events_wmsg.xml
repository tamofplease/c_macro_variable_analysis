<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/event/events_wmsg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_htable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_PREPARE_COMPILE */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_EVENTS_STYLE_WMSG</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_SOCKET_NOTIFY</name></cpp:macro>	<cpp:value>(WM_USER + 8192)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_fdtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events_wmsg.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Timer events. Timer requests are kept sorted, in a circular list. We use
 * the RING abstraction, so we get to use a couple ugly macros.
 */</comment>
<typedef>typedef <type><struct>struct <name>EVENT_TIMER</name> <block>{
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>when</name></decl>;</decl_stmt>                <comment type="block">/* when event is wanted   */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>delay</name></decl>;</decl_stmt>               <comment type="block">/* timer deley            */</comment>
	<decl_stmt><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl>;</decl_stmt> <comment type="block">/* callback function      */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>event_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>                  <comment type="block">/* callback context       */</comment>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>ring</name></decl>;</decl_stmt>                  <comment type="block">/* linked in timer_header */</comment>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>tmp</name></decl>;</decl_stmt>                   <comment type="block">/* linked in timers       */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>nrefer</name></decl>;</decl_stmt>                   <comment type="block">/* refered's count        */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>ncount</name></decl>;</decl_stmt>                   <comment type="block">/* timer callback count   */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>keep</name></decl>;</decl_stmt>                     <comment type="block">/* if timer call restart  */</comment>
}</block></struct></type> <name>EVENT_TIMER</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_TO_TIMER</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((EVENT_TIMER *) ((char *) (r) - offsetof(EVENT_TIMER, ring)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_TO_TIMER</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((EVENT_TIMER *) ((char *) (r) - offsetof(EVENT_TIMER, tmp)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_TIMER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(acl_ring_succ(head) != (head) ? RING_TO_TIMER(acl_ring_succ(head)) : 0)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>EVENT_WMSG</name> <block>{
	<decl_stmt><decl><type><name>ACL_EVENT</name></type> <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UINT</name></type> <name>nMsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>timer_active</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>htbl</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>delay_close</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVENT_WMSG</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_on_close</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"stream_on_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name><operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>htbl</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ËäÈ»¸ÃÉèÖÃÄÜÈ¡ÏûÒÔºóµÄ¶ÁÐ´ÏûÏ¢£¬µ«ÒÀÈ»²»ÄÜÈ¡ÏûÒòÎª
	 * closesocket ¶ø²úÉúµÄ FD_CLOSE ÏûÏ¢
	 */</comment>
	<expr_stmt><expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	if ((fdp-&gt;flag &amp; EVENT_FDTABLE_FLAG_READ)
		&amp;&amp; (fdp-&gt;flag &amp; EVENT_FDTABLE_FLAG_WRITE))
	{
	} else if ((fdp-&gt;flag &amp; EVENT_FDTABLE_FLAG_READ)) {
	} else if ((fdp-&gt;flag &amp; EVENT_FDTABLE_FLAG_WRITE)) {
	}
	*/</comment>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>maxfd</name></name> <operator>==</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>maxfd</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdtabs</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>fdidx</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>ready_cnt</name></name>
		<operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>==</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>event_fdtable_free</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>stream_on_open</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"stream_on_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>event_fdtable_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>fdp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_on_close</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>htbl</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add key(%s) error"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>fdp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>read_enable</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_enable"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>lEvent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>stream_on_open</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_READ</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_ACCEPT</name> <operator>|</operator> <name>FD_READ</name> <operator>|</operator> <name>FD_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_READ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_READ</name> <operator>|</operator> <name>FD_WRITE</name> <operator>|</operator> <name>FD_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_READ</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_READ</name> <operator>|</operator> <name>FD_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>lEvent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set read error: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name> <operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>!=</operator> <name>callback</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name> <operator>!=</operator> <name>context</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <name>timeout</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>fdp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_listen</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>read_enable</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>,
			<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <call><name>acl_is_listening_socket</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>read_enable</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>,
			<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <call><name>acl_is_listening_socket</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_enable_write</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_RDWR</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_enable_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>lEvent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>stream_on_open</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fdp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_CONNECTING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_CONNECT</name> <operator>|</operator> <name>FD_WRITE</name> <operator>|</operator> <name>FD_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_READ</name> <operator>|</operator> <name>FD_WRITE</name> <operator>|</operator> <name>FD_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name> <operator>|</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_WRITE</name> <operator>|</operator> <name>FD_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>lEvent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set read error: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name> <operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&lt;</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>!=</operator> <name>callback</name> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name> <operator>!=</operator> <name>context</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <name>timeout</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_disable_read</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_disable_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&gt;=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d)'s fdidx invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) not in rmask"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_READ</name> <operator>|</operator> <name>ACL_EVENT_ACCEPT</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_READ</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>FD_WRITE</name> <operator>|</operator> <name>FD_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>fdidx</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&lt;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name>
		<operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>==</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>FD_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* event_disable_write - disable request for write events */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_disable_write</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_disable_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&gt;=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d)'s fdidx invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) not in wmask"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_ttl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>event_type</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ACL_EVENT_WRITE</name> <operator>|</operator> <name>ACL_EVENT_CONNECT</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FDTABLE_FLAG_WRITE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>FD_READ</name> <operator>|</operator> <name>FD_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>fdidx</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&lt;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name>
		<operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>==</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>FD_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* event_disable_readwrite - disable request for read or write events */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_disable_readwrite</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_disable_readwrite"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&gt;=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) no set, fdp no null"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>event_fdtable_free</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>eventp</name><operator>-&gt;</operator><name>isrset_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call>
		<operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>eventp</name><operator>-&gt;</operator><name>iswset_fn</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sockfd(%d) no set, fdp no null"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>event_fdtable_free</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>==</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name> <operator>=</operator> <name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>eventp</name><operator>-&gt;</operator><name>fdcnt</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>fdtabs</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>]</index></name><operator>-&gt;</operator><name>fdidx</name> <operator>=</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>FD_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>&lt;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready_cnt</name></name>
		<operator>&amp;&amp;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>==</operator> <name>fdp</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>ready</name><index>[<expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>fdidx_ready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_fdtable_free</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_isrset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_isrset"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_READ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_iswset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_iswset"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_WRITE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_isxset</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_isxset"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT_FDTABLE</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>fdp</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>EVENT_FDTABLE_FLAG_EXPT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>__event_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>EVENT_WMSG</name> <modifier>*</modifier></type><name>get_hwnd_event</name><parameter_list>(<parameter><decl><type><name>HWND</name> <name>hWnd</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__event_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_thread_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_thread_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__event_key</name></expr></argument>, <argument><expr><name>finish_thread_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_hwnd_event</name><parameter_list>(<parameter><decl><type><name>HWND</name> <name>hWnd</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"set_hwnd_event"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_control</name></expr></argument>, <argument><expr><name>init_thread_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>__event_key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __event_key(%d)'s value not null"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>__event_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>__event_key</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>EVENT_WMSG</name> <modifier>*</modifier></type><name>get_hwnd_event</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name><operator>*</operator><operator>)</operator> <call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_hwnd_event</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG_PTR</name><operator>)</operator> <name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>event_fdtable_find</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fdp</name> <operator>=</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>htbl</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fdp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleClose</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"handleClose"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>event_fdtable_find</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_XCPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
			<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_XCPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
			<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	else
		acl_msg_error("%s(%d): w_callback and r_callback null"
			" for sockfd(%d)", myname, __LINE__, (int) sockfd);
	*/</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleConnect</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"handleConnect"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>event_fdtable_find</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null for sockfd(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp-&gt;w_callback null for sockfd(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_CONNECTING</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_WRITE</name> <operator>|</operator> <name>ACL_EVENT_CONNECT</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleAccept</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"handleAccept"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>event_fdtable_find</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp callback null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_READ</name> <operator>|</operator> <name>ACL_EVENT_ACCEPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
		<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleRead</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"handleRead"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>event_fdtable_find</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null for sockfd(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
			<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¸ÃÃèÊö×Ö¿É¶ÁÔòÉèÖÃ ACL_VSTREAM µÄÏµÍ³¿É¶Á±êÖ¾´Ó¶ø´¥·¢
		 * ACL_VSTREAM Á÷ÔÚ¶ÁÊ±µ÷ÓÃÏµÍ³µÄ read º¯Êý
		 */</comment>
		<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>r_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
			<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>r_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* else
		acl_msg_error("%s(%d): fdp-&gt;r_callback null for sockfd(%d)",
			myname, __LINE__, (int) sockfd);
	*/</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleWrite</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"handleWrite"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_FDTABLE</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>event_fdtable_find</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdp null for sockfd(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fdp</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_CONNECTING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>handleConnect</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>fdp</name><operator>-&gt;</operator><name>w_callback</name></name><argument_list>(<argument><expr><name>ACL_EVENT_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
			<argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>w_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	else
		acl_msg_error("%s(%d): fdp-&gt;w_callback null for sockfd(%d)",
			myname, __LINE__, (int) sockfd);
	*/</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>WndProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>sockfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>get_hwnd_event</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_SOCKET_NOTIFY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <name>wParam</name></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><call><name>WSAGETSELECTEVENT</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>FD_ACCEPT</name></expr>:</case>
			<expr_stmt><expr><call><name>handleAccept</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FD_CONNECT</name></expr>:</case>
			<expr_stmt><expr><call><name>handleConnect</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FD_READ</name></expr>:</case>
			<expr_stmt><expr><call><name>handleRead</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FD_WRITE</name></expr>:</case>
			<expr_stmt><expr><call><name>handleWrite</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FD_CLOSE</name></expr>:</case>
			<expr_stmt><expr><call><name>handleClose</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>InitApplication</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"InitApplication"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WNDCLASSEX</name></type> <name>wcx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetClassInfoEx</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* class already registered */</comment>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): class(%s) already registered"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>TRUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fill in the window class structure with parameters
	 * that describe the main window.
	 */</comment>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wcx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wcx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wcx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>          <comment type="block">/* size of structure */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>CS_HREDRAW</name> <operator>|</operator> <name>CS_VREDRAW</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>WndProc</name></expr>;</expr_stmt>         <comment type="block">/* points to window procedure */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>cbClsExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                <comment type="block">/* no extra class memory */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>cbWndExtra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                <comment type="block">/* no extra window memory */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt>         <comment type="block">/* handle to instance */</comment>

	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <call><name>LoadIcon</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDI_APPLICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* predefined app. icon */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* predefined arrow */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <call><name>GetStockObject</name><argument_list>(<argument><expr><name>WHITE_BRUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* white background brush */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>lpszMenuName</name></name> <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>          <comment type="block">/* name of menu resource */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>class_name</name></expr>;</expr_stmt>    <comment type="block">/* name of window class */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hIconSm</name></name> <operator>=</operator> <call><name>LoadImage</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <comment type="block">/* small class icon */</comment>
		<argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>IMAGE_ICON</name></expr></argument>,
		<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXSMICON</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYSMICON</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Register the window class. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RegisterClassEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wcx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): RegisterClassEx error(%d, %s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>TRUE</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type> <name>InitInstance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"InitInstance"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CREATESTRUCT</name></type> <name>cs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>dwExStyle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lpszClass</name></name> <operator>=</operator> <name>class_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lpszName</name></name> <operator>=</operator> <literal type="string">"Acl Socket Notification Sink"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>WS_OVERLAPPED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>hwndParent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>hMenu</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>hInstance</name></name> <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lpCreateParams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>hWnd</name> <operator>=</operator> <call><name>CreateWindowEx</name><argument_list>(<argument><expr><name><name>cs</name><operator>.</operator><name>dwExStyle</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>lpszClass</name></name></expr></argument>,
		<argument><expr><name><name>cs</name><operator>.</operator><name>lpszName</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>style</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>cy</name></name></expr></argument>,
		<argument><expr><name><name>cs</name><operator>.</operator><name>hwndParent</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>hMenu</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>hInstance</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>lpCreateParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hWnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): create windows error: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>hWnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type> <name>CreateSockWindow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>InitApplication</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>InitInstance</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_loop</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>eventp</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VOID</name> <name>CALLBACK</name></type> <name>event_timer_callback</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>,
	<parameter><decl><type><name>UINT_PTR</name></type> <name>idEvent</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_timer_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>get_hwnd_event</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>timer_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>timer_arg</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ev null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>idEvent</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ev-&gt;tid(%u) != idEvent(%u)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>ev</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>idEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>timer</name> <operator>=</operator> <call><name>FIRST_TIMER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timer_head</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>when</name></name> <operator>&gt;</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>timer_fn</name>  <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>callback</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>timer_arg</name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

		<comment type="block">/* Èç¹û¶¨Ê±Æ÷µÄÊ±¼ä¼ä¸ô &gt; 0 ÇÒÔÊÐí¶¨Ê±Æ÷±»Ñ­»·µ÷ÓÃ£¬ÔòÔÙÖØÉè¶¨Ê±Æ÷ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>delay</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>timer</name><operator>-&gt;</operator><name>keep</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>ncount</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>eventp</name><operator>-&gt;</operator><name>timer_request</name></name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>callback</name></name></expr></argument>,
				<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>keep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* first this */</comment>
			<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>timer</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): nrefer(%d) != 0"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>timer</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>timer_fn</name><argument_list>(<argument><expr><name>ACL_EVENT_TIME</name></expr></argument>, <argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>timer_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>timer</name> <operator>=</operator> <call><name>FIRST_TIMER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timer_head</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>idEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>  <name>delay</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>delay</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>timer</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

		<comment type="block">/* ÒªÇóÊ±¼ä¶¨Ê±Æ÷µÄ¼ä¸ô×îÉÙÊÇ 1 ºÁÃë */</comment>
		<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SetTimer</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>event_timer_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>acl_int64</name></type> <name>event_set_timer</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name><operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>when</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>first_delay</name></decl>;</decl_stmt>

	<comment type="block">/* ÒªÇóÊ±¼ä¶¨Ê±Æ÷µÄ¼ä¸ô×îÉÙÊÇ 1 ºÁÃë */</comment>
	<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>FIRST_TIMER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timer_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>first_delay</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>first_delay</name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name><name>eventp</name><operator>-&gt;</operator><name>present</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>first_delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>first_delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>when</name> <operator>=</operator> <call><name>event_timer_request</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>keep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* set the new timer */</comment>
		<expr_stmt><expr><call><name>SetTimer</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>delay</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
			<argument><expr><name>event_timer_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>first_delay</name> <operator>&gt;</operator> <name>delay</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* reset the old timer */</comment>
		<expr_stmt><expr><call><name>SetTimer</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>delay</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,
			<argument><expr><name>event_timer_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>when</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>acl_int64</name></type> <name>event_del_timer</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name><operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>when</name> <init>= <expr><call><name>event_timer_cancel</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>&amp;&amp;</operator> <call><name>FIRST_TIMER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timer_head</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>when</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_free</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"event_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>eventp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): eventp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>WNDCLASSEX</name></type> <name>wcx</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>class_name</name></name> <operator>&amp;&amp;</operator> <call><name>GetClassInfoEx</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hInstance</name></name></expr></argument>,
			<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"unregister class: %s"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>UnregisterClass</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hInstance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>htbl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__class_name</name> <init>= <expr><literal type="string">"__AclEventsMainWClass"</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event_new_wmsg</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>nMsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstance</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name> <init>= <expr><call><name>CreateSockWindow</name><argument_list>(<argument><expr><name>__class_name</name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hWnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>event_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_WMSG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>eventp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"events - wmsg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>event_mode</name></name>           <operator>=</operator> <name>ACL_EVENT_WMSG</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>use_thread</name></name>           <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>loop_fn</name></name>              <operator>=</operator> <name>event_loop</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>free_fn</name></name>              <operator>=</operator> <name>event_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>enable_read_fn</name></name>       <operator>=</operator> <name>event_enable_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>enable_write_fn</name></name>      <operator>=</operator> <name>event_enable_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>enable_listen_fn</name></name>     <operator>=</operator> <name>event_enable_listen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>disable_read_fn</name></name>      <operator>=</operator> <name>event_disable_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>disable_write_fn</name></name>     <operator>=</operator> <name>event_disable_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>disable_readwrite_fn</name></name> <operator>=</operator> <name>event_disable_readwrite</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>isrset_fn</name></name>            <operator>=</operator> <name>event_isrset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>iswset_fn</name></name>            <operator>=</operator> <name>event_iswset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>isxset_fn</name></name>            <operator>=</operator> <name>event_isxset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timer_request</name></name>        <operator>=</operator> <name>event_set_timer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timer_cancel</name></name>         <operator>=</operator> <name>event_del_timer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timer_keep</name></name>           <operator>=</operator> <name>event_timer_keep</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eventp</name><operator>-&gt;</operator><name>timer_ifkeep</name></name>         <operator>=</operator> <name>event_timer_ifkeep</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eventp</name><operator>-&gt;</operator><name>timer_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <operator>(</operator><name>EVENT_WMSG</name><operator>*</operator><operator>)</operator> <name>eventp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name> <operator>=</operator> <ternary><condition><expr><name>nMsg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>nMsg</name></expr> </then><else>: <expr><name>WM_SOCKET_NOTIFY</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>htbl</name></name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name> <operator>=</operator> <name>hWnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>hInstance</name></name> <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <name>__class_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timer_active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>delay_close</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_hwnd_event</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>eventp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HWND</name></type> <name>acl_event_wmsg_hwnd</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name><operator>*</operator><operator>)</operator> <name>eventp</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_EVENTS_STYLE_WMSG */</comment>
</unit>
