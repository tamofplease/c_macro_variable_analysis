<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/msg/acl_msgio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_vstream_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msg/acl_msgio.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>MSGIO_CTX</name></name></type> <name>MSGIO_CTX</name>;</typedef>

<comment type="block">/* IO ÏûÏ¢¾ä±ú */</comment>
<struct>struct <name>ACL_MSGIO</name> <block>{
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>msg_list</name></decl>;</decl_stmt>
	<union>union <block>{
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>async</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sync</name></decl>;</decl_stmt>
	}</block> <decl><name>stream</name></decl>;</union>
	<decl_stmt><decl><type><name>int</name></type>   <name>rw_timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_MSGIO_TYPE_CLIENT</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_MSGIO_TYPE_SERVER</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_MSGIO_TYPE_ACCEPT</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>int</name></type>   <name>keep_alive</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* ÏûÏ¢ÐÅÏ¢ÔØÌå½á¹¹¶¨Òå */</comment>
<typedef>typedef <type><struct>struct <name>MSG_ITEM</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>   <name>id</name></decl>;</decl_stmt>		<comment type="block">/* ÏûÏ¢ ID */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>inherit</name></decl>;</decl_stmt>		<comment type="block">/* ÊÇ·ñÔÊÐíÏûÏ¢¼Ì³Ð£¬Ö÷ÒªÓÃÓÚÔÚ´´½¨¿Í»§¶Ë
				 * ÏûÏ¢¶ÔÏóºó¿ËÂ¡¼àÌý¶ÔÏóµÄÏûÏ¢¼¯ºÏÊ±
				 */</comment>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>entry</name></decl>;</decl_stmt>		<comment type="block">/* Á¬½Ó½ø ACL_MSGIO.msg_list */</comment>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>call_list</name></decl>;</decl_stmt>	<comment type="block">/* MSG_CALL ¶ÔÏó¼¯ºÏ */</comment>
}</block></struct></type> <name>MSG_ITEM</name>;</typedef>

<comment type="block">/* ÏûÏ¢»Øµ÷´¦Àí¹ý³ÌÔØÌå½á¹¹¶¨Òå */</comment>
<typedef>typedef <type><struct>struct <name>MSG_CALL</name> <block>{
	<decl_stmt><decl><type><name>MSG_ITEM</name>  <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>		<comment type="block">/* Ö¸ÏòÏûÏ¢ */</comment>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>entry</name></decl>;</decl_stmt>		<comment type="block">/* Á¬½Ó½ø MSG_ITEM.call_list */</comment>
	<decl_stmt><decl><type><name>ACL_MSGIO_NOTIFY_FN</name></type> <name>notify_fn</name></decl>;</decl_stmt> <comment type="block">/* ÏûÏ¢»Øµ÷º¯Êý */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>		<comment type="block">/* ÏûÏ¢»Øµ÷º¯ÊýµÄ²ÎÊý */</comment>
}</block></struct></type> <name>MSG_CALL</name>;</typedef>

<struct>struct <name>MSGIO_CTX</name> <block>{
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO_INFO</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MSGIO</name> <modifier>*</modifier></type><name>__global_mio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__global_mutex</name></decl>;</decl_stmt>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>MSGIO_CTX</name> <modifier>*</modifier></type><name>msgio_ctx_new</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MSGIO_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>body</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mio</name></name> <operator>=</operator> <name>mio</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ctx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_ctx_free</name><parameter_list>(<parameter><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>body</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<comment type="block">/* ´´½¨ÐÂµÄÏûÏ¢»Øµ÷´¦Àí¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>MSG_CALL</name> <modifier>*</modifier></type><name>msg_call_new</name><parameter_list>(<parameter><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO_NOTIFY_FN</name></type> <name>notify_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call</name> <init>= <expr><call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MSG_CALL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>call</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>call</name><operator>-&gt;</operator><name>notify_fn</name></name> <operator>=</operator> <name>notify_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>call</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>call</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·ÅÏûÏ¢»Øµ÷´¦Àí¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_call_free</name><parameter_list>(<parameter><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<comment type="block">/* ´´½¨ÐÂµÄÏûÏ¢¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inherit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MSG_ITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>inherit</name></name> <operator>=</operator> <name>inherit</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>call_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>msg</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÏòÏûÏ¢µÄ´¦Àí¶ÔÏó¼¯ºÏÖÐÌí¼ÓÐÂµÄ´¦Àí¶ÔÏó */</comment>
  
<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_add</name><parameter_list>(<parameter><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>call_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·ÅÏûÏ¢¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_free</name><parameter_list>(<parameter><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>call_list</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>call</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MSG_CALL</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_call_free</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ÏòÏûÏ¢´¦Àí¶ÔÏó¼¯ºÏÖÐÌí¼ÓÐÂµÄ´¦Àí¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_append</name><parameter_list>(<parameter><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO_NOTIFY_FN</name></type> <name>notify_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call</name></decl>;</decl_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;msg-&gt;call_list</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>call</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MSG_CALL</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>notify_fn</name></name> <operator>==</operator> <name>notify_fn</name></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>call</name> <operator>=</operator> <call><name>msg_call_new</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>notify_fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>call_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ¿½±´¿ËÂ¡Ä³ÏûÏ¢µÄ´¦Àí¶ÔÏó¼¯ºÏ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_clone</name><parameter_list>(<parameter><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg_from</name></decl></parameter>, <parameter><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg_to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call_from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>call_to</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;msg_from-&gt;call_list</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>call_from</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MSG_CALL</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>call_to</name> <operator>=</operator> <call><name>msg_call_new</name><argument_list>(<argument><expr><name>msg_to</name></expr></argument>, <argument><expr><name><name>call_from</name><operator>-&gt;</operator><name>notify_fn</name></name></expr></argument>,
				<argument><expr><name><name>call_from</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_add</name><argument_list>(<argument><expr><name>msg_to</name></expr></argument>, <argument><expr><name>call_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* ¿½±´¿ËÂ¡ÏûÏ¢¼¯ºÏ¼°ÏûÏ¢´¦Àí¶ÔÏó¼¯ºÏ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_list_clone</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio_from</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio_to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg_from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>msg_to</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;mio_from-&gt;msg_list</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>msg_from</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MSG_ITEM</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg_from</name><operator>-&gt;</operator><name>inherit</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>msg_to</name> <operator>=</operator> <call><name>msg_new</name><argument_list>(<argument><expr><name><name>msg_from</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>msg_from</name><operator>-&gt;</operator><name>inherit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mio_to</name><operator>-&gt;</operator><name>msg_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg_to</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_clone</name><argument_list>(<argument><expr><name>msg_from</name></expr></argument>, <argument><expr><name>msg_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* ¸ù¾ÝÏûÏ¢ID²éÑ¯ÏûÏ¢¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg_find</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;mio-&gt;msg_list</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MSG_ITEM</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>msg</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* È¡ÏûÄ³ÏûÏ¢µÄÄ³¸ö´¦Àí¹ý³Ì */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_unreg</name><parameter_list>(<parameter><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO_NOTIFY_FN</name></type> <name>notify_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call</name></decl>;</decl_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;msg-&gt;call_list</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>call</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MSG_CALL</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>notify_fn</name></name> <operator>==</operator> <name>notify_fn</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>msg_call_free</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* È¡ÏûÄ³ÏûÏ¢µÄËùÓÐ´¦Àí¹ý³Ì²¢ÊÍ·ÅÏûÏ¢¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_unreg_all</name><parameter_list>(<parameter><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>msg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>ACL_MSGIO</name> <modifier>*</modifier></type><name>msgio_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_msgio_new"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>mio</name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MSGIO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mio</name><operator>-&gt;</operator><name>msg_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><operator>(</operator><name>mio</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_close</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_msgio_unreg_all</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mio</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_msgio_init"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__global_mio</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: be called more than twice"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__global_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__global_mio</name> <operator>=</operator> <call><name>msgio_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msgio_reg</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
	<parameter><decl><type><name>ACL_MSGIO_NOTIFY_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inherit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name><init>= <expr><literal type="string">"acl_msgio_reg"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mio</name> <operator>=</operator> <name>__global_mio</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: call acl_msgio_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_find</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÏÈ²éÑ¯Ä³¸öÏûÏ¢ÊÇ·ñ´æÔÚ£¬Èç¹û´æÔÚÔòÏò¸ÃÏûÏ¢¶ÔÏóÌí¼Ó´¦Àí¹ý³Ì,
	 * ·ñÔò£¬´´½¨²¢Ìí¼ÓÐÂµÄÏûÏ¢¶ÔÏó¼°´¦Àí¹ý³Ì
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_append</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_new</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>call</name> <operator>=</operator> <call><name>msg_call_new</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_add</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mio</name><operator>-&gt;</operator><name>msg_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_reg</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
	<parameter><decl><type><name>ACL_MSGIO_NOTIFY_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>msgio_reg</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_listen_reg</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
	<parameter><decl><type><name>ACL_MSGIO_NOTIFY_FN</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inherit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>msgio_reg</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_unreg</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO_NOTIFY_FN</name></type> <name>callback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_msgio_unreg"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mio</name> <operator>=</operator> <name>__global_mio</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: call acl_msgio_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_find</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>msg_unreg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_unreg_id</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_msgio_unreg_id"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mio</name> <operator>=</operator> <name>__global_mio</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: call acl_msgio_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_find</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_unreg_all</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_unreg_all</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_msgio_unreg_all"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mio</name> <operator>=</operator> <name>__global_mio</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: call acl_msgio_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mio</name><operator>-&gt;</operator><name>msg_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MSG_ITEM</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_unreg_all</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* µ÷ÓÃÄ³¸ö ACL_MSGIO ¾ä±úÖÐÄ³¸öÏûÏ¢µÄËùÓÐ´¦Àí¹ý³Ì */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dispatch_foreach</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_MSGIO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dispatch_foreach"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSG_CALL</name> <modifier>*</modifier></type><name>call</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSG_ITEM</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÕÒ³ö×¢²á¸ÃÏûÏ¢ (id) µÄ¶ÔÏó¼¯ºÏ */</comment>
	<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>msg_find</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>ACL_MSGIO_QUIT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: not found quit handler,"</literal>
				<literal type="string">" msgio quit(%d) now"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;msg-&gt;call_list</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>call</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MSG_CALL</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>call</name><operator>-&gt;</operator><name>notify_fn</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>mio</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>ACL_MSGIO_QUIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"msgio quit now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ·¢ËÍÏûÏ¢, µ÷ÓÃÏûÏ¢»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>message_dispatch</name><parameter_list>(<parameter><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"message_dispatch"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_foreach</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: dispatch_foreach error, type=%d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msgio_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>__global_mio</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_foreach</name><argument_list>(<argument><expr><name>__global_mio</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
				<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: dispatch_foreach error, type=%d"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msgio_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Òì²½¶ÁÏûÏ¢Ìå»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_body_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_body_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MSGIO_CTX</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: dlen=%d, hdr.dlen=%d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¿½±´ÏûÏ¢ÌåÊý¾Ý */</comment>
	<expr_stmt><expr><call><name>acl_vstring_memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>body</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ·¢ËÍÏûÏ¢ÖÁ¸÷¸ö×¢²áº¯Êý */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>message_dispatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Òì²½µÈ´ýÏÂÒ»¸öÏûÏ¢ */</comment>
	<return>return <expr><operator>(</operator><call><name>acl_msgio_wait</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Òì²½¶ÁÏûÏ¢Í·»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_hdr_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_hdr_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MSGIO_CTX</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_MSGIO_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ACL_MSGIO_INFO</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ð£ÑéÏûÏ¢Í·³¤¶È */</comment>
	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: dlen=%d, size=%d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>dlen</name></name></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û¸ÃÏûÏ¢ÓÐÏûÏ¢ÌåÔò¶ÁÏûÏ¢Ìå */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_add_read_hook</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>read_body_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ¿ªÊ¼¶ÁÏûÏ¢Ìå */</comment>
		<expr_stmt><expr><call><name>acl_aio_readn</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¸ÃÏûÏ¢Ã»ÓÐÏûÏ¢Ìå£¬Ôò¿ªÊ¼ÅÉ·¢ÏûÏ¢ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>message_dispatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: message_dispatch error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Òì²½µÈ´ýÏÂÒ»¸öÏûÏ¢ */</comment>
	<return>return <expr><operator>(</operator><call><name>acl_msgio_wait</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Òì²½·½Ê½µÈ´ýIOÏûÏ¢ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>async_wait_msg</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ×¢²á»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_hdr_callback</name></expr></argument>, <argument><expr><name><name>mio</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Òì²½¶ÁÏûÏ¢Í· */</comment>
	<expr_stmt><expr><call><name>acl_aio_readn</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Í¬²½·½Ê½µÈ´ýIOÏûÏ¢ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sync_wait_msg</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"sync_wait_msg"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>mio</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dlen</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<comment type="block">/* Í¬²½¶ÁÏûÏ¢Í· */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_readn</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: vstream read error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><call><name>message_dispatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* ·¢ËÍÏûÏ¢µ½¸÷¸ö×¢²áº¯Êý */</comment>

	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name></expr>;</expr_stmt>
	<comment type="block">/* Í¬²½¶ÁÏûÏ¢Ìå */</comment>
	<while>while <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: read msg body error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strncat</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>body</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dlen</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* ·¢ËÍÏûÏ¢µ½¸÷¸ö×¢²áº¯Êý */</comment>
	<return>return <expr><operator>(</operator><call><name>message_dispatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_msgio_wait</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_msgio_wait"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mio_client</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_MSGIO_TYPE_ACCEPT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ACL_MSGIO_TYPE_ACCEPT use here"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mio_client</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><call><name>async_wait_msg</name><argument_list>(<argument><expr><name>mio_client</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><call><name>sync_wait_msg</name><argument_list>(<argument><expr><name>mio_client</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_mio_onclose</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name> <init>= <expr><operator>(</operator><name>ACL_MSGIO</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>acl_msgio_unreg_all</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_msg_ctx_onclose</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MSGIO_CTX</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>msg_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>close_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"close_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MSGIO_CTX</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: close it(%d) now(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
		<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ACL_MSGIO_EXCEPT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>message_dispatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>io_timeout_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MSGIO_CTX</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ACL_MSGIO_TIMEOUT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>message_dispatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÏûÏ¢·þÎñÆ÷½ÓÊÕ¿Í»§¶ËÁ¬½Ó */</comment>

<function><type><specifier>static</specifier> <name>ACL_MSGIO</name> <modifier>*</modifier></type><name>accept_connection</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>listener</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"accept_connection"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio_client</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx_client</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_accept</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): accept error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mio_client</name> <operator>=</operator> <call><name>msgio_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mio_client</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_MSGIO_TYPE_SERVER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mio_client</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <name><name>listener</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>msg_list_clone</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>mio_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mio_client</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <name><name>listener</name><operator>-&gt;</operator><name>aio</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ctx_client</name> <operator>=</operator> <call><name>msgio_ctx_new</name><argument_list>(<argument><expr><name>mio_client</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PEER</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>free_msg_ctx_onclose</name></expr></argument>, <argument><expr><name>ctx_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>free_mio_onclose</name></expr></argument>, <argument><expr><name>mio_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mio_client</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÈôÊÇÒì²½¶ÁÏûÏ¢£¬Ôò... */</comment>
		<expr_stmt><expr><name><name>mio_client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name><name>mio_client</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>mio_client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><name><name>mio_client</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>io_timeout_callback</name></expr></argument>, <argument><expr><name>ctx_client</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>close_callback</name></expr></argument>, <argument><expr><name>ctx_client</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>ctx_client</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>mio_client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><operator>(</operator><name>mio_client</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ¼àÌýÃèÊö·û¿É¶ÁµÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>listen_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>sstream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"listen_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MSGIO_CTX</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio_client</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sstream</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sstream invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mio_client</name> <operator>=</operator> <call><name>accept_connection</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mio_client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): accept null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>acl_msgio_wait</name><argument_list>(<argument><expr><name>mio_client</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): acl_msgio_wait error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>acl_msgio_listen</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_msgio_listen"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local</name> <init>= <expr><literal type="string">"127.0.0.1:0"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>listener</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: aio null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>addr_ptr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>addr_ptr</name> <operator>=</operator> <name>local</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>msgio_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_MSGIO_TYPE_ACCEPT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_listen_ex</name><argument_list>(
			<argument><expr><name>addr_ptr</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ACL_INET_FLAG_NBLOCK</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: listen(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr_ptr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_LOCAL</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>ACL_VSTREAM_LOCAL</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_LOCAL</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>msgio_ctx_new</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name><name>listener</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>listener</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_LISTEN_FN</name></expr></argument>, <argument><expr><name>listen_callback</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_listen</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>listener</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>acl_msgio_accept</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>listener</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio_client</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mio_client</name> <operator>=</operator> <call><name>accept_connection</name><argument_list>(
			<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name><name>listener</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>mio_client</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Á¬½Ó³¬Ê±»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_timeout_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MSGIO_CTX</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ACL_MSGIO_CONNECT_TIMEOUT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>message_dispatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Á¬½Ó³É¹¦»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MSGIO_CTX</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* reset the timeout handler */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>io_timeout_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ACL_MSGIO_CONNECT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>message_dispatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Òì²½µÈ´ýÏûÏ¢ */</comment>
	<return>return <expr><operator>(</operator><call><name>acl_msgio_wait</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ¿ªÊ¼Òì²½Á¬½ÓÏûÏ¢·þÎñÆ÷ */</comment>

<function><type><specifier>static</specifier> <name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>async_connect</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>, <parameter><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>astream</name> <operator>=</operator> <call><name>acl_aio_connect</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>rw_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>astream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CONNECT_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>close_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_timeout_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><name>rw_timeout</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>astream</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_set_noblock</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name><name>mio</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Òì²½µÈ´ýÏûÏ¢ */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_msgio_wait</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>acl_msgio_connect</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSGIO_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mio</name> <operator>=</operator> <call><name>msgio_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>keep_alive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_MSGIO_TYPE_CLIENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <ternary><condition><expr><name>rw_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>rw_timeout</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>msgio_ctx_new</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>aio</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name> <operator>=</operator> <call><name>async_connect</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>rw_timeout</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>stream</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>, <argument><expr><name>rw_timeout</name></expr></argument>,
				<argument><expr><name>rw_timeout</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_ctx_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msgio_close</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>free_msg_ctx_onclose</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>free_mio_onclose</name></expr></argument>, <argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>mio</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Í¬²½·¢ËÍÏûÏ¢ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_msg</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"send_msg"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO_INFO</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>vector</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mio</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: stream NULL"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MSGIO_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hdr</name><operator>.</operator><name>dlen</name></name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>info</name><operator>.</operator><name>hdr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writevn</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: write msg hdr error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>
	<comment type="block">/* Í¬²½·¢ËÍÏûÏ¢Í· */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: write msg hdr error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Í¬²½·¢ËÍÏûÏ¢Ìå */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: write msg body error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: fflush to stream(%d) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* Í¬²½·¢ËÍÏûÏ¢Í· */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: write msg hdr error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Í¬²½·¢ËÍÏûÏ¢Ìå */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: write msg body error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_msgio_send</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_msgio_send"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mio</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mio</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mio</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_MSGIO_TYPE_ACCEPT</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>acl_msgio_addr</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>acl_msgio_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: connect server(%s) error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>send_msg</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msgio_close</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>send_msg</name><argument_list>(<argument><expr><name>mio</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_msgio_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>mio</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>acl_msgio_aio</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>mio</name><operator>-&gt;</operator><name>aio</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_msgio_vstream</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>mio</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>sync</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>acl_msgio_astream</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>mio</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>mio</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>async</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
