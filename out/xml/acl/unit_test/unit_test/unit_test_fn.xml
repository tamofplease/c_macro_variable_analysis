<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/unit_test/unit_test/unit_test_fn.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unit_test.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>test_unit_param</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg_unused</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"test_unit_param"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>account</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sender</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>number</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AUT_SET_STR</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><literal type="string">"account"</literal></expr></argument>, <argument><expr><name>account</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AUT_SET_STR</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><literal type="string">"sender"</literal></expr></argument>, <argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AUT_SET_INT</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><literal type="string">"number"</literal></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: account=%s, sender=%s, number=%d\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>account</name></expr></argument>, <argument><expr><name>sender</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_unit_loop</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg_unused</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AUT_SET_INT</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
