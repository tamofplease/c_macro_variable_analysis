<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/unit_test/stdlib/test_string.c"><comment type="block">/* #include "StdAfx.h"*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_stdlib.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>test_strrncasecmp</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s01</name> <init>= <expr><literal type="string">"hello WorLd"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s02</name> <init>= <expr><literal type="string">"world"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s11</name> <init>= <expr><literal type="string">"hello"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s12</name> <init>= <expr><literal type="string">"world"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>s01</name></expr></argument>, <argument><expr><name>s02</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s02</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>s01</name></expr></argument>, <argument><expr><name>s02</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s02</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>s11</name></expr></argument>, <argument><expr><name>s12</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_strrncmp</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s01</name> <init>= <expr><literal type="string">"hello world"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s02</name> <init>= <expr><literal type="string">"world"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s11</name> <init>= <expr><literal type="string">"hello"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s12</name> <init>= <expr><literal type="string">"world"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><call><name>strrncmp</name><argument_list>(<argument><expr><name>s01</name></expr></argument>, <argument><expr><name>s02</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s02</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><call><name>strrncmp</name><argument_list>(<argument><expr><name>s01</name></expr></argument>, <argument><expr><name>s02</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s02</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><call><name>strrncmp</name><argument_list>(<argument><expr><name>s11</name></expr></argument>, <argument><expr><name>s12</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_x64toa</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_uint64</name></type> <name>n</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>max</name> <init>= <expr><literal type="number">10240000</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_ui64toa_radix</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ui64toa</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"buf: %s, len: %d; buf2: %s, len: %d; %llu\n"</literal></expr></argument>,
		<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>acl_uint64</name><operator>)</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"use acl_uint64toa_radix begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_ui64toa_radix</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"use acl_uint64toa_radix end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"use acl_uint64toa begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_ui64toa</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"use acl_uint64toa end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_strcasestr</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><literal type="string">"href=\"http://3g.hexun.com\" target=\"_blank\" style=\"background:url(http://www.hexun.com/upload/phaone2.png) no-repeat; padding:2px 0 2px 13px;\"&gt;ÊÖ»ú°æ&lt;/a&gt;&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><literal type="string">"&gt;"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>acl_strcasestr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;error, not found %s from %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;ok, find it(%s): %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"http://"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>acl_strcasestr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;error, not found %s from %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;ok, find it(%s): %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
