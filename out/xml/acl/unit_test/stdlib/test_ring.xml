<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/unit_test/stdlib/test_ring.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_stdlib.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>MY_TYPE</name> <block>{
	<decl_stmt><decl><type><name>char</name></type>  <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>value</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>ring_entry</name></decl>;</decl_stmt>
}</block></struct></type> <name>MY_TYPE</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_RING</name></type> <name>__ring_header</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__create_ring</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MY_TYPE</name> <modifier>*</modifier></type><name>my_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>my_type</name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MY_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"name:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"value:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>my_type</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>my_type</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>my_type</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_ring</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>ring_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MY_TYPE</name> <modifier>*</modifier></type><name>my_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>__create_ring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nring loop printf:&gt; len=%d\n"</literal></expr></argument>, <argument><expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>ring_iter</argument>, <argument>&amp;__ring_header</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>my_type</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MY_TYPE</name></expr></argument>, <argument><expr><name>ring_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name=%s, value=%s\n"</literal></expr></argument>, <argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nring pop head loop printf:&gt; len=%d\n"</literal></expr></argument>, <argument><expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>my_type</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MY_TYPE</name></expr></argument>, <argument><expr><name>ring_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name=%s, value=%s\n"</literal></expr></argument>, <argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>my_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"first end, len=%d\n"</literal></expr></argument>, <argument><expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>__create_ring</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nring loop printf:&gt; len=%d\n"</literal></expr></argument>, <argument><expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_ring_foreach_reverse</name><argument_list>(<argument>ring_iter</argument>, <argument>&amp;__ring_header</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>my_type</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MY_TYPE</name></expr></argument>, <argument><expr><name>ring_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name=%s, value=%s\n"</literal></expr></argument>, <argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nring pop tail loop printf:&gt; len=%d\n"</literal></expr></argument>, <argument><expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_pop_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__ring_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>my_type</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>MY_TYPE</name></expr></argument>, <argument><expr><name>ring_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name=%s, value=%s\n"</literal></expr></argument>, <argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>my_type</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>my_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
