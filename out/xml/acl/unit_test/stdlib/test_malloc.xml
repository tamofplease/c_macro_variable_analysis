<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/unit_test/stdlib/test_malloc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_stdlib.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>test_fatal_malloc</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_memory_debug_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_memory_debug_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*not reached */</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_fatal_free</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_memory_debug_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_memory_debug_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*not reached */</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
