<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/unit_test/stdlib/test_avl.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_avl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_stdlib.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>avl_tree_t</name> <modifier>*</modifier></type><name>__avl_tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>MY_TYPE</name> <block>{
	<decl_stmt><decl><type><name>char</name></type>  <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>value</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>avl_node_t</name></type>  <name>node</name></decl>;</decl_stmt>
}</block></struct></type> <name>MY_TYPE</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>MY_TYPE</name> <modifier>*</modifier></type><name>m1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>MY_TYPE</name><operator>*</operator><operator>)</operator> <name>v1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>MY_TYPE</name><operator>*</operator><operator>)</operator> <name>v2</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>m1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>m2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_avl_create</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"test_avl_create"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__avl_tree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: should not be called more than once!\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__avl_tree</name> <operator>=</operator> <operator>(</operator><name>avl_tree_t</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>avl_tree_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>avl_create</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><name>compare_fn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MY_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MY_TYPE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_avl_add_bat</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MY_TYPE</name> <modifier>*</modifier></type><name>pm</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>MY_TYPE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;key(%s) already exist, value(%s)\r\n"</literal></expr></argument>,
				<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>MY_TYPE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MY_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"value(%d)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;add one, key(%s), value(%s)\r\n"</literal></expr></argument>, <argument><expr><name><name>pm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for> 

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_avl_walk</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier><name>test_line</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MY_TYPE</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>MY_TYPE</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;name(%s), value(%s)\r\n"</literal></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>next</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>MY_TYPE</name><operator>*</operator><operator>)</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;ok, total count is %d\r\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_avl_find</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MY_TYPE</name></type> <name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AUT_SET_STR</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>MY_TYPE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pm</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;ok, find it, %s, %s\r\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;not find it, name=%s\r\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_avl_add</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MY_TYPE</name></type> <name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pvalue</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AUT_SET_STR</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AUT_SET_STR</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>pvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>MY_TYPE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pm</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;err, already exist %s, %s\r\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>MY_TYPE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MY_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"value(%s)"</literal></expr></argument>, <argument><expr><name>pvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;ok, added, name=%s\r\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_avl_delete</name><parameter_list>(<parameter><decl><type><name>AUT_LINE</name> <modifier>*</modifier></type><name>test_line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MY_TYPE</name></type> <name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AUT_SET_STR</name><argument_list>(<argument><expr><name>test_line</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>MY_TYPE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;not find %s\r\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><name>__avl_tree</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;ok, delete %s\r\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
