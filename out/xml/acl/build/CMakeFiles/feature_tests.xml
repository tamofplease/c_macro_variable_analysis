<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/build/CMakeFiles/feature_tests.c">
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>features</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"\n"</literal>
<literal type="string">"C_FEATURE:"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__GNUC__</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>__GNUC_MINOR__</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">304</literal></expr></cpp:if>
<literal type="string">"1"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"0"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"c_function_prototypes\n"</literal>
<literal type="string">"C_FEATURE:"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__GNUC__</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>__GNUC_MINOR__</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">304</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>
<literal type="string">"1"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"0"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"c_restrict\n"</literal>
<literal type="string">"C_FEATURE:"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__GNUC__</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>__GNUC_MINOR__</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">406</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201000L</literal></expr></cpp:if>
<literal type="string">"1"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"0"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"c_static_assert\n"</literal>
<literal type="string">"C_FEATURE:"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__GNUC__</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>__GNUC_MINOR__</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">304</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>
<literal type="string">"1"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"0"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"c_variadic_macros\n"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt> <return>return <expr><name><name>features</name><index>[<expr><name>argc</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>
</unit>
