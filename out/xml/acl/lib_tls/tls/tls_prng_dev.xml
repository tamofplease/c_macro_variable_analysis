<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_tls/tls/tls_prng_dev.c"><comment type="block">/*++
 * NAME
 *	tls_prng_dev 3
 * SUMMARY
 *	seed OpenSSL PRNG from entropy device
 * SYNOPSIS
 *	#include &lt;tls_prng_src.h&gt;
 *
 *	TLS_PRNG_SRC *tls_prng_dev_open(name, timeout)
 *	const char *name;
 *	int	timeout;
 *
 *	ssize_t tls_prng_dev_read(dev, length)
 *	TLS_PRNG_SRC *dev;
 *	size_t length;
 *
 *	int	tls_prng_dev_close(dev)
 *	TLS_PRNG_SRC *dev;
 * DESCRIPTION
 *	tls_prng_dev_open() opens the specified entropy device
 *	and returns a handle that should be used with all subsequent
 *	access.
 *
 *	tls_prng_dev_read() reads the requested number of bytes from
 *	the entropy device and updates the OpenSSL PRNG.
 *
 *	tls_prng_dev_close() closes the specified entropy device
 *	and releases memory that was allocated for the handle.
 *
 *	Arguments:
 * .IP name
 *	The pathname of the entropy device.
 * .IP length
 *	The number of bytes to read from the entropy device.
 *	Request lengths will be truncated at 255 bytes.
 * .IP timeout
 *	Time limit on individual I/O operations.
 * DIAGNOSTICS
 *	tls_prng_dev_open() returns a null pointer on error.
 *
 *	tls_prng_dev_read() returns -1 on error, the number
 *	of bytes received on success.
 *
 *	tls_prng_dev_close() returns -1 on error, 0 on success.
 *
 *	In all cases the errno variable indicates the type of error.
 * LICENSE
 * .ad
 * .fi
 *	The Secure Mailer license must be distributed with this software.
 * AUTHOR(S)
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UCHAR_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHAR_MAX</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* OpenSSL library. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>		<comment type="block">/* For the PRNG */</comment>

<comment type="block">/* TLS library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_prng.h"</cpp:file></cpp:include>

<comment type="block">/* tls_prng_dev_open - open entropy device */</comment>

<function><type><name>TLS_PRNG_SRC</name> <modifier>*</modifier></type><name>tls_prng_dev_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_prng_dev_open"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TLS_PRNG_SRC</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type>     <name>fd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: cannot open entropy device %s: %s"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><name>TLS_PRNG_SRC</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: opened entropy device %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>dev</name><operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* tls_prng_dev_read - update internal PRNG from device */</comment>

<function><type><name>ssize_t</name></type> <name>tls_prng_dev_read</name><parameter_list>(<parameter><decl><type><name>TLS_PRNG_SRC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_prng_dev_read"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>UCHAR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>rand_bytes</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: bad read length: %ld"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>rand_bytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>rand_bytes</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>acl_timed_read</name><argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>rand_bytes</name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>acl_file_read</name><argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>rand_bytes</name></expr></argument>,
		<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: read %ld bytes from entropy device %s"</literal></expr></argument>,
		     <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>count</name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>RAND_seed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: cannot read %ld bytes from entropy device %s: %s"</literal></expr></argument>,
		     <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>rand_bytes</name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_prng_dev_close - disconnect from EGD server */</comment>

<function><type><name>int</name></type>     <name>tls_prng_dev_close</name><parameter_list>(<parameter><decl><type><name>TLS_PRNG_SRC</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_prng_dev_close"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: close entropy device %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_file_close</name><argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
