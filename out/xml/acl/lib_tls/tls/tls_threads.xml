<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_tls/tls/tls_threads.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/crypto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_private.h"</cpp:file></cpp:include>

<struct>struct <name>CRYPTO_dynlock_value</name> <block>{
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <modifier>*</modifier></type><name>lock_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>lock_cs</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>threads_locking_fn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>file</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>line</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CRYPTO_LOCK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lock_cs</name><index>[<expr><name>type</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lock_count</name><index>[<expr><name>type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lock_cs</name><index>[<expr><name>type</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>threads_thread_id_fn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ret</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>CRYPTO_dynlock_value</name></name>
<modifier>*</modifier></type><name>dynlock_create_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>file</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>line</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>CRYPTO_dynlock_value</name></name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>CRYPTO_dynlock_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dynlock_lock_fn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>CRYPTO_dynlock_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>file</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>line</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator><name>CRYPTO_LOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dynlock_destroy_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>CRYPTO_dynlock_value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>file</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>line</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tls_threads_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>lock_cs</name> <operator>=</operator> <call><name>OPENSSL_malloc</name><argument_list>(<argument><expr><call><name>CRYPTO_num_locks</name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_mutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lock_count</name> <operator>=</operator> <call><name>OPENSSL_malloc</name><argument_list>(<argument><expr><call><name>CRYPTO_num_locks</name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize OpenSSL locking callback */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>CRYPTO_num_locks</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>lock_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lock_cs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>CRYPTO_set_id_callback</name><argument_list>(<argument><expr><name>threads_thread_id_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CRYPTO_set_locking_callback</name><argument_list>(<argument><expr><name>threads_locking_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize OpenSSL dynamic locks callbacks */</comment>
	<expr_stmt><expr><call><name>CRYPTO_set_dynlock_create_callback</name><argument_list>(<argument><expr><name>dynlock_create_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CRYPTO_set_dynlock_lock_callback</name><argument_list>(<argument><expr><name>dynlock_lock_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CRYPTO_set_dynlock_destroy_callback</name><argument_list>(<argument><expr><name>dynlock_destroy_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
