<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_tls/tls/tls_bio_ops.c"><comment type="block">/*++
 * NAME
 *	tls_bio_ops 3
 * SUMMARY
 *	TLS network BIO management
 * SYNOPSIS
 *	#include &lt;tls.h&gt;
 *	#include &lt;tls_private.h&gt;
 *
 *	int tls_bio_connect(fd, timeout, context)
 *	int	fd;
 *	int	timeout;
 *	TLS_SESS_STATE *context;
 *
 *	int tls_bio_accept(fd, timeout, context)
 *	int	fd;
 *	int	timeout;
 *	TLS_SESS_STATE *context;
 *
 *	int tls_bio_shutdown(fd, timeout, context)
 *	int	fd;
 *	int	timeout;
 *	TLS_SESS_STATE *context;
 *
 *	int tls_bio_read(fd, buf, len, timeout, context)
 *	int	fd;
 *	void	*buf;
 *	int	len;
 *	int	timeout;
 *	TLS_SESS_STATE *context;
 *
 *	int tls_bio_write(fd, buf, len, timeout, context)
 *	int	fd;
 *	void	*buf;
 *	int	len;
 *	int	timeout;
 *	TLS_SESS_STATE *context;
 * DESCRIPTION
 *	This layer synchronizes the TLS network buffers with the network
 *	while performing TLS handshake or input/output operations.
 *
 *	When the TLS layer is active, it converts plain-text
 *	data from Postfix into encrypted network data and vice versa.
 *	However, to handle network timeout conditions, Postfix
 *	needs to maintain control over network input/output. This
 *	rules out the usual approach of placing the TLS layer
 *	between the application and the network socket.
 *
 *	As shown below, Postfix reads/writes plain-text data from/to
 *	the TLS layer. The TLS layer informs Postfix when it needs
 *	to read/write encrypted data from/to the network; Postfix
 *	then reads/writes encrypted data from/to the TLS layer and
 *	takes care of the network socket I/O.
 *
 *	The TLS layer to network interface is realized with a BIO pair:
 *
 *	 Postfix             |   TLS layer
 *	                     |
 *	smtp/smtpd           |
 *	 /\    ||            |
 *	 ||    \/            |
 *	vstream read/write &lt;===&gt; TLS read/write/etc
 *	                     |     /\    ||
 *	                     |     ||    \/
 *	                     |   BIO pair (internal_bio)
 *	                     |   BIO pair (network_bio)
 *	                     |     /\    ||
 *	                     |     ||    \/
 *	socket read/write  &lt;===&gt; BIO read/write
 *	 /\    ||            |
 *	 ||    \/            |
 *	 network             |
 *
 *	The Postfix VSTREAM read/write operations invoke the SSL
 *	read/write operations to send and retrieve plain-text data. Inside
 *	the TLS layer the data are converted to/from TLS protocol.
 *
 *	Whenever an SSL operation reports success, or whenever it
 *	indicates that network input/output needs to happen, Postfix
 *	uses the BIO read/write routines to synchronize the
 *	network_bio buffer with the network.  Writing data to the
 *	network has precedence over reading from the network. This
 *	is necessary to avoid deadlock.
 *
 *	The BIO pair buffer size is set to 8192 bytes. This is much
 *	larger than the typical Path MTU, and avoids sending tiny TCP
 *	segments.  It is also larger than the default VSTREAM_BUFSIZE
 *	(4096, see vstream.h), so that large write operations can
 *	be handled within one request.  The internal buffer in the
 *	network/network_bio handling layer is set to the same
 *	value, since this seems to be reasonable. The code is
 *	however able to handle arbitrary values smaller or larger
 *	than the buffer size in the BIO pair.
 *
 *	tls_bio_connect() performs the SSL_connect() operation while
 *	synchronizing the network_bio buffer with the network.
 *
 *	tls_bio_accept() performs the SSL_accept() operation while
 *	synchronizing the network_bio buffer with the network.
 *
 *	tls_bio_shutdown() performs the SSL_shutdown() operation while
 *	synchronizing the network_bio buffer with the network.
 *
 *	tls_bio_read() performs the SSL_read() operation while
 *	synchronizing the network_bio buffer with the network.
 *
 *	tls_bio_write() performs the SSL_write() operation while
 *	synchronizing the network_bio buffer with the network.
 *
 *	Arguments:
 * .IP fd
 *	Network socket.
 * .IP buf
 *	Read/write buffer.
 * .IP len
 *	Read/write request size.
 * .IP timeout
 *	Read/write timeout.
 * .IP TLScontext
 *	TLS session state.
 * DIAGNOSTICS
 *	The result value is -1 in case of a network read/write
 *	error, otherwise it is the result value of the TLS operation.
 * LICENSE
 * .ad
 * .fi
 *	This software is free. You can do with it whatever you want.
 *	The original author kindly requests that you acknowledge
 *	the use of his software.
 * AUTHOR(S)
 *	Originally written by:
 *	Lutz Jaenicke
 *	BTU Cottbus
 *	Allgemeine Elektrotechnik
 *	Universitaetsplatz 3-4
 *	D-03044 Cottbus, Germany
 *
 *	Updated by:
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *
 *	Victor Duchovni
 *	Morgan Stanley
 *--*/</comment>

<comment type="block">/* System library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>

<comment type="block">/* TLS library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_private.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETLAYER_BUFFERSIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<comment type="block">/* network_biopair_interop - synchronize network with BIO pair */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>network_biopair_interop</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>network_bio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"network_biopair_interop"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>want_write</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>num_write</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>write_pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>from_bio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>want_read</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>num_read</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>to_bio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>buffer</name><index>[<expr><name>NETLAYER_BUFFERSIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/*
     * To avoid deadlock, write all pending data to the network before
     * attempting to read from the network.
     */</comment>
    <while>while <condition>(<expr><operator>(</operator><name>want_write</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>BIO_ctrl_pending</name><argument_list>(<argument><expr><name>network_bio</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>want_write</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>want_write</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>from_bio</name> <operator>=</operator> <call><name>BIO_read</name><argument_list>(<argument><expr><name>network_bio</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>want_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Write the complete buffer contents to the network.
	 */</comment>
	<for>for <control>(<init><expr><name>write_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>write_pos</name> <operator>&lt;</operator> <name>from_bio</name></expr>;</condition> <comment type="block">/* see below */</comment> <incr/>)</control> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>acl_write_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>num_write</name> <operator>=</operator> <call><name>acl_socket_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>write_pos</name></expr></argument>, <argument><expr><name>from_bio</name> <operator>-</operator> <name>write_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>num_write</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num_write</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ACL_EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ACL_EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: write() returns EAGAIN on a writable file descriptor!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: pausing to avoid going into a tight select/write loop!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
		    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: error writing %d bytes to the network: %s"</literal></expr></argument>,
			    <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>from_bio</name> <operator>-</operator> <name>write_pos</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>write_pos</name> <operator>+=</operator> <name>num_write</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></while>

    <comment type="block">/*
     * Read data from the network into the BIO pair.
     */</comment>
    <while>while <condition>(<expr><operator>(</operator><name>want_read</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>BIO_ctrl_get_read_request</name><argument_list>(<argument><expr><name>network_bio</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>want_read</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>want_read</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>acl_read_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>num_read</name> <operator>=</operator> <call><name>acl_socket_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>want_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>num_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <comment type="block">/* FIX 200412 Cannot return a zero read count. */</comment>
	    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>num_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>num_read</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ACL_EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ACL_EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: read() returns EAGAIN on a readable file descriptor!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: pausing to avoid going into a tight select/write loop!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: error reading %d bytes from the network: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>want_read</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	    <expr_stmt><expr><name>to_bio</name> <operator>=</operator> <call><name>BIO_write</name><argument_list>(<argument><expr><name>network_bio</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>num_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>to_bio</name> <operator>!=</operator> <name>num_read</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: BIO_write error: to_bio != num_read"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_bio - perform SSL input/output operation with extreme prejudice */</comment>

<function><type><name>int</name></type>     <name>tls_bio</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hsfunc</name>) <parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rfunc</name>) <parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>wfunc</name>) <parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_bio"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>biop_retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>done</name></decl>;</decl_stmt>

    <comment type="block">/*
     * If necessary, retry the SSL handshake or read/write operation after
     * handling any pending network I/O.
     */</comment>
    <for>for <control>(<init><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>done</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <comment type="block">/* void */</comment> <incr/>)</control> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>hsfunc</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>hsfunc</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SSL_do_handshake</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rfunc</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rfunc</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>wfunc</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>wfunc</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: nothing to do here"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;=</operator> <literal type="number">0x0090581fL</literal><operator>)</operator></expr></cpp:if>

	<comment type="block">/*
	 * There is a bug up to and including OpenSSL-0.9.5a: if an error
	 * occurs while checking the peers certificate due to some
	 * certificate error (e.g. as happend with a RSA-padding error), the
	 * error is put onto the error stack. If verification is not
	 * enforced, this error should be ignored, but the error-queue is not
	 * cleared, so we can find this error here. The bug has been fixed on
	 * May 28, 2000.
	 * 
	 * This bug so far has only manifested as 4800:error:0407006A:rsa
	 * routines:RSA_padding_check_PKCS1_type_1:block type is not
	 * 01:rsa_pk1.c:100: 4800:error:04067072:rsa
	 * routines:RSA_EAY_PUBLIC_DECRYPT:padding check
	 * failed:rsa_eay.c:396: 4800:error:0D079006:asn1 encoding
	 * routines:ASN1_verify:bad get asn1 object call:a_verify.c:109: so
	 * that we specifically test for this error. We print the errors to
	 * the logfile and automatically clear the error queue. Then we retry
	 * to get another error code. We cannot do better, since we can only
	 * retrieve the last entry of the error-queue without actually
	 * cleaning it on the way.
	 * 
	 * This workaround is secure, as verify_result is set to "failed"
	 * anyway.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>SSL_ERROR_SSL</name></expr>)</condition> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>ERR_peek_error</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0x0407006AL</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"OpenSSL &lt;= 0.9.5a workaround called: certificate errors ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Find out if we must retry the operation and/or if there is pending
	 * network I/O.
	 * 
	 * XXX If we're the first to invoke SSL_shutdown(), then the operation
	 * isn't really complete when the call returns. We could hide that
	 * anomaly here and repeat the call.
	 */</comment>
	<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case>			<comment type="block">/* success */</comment>
	    <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <comment type="block">/* FALLTHROUGH */</comment>
	<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>		<comment type="block">/* flush/update buffers */</comment>
	<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
	    <expr_stmt><expr><name>biop_retval</name> <operator>=</operator> <call><name>network_biopair_interop</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>network_bio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>biop_retval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>		<comment type="block">/* network read/write error */</comment>
	    <break>break;</break>

	    <comment type="block">/*
	     * With tls_timed_read() and tls_timed_write() the caller is the
	     * VSTREAM library module which is unaware of TLS, so we log the
	     * TLS error stack here. In a better world, each VSTREAM I/O
	     * object would provide an error reporting method in addition to
	     * the timed_read and timed_write methods, so that we would not
	     * need to have ad-hoc code like this.
	     */</comment>
	<case>case <expr><name>SSL_ERROR_SSL</name></expr>:</case>
	    <if_stmt><if>if <condition>(<expr><name>rfunc</name> <operator>||</operator> <name>wfunc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <comment type="block">/* FALLTHROUGH */</comment>
	<default>default:</default>
	    <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <break>break;</break>
	</block_content>}</block></switch>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>retval</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
