<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_tls/tls/tls_client.c"><comment type="block">/*++
 * NAME
 *	tls_client
 * SUMMARY
 *	client-side TLS engine
 * SYNOPSIS
 *	#include &lt;tls.h&gt;
 *
 *	TLS_APPL_STATE *tls_client_init(init_props)
 *	const TLS_CLIENT_INIT_PROPS *init_props;
 *
 *	TLS_SESS_STATE *tls_client_start(start_props)
 *	const TLS_CLIENT_START_PROPS *start_props;
 *
 *	void	tls_client_stop(app_ctx, stream, failure, TLScontext)
 *	TLS_APPL_STATE *app_ctx;
 *	VSTREAM	*stream;
 *	int	failure;
 *	TLS_SESS_STATE *TLScontext;
 * DESCRIPTION
 *	This module is the interface between Postfix TLS clients,
 *	the OpenSSL library and the TLS entropy and cache manager.
 *
 *	The SMTP client will attempt to verify the server hostname
 *	against the names listed in the server certificate. When
 *	a hostname match is required, the verification fails
 *	on certificate verification or hostname mis-match errors.
 *	When no hostname match is required, hostname verification
 *	failures are logged but they do not affect the TLS handshake
 *	or the SMTP session.
 *
 *	The rules for peer name wild-card matching differ between
 *	RFC 2818 (HTTP over TLS) and RFC 2830 (LDAP over TLS), while
 *	RFC RFC3207 (SMTP over TLS) does not specify a rule at all.
 *	Postfix uses a restrictive match algorithm. One asterisk
 *	('*') is allowed as the left-most component of a wild-card
 *	certificate name; it matches the left-most component of
 *	the peer hostname.
 *
 *	Another area where RFCs aren't always explicit is the
 *	handling of dNSNames in peer certificates. RFC 3207 (SMTP
 *	over TLS) does not mention dNSNames. Postfix follows the
 *	strict rules in RFC 2818 (HTTP over TLS), section 3.1: The
 *	Subject Alternative Name/dNSName has precedence over
 *	CommonName.  If at least one dNSName is provided, Postfix
 *	verifies those against the peer hostname and ignores the
 *	CommonName, otherwise Postfix verifies the CommonName
 *	against the peer hostname.
 *
 *	tls_client_init() is called once when the SMTP client
 *	initializes.
 *	Certificate details are also decided during this phase,
 *	so peer-specific certificate selection is not possible.
 *
 *	tls_client_start() activates the TLS session over an established
 *	stream. We expect that network buffers are flushed and
 *	the TLS handshake can begin immediately.
 *
 *	tls_client_stop() sends the "close notify" alert via
 *	SSL_shutdown() to the peer and resets all connection specific
 *	TLS data. As RFC2487 does not specify a separate shutdown, it
 *	is assumed that the underlying TCP connection is shut down
 *	immediately afterwards. Any further writes to the channel will
 *	be discarded, and any further reads will report end-of-file.
 *	If the failure flag is set, no SSL_shutdown() handshake is performed.
 *
 *	Once the TLS connection is initiated, information about the TLS
 *	state is available via the TLScontext structure:
 * .IP TLScontext-&gt;protocol
 *	the protocol name (SSLv2, SSLv3, TLSv1),
 * .IP TLScontext-&gt;cipher_name
 *	the cipher name (e.g. RC4/MD5),
 * .IP TLScontext-&gt;cipher_usebits
 *	the number of bits actually used (e.g. 40),
 * .IP TLScontext-&gt;cipher_algbits
 *	the number of bits the algorithm is based on (e.g. 128).
 * .PP
 *	The last two values may differ from each other when export-strength
 *	encryption is used.
 *
 *	If the peer offered a certificate, part of the certificate data are
 *	available as:
 * .IP TLScontext-&gt;peer_status
 *	A bitmask field that records the status of the peer certificate
 *	verification. This consists of one or more of
 *	TLS_CERT_FLAG_PRESENT, TLS_CERT_FLAG_ALTNAME, TLS_CERT_FLAG_TRUSTED
 *	and TLS_CERT_FLAG_MATCHED.
 * .IP TLScontext-&gt;peer_CN
 *	Extracted CommonName of the peer, or zero-length string if the
 *	information could not be extracted.
 * .IP TLScontext-&gt;issuer_CN
 *	Extracted CommonName of the issuer, or zero-length string if the
 *	information could not be extracted.
 * .IP TLScontext-&gt;peer_fingerprint
 *	At the fingerprint security level, if the peer presented a certificate
 *	the fingerprint of the certificate.
 * .PP
 *	If no peer certificate is presented the peer_status is set to 0.
 * LICENSE
 * .ad
 * .fi
 *	This software is free. You can do with it whatever you want.
 *	The original author kindly requests that you acknowledge
 *	the use of his software.
 * AUTHOR(S)
 *	Originally written by:
 *	Lutz Jaenicke
 *	BTU Cottbus
 *	Allgemeine Elektrotechnik
 *	Universitaetsplatz 3-4
 *	D-03044 Cottbus, Germany
 *
 *	Updated by:
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *
 *	Victor Duchovni
 *	Morgan Stanley
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STRCASECMP_IN_STRINGS_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Global library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_params.h"</cpp:file></cpp:include>

<comment type="block">/* TLS library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_mgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_private.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>

<comment type="block">/* load_clnt_session - load session from client cache (non-callback) */</comment>

<function><type><specifier>static</specifier> <name>SSL_SESSION</name> <modifier>*</modifier></type><name>load_clnt_session</name><parameter_list>(<parameter><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"load_clnt_session"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>session_data</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Prepare the query.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"looking for session %s in %s cache"</literal></expr></argument>,
		<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * We only get here if the cache_type is not empty. This code is not
     * called unless caching is enabled and the cache_type is stored in the
     * server SSL context.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: null client session cache type in session lookup"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Look up and activate the SSL_SESSION object. Errors are non-fatal,
     * since caching is only an optimization.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tls_mgr_lookup</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>,
		<argument><expr><name>session_data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TLS_MGR_STAT_OK</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>tls_session_activate</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"reloaded session %s from %s cache"</literal></expr></argument>,
			<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Clean up.
     */</comment>
    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>session</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* new_client_session_cb - name new session and save it to client cache */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>new_client_session_cb</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"new_client_session_cb"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>session_data</name></decl>;</decl_stmt>

    <comment type="block">/*
     * The cache name (if caching is enabled in tlsmgr(8)) and the cache ID
     * string for this session are stored in the TLScontext. It cannot be
     * null at this point.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TLScontext</name> <operator>=</operator> <call><name>SSL_get_ex_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>TLScontext_index</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: null TLScontext in new session callback"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * We only get here if the cache_type is not empty. This callback is not
     * set unless caching is enabled and the cache_type is stored in the
     * server SSL context.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: null session cache type in new session callback"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"save session %s to %s cache"</literal></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x00906011L</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>==</operator> <literal type="number">0x00907000L</literal><operator>)</operator></expr></cpp:if>

    <comment type="block">/*
     * Ugly Hack: OpenSSL before 0.9.6a does not store the verify result in
     * sessions for the client side. We modify the session directly which is
     * version specific, but this bug is version specific, too.
     * 
     * READ: 0-09-06-01-1 = 0-9-6-a-beta1: all versions before beta1 have this
     * bug, it has been fixed during development of 0.9.6a. The development
     * version of 0.9.7 can have this bug, too. It has been fixed on
     * 2000/11/29.
     */</comment>
    <expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>verify_result</name></name> <operator>=</operator> <call><name>SSL_get_verify_result</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Passivate and save the session object. Errors are non-fatal, since
     * caching is only an optimization.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>session_data</name> <operator>=</operator> <call><name>tls_session_passivate</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>tls_mgr_update</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>,
		<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Clean up.
     */</comment>
    <expr_stmt><expr><call><name>SSL_SESSION_free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* 200502 */</comment>

    <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* uncache_session - remove session from the external cache */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uncache_session</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><call><name>SSL_get_session</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_remove_session</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"remove session %s from client cache"</literal></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tls_mgr_delete</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* tls_client_init - initialize client-side TLS engine */</comment>

<function><type><name>void</name></type> <name>tls_client_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>tls_params_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tls_threads_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* tls_client_setup - setup client-side TLS engine */</comment>

<function><type><name>int</name></type> <name>tls_client_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TLS_CLIENT_INIT_PROPS</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_client_init"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md_alg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>md_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>init_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>init_done</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): called once before"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: initializing the client-side TLS engine"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Detect mismatch between compile-time headers and run-time library.
     */</comment>
    <expr_stmt><expr><call><name>tls_check_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Initialize the OpenSSL library by the book! To start with, we must
     * initialize the algorithms. We want cleartext error messages instead of
     * just error codes, so we load the error_strings.
     */</comment>
    <expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OpenSSL_add_ssl_algorithms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Create an application data index for SSL objects, so that we can
     * attach TLScontext information; this information is needed inside
     * tls_verify_certificate_callback().
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>TLScontext_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>TLScontext_index</name> <operator>=</operator> <call><name>SSL_get_ex_new_index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Cannot allocate SSL application data index: "</literal>
		    <literal type="string">"disabling TLS support"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If the administrator specifies an unsupported digest algorithm, fail
     * now, rather than in the middle of a TLS handshake.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>md_alg</name> <operator>=</operator> <call><name>EVP_get_digestbyname</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>fpt_dgst</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Digest algorithm \"%s\" not found: disabling TLS support"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>fpt_dgst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Sanity check: Newer shared libraries may use larger digests.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>md_len</name> <operator>=</operator> <call><name>EVP_MD_size</name><argument_list>(<argument><expr><name>md_alg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>EVP_MAX_MD_SIZE</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Digest algorithm \"%s\" output size %u too large:"</literal>
		<literal type="string">" disabling TLS support"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>fpt_dgst</name></name></expr></argument>, <argument><expr><name>md_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Initialize the PRNG (Pseudo Random Number Generator) with some seed
     * from external and internal sources. Don't enable TLS without some real
     * entropy.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>var_tls_daemon_rand_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>tls_ext_seed</name><argument_list>(<argument><expr><name>var_tls_daemon_rand_bytes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no entropy for TLS key generation: disabling TLS support"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tls_int_seed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_client_create -  create client-side connection */</comment>

<function><type><name>TLS_APPL_STATE</name> <modifier>*</modifier></type><name>tls_client_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TLS_CLIENT_INIT_PROPS</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_client_create"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>    <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>cachable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>client_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TLS_APPL_STATE</name> <modifier>*</modifier></type><name>app_ctx</name></decl>;</decl_stmt>

    <comment type="block">/*
     * The SSL/TLS specifications require the client to send a message in the
     * oldest specification it understands with the highest level it
     * understands in the message. RFC2487 is only specified for TLSv1, but
     * we want to be as compatible as possible, so we will start off with a
     * SSLv2 greeting allowing the best we can offer: TLSv1. We can restrict
     * this with the options setting later, anyhow.
     */</comment>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>client_ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>SSLv23_client_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: cannot allocate client SSL_CTX: disabling TLS support"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * See the verify callback in tls_verify.c
     */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_verify_depth</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>verifydepth</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Protocol selection is destination dependent, so we delay the protocol
     * selection options to the per-session SSL object.
     */</comment>
    <expr_stmt><expr><name>off</name> <operator>|=</operator> <call><name>tls_bug_bits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Set the call-back routine for verbose logging.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>SSL_CTX_set_info_callback</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>, <argument><expr><name>tls_info_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Load the CA public key certificates for both the client cert and for
     * the verification of server certificates. As provided by OpenSSL we
     * support two types of CA certificate handling: One possibility is to
     * add all CA certificates to one large CAfile, the other possibility is
     * a directory pointed to by CApath, containing separate files for each
     * CA with softlinks named after the hash values of the certificate. The
     * first alternative has the advantage that the file is opened and read
     * at startup time, so that you don't have the hassle to maintain another
     * copy of the CApath directory for chroot-jail.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tls_set_ca_certificate_info</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>CAfile</name></name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>CApath</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<comment type="block">/* tls_set_ca_certificate_info() already logs a warning. */</comment>
	<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* 200411 */</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * We do not need a client certificate, so the certificates are only
     * loaded (and checked) if supplied. A clever client would handle
     * multiple client certificates and decide based on the list of
     * acceptable CAs, sent by the server, which certificate to submit.
     * OpenSSL does however not do this and also has no call-back hooks to
     * easily implement it.
     * 
     * Load the client public key certificate and private key from file and
     * check whether the cert matches the key. We can use RSA certificates
     * ("cert") DSA certificates ("dcert") or ECDSA certificates ("eccert").
     * All three can be made available at the same time. The CA certificates
     * for all three are handled in the same setup already finished. Which
     * one is used depends on the cipher negotiated (that is: the first
     * cipher listed by the client which does match the server). The client
     * certificate is presented after the server chooses the session cipher,
     * so we will just present the right cert for the chosen cipher (if it
     * uses certificates).
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tls_set_my_certificate_key_info</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>,
		<argument><expr><name><name>props</name><operator>-&gt;</operator><name>cert_file</name></name></expr></argument>,
		<argument><expr><name><name>props</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>,
		<argument><expr><name><name>props</name><operator>-&gt;</operator><name>dcert_file</name></name></expr></argument>,
		<argument><expr><name><name>props</name><operator>-&gt;</operator><name>dkey_file</name></name></expr></argument>,
		<argument><expr><name><name>props</name><operator>-&gt;</operator><name>eccert_file</name></name></expr></argument>,
		<argument><expr><name><name>props</name><operator>-&gt;</operator><name>eckey_file</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<comment type="block">/* tls_set_my_certificate_key_info() already logs a warning. */</comment>
	<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* 200411 */</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * According to the OpenSSL documentation, temporary RSA key is needed
     * export ciphers are in use. We have to provide one, so well, we just do
     * it.
     */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_tmp_rsa_callback</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>, <argument><expr><name>tls_tmp_rsa_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Finally, the setup for the server certificate checking, done "by the
     * book".
     */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>, <argument><expr><name>SSL_VERIFY_NONE</name></expr></argument>, <argument><expr><name>tls_verify_certificate_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Initialize the session cache.
     * 
     * Since the client does not search an internal cache, we simply disable it.
     * It is only useful for expiring old sessions, but we do that in the
     * tlsmgr(8).
     * 
     * This makes SSL_CTX_remove_session() not useful for flushing broken
     * sessions from the external cache, so we must delete them directly (not
     * via a callback).
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>cache_type</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>tls_mgr_policy</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>cache_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cachable</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TLS_MGR_STAT_OK</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>cachable</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Allocate an application context, and populate with mandatory protocol
     * and cipher data.
     */</comment>
    <expr_stmt><expr><name>app_ctx</name> <operator>=</operator> <call><name>tls_alloc_app_context</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The external session cache is implemented by the tlsmgr(8) process.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>cachable</name></expr>)</condition> <block>{<block_content>

	<expr_stmt><expr><name><name>app_ctx</name><operator>-&gt;</operator><name>cache_type</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>cache_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * OpenSSL does not use callbacks to load sessions from a client
	 * cache, so we must invoke that function directly. Apparently,
	 * OpenSSL does not provide a way to pass session names from here to
	 * call-back routines that do session lookup.
	 * 
	 * OpenSSL can, however, automatically save newly created sessions for
	 * us by callback (we create the session name in the call-back
	 * function).
	 * 
	 * XXX gcc 2.95 can't compile #ifdef .. #endif in the expansion of
	 * SSL_SESS_CACHE_CLIENT | SSL_SESS_CACHE_NO_INTERNAL_STORE |
	 * SSL_SESS_CACHE_NO_AUTO_CLEAR.
	 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SSL_SESS_CACHE_NO_INTERNAL_STORE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SESS_CACHE_NO_INTERNAL_STORE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>,
		<argument><expr><name>SSL_SESS_CACHE_CLIENT</name> <operator>|</operator>
		<name>SSL_SESS_CACHE_NO_AUTO_CLEAR</name> <operator>|</operator>
		<name>SSL_SESS_CACHE_NO_INTERNAL_STORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SSL_CTX_sess_set_new_cb</name><argument_list>(<argument><expr><name>client_ctx</name></expr></argument>, <argument><expr><name>new_client_session_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>app_ctx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* match_hostname -  match hostname against pattern */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_hostname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>peerid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TLS_CLIENT_START_PROPS</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ACL_ARGV</name> <modifier>*</modifier></type><name>cmatch_argv</name> <init>= <expr><name><name>props</name><operator>-&gt;</operator><name>matchargv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nexthop</name> <init>= <expr><name><name>props</name><operator>-&gt;</operator><name>nexthop</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hname</name> <init>= <expr><name><name>props</name><operator>-&gt;</operator><name>host</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern_left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>sub</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>idlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>patlen</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Match the peerid against each pattern until we find a match.
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmatch_argv</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name>sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cmatch_argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"nexthop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>nexthop</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cmatch_argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hostname"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>hname</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cmatch_argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"dot-nexthop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>nexthop</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>sub</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	    <expr_stmt><expr><name>pattern</name> <operator>=</operator> <name><name>cmatch_argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>++</operator><name>pattern</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sub</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Sub-domain match: peerid is any sub-domain of pattern.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>sub</name></expr>)</condition> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>peerid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>patlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal>
		    <operator>&amp;&amp;</operator> <name><name>peerid</name><index>[<expr><name>idlen</name> <operator>-</operator> <name>patlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>
		    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>peerid</name> <operator>+</operator> <operator>(</operator><name>idlen</name> <operator>-</operator> <name>patlen</name><operator>)</operator></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
	    <else>else<block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Exact match and initial "*" match. The initial "*" in a peerid
	 * matches exactly one hostname component, under the condition that
	 * the peerid contains multiple hostname components.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>peerid</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call>
		<operator>||</operator> <operator>(</operator><name><name>peerid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>peerid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>peerid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal>
		    <operator>&amp;&amp;</operator> <operator>(</operator><name>pattern_left</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
		    <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>pattern_left</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>peerid</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* verify_extract_name - verify peer name and extract peer information */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>verify_extract_name</name><parameter_list>(<parameter><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl></parameter>, <parameter><decl><type><name>X509</name> <modifier>*</modifier></type><name>peercert</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>TLS_CLIENT_START_PROPS</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dnsname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GENERAL_NAME</name> <modifier>*</modifier></type><name>gn</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>GENERAL_NAME</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>gens</name></expr>;</expr_stmt>

    <comment type="block">/*
     * On exit both peer_CN and issuer_CN should be set.
     */</comment>
    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>issuer_CN</name></name> <operator>=</operator> <call><name>tls_issuer_CN</name><argument_list>(<argument><expr><name>peercert</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Is the certificate trust chain valid and trusted?
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SSL_get_verify_result</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>X509_V_OK</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_status</name></name> <operator>|=</operator> <name>TLS_CERT_FLAG_TRUSTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TLS_CERT_IS_TRUSTED</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>props</name><operator>-&gt;</operator><name>tls_level</name></name> <operator>&gt;=</operator> <name>TLS_LEV_VERIFY</name></expr>)</condition> <block>{<block_content>

	<comment type="block">/*
	 * Verify the dNSName(s) in the peer certificate against the nexthop
	 * and hostname.
	 * 
	 * If DNS names are present, we use the first matching (or else simply
	 * the first) DNS name as the subject CN. The CommonName in the
	 * issuer DN is obsolete when SubjectAltName is available. This
	 * yields much less surprising logs, because we log the name we
	 * verified or a name we checked and failed to match.
	 * 
	 * XXX: The nexthop and host name may both be the same network address
	 * rather than a DNS name. In this case we really should be looking
	 * for GEN_IPADD entries, not GEN_DNS entries.
	 * 
	 * XXX: In ideal world the caller who used the address to build the
	 * connection would tell us that the nexthop is the connection
	 * address, but if that is not practical, we can parse the nexthop
	 * again here.
	 */</comment>
	<expr_stmt><expr><name>gens</name> <operator>=</operator> <call><name>X509_get_ext_d2i</name><argument_list>(<argument><expr><name>peercert</name></expr></argument>, <argument><expr><name>NID_subject_alt_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>gens</name></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sk_GENERAL_NAME_num</name><argument_list>(<argument><expr><name>gens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>matched</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>gn</name> <operator>=</operator> <call><name>sk_GENERAL_NAME_value</name><argument_list>(<argument><expr><name>gens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>gn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GEN_DNS</name></expr>)</condition><block type="pseudo"><block_content>
		    <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Even if we have an invalid DNS name, we still ultimately
		 * ignore the CommonName, because subjectAltName:DNS is
		 * present (though malformed). Replace any previous peer_CN
		 * if empty or we get a match.
		 * 
		 * We always set at least an empty peer_CN if the ALTNAME cert
		 * flag is set. If not, we set peer_CN from the cert
		 * CommonName below, so peer_CN is always non-null on return.
		 */</comment>
		<expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_status</name></name> <operator>|=</operator> <name>TLS_CERT_FLAG_ALTNAME</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dnsname</name> <operator>=</operator> <call><name>tls_dns_name</name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dnsname</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dnsname</name></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>match_hostname</name><argument_list>(<argument><expr><name>dnsname</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name>
			    <operator>&amp;&amp;</operator> <operator>(</operator><name>matched</name> <operator>||</operator> <operator>*</operator><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>dnsname</name></expr> ?</condition><then> <expr><name>dnsname</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></for>

	    <comment type="block">/*
	     * (Sam Rushing, Ironport) Free stack *and* member GENERAL_NAME
	     * objects
	     */</comment>
	    <expr_stmt><expr><call><name>sk_GENERAL_NAME_pop_free</name><argument_list>(<argument><expr><name>gens</name></expr></argument>, <argument><expr><name>GENERAL_NAME_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * No subjectAltNames, peer_CN is taken from CommonName.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name> <operator>=</operator> <call><name>tls_peer_CN</name><argument_list>(<argument><expr><name>peercert</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>match_hostname</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_status</name></name> <operator>|=</operator> <name>TLS_CERT_FLAG_MATCHED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * - Matched: Trusted and peername matches - Trusted: Signed by
	 * trusted CA(s), but peername not matched - Untrusted: Can't verify
	 * the trust chain, reason already logged.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %s subject_CN=%s, issuer_CN=%s"</literal></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>,
		    <argument><expr><ternary><condition><expr><call><name>TLS_CERT_IS_MATCHED</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"Matched"</literal></expr> </then><else>:
		    <expr><ternary><condition><expr><call><name>TLS_CERT_IS_TRUSTED</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"Trusted"</literal></expr> </then><else>: <expr><literal type="string">"Untrusted"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
		    <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>issuer_CN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name> <operator>=</operator> <call><name>tls_peer_CN</name><argument_list>(<argument><expr><name>peercert</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * Give them a clue. Problems with trust chain verification were logged
     * when the session was first negotiated, before the session was stored
     * into the cache. We don't want mystery failures, so log the fact the
     * real problem is to be found in the past.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>session_reused</name></name>
	    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TLS_CERT_IS_TRUSTED</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call>
	    <operator>&amp;&amp;</operator> <name><name>TLScontext</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: re-using session with untrusted certificate, "</literal>
		<literal type="string">"look for details earlier in the log"</literal></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* verify_extract_print - extract and verify peer fingerprint */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>verify_extract_print</name><parameter_list>(<parameter><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl></parameter>, <parameter><decl><type><name>X509</name> <modifier>*</modifier></type><name>peercert</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>TLS_CLIENT_START_PROPS</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier><modifier>*</modifier></type><name>cpp</name></decl>;</decl_stmt>

    <comment type="block">/* Non-null by contract */</comment>
    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_fingerprint</name></name> <operator>=</operator> <call><name>tls_fingerprint</name><argument_list>(<argument><expr><name>peercert</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>fpt_dgst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>tls_level</name></name> <operator>!=</operator> <name>TLS_LEV_FPRINT</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Compare the fingerprint against each acceptable value, ignoring
     * upper/lower case differences.
     */</comment>
    <for>for <control>(<init><expr><name>cpp</name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>matchargv</name><operator>-&gt;</operator><name>argv</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cpp</name></expr>;</condition> <incr><expr><operator>++</operator><name>cpp</name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_fingerprint</name></name></expr></argument>, <argument><expr><operator>*</operator><name>cpp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_status</name></name> <operator>|=</operator> <name>TLS_CERT_FLAG_MATCHED</name></expr>;</expr_stmt>
	    <break>break;</break>
	</block_content>}</block></if></if_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s %s%s fingerprint %s"</literal></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>,
		<argument><expr><ternary><condition><expr><call><name>TLS_CERT_IS_MATCHED</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"Matched "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
		<argument><expr><name><name>props</name><operator>-&gt;</operator><name>fpt_dgst</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This is the actual startup routine for the connection. We expect that the
 * buffers are flushed and the "220 Ready to start TLS" was received by us,
 * so that we can immediately start the TLS handshake process.
 */</comment>
<function><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>tls_client_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TLS_CLIENT_START_PROPS</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier>   <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_client_start"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>sts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>protomask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cipher_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL_CIPHER</name> <modifier>*</modifier></type><name>cipher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509</name>   <modifier>*</modifier></type><name>peercert</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TLS_APPL_STATE</name> <modifier>*</modifier></type><name>app_ctx</name> <init>= <expr><name><name>props</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>myserverid</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): setting up TLS connection to %s"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * First make sure we have valid protocol and cipher parameters
     * 
     * The cipherlist will be applied to the global SSL context, where it can be
     * repeatedly reset if necessary, but the protocol restrictions will be
     * is applied to the SSL connection, because protocol restrictions in the
     * global context cannot be cleared.
     */</comment>

    <comment type="block">/*
     * OpenSSL will ignore cached sessions that use the wrong protocol. So we
     * do not need to filter out cached sessions with the "wrong" protocol,
     * rather OpenSSL will simply negotiate a new session.
     * 
     * Still, we salt the session lookup key with the protocol list, so that
     * sessions found in the cache are always acceptable.
     */</comment>
    <expr_stmt><expr><name>protomask</name> <operator>=</operator> <call><name>tls_protocol_mask</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>protocols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>protomask</name> <operator>==</operator> <name>TLS_PROTOCOL_INVALID</name></expr>)</condition> <block>{<block_content>
	<comment type="block">/* tls_protocol_mask() logs no warning. */</comment>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): nameaddr: %s: Invalid TLS protocol list \"%s\": aborting TLS session"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>protocols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>myserverid</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>myserverid</name></expr></argument>, <argument><expr><literal type="string">"%s&amp;p=%d"</literal></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>, <argument><expr><name>protomask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Per session cipher selection for sessions with mandatory encryption
     * 
     * By the time a TLS client is negotiating ciphers it has already offered to
     * re-use a session, it is too late to renege on the offer. So we must
     * not attempt to re-use sessions whose ciphers are too weak. We salt the
     * session lookup key with the cipher list, so that sessions found in the
     * cache are always acceptable.
     */</comment>
    <expr_stmt><expr><name>cipher_list</name> <operator>=</operator> <call><name>tls_set_ciphers</name><argument_list>(<argument><expr><name>app_ctx</name></expr></argument>, <argument><expr><literal type="string">"TLS"</literal></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>cipher_grade</name></name></expr></argument>,
	    <argument><expr><name><name>props</name><operator>-&gt;</operator><name>cipher_exclusions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cipher_list</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s: %s: aborting TLS session"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>app_ctx</name><operator>-&gt;</operator><name>why</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>myserverid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s: TLS cipher list \"%s\""</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>, <argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>myserverid</name></expr></argument>, <argument><expr><literal type="string">"&amp;c=%s"</literal></expr></argument>, <argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Allocate a new TLScontext for the new connection and get an SSL
     * structure. Add the location of TLScontext to the SSL to later retrieve
     * the information inside the tls_verify_certificate_callback().
     * 
     * If session caching was enabled when TLS was initialized, the cache type
     * is stored in the client SSL context.
     */</comment>
    <expr_stmt><expr><name>TLScontext</name> <operator>=</operator> <call><name>tls_alloc_sess_context</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name> <operator>=</operator> <name><name>app_ctx</name><operator>-&gt;</operator><name>cache_type</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>serverid</name></name> <operator>=</operator> <call><name>acl_vstring_export</name><argument_list>(<argument><expr><name>myserverid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>app_ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Could not allocate 'TLScontext-&gt;con' with SSL_new()"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_free_context</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_set_ex_data</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>, <argument><expr><name>TLScontext_index</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Could not set application data for 'TLScontext-&gt;con'"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_free_context</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Apply session protocol restrictions.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>protomask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>SSL_set_options</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>,
		<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>protomask</name> <operator>&amp;</operator> <name>TLS_PROTOCOL_TLSv1</name><operator>)</operator></expr> ?</condition><then> <expr><name>SSL_OP_NO_TLSv1</name></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary><operator>)</operator>
		<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>protomask</name> <operator>&amp;</operator> <name>TLS_PROTOCOL_SSLv3</name><operator>)</operator></expr> ?</condition><then> <expr><name>SSL_OP_NO_SSLv3</name></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary><operator>)</operator>
		<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>protomask</name> <operator>&amp;</operator> <name>TLS_PROTOCOL_SSLv2</name><operator>)</operator></expr> ?</condition><then> <expr><name>SSL_OP_NO_SSLv2</name></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * The TLS connection is realized by a BIO_pair, so obtain the pair.
     * 
     * XXX There is no need to make internal_bio a member of the TLScontext
     * structure. It will be attached to TLScontext-&gt;con, and destroyed along
     * with it. The network_bio, however, needs to be freed explicitly.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BIO_new_bio_pair</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TLScontext</name><operator>-&gt;</operator><name>internal_bio</name></name></expr></argument>, <argument><expr><name>TLS_BIO_BUFSIZE</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>TLScontext</name><operator>-&gt;</operator><name>network_bio</name></name></expr></argument>, <argument><expr><name>TLS_BIO_BUFSIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Could not obtain BIO_pair"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_free_context</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * XXX To avoid memory leaks we must always call SSL_SESSION_free() after
     * calling SSL_set_session(), regardless of whether or not the session
     * will be reused.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cache_type</name></name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>load_clnt_session</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>SSL_set_session</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>SSL_SESSION_free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* 200411 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x00906011L</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>==</operator> <literal type="number">0x00907000L</literal><operator>)</operator></expr></cpp:if>

	    <comment type="block">/*
	     * Ugly Hack: OpenSSL before 0.9.6a does not store the verify
	     * result in sessions for the client side. We modify the session
	     * directly which is version specific, but this bug is version
	     * specific, too.
	     * 
	     * READ: 0-09-06-01-1 = 0-9-6-a-beta1: all versions before beta1
	     * have this bug, it has been fixed during development of 0.9.6a.
	     * The development version of 0.9.7 can have this bug, too. It
	     * has been fixed on 2000/11/29.
	     */</comment>
	    <expr_stmt><expr><call><name>SSL_set_verify_result</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>verify_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Before really starting anything, try to seed the PRNG a little bit
     * more.
     */</comment>
    <expr_stmt><expr><call><name>tls_int_seed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>var_tls_daemon_rand_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>tls_ext_seed</name><argument_list>(<argument><expr><name>var_tls_daemon_rand_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Initialize the SSL connection to connect state. This should not be
     * necessary anymore since 0.9.3, but the call is still in the library
     * and maintaining compatibility never hurts.
     */</comment>
    <expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Connect the SSL connection with the Postfix side of the BIO-pair for
     * reading and writing.
     */</comment>
    <expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>internal_bio</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>internal_bio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If the debug level selected is high enough, all of the data is dumped:
     * 3 will dump the SSL negotiation, 4 will dump everything.
     * 
     * We do have an SSL_set_fd() and now suddenly a BIO_ routine is called?
     * Well there is a BIO below the SSL routines that is automatically
     * created for us, so we can use it for debugging purposes.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>BIO_set_callback</name><argument_list>(<argument><expr><call><name>SSL_get_rbio</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tls_bio_dump_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Start TLS negotiations. This process is a black box that invokes our
     * call-backs for certificate verification.
     * 
     * Error handling: If the SSL handhake fails, we print out an error message
     * and remove all TLS state concerning this session.
     */</comment>
    <expr_stmt><expr><name>sts</name> <operator>=</operator> <call><name>tls_bio_connect</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>,
	    <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sts</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): SSL_connect error to %s: %d"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uncache_session</name><argument_list>(<argument><expr><name><name>app_ctx</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_free_context</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Only log_level==4 dumps everything */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>BIO_set_callback</name><argument_list>(<argument><expr><call><name>SSL_get_rbio</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * The caller may want to know if this session was reused or if a new
     * session was negotiated.
     */</comment>
    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>session_reused</name></name> <operator>=</operator> <call><name>SSL_session_reused</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>TLScontext</name><operator>-&gt;</operator><name>session_reused</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s: Reusing old session"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Do peername verification if requested and extract useful information
     * from the certificate for later use.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>peercert</name> <operator>=</operator> <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_status</name></name> <operator>|=</operator> <name>TLS_CERT_FLAG_PRESENT</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Peer name or fingerprint verification as requested.
	 * Unconditionally set peer_CN, issuer_CN and peer_fingerprint.
	 */</comment>
	<expr_stmt><expr><call><name>verify_extract_name</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>, <argument><expr><name>peercert</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_extract_print</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>, <argument><expr><name>peercert</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>peercert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>issuer_CN</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_CN</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>peer_fingerprint</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * Finally, collect information about protocol and cipher for logging
     */</comment>
    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <call><name>SSL_get_version</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name>SSL_get_current_cipher</name><argument_list>(<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>con</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cipher_name</name></name> <operator>=</operator> <call><name>SSL_CIPHER_get_name</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cipher_usebits</name></name> <operator>=</operator> <call><name>SSL_CIPHER_get_bits</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>TLScontext</name><operator>-&gt;</operator><name>cipher_algbits</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The TLS engine is active. Switch to the tls_timed_read/write()
     * functions and make the TLScontext available to those functions.
     */</comment>
    <expr_stmt><expr><call><name>tls_stream_start</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * All the key facts in a single log entry.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s TLS connection established to %s: %s with cipher %s "</literal>
		<literal type="string">"(%d/%d bits)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
		<argument><expr><ternary><condition><expr><call><name>TLS_CERT_IS_MATCHED</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"Verified"</literal></expr> </then><else>:
		<expr><ternary><condition><expr><call><name>TLS_CERT_IS_TRUSTED</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"Trusted"</literal></expr> </then><else>: <expr><literal type="string">"Untrusted"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
		<argument><expr><name><name>props</name><operator>-&gt;</operator><name>namaddr</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cipher_name</name></name></expr></argument>,
		<argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cipher_usebits</name></name></expr></argument>, <argument><expr><name><name>TLScontext</name><operator>-&gt;</operator><name>cipher_algbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tls_int_seed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>TLScontext</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>					<comment type="block">/* USE_TLS */</comment>
</unit>
