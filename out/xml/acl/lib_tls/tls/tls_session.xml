<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_tls/tls/tls_session.c"><comment type="block">/*++
 * NAME
 *	tls_session
 * SUMMARY
 *	TLS client and server session routines
 * SYNOPSIS
 *	#include &lt;tls.h&gt;
 *
 *	void	tls_session_stop(ctx, stream, timeout, failure, TLScontext)
 *	TLS_APPL_STATE *ctx;
 *	ACL_VSTREAM	*stream;
 *	int	timeout;
 *	int	failure;
 *	TLS_SESS_STATE *TLScontext;
 *
 *	ACL_VSTRING	*tls_session_passivate(session)
 *	SSL_SESSION *session;
 *
 *	SSL_SESSION *tls_session_activate(session_data, session_data_len)
 *	char	*session_data;
 *	int	session_data_len;
 * DESCRIPTION
 *	tls_session_stop() implements the tls_server_shutdown()
 *	and the tls_client_shutdown() routines.
 *
 *	tls_session_passivate() converts an SSL_SESSION object to
 *	ACL_VSTRING. The result is a null pointer in case of problems,
 *	otherwise it should be disposed of with acl_vstring_free().
 *
 *	tls_session_activate() reanimates a passivated SSL_SESSION object.
 *	The result is a null pointer in case of problems,
 *	otherwise it should be disposed of with SSL_SESSION_free().
 * LICENSE
 * .ad
 * .fi
 *	This software is free. You can do with it whatever you want.
 *	The original author kindly requests that you acknowledge
 *	the use of his software.
 * AUTHOR(S)
 *	Originally written by:
 *	Lutz Jaenicke
 *	BTU Cottbus
 *	Allgemeine Elektrotechnik
 *	Universitaetsplatz 3-4
 *	D-03044 Cottbus, Germany
 *
 *	Updated by:
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *
 *	Victor Duchovni
 *	Morgan Stanley
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>

<comment type="block">/* TLS library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_private.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

<comment type="block">/* tls_session_stop - shut down the TLS connection and reset state */</comment>

<function><type><name>void</name></type>    <name>tls_session_stop</name><parameter_list>(<parameter><decl><type><name>TLS_APPL_STATE</name> <modifier>*</modifier><name>unused_ctx</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>failure</name></decl></parameter>, <parameter><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_session_stop"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>retval</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Sanity check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>TLScontext</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: stream has no active TLS context"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Perform SSL_shutdown() twice, as the first attempt will send out the
     * shutdown alert but it will not wait for the peer's shutdown alert.
     * Therefore, when we are the first party to send the alert, we must call
     * SSL_shutdown() again. On failure we don't want to resume the session,
     * so we will not perform SSL_shutdown() and the session will be removed
     * as being bad.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>failure</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>tls_bio_shutdown</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>tls_bio_shutdown</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tls_free_context</name><argument_list>(<argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tls_stream_stop</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* tls_session_passivate - passivate SSL_SESSION object */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>tls_session_passivate</name><parameter_list>(<parameter><decl><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_session_passivate"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>estimate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>actual_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>session_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <comment type="block">/*
     * First, find out how much memory is needed for the passivated
     * SSL_SESSION object.
     */</comment>
    <expr_stmt><expr><name>estimate</name> <operator>=</operator> <call><name>i2d_SSL_SESSION</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>estimate</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: i2d_SSL_SESSION failed: unable to cache session"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Passivate the SSL_SESSION object. The use of a ACL_VSTRING is slightly
     * wasteful but is convenient to combine data and length.
     */</comment>
    <expr_stmt><expr><name>session_data</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>estimate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>STR</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>actual_size</name> <operator>=</operator> <call><name>i2d_SSL_SESSION</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>actual_size</name> <operator>!=</operator> <name>estimate</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: i2d_SSL_SESSION failed: unable to cache session"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>session_data</name></expr></argument>, <argument><expr><name>actual_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* XXX not public */</comment>

    <return>return <expr><operator>(</operator><name>session_data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_session_activate - activate passivated session */</comment>

<function><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>tls_session_activate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>session_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>session_data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x0090707fL</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOGUS_CONST</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOGUS_CONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOGUS_CONST</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Activate the SSL_SESSION object.
     */</comment>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>BOGUS_CONST</name> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>session_data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>d2i_SSL_SESSION</name><argument_list>(<argument><expr><operator>(</operator><name>SSL_SESSION</name> <operator>*</operator><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>session_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>session</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>session</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
