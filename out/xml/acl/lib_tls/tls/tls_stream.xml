<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_tls/tls/tls_stream.c"><comment type="block">/*++
 * NAME
 *	tls_stream
 * SUMMARY
 *	ACL_VSTREAM over TLS
 * SYNOPSIS
 *	#include &lt;tls.h&gt;
 *	#include &lt;tls_private.h&gt;
 *
 *	void	tls_stream_start(stream, context)
 *	ACL_VSTREAM	*stream;
 *	TLS_SESS_STATE *context;
 *
 *	void	tls_stream_stop(stream)
 *	ACL_VSTREAM	*stream;
 * DESCRIPTION
 *	This module implements the ACL_VSTREAM over TLS support user interface.
 *	The hard work is done elsewhere.
 *
 *	tls_stream_start() enables TLS on the named stream. All read
 *	and write operations are directed through the TLS library,
 *	using the state information specified with the context argument.
 *
 *	tls_stream_stop() replaces the ACL_VSTREAM read/write routines
 *	by dummies that have no side effects, and deletes the
 *	ACL_VSTREAM's reference to the TLS context.
 * SEE ALSO
 *	dummy_read(3), placebo read routine
 *	dummy_write(3), placebo write routine
 * LICENSE
 * .ad
 * .fi
 *	This software is free. You can do with it whatever you want.
 *	The original author kindly requests that you acknowledge
 *	the use of his software.
 * AUTHOR(S)
 *	Based on code that was originally written by:
 *	Lutz Jaenicke
 *	BTU Cottbus
 *	Allgemeine Elektrotechnik
 *	Universitaetsplatz 3-4
 *	D-03044 Cottbus, Germany
 *
 *	Updated by:
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>

<comment type="block">/* TLS library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_private.h"</cpp:file></cpp:include>

<comment type="block">/* tls_timed_read - read content from stream, then TLS decapsulate */</comment>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>tls_timed_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_timed_read"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>TLScontext</name> <operator>=</operator> <operator>(</operator><name>TLS_SESS_STATE</name> <operator>*</operator><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>TLScontext</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: no context"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tls_bio_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>TLScontext</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Read %ld chars: %.*s"</literal></expr></argument>,
		 <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>ret</name> <operator>&gt;</operator> <literal type="number">40</literal></expr> ?</condition><then> <expr><literal type="number">40</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_timed_write - TLS encapsulate content, then write to stream */</comment>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>tls_timed_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_timed_write"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>TLScontext</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>TLScontext</name> <operator>=</operator> <operator>(</operator><name>TLS_SESS_STATE</name> <operator>*</operator><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>TLScontext</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: no context, buf(%s), len(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>TLScontext</name><operator>-&gt;</operator><name>log_level</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Write %ld chars: %.*s"</literal></expr></argument>,
		 <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">40</literal></expr> ?</condition><then> <expr><literal type="number">40</literal></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><call><name>tls_bio_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>TLScontext</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_stream_start - start ACL_VSTREAM over TLS */</comment>

<function><type><name>void</name></type>    <name>tls_stream_start</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>acl_vstream_ctl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
		    <argument><expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr></argument>, <argument><expr><name>tls_timed_read</name></expr></argument>,
		    <argument><expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr></argument>, <argument><expr><name>tls_timed_write</name></expr></argument>,
		    <argument><expr><name>ACL_VSTREAM_CTL_CTX</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></argument>,
		    <argument><expr><name>ACL_VSTREAM_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>dummy_read</name><parameter_list>(<parameter><decl><type><name>int</name> <name>fd</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>buf</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <name>len</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>dummy_write</name><parameter_list>(<parameter><decl><type><name>int</name> <name>fd</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>buf</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <name>len</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_stream_stop - stop ACL_VSTREAM over TLS */</comment>

<function><type><name>void</name></type>    <name>tls_stream_stop</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block">/*
     * Prevent data leakage after TLS is turned off. The Postfix/TLS patch
     * provided null function pointers; we use dummy routines that make less
     * noise when used.
     */</comment>
    <expr_stmt><expr><call><name>acl_vstream_ctl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
		    <argument><expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr></argument>, <argument><expr><name>dummy_read</name></expr></argument>,
		    <argument><expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr></argument>, <argument><expr><name>dummy_write</name></expr></argument>,
		    <argument><expr><name>ACL_VSTREAM_CTL_CONTEXT</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>,
		    <argument><expr><name>ACL_VSTREAM_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
