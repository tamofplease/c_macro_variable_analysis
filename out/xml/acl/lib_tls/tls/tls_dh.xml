<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_tls/tls/tls_dh.c"><comment type="block">/*++
 * NAME
 *	tls_dh
 * SUMMARY
 *	Diffie-Hellman parameter support
 * SYNOPSIS
 *	#include &lt;tls.h&gt;
 *	#include &lt;tls_private.h&gt;
 *
 *	void	tls_set_dh_from_file(path, bits)
 *	const char *path;
 *	int	bits;
 *
 *	int	tls_set_eecdh_curve(server_ctx, grade)
 *	SSL_CTX	*server_ctx;
 *	const char *grade;
 *
 *	DH	*tls_tmp_dh_cb(ssl, export, keylength)
 *	SSL	*ssl;  acl_unused
 *	int	export;
 *	int	keylength;
 * DESCRIPTION
 *	This module maintains parameters for Diffie-Hellman key generation.
 *
 *	tls_tmp_dh_cb() is a call-back routine for the
 *	SSL_CTX_set_tmp_dh_callback() function.
 *
 *	tls_set_dh_from_file() overrides compiled-in DH parameters
 *	with those specified in the named files. The file format
 *	is as expected by the PEM_read_DHparams() routine. The
 *	"bits" argument must be 512 or 1024.
 *
 *	tls_set_eecdh_curve() enables ephemeral Elliptic-Curve DH
 *	key exchange algorithms by instantiating in the server SSL
 *	context a suitable curve (corresponding to the specified
 *	EECDH security grade) from the set of named curves in RFC
 *	4492 Section 5.1.1. Errors generate warnings, but do not
 *	disable TLS, rather we continue without EECDH. A zero
 *	result indicates that the grade is invalid or the corresponding
 *	curve could not be used.
 * DIAGNOSTICS
 *	In case of error, tls_set_dh_from_file() logs a warning and
 *	ignores the request.
 * LICENSE
 * .ad
 * .fi
 *	This software is free. You can do with it whatever you want.
 *	The original author kindly requests that you acknowledge
 *	the use of his software.
 * AUTHOR(S)
 *	Originally written by:
 *	Lutz Jaenicke
 *	BTU Cottbus
 *	Allgemeine Elektrotechnik
 *	Universitaetsplatz 3-4
 *	D-03044 Cottbus, Germany
 *
 *	Updated by:
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<comment type="block">/* TLS library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_private.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

 <comment type="block">/*
  * Compiled-in EDH primes (the compiled-in generator is always 2). These are
  * used when no parameters are explicitly loaded from a site-specific file.
  * 
  * 512-bit parameters are used for export ciphers, and 1024-bit parameters are
  * used for non-export ciphers. An ~80-bit strong EDH key exchange is really
  * too weak to protect 128+ bit keys, but larger DH primes are
  * computationally expensive. When greater security is required, use EECDH.
  */</comment>

 <comment type="block">/*
  * Generated via "openssl dhparam -2 -noout -C 512 2&gt;/dev/null" TODO:
  * generate at compile-time.
  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>dh512_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xC2</literal></expr>,
    <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xE4</literal></expr>,
    <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x3E</literal></expr>,
    <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xA5</literal></expr>,
    <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xAB</literal></expr>,
    <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x5B</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

 <comment type="block">/*
  * Generated via "openssl dhparam -2 -noout -C 1024 2&gt;/dev/null" TODO:
  * generate at compile-time.
  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>dh1024_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
    <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
    <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x51</literal></expr>,
    <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x4F</literal></expr>,
    <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
    <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
    <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
    <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x7E</literal></expr>,
    <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xF6</literal></expr>,
    <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xDF</literal></expr>,
    <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9B</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

 <comment type="block">/*
  * Cached results.
  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>DH</name> <modifier>*</modifier></type><name>dh_1024</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>DH</name> <modifier>*</modifier></type><name>dh_512</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* free_dh_cb - call-back for free DH */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_dh_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DH</name> <modifier>*</modifier></type><name>dh_tmp</name> <init>= <expr><operator>(</operator><name>DH</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* tls_set_dh_from_file - set Diffie-Hellman parameters from file */</comment>

<function><type><name>void</name></type>    <name>tls_set_dh_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_set_dh_from_file"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name>   <modifier>*</modifier></type><name>paramfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DH</name>    <modifier>*</modifier><modifier>*</modifier></type><name>dhPtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">512</literal></expr>:</case>
	<expr_stmt><expr><name>dhPtr</name> <operator>=</operator> <operator>&amp;</operator><name>dh_512</name></expr>;</expr_stmt>
	<break>break;</break>
    <case>case <expr><literal type="number">1024</literal></expr>:</case>
	<expr_stmt><expr><name>dhPtr</name> <operator>=</operator> <operator>&amp;</operator><name>dh_1024</name></expr>;</expr_stmt>
	<break>break;</break>
    <default>default:</default>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"Invalid DH parameters size %d, file %s"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dhPtr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>paramfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>dhPtr</name> <operator>=</operator> <call><name>PEM_read_DHparams</name><argument_list>(<argument><expr><name>paramfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: cannot load %d-bit DH parameters from file %s"</literal>
		    <literal type="string">" -- using compiled-in defaults"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>paramfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* 200411 */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: cannot load %d-bit DH parameters from file %s: %s"</literal>
		<literal type="string">" -- using compiled-in defaults"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* tls_get_dh - get compiled-in DH parameters */</comment>

<function><type><specifier>static</specifier> <name>DH</name> <modifier>*</modifier></type><name>tls_get_dh</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_get_dh"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DH</name>     <modifier>*</modifier></type><name>dh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x02</literal></expr>,}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Use the compiled-in parameters. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dh</name> <operator>=</operator> <call><name>DH_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: cannot create DH parameter set: %s"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 200411 */</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>(</operator><name>BIGNUM</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>BIGNUM</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dh</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dh</name><operator>-&gt;</operator><name>g</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: cannot load compiled-in DH parameters"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 200411 */</comment>
	<expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block">/* 200411 */</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>dh</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_tmp_dh_cb - call-back for Diffie-Hellman parameters */</comment>

<function><type><name>DH</name>     <modifier>*</modifier></type><name>tls_tmp_dh_cb</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier><name>unused_ssl</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>export</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DH</name>     <modifier>*</modifier></type><name>dh_tmp</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>export</name> <operator>&amp;&amp;</operator> <name>keylength</name> <operator>==</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* 40-bit export cipher */</comment>
	<if_stmt><if>if <condition>(<expr><name>dh_512</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>dh_512</name> <operator>=</operator> <call><name>tls_get_dh</name><argument_list>(<argument><expr><name>dh512_p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dh512_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>dh_512</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>dh_512</name></expr></argument>, <argument><expr><name>free_dh_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dh_tmp</name> <operator>=</operator> <name>dh_512</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>					<comment type="block">/* ADH, DHE-RSA or DSA */</comment>
	<if_stmt><if>if <condition>(<expr><name>dh_1024</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>dh_1024</name> <operator>=</operator> <call><name>tls_get_dh</name><argument_list>(<argument><expr><name>dh1024_p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dh1024_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>dh_1024</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>dh_1024</name></expr></argument>, <argument><expr><name>free_dh_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dh_tmp</name> <operator>=</operator> <name>dh_1024</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><name>dh_tmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>     <name>tls_set_eecdh_curve</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier><name>server_ctx</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>grade</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x00909000</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_ECDH</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_set_eecdh_curve"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>nid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ecdh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curve</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>g</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_EECDH_INVALID</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_EECDH_NONE</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_EECDH_STRONG</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_EECDH_ULTRA</name></cpp:macro>		<cpp:value>3</cpp:value></cpp:define>
    <decl_stmt><decl><type><specifier>static</specifier> <name>NAME_CODE</name></type> <name><name>eecdh_table</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"none"</literal></expr>, <expr><name>TLS_EECDH_NONE</name></expr>,
	<expr><literal type="string">"strong"</literal></expr>, <expr><name>TLS_EECDH_STRONG</name></expr>,
	<expr><literal type="string">"ultra"</literal></expr>, <expr><name>TLS_EECDH_ULTRA</name></expr>,
	<expr><literal type="number">0</literal></expr>, <expr><name>TLS_EECDH_INVALID</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>g</name> <operator>=</operator> <call><name>name_code</name><argument_list>(<argument><expr><name>eecdh_table</name></expr></argument>, <argument><expr><name>NAME_CODE_FLAG_NONE</name></expr></argument>, <argument><expr><name>grade</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <default>default:</default>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: Invalid eecdh grade code: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case>case <expr><name>TLS_EECDH_INVALID</name></expr>:</case>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: Invalid TLS eecdh grade \"%s\": EECDH disabled"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    <case>case <expr><name>TLS_EECDH_NONE</name></expr>:</case>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    <case>case <expr><name>TLS_EECDH_STRONG</name></expr>:</case>
	<expr_stmt><expr><name>curve</name> <operator>=</operator> <name>var_tls_eecdh_strong</name></expr>;</expr_stmt>
	<break>break;</break>
    <case>case <expr><name>TLS_EECDH_ULTRA</name></expr>:</case>
	<expr_stmt><expr><name>curve</name> <operator>=</operator> <name>var_tls_eecdh_ultra</name></expr>;</expr_stmt>
	<break>break;</break>
    </block_content>}</block></switch>

    <comment type="block">/*
     * Elliptic-Curve Diffie-Hellman parameters are either "named curves"
     * from RFC 4492 section 5.1.1, or explicitly described curves over
     * binary fields. OpenSSL only supports the "named curves", which provide
     * maximum interoperability. The recommended curve for 128-bit
     * work-factor key exchange is "prime256v1" a.k.a. "secp256r1" from
     * Section 2.7 of http://www.secg.org/download/aid-386/sec2_final.pdf
     */</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nid</name> <operator>=</operator> <call><name>OBJ_sn2nid</name><argument_list>(<argument><expr><name>curve</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NID_undef</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: unknown curve \"%s\": disabling EECDH support"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ecdh</name> <operator>=</operator> <call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
	    <operator>||</operator> <call><name>SSL_CTX_set_tmp_ecdh</name><argument_list>(<argument><expr><name>server_ctx</name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: unable to use curve \"%s\": disabling EECDH support"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unused_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>unused_argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>tls_tmp_dh_cb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tls_tmp_dh_cb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tls_tmp_dh_cb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tls_tmp_dh_cb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
