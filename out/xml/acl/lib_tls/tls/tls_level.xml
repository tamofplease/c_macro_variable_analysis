<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_tls/tls/tls_level.c"><comment type="block">/*++
 * NAME
 *	tls_level 3
 * SUMMARY
 *	TLS security level conversion
 * SYNOPSIS
 *	#include &lt;tls.h&gt;
 *
 *	int	tls_level_lookup(name)
 *	const char *name;
 *
 *	const char *str_tls_level(level)
 *	int	level;
 * DESCRIPTION
 *	The macros in this module convert TLS levels from symbolic
 *	name to internal form and vice versa. The macros are safe
 *	because they evaluate their arguments only once.
 *
 *	tls_level_lookup() converts a TLS level from symbolic name
 *	to internal form. When an unknown level is specified,
 *	tls_level_lookup() logs no warning, and returns TLS_LEV_INVALID.
 *
 *	str_tls_level() converts a TLS level from internal form to
 *	symbolic name. The result is a null pointer for an unknown
 *	level.
 * SEE ALSO
 *	name_code(3) name to number mapping
 * LICENSE
 * .ad
 * .fi
 *	The Secure Mailer license must be distributed with this software.
 * AUTHOR(S)
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *
 *	Victor Duchovni
 *	Morgan Stanley
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/name_code.h"</cpp:file></cpp:include>

<comment type="block">/* TLS library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_private.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

 <comment type="block">/*
  * Order is critical:
  * 
  * Levels &gt; "encrypt" are expected to match a peer certificate.
  * 
  * Levels &gt;= "verify" are expected to require a valid CA trust-chain
  * 
  * This forces "fingerprint" between "encrypt" and "verify".
  */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>NAME_CODE</name></type> <name><name>tls_level_table</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>TLS_LEV_NONE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"may"</literal></expr>, <expr><name>TLS_LEV_MAY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"encrypt"</literal></expr>, <expr><name>TLS_LEV_ENCRYPT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"fingerprint"</literal></expr>, <expr><name>TLS_LEV_FPRINT</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"verify"</literal></expr>, <expr><name>TLS_LEV_VERIFY</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"secure"</literal></expr>, <expr><name>TLS_LEV_SECURE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>TLS_LEV_INVALID</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
