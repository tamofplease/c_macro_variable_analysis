<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_tls/tls/tls_mgr.c"><comment type="block">/*++
 * NAME
 *	tls_mgr 3
 * SUMMARY
 *	tlsmgr client interface
 * SYNOPSIS
 *	#include &lt;tls_mgr.h&gt;
 *
 *	int	tls_mgr_seed(buf, len)
 *	ACL_VSTRING	*buf;
 *	int	len;
 *
 *	int	tls_mgr_policy(cache_type, cachable)
 *	const char *cache_type;
 *	int	*cachable;
 *
 *	int	tls_mgr_update(cache_type, cache_id, buf, len)
 *	const char *cache_type;
 *	const char *cache_id;
 *	const char *buf;
 *	ssize_t	len;
 *
 *	int	tls_mgr_lookup(cache_type, cache_id, buf)
 *	const char *cache_type;
 *	const char *cache_id;
 *	ACL_VSTRING	*buf;
 *
 *	int	tls_mgr_delete(cache_type, cache_id)
 *	const char *cache_type;
 *	const char *cache_id;
 * DESCRIPTION
 *	These routines communicate with the tlsmgr(8) server for
 *	entropy and session cache management. Since these are
 *	non-critical services, requests are allowed to fail without
 *	disrupting Postfix.
 *
 *	tls_mgr_seed() requests entropy from the tlsmgr(8)
 *	Pseudo Random Number Generator (PRNG) pool.
 *
 *	tls_mgr_policy() requests the session caching policy.
 *
 *	tls_mgr_lookup() loads the specified session from
 *	the specified session cache.
 *
 *	tls_mgr_update() saves the specified session to
 *	the specified session cache.
 *
 *	tls_mgr_delete() removes specified session from
 *	the specified session cache.
 *
 *	Arguments
 * .IP cache_type
 *	One of TLS_MGR_SCACHE_SMTPD, TLS_MGR_SCACHE_SMTP
 * .IP cachable
 *	Pointer to int, set non-zero if the requested cache_type
 *	is enabled.
 * .IP cache_id
 *	The session cache lookup key.
 * .IP buf
 *	The result or input buffer.
 * .IP len
 *	The length of the input buffer, or the amount of data requested.
 * DIAGNOSTICS
 *	All client functions return one of the following status codes:
 * .IP TLS_MGR_STAT_OK
 *      The request completed, and the requested operation was
 *	successful (for example, the requested session was found,
 *	or the specified session was saved or removed).
 * .IP TLS_MGR_STAT_ERR
 *      The request completed, but the requested operation failed
 *	(for example, the requested object was not found or the
 *	specified session was not saved or removed).
 * .IP TLS_MGR_STAT_FAIL
 *      The request could not complete (the client could not
 *	communicate with the tlsmgr(8) server).
 * SEE ALSO
 *	tlsmgr(8) TLS session and PRNG management
 * LICENSE
 * .ad
 * .fi
 *	The Secure Mailer license must be distributed with this software.
 * AUTHOR(S)
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STRCASECMP_IN_STRINGS_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../attr/attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../attr/attr_clnt.h"</cpp:file></cpp:include>

<comment type="block">/* Global library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_mgr.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ATTR_CLNT</name> <modifier>*</modifier></type><name>tls_mgr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name> <init>= <expr><operator>(</operator><name>ACL_EVENT</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>acl_event_free</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* tls_mgr_open - create client handle */</comment>

<function><type><name>void</name></type> <name>tls_mgr_open</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block">/*
     * Sanity check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>tls_mgr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"tls_mgr_open: multiple initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>eventp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>eventp</name> <operator>=</operator> <call><name>acl_event_new_select</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>free_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Use whatever IPC is preferred for internal use: UNIX-domain sockets or
     * Solaris streams.
     */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VAR_TLS_MGR_SERVICE</name></cpp:ifndef>
    <expr_stmt><expr><name>tls_mgr</name> <operator>=</operator> <call><name>attr_clnt_create</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><literal type="string">"local:"</literal> <name>TLS_MGR_CLASS</name> <literal type="string">"/"</literal> <name>TLS_MGR_SERVICE</name></expr></argument>,
			       <argument><expr><name>var_ipc_timeout</name></expr></argument>, <argument><expr><name>var_ipc_idle_limit</name></expr></argument>,
			       <argument><expr><name>var_ipc_ttl_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tls_mgr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"attr_clnt_create error, service: local:%s"</literal></expr></argument>,
		<argument><expr><name>TLS_MGR_CLASS</name> <literal type="string">"/"</literal> <name>TLS_MGR_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>tls_mgr</name> <operator>=</operator> <call><name>attr_clnt_create</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>var_tlsmgr_service</name></expr></argument>, <argument><expr><name>var_ipc_timeout</name></expr></argument>,
			       <argument><expr><name>var_ipc_idle_limit</name></expr></argument>, <argument><expr><name>var_ipc_ttl_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tls_mgr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"attr_clnt_create error, service: %s"</literal></expr></argument>, <argument><expr><name>var_tlsmgr_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>tls_mgr</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>attr_clnt_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>attr_clnt_control</name><argument_list>(<argument><expr><name>tls_mgr</name></expr></argument>,
		      <argument><expr><name>ATTR_CLNT_CTL_PROTO</name></expr></argument>, <argument><expr><name>attr_vprint</name></expr></argument>, <argument><expr><name>attr_vscan</name></expr></argument>,
		      <argument><expr><name>ATTR_CLNT_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* tls_mgr_seed - request PRNG seed */</comment>

<function><type><name>int</name></type>     <name>tls_mgr_seed</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Create the tlsmgr client handle.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>tls_mgr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"tls_mgr_seed: call tls_mgr_open first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>TLS_MGR_STAT_FAIL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Request seed.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>attr_clnt_request</name><argument_list>(<argument><expr><name>tls_mgr</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_NONE</name></expr></argument>,	<comment type="block">/* Request attributes */</comment>
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_REQ</name></expr></argument>, <argument><expr><name>TLS_MGR_REQ_SEED</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_SIZE</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_MISSING</name></expr></argument>,	<comment type="block">/* Reply attributes */</comment>
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_DATA</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_SEED</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <name>TLS_MGR_STAT_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_mgr_policy - request caching policy */</comment>

<function><type><name>int</name></type>     <name>tls_mgr_policy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cache_type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cachable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Create the tlsmgr client handle.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>tls_mgr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"tls_mgr_policy: call tls_mgr_open first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>TLS_MGR_STAT_FAIL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Request policy.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>attr_clnt_request</name><argument_list>(<argument><expr><name>tls_mgr</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_NONE</name></expr></argument>,	<comment type="block">/* Request attributes */</comment>
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_REQ</name></expr></argument>, <argument><expr><name>TLS_MGR_REQ_POLICY</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_CACHE_TYPE</name></expr></argument>, <argument><expr><name>cache_type</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_MISSING</name></expr></argument>,	<comment type="block">/* Reply attributes */</comment>
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_CACHABLE</name></expr></argument>, <argument><expr><name>cachable</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <name>TLS_MGR_STAT_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_mgr_lookup - request cached session */</comment>

<function><type><name>int</name></type>     <name>tls_mgr_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cache_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cache_id</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Create the tlsmgr client handle.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>tls_mgr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"tls_mgr_lookup: call tls_mgr_open first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>TLS_MGR_STAT_FAIL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Send the request and receive the reply.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>attr_clnt_request</name><argument_list>(<argument><expr><name>tls_mgr</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_NONE</name></expr></argument>,	<comment type="block">/* Request */</comment>
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_REQ</name></expr></argument>, <argument><expr><name>TLS_MGR_REQ_LOOKUP</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_CACHE_TYPE</name></expr></argument>, <argument><expr><name>cache_type</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_CACHE_ID</name></expr></argument>, <argument><expr><name>cache_id</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_MISSING</name></expr></argument>,	<comment type="block">/* Reply */</comment>
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_DATA</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_SESSION</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <name>TLS_MGR_STAT_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_mgr_update - save session to cache */</comment>

<function><type><name>int</name></type>  <name>tls_mgr_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cache_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cache_id</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Create the tlsmgr client handle.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>tls_mgr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"tls_mgr_update: call tls_mgr_open first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>TLS_MGR_STAT_FAIL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Send the request and receive the reply.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>attr_clnt_request</name><argument_list>(<argument><expr><name>tls_mgr</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_NONE</name></expr></argument>,	<comment type="block">/* Request */</comment>
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_REQ</name></expr></argument>, <argument><expr><name>TLS_MGR_REQ_UPDATE</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_CACHE_TYPE</name></expr></argument>, <argument><expr><name>cache_type</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_CACHE_ID</name></expr></argument>, <argument><expr><name>cache_id</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_DATA</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_SESSION</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_MISSING</name></expr></argument>,	<comment type="block">/* Reply */</comment>
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <name>TLS_MGR_STAT_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_mgr_delete - remove cached session */</comment>

<function><type><name>int</name></type>     <name>tls_mgr_delete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cache_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cache_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Create the tlsmgr client handle.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>tls_mgr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"tls_mgr_delete: call tls_mgr_open first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>TLS_MGR_STAT_FAIL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Send the request and receive the reply.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>attr_clnt_request</name><argument_list>(<argument><expr><name>tls_mgr</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_NONE</name></expr></argument>,	<comment type="block">/* Request */</comment>
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_REQ</name></expr></argument>, <argument><expr><name>TLS_MGR_REQ_DELETE</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_CACHE_TYPE</name></expr></argument>, <argument><expr><name>cache_type</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_CACHE_ID</name></expr></argument>, <argument><expr><name>cache_id</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_MISSING</name></expr></argument>,	<comment type="block">/* Reply */</comment>
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>TLS_MGR_ATTR_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <name>TLS_MGR_STAT_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

<comment type="block">/* System library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;argv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hex_code.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Global library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>acl_vstring_str(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ACL_VSTRING_LEN(x)</cpp:value></cpp:define>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unused_ac</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>inbuf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ARGV</name>   <modifier>*</modifier></type><name>argv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name> <init>= <expr><call><name>acl_event_new_select</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>acl_msg_verbose</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mail_conf_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"using config files in %s"</literal></expr></argument>, <argument><expr><name>var_config_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name>var_queue_dir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"chdir %s: %s"</literal></expr></argument>, <argument><expr><name>var_queue_dir</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tls_mgr_open</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><call><name>acl_vstring_fgets_nonl</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_IN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>argv_split</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>argv</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMAND</name><parameter_list>(<parameter><type><name>argv</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>(strcasecmp(argv-&gt;argv[0], str) == 0 &amp;&amp; argv-&gt;argc == len)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><call><name>COMMAND</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"policy"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <decl_stmt><decl><type><name>int</name></type>     <name>cachable</name></decl>;</decl_stmt>

	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tls_mgr_policy</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"status=%d cachable=%d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>cachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COMMAND</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"seed"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type>     <name>len</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tls_mgr_seed</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>hex_encode</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"status=%d seed=%s\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COMMAND</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"lookup"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tls_mgr_lookup</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"status=%d session=%.*s\n"</literal></expr></argument>,
			   <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COMMAND</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"update"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tls_mgr_update</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
				    <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"status=%d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COMMAND</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>tls_mgr_delete</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"status=%d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	    <expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"usage:\n"</literal>
			   <literal type="string">"seed byte_count\n"</literal>
			   <literal type="string">"policy smtpd|smtp|lmtp\n"</literal>
			   <literal type="string">"lookup smtpd|smtp|lmtp cache_id\n"</literal>
			   <literal type="string">"update smtpd|smtp|lmtp cache_id session\n"</literal>
			   <literal type="string">"delete smtpd|smtp|lmtp cache_id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_event_free</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>					<comment type="block">/* TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>					<comment type="block">/* USE_TLS */</comment>
</unit>
