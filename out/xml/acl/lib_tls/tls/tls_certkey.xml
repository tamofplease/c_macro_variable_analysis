<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_tls/tls/tls_certkey.c"><comment type="block">/*++
 * NAME
 *	tls_certkey 3
 * SUMMARY
 *	public key certificate and private key loader
 * SYNOPSIS
 *	#include &lt;tls.h&gt;
 *      #include &lt;tls_private.h&gt;
 *
 *	int	tls_set_ca_certificate_info(ctx, CAfile, CApath)
 *	SSL_CTX	*ctx;
 *	const char *CAfile;
 *	const char *CApath;
 *
 *	int	tls_set_my_certificate_key_info(ctx, cert_file, key_file,
 *						dcert_file, dkey_file,
 *						eccert_file, eckey_file)
 *	SSL_CTX	*ctx;
 *	const char *cert_file;
 *	const char *key_file;
 *	const char *dcert_file;
 *	const char *dkey_file;
 *	const char *eccert_file;
 *	const char *eckey_file;
 * DESCRIPTION
 *	OpenSSL supports two options to specify CA certificates:
 *	either one file CAfile that contains all CA certificates,
 *	or a directory CApath with separate files for each
 *	individual CA, with symbolic links named after the hash
 *	values of the certificates. The second option is not
 *	convenient with a chrooted process.
 *
 *	tls_set_ca_certificate_info() loads the CA certificate
 *	information for the specified TLS server or client context.
 *	The result is -1 on failure, 0 on success.
 *
 *	tls_set_my_certificate_key_info() loads the public key
 *	certificates and private keys for the specified TLS server
 *	or client context. Up to 3 pairs of key pairs (RSA, DSA and
 *	ECDSA) may be specified; each certificate and key pair must
 *	match.  The result is -1 on failure, 0 on success.
 * LICENSE
 * .ad
 * .fi
 *	This software is free. You can do with it whatever you want.
 *	The original author kindly requests that you acknowledge
 *	the use of his software.
 * AUTHOR(S)
 *	Originally written by:
 *	Lutz Jaenicke
 *	BTU Cottbus
 *	Allgemeine Elektrotechnik
 *	Universitaetsplatz 3-4
 *	D-03044 Cottbus, Germany
 *
 *	Updated by:
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TLS</name></cpp:ifdef>

<comment type="block">/* TLS library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_private.h"</cpp:file></cpp:include>

<comment type="block">/* tls_set_ca_certificate_info - load certificate authority certificates */</comment>

<function><type><name>int</name></type>     <name>tls_set_ca_certificate_info</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CAfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CApath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>CAfile</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>CAfile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>CApath</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>CApath</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>CAfile</name> <operator>||</operator> <name>CApath</name></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CAfile</name></expr></argument>, <argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"cannot load Certificate Authority data: "</literal>
		    <literal type="string">"disabling TLS support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_default_verify_paths</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"cannot set certificate verification paths: "</literal>
		    <literal type="string">"disabling TLS support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* set_cert_stuff - specify certificate and key information */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_cert_stuff</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"set_cert_stuff"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * We need both the private key (in key_file) and the public key
     * certificate (in cert_file). Both may specify the same file.
     * 
     * Code adapted from OpenSSL apps/s_cb.c.
     */</comment>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: cannot get %s certificate from file %s: "</literal>
		<literal type="string">"disabling TLS support"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>cert_type</name></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>, <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: cannot get %s private key from file %s: "</literal>
		<literal type="string">"disabling TLS support"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>cert_type</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tls_print_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Sanity check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_CTX_check_private_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: %s private key in %s does not match public key in %s: "</literal>
		<literal type="string">"disabling TLS support"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>cert_type</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* tls_set_my_certificate_key_info - load client or server certificates/keys */</comment>

<function><type><name>int</name></type>     <name>tls_set_my_certificate_key_info</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_file</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_file</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dcert_file</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dkey_file</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eccert_file</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>eckey_file</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"tls_set_my_certificate_key_info"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Lack of certificates is fine so long as we are prepared to use
     * anonymous ciphers.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>cert_file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cert_file</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>set_cert_stuff</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"RSA"</literal></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* logged */</comment>
    <if_stmt><if>if <condition>(<expr><name>dcert_file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dcert_file</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>set_cert_stuff</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"DSA"</literal></expr></argument>, <argument><expr><name>dcert_file</name></expr></argument>, <argument><expr><name>dkey_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* logged */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x00909000</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_ECDH</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>eccert_file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>eccert_file</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>set_cert_stuff</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"ECDSA"</literal></expr></argument>, <argument><expr><name>eccert_file</name></expr></argument>, <argument><expr><name>eckey_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* logged */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name>eccert_file</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>eccert_file</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: ECDSA not supported. Ignoring ECDSA certificate file \"%s\""</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>eccert_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
