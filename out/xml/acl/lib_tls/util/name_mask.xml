<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_tls/util/name_mask.c"><comment type="block">/*++
 * NAME
 *	name_mask 3
 * SUMMARY
 *	map names to bit mask
 * SYNOPSIS
 *	#include &lt;name_mask.h&gt;
 *
 *	int	name_mask(context, table, names)
 *	const char *context;
 *	const NAME_MASK *table;
 *	const char *names;
 *
 *	const char *str_name_mask(context, table, mask)
 *	const char *context;
 *	const NAME_MASK *table;
 *	int	mask;
 *
 *	int	name_mask_opt(context, table, names, flags)
 *	const char *context;
 *	const NAME_MASK *table;
 *	const char *names;
 *	int	flags;
 *
 *	int	name_mask_delim_opt(context, table, names, delim, flags)
 *	const char *context;
 *	const NAME_MASK *table;
 *	const char *names;
 *	const char *delim;
 *	int	flags;
 *
 *	const char *str_name_mask_opt(buf, context, table, mask, flags)
 *	VSTRING	*buf;
 *	const char *context;
 *	const NAME_MASK *table;
 *	int	mask;
 *	int	flags;
 * DESCRIPTION
 *	name_mask() takes a null-terminated \fItable\fR with (name, mask)
 *	values and computes the bit-wise OR of the masks that correspond
 *	to the names listed in the \fInames\fR argument, separated by
 *	comma and/or whitespace characters.
 *
 *	str_name_mask() translates a mask into its equivalent names.
 *	The result is written to a static buffer that is overwritten
 *	upon each call.
 *
 *	name_mask_opt() and str_name_mask_opt() are extended versions
 *	with additional fine control. name_mask_delim_opt() supports
 *	non-default delimiter characters.
 *
 *	Arguments:
 * .IP buf
 *	Null pointer or pointer to buffer storage.
 * .IP context
 *	What kind of names and
 *	masks are being manipulated, in order to make error messages
 *	more understandable. Typically, this would be the name of a
 *	user-configurable parameter.
 * .IP table
 *	Table with (name, bit mask) pairs.
 * .IP names
 *	A list of names that is to be converted into a bit mask.
 * .IP mask
 *	A bit mask.
 * .IP flags
 *	Bit-wise OR of zero or more of the following:
 * .IP delim
 *	Delimiter characters to use instead of whitespace and commas.
 * .RS
 * .IP NAME_MASK_FATAL
 *	Require that all names listed in \fIname\fR exist in \fItable\fR,
 *	and that all bits listed in \fImask\fR exist in \fItable\fR.
 *	Terminate with a fatal run-time error if this condition is not met.
 *	This feature is enabled by default when calling name_mask()
 *	or str_name_mask().
 * .IP NAME_MASK_RETURN
 *	Require that all names listed in \fIname\fR exist in \fItable\fR,
 *	and that all bits listed in \fImask\fR exist in \fItable\fR.
 *	Log a warning, and return 0 (name_mask()) or a null pointer
 *	(str_name_mask()) if this condition is not met.
 * .IP NAME_MASK_NUMBER
 *	Require that all bits listed in \fImask\fR exist in \fItable\fR.
 *	For unrecognized bits, print the numerical hexadecimal form.
 * .IP NAME_MASK_ANY_CASE
 *	Enable case-insensitive matching.
 *	This feature is not enabled by default when calling name_mask();
 *	it has no effect with str_name_mask().
 * .IP NAME_MASK_COMMA
 *	Use comma instead of space when converting a mask to string.
 * .IP NAME_MASK_PIPE
 *	Use "|" instead of space when converting a mask to string.
 * .RE
 *	The value NAME_MASK_NONE explicitly requests no features,
 *	and NAME_MASK_DEFAULT enables the default options.
 * DIAGNOSTICS
 *	Fatal: the \fInames\fR argument specifies a name not found in
 *	\fItable\fR, or the \fImask\fR specifies a bit not found in
 *	\fItable\fR.
 * LICENSE
 * .ad
 * .fi
 *	The Secure Mailer license must be distributed with this software.
 * AUTHOR(S)
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<comment type="block">/* System library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"name_mask.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>acl_vstring_str(x)</cpp:value></cpp:define>

<comment type="block">/* name_mask_delim_opt - compute mask corresponding to list of names */</comment>

<function><type><name>int</name></type>     <name>name_mask_delim_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NAME_MASK</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"name_mask"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_names</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>saved_names</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NAME_MASK</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>lookup</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_ANY_CASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>lookup</name> <operator>=</operator> <name>strcasecmp</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>lookup</name> <operator>=</operator> <name>strcmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Break up the names string, and look up each component in the table. If
	 * the name is found, merge its mask with the result.
	 */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name>table</name></expr>;</init> <comment type="block">/* void */</comment> <condition>;</condition> <incr><expr><name>np</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"unknown %s value \"%s\" in \"%s\""</literal></expr></argument>,
						<argument><expr><name>context</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_RETURN</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"unknown %s value \"%s\" in \"%s\""</literal></expr></argument>,
						<argument><expr><name>context</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>lookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>result</name> <operator>|=</operator> <name><name>np</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>saved_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_vstring</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* str_name_mask_opt - mask to string */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_name_mask_opt</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>NAME_MASK</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"name_mask"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NAME_MASK</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>my_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>delim</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_COMMA</name></expr> ?</condition><then> <expr><literal type="char">','</literal></expr> </then><else>:
			<expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_PIPE</name></expr> ?</condition><then> <expr><literal type="char">'|'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>my_buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>my_buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>my_buf</name></expr></argument>, <argument><expr><name>free_vstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>my_buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name>table</name></expr>;</init> <condition><expr><name>mask</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>np</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_FATAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown %s bit in mask: 0x%x"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_RETURN</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: unknown %s bit in mask: 0x%x"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_NUMBER</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"0x%x%c"</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>np</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>np</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_truncate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

 <comment type="block">/*
  * Stand-alone test program.
  */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>NAME_MASK</name></type> <name><name>table</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"zero"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>,
		<expr><literal type="string">"one"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,
		<expr><literal type="string">"two"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>,
		<expr><literal type="string">"three"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>--</operator><name>argc</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>argv</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>name_mask</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s -&gt; 0x%x -&gt; %s\n"</literal></expr></argument>,
			<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>str_name_mask</name><argument_list>(<argument><expr><literal type="string">"mask_test"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
