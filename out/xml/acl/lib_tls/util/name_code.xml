<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_tls/util/name_code.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"name_code.h"</cpp:file></cpp:include>

<comment type="block">/* name_code - look up code by name */</comment>

<function><type><name>int</name></type>     <name>name_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NAME_CODE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NAME_CODE</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
	<function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>lookup</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_CODE_FLAG_STRICT_CASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>lookup</name> <operator>=</operator> <name>strcmp</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>lookup</name> <operator>=</operator> <name>strcasecmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name>table</name></expr>;</init> <condition><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>np</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>lookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>code</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* str_name_code - look up name by code */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_name_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NAME_CODE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NAME_CODE</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name>table</name></expr>;</init> <condition><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>np</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>np</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><operator>(</operator><name><name>np</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
