<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_tls/attr/auto_clnt.c"><comment type="block">/*++
 * NAME
 *	auto_clnt 3
 * SUMMARY
 *	client endpoint maintenance
 * SYNOPSIS
 *	#include &lt;auto_clnt.h&gt;
 *
 *	AUTO_CLNT *auto_clnt_create(service, timeout, max_idle, max_ttl)
 *	const char *service;
 *	int	timeout;
 *	int	max_idle;
 *	int	max_ttl;
 *
 *	ACL_VSTREAM	*auto_clnt_access(auto_clnt)
 *	AUTO_CLNT *auto_clnt;
 *
 *	void	auto_clnt_recover(auto_clnt)
 *	AUTO_CLNT *auto_clnt;
 *
 *	const char *auto_clnt_name(auto_clnt)
 *	AUTO_CLNT *auto_clnt;
 *
 *	void	auto_clnt_free(auto_clnt)
 *	AUTO_CLNT *auto_clnt;
 * DESCRIPTION
 *	This module maintains IPC client endpoints that automatically
 *	disconnect after a being idle for a configurable amount of time,
 *	that disconnect after a configurable time to live,
 *	and that transparently handle most server-initiated disconnects.
 *
 *	This module tries each operation only a limited number of
 *	times and then reports an error.  This is unlike the
 *	clnt_stream(3) module which will retry forever, so that
 *	the application never experiences an error.
 *
 *	auto_clnt_create() instantiates a client endpoint.
 *
 *	auto_clnt_access() returns an open stream to the service specified
 *	to auto_clnt_create(). The stream instance may change between calls.
 *	The result is a null pointer in case of failure.
 *
 *	auto_clnt_recover() recovers from a server-initiated disconnect
 *	that happened in the middle of an I/O operation.
 *
 *	auto_clnt_name() returns the name of the specified client endpoint.
 *
 *	auto_clnt_free() destroys of the specified client endpoint.
 *
 *	Arguments:
 * .IP service
 *	The service argument specifies "transport:servername" where
 *	transport is currently limited to one of the following:
 * .RS
 * .IP inet
 *	servername has the form "inet:host:port".
 * .IP local
 *	servername has the form "local:private/servicename" or
 *	"local:public/servicename". This is the preferred way to
 *	specify Postfix daemons that are configured as "unix" in
 *	master.cf.
 * .IP unix
 *	servername has the form "unix:private/servicename" or
 *	"unix:public/servicename". This does not work on Solaris,
 *	where Postfix uses STREAMS instead of UNIX-domain sockets.
 * .RE
 * .IP timeout
 *	The time limit for sending, receiving, or for connecting
 *	to a server. Specify a value &lt;=0 to disable the time limit.
 * .IP max_idle
 *	Idle time after which the client disconnects. Specify 0 to
 *	disable the limit.
 * .IP max_ttl
 *	Upper bound on the time that a connection is allowed to persist.
 *	Specify 0 to disable the limit.
 * .IP open_action
 *	Application call-back routine that opens a stream or returns a
 *	null pointer upon failure. In case of success, the call-back routine
 *	is expected to set the stream pathname to the server endpoint name.
 * .IP context
 *	Application context that is passed to the open_action routine.
 * DIAGNOSTICS
 *	Warnings: communication failure. Fatal error: out of memory.
 * LICENSE
 * .ad
 * .fi
 *	The Secure Mailer license must be distributed with this software.
 * AUTHOR(S)
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"auto_clnt.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

 <comment type="block">/*
  * AUTO_CLNT is an opaque structure. None of the access methods can easily
  * be implemented as a macro, and access is not performance critical anyway.
  */</comment>
<struct>struct <name>AUTO_CLNT</name> <block>{
    <decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>			<comment type="block">/* event handle */</comment>
    <decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>vstream</name></decl>;</decl_stmt>		<comment type="block">/* buffered I/O */</comment>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>endpoint</name></decl>;</decl_stmt>			<comment type="block">/* host:port or pathname */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>timeout</name></decl>;</decl_stmt>			<comment type="block">/* I/O time limit */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>max_idle</name></decl>;</decl_stmt>			<comment type="block">/* time before client disconnect */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>max_ttl</name></decl>;</decl_stmt>			<comment type="block">/* time before client disconnect */</comment>
    <function_decl><type><name>ACL_SOCKET</name></type>     (<modifier>*</modifier><name>connect</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>	<comment type="block">/* unix, local, inet */</comment>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>auto_clnt_close</name><parameter_list>(<parameter><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* auto_clnt_event - server-initiated disconnect or client-side max_idle */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>auto_clnt_event</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name> <init>= <expr><operator>(</operator><name>AUTO_CLNT</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Sanity check. This routine causes the stream to be closed, so it
     * cannot be called when the stream is already closed.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"auto_clnt_event: stream is closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>auto_clnt_close</name><argument_list>(<argument><expr><name>auto_clnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>auto_clnt_event_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>auto_clnt_event</name><argument_list>(<argument><expr><name>event_type</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* auto_clnt_ttl_event - client-side expiration */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>auto_clnt_ttl_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block">/*
     * XXX This function is needed only because event_request_timer() cannot
     * distinguish between requests that specify the same call-back routine
     * and call-back context. The fix is obvious: specify a request ID along
     * with the call-back routine, but there is too much code that would have
     * to be changed.
     * 
     * XXX Should we be concerned that an overly agressive optimizer will
     * eliminate this function and replace calls to auto_clnt_ttl_event() by
     * direct calls to auto_clnt_event()? It should not, because there exists
     * code that takes the address of both functions.
     */</comment>
    <expr_stmt><expr><call><name>auto_clnt_event</name><argument_list>(<argument><expr><name>event_type</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* auto_clnt_open - connect to service */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>auto_clnt_open</name><parameter_list>(<parameter><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"auto_clnt_open"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_SOCKET</name></type>     <name>fd</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Sanity check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"auto_clnt_open: stream is open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Schedule a read event so that we can clean up when the remote side
     * disconnects, and schedule a timer event so that we can cleanup an idle
     * connection. Note that both events are handled by the same routine.
     * 
     * Finally, schedule an event to force disconnection even when the
     * connection is not idle. This is to prevent one client from clinging on
     * to a server forever.
     */</comment>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name><name>auto_clnt</name><operator>-&gt;</operator><name>connect</name></name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: connect to %s: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: connected to %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>,
			<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_ctl</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>,
			<argument><expr><name>ACL_VSTREAM_CTL_PATH</name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>,
			<comment type="block">/* ACL_VSTREAM_CTL_TIMEOUT, auto_clnt-&gt;timeout, */</comment>
			<argument><expr><name>ACL_VSTREAM_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>auto_clnt_event_read</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>auto_clnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>max_idle</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>auto_clnt_event</name></expr></argument>,
		    <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>auto_clnt</name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>max_idle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>max_ttl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>auto_clnt_ttl_event</name></expr></argument>,
		    <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>auto_clnt</name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>max_ttl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* auto_clnt_close - disconnect from service */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>auto_clnt_close</name><parameter_list>(<parameter><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"auto_clnt_close"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Sanity check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: stream is closed"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Be sure to disable read and timer events.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: disconnect %s stream"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>acl_event_disable_readwrite</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_event_cancel_timer</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>auto_clnt_event</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>auto_clnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_event_cancel_timer</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>auto_clnt_ttl_event</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>auto_clnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_vstream_fclose</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* auto_clnt_recover - recover from server-initiated disconnect */</comment>

<function><type><name>void</name></type>    <name>auto_clnt_recover</name><parameter_list>(<parameter><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * Clean up. Don't re-connect until the caller needs it.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>auto_clnt_close</name><argument_list>(<argument><expr><name>auto_clnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* auto_clnt_access - access a client stream */</comment>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>auto_clnt_access</name><parameter_list>(<parameter><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * Open a stream or restart the idle timer.
     * 
     * Important! Do not restart the TTL timer!
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>auto_clnt_open</name><argument_list>(<argument><expr><name>auto_clnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>max_idle</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>auto_clnt_event</name></expr></argument>,
		<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>auto_clnt</name></expr></argument>, <argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>max_idle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* auto_clnt_create - create client stream object */</comment>

<function><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt_create</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_idle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_ttl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"auto_clnt_create"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>transport</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>endpoint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>eventp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): evenpt null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Don't open the stream until the caller needs it.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endpoint</name> <operator>=</operator> <call><name>acl_split_at</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
	<operator>||</operator> <operator>*</operator><name>endpoint</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>transport</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: need service transport:endpoint instead of \"%s\""</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: transport=%s endpoint=%s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>auto_clnt</name> <operator>=</operator> <operator>(</operator><name>AUTO_CLNT</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>auto_clnt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>eventp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>max_idle</name></name> <operator>=</operator> <name>max_idle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>max_ttl</name></name> <operator>=</operator> <name>max_ttl</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">"inet"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>connect</name></name> <operator>=</operator> <name>acl_inet_connect</name></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>connect</name></name> <operator>=</operator> <name>LOCAL_CONNECT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>connect</name></name> <operator>=</operator> <name>acl_unix_connect</name></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: invalid transport name: %s in service: %s"</literal></expr></argument>,
		  <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>auto_clnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* auto_clnt_name - return client stream name */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auto_clnt_name</name><parameter_list>(<parameter><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>auto_clnt</name><operator>-&gt;</operator><name>endpoint</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* auto_clnt_free - destroy client stream instance */</comment>

<function><type><name>void</name></type>    <name>auto_clnt_free</name><parameter_list>(<parameter><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>vstream</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>auto_clnt_close</name><argument_list>(<argument><expr><name>auto_clnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>auto_clnt</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>auto_clnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
