<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_tls/attr/attr_scan0.c"><comment type="block">/*++
 * NAME
 *	attr_scan0 3
 * SUMMARY
 *	recover attributes from byte stream
 * SYNOPSIS
 *	#include &lt;attr.h&gt;
 *
 *	int	attr_scan0(fp, flags, type, name, ..., ATTR_TYPE_END)
 *	ACL_VSTREAM	fp;
 *	int	flags;
 *	int	type;
 *	char	*name;
 *
 *	int	attr_vscan0(fp, flags, ap)
 *	ACL_VSTREAM	fp;
 *	int	flags;
 *	va_list	ap;
 * DESCRIPTION
 *	attr_scan0() takes zero or more (name, value) request attributes
 *	and recovers the attribute values from the byte stream that was
 *	possibly generated by attr_print0().
 *
 *	attr_vscan0() provides an alternative interface that is convenient
 *	for calling from within a variadic function.
 *
 *	The input stream is formatted as follows, where (item)* stands
 *	for zero or more instances of the specified item, and where
 *	(item1 | item2) stands for choice:
 *
 * .in +5
 *	attr-list :== simple-attr* null
 * .br
 *	simple-attr :== attr-name null attr-value null
 * .br
 *	attr-name :== any string not containing null
 * .br
 *	attr-value :== any string not containing null
 * .br
 *	null :== the ASCII null character
 * .in
 *
 *	All attribute names and attribute values are sent as null terminated
 *	strings. Each string must be no longer than 4*var_line_limit
 *	characters including the terminator.
 *	These formatting rules favor implementations in C.
 *
 *      Normally, attributes must be received in the sequence as specified with
 *	the attr_scan0() argument list.  The input stream may contain additional
 *	attributes at any point in the input stream, including additional
 *	instances of requested attributes.
 *
 *	Additional input attributes or input attribute instances are silently
 *	skipped over, unless the ATTR_FLAG_EXTRA processing flag is specified
 *	(see below). This allows for some flexibility in the evolution of
 *	protocols while still providing the option of being strict where
 *	this is desirable.
 *
 *	Arguments:
 * .IP fp
 *	Stream to recover the input attributes from.
 * .IP flags
 *	The bit-wise OR of zero or more of the following.
 * .RS
 * .IP ATTR_FLAG_MISSING
 *	Log a warning when the input attribute list terminates before all
 *	requested attributes are recovered. It is always an error when the
 *	input stream ends without the newline attribute list terminator.
 * .IP ATTR_FLAG_EXTRA
 *	Log a warning and stop attribute recovery when the input stream
 *	contains an attribute that was not requested. This includes the
 *	case of additional instances of a requested attribute.
 * .IP ATTR_FLAG_MORE
 *	After recovering the requested attributes, leave the input stream
 *	in a state that is usable for more attr_scan0() operations from the
 *	same input attribute list.
 *	By default, attr_scan0() skips forward past the input attribute list
 *	terminator.
 * .IP ATTR_FLAG_STRICT
 *	For convenience, this value combines both ATTR_FLAG_MISSING and
 *	ATTR_FLAG_EXTRA.
 * .IP ATTR_FLAG_NONE
 *	For convenience, this value requests none of the above.
 * .RE
 * .IP type
 *	The type argument determines the arguments that follow.
 * .RS
 * .IP "ATTR_TYPE_INT (char *, int *)"
 *	This argument is followed by an attribute name and an integer pointer.
 * .IP "ATTR_TYPE_LONG (char *, long *)"
 *	This argument is followed by an attribute name and a long pointer.
 * .IP "ATTR_TYPE_STR (char *, ACL_VSTRING *)"
 *	This argument is followed by an attribute name and a ACL_VSTRING pointer.
 * .IP "ATTR_TYPE_DATA (char *, ACL_VSTRING *)"
 *	This argument is followed by an attribute name and a ACL_VSTRING pointer.
 * .IP "ATTR_TYPE_FUNC (ATTR_SCAN_SLAVE_FN, void *)"
 *	This argument is followed by a function pointer and a generic data
 *	pointer. The caller-specified function returns &lt; 0 in case of
 *	error.
 * .IP "ATTR_TYPE_HASH (ACL_HTABLE *)"
 * .IP "ATTR_TYPE_NAMEVAL (NVTABLE *)"
 *	All further input attributes are processed as string attributes.
 *	No specific attribute sequence is enforced.
 *	All attributes up to the attribute list terminator are read,
 *	but only the first instance of each attribute is stored.
 *	There can be no more than 1024 attributes in a hash table.
 * .sp
 *	The attribute string values are stored in the hash table under
 *	keys equal to the attribute name (obtained from the input stream).
 *	Values from the input stream are added to the hash table. Existing
 *	hash table entries are not replaced.
 * .sp
 *	N.B. This construct must be followed by an ATTR_TYPE_END argument.
 * .IP ATTR_TYPE_END
 *	This argument terminates the requested attribute list.
 * .RE
 * BUGS
 *	ATTR_TYPE_HASH (ATTR_TYPE_NAMEVAL) accepts attributes with arbitrary
 *	names from possibly untrusted sources.
 *	This is unsafe, unless the resulting table is queried only with
 *	known to be good attribute names.
 * DIAGNOSTICS
 *	attr_scan0() and attr_vscan0() return -1 when malformed input is
 *	detected (string too long, incomplete line, missing end marker).
 *	Otherwise, the result value is the number of attributes that were
 *	successfully recovered from the input stream (a hash table counts
 *	as the number of entries stored into the table).
 *
 *	Panic: interface violation. All system call errors are fatal.
 * SEE ALSO
 *	attr_print0(3) send attributes over byte stream.
 * LICENSE
 * .ad
 * .fi
 *	The Secure Mailer license must be distributed with this software.
 * AUTHOR(S)
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
*--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>

<comment type="block">/* Application specific. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>acl_vstring_str(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>ACL_VSTRING_LEN(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_vstring</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* attr_scan0_string - pull a string from the input stream */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>attr_scan0_string</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>plain_buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"attr_scan0_string"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>acl_vstring_gets_null</name><argument_list>(<argument><expr><name>plain_buf</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: %s on %s while reading %s"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>acl_vstream_ftimeout</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"timeout"</literal></expr> </then><else>: <expr><literal type="string">"premature end-of-input"</literal></expr></else></ternary></expr></argument>,
		 <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: unexpected end-of-input from %s while reading %s"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %s: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><call><name>STR</name><argument_list>(<argument><expr><name>plain_buf</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>STR</name><argument_list>(<argument><expr><name>plain_buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"(end)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>ch</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attr_scan0_data - pull a data blob from the input stream */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>attr_scan0_data</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str_buf</name></decl></parameter>,
			           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"attr_scan0_data"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>base64_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>base64_buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>base64_buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>base64_buf</name></expr></argument>, <argument><expr><name>free_vstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_string</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>base64_buf</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>acl_vstring_base64_decode</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>base64_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>base64_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malformed base64 data from %s while reading %s: %.100s"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>base64_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>ch</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attr_scan0_number - pull a number from the input stream */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>attr_scan0_number</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str_buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"attr_scan0_number"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name>junk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_string</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>str_buf</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%u%c"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>junk</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malformed numerical data from %s while reading %s: %.100s"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>ch</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attr_scan0_long_number - pull a number from the input stream */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>attr_scan0_long_number</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str_buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"attr_scan0_long_number"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name>junk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_string</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>str_buf</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%lu%c"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>junk</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malformed numerical data from %s while reading %s: %.100s"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>ch</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attr_vscan0 - receive attribute list from stream */</comment>

<function><type><name>int</name></type>     <name>attr_vscan0</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"attr_scan0"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>name_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>wanted_type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>wanted_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>long_number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>hash_table</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>conversions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ATTR_SCAN_SLAVE_FN</name></type> <name>scan_fn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>scan_arg</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Sanity check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>ATTR_FLAG_ALL</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: bad flags: 0x%x"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * EOF check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>ACL_VSTREAM_GETC</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>acl_vstream_ungetc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Initialize.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>str_buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>str_buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>name_buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>, <argument><expr><name>free_vstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>, <argument><expr><name>free_vstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Iterate over all (type, name, value) triples.
     */</comment>
    <for>for <control>(<init><expr><name>conversions</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <comment type="block">/* void */</comment> <condition>;</condition> <incr><expr><name>conversions</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

	<comment type="block">/*
	 * Determine the next attribute type and attribute name on the
	 * caller's wish list.
	 * 
	 * If we're reading into a hash table, we already know that the
	 * attribute value is string-valued, and we get the attribute name
	 * from the input stream instead. This is secure only when the
	 * resulting table is queried with known to be good attribute names.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>wanted_type</name> <operator>!=</operator> <name>ATTR_TYPE_HASH</name></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>wanted_type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>wanted_type</name> <operator>==</operator> <name>ATTR_TYPE_END</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ATTR_FLAG_MORE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><operator>(</operator><name>conversions</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>wanted_name</name> <operator>=</operator> <literal type="string">"(list terminator)"</literal></expr>;</expr_stmt>
	    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wanted_type</name> <operator>==</operator> <name>ATTR_TYPE_HASH</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>wanted_name</name> <operator>=</operator> <literal type="string">"(any attribute name or list terminator)"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>hash_table</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_HTABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ATTR_TYPE_END</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: ATTR_TYPE_HASH not followed by ATTR_TYPE_END"</literal></expr></argument>,
			      <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wanted_type</name> <operator>!=</operator> <name>ATTR_TYPE_FUNC</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>wanted_name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Locate the next attribute of interest in the input stream.
	 */</comment>
	<while>while <condition>(<expr><name>wanted_type</name> <operator>!=</operator> <name>ATTR_TYPE_FUNC</name></expr>)</condition> <block>{<block_content>

	    <comment type="block">/*
	     * Get the name of the next attribute. Hitting EOF is always bad.
	     * Hitting the end-of-input early is OK if the caller is prepared
	     * to deal with missing inputs.
	     */</comment>
	    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: wanted attribute: %s"</literal></expr></argument>,
			 <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wanted_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_string</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>,
				    <argument><expr><literal type="string">"input attribute name"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>wanted_type</name> <operator>==</operator> <name>ATTR_TYPE_END</name>
		    <operator>||</operator> <name>wanted_type</name> <operator>==</operator> <name>ATTR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><operator>(</operator><name>conversions</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ATTR_FLAG_MISSING</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: missing attribute %s in input from %s"</literal></expr></argument>,
			     <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>wanted_name</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>conversions</name><operator>)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>

	    <comment type="block">/*
	     * See if the caller asks for this attribute.
	     */</comment>
	    <if_stmt><if>if <condition>(<expr><name>wanted_type</name> <operator>==</operator> <name>ATTR_TYPE_HASH</name>
		<operator>||</operator> <operator>(</operator><name>wanted_type</name> <operator>!=</operator> <name>ATTR_TYPE_END</name>
		    <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>wanted_name</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ATTR_FLAG_EXTRA</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: unexpected attribute %s from %s (expecting: %s)"</literal></expr></argument>,
			 <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wanted_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>conversions</name><operator>)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>

	    <comment type="block">/*
	     * Skip over this attribute. The caller does not ask for it.
	     */</comment>
	    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>attr_scan0_string</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>str_buf</name></expr></argument>, <argument><expr><literal type="string">"input attribute value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Do the requested conversion.
	 */</comment>
	<switch>switch <condition>(<expr><name>wanted_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ATTR_TYPE_INT</name></expr>:</case>
	    <expr_stmt><expr><name>number</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>ap</argument>, <argument>unsigned int *</argument>)</argument_list></macro></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_number</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>str_buf</name></expr></argument>, <argument><expr><literal type="string">"input attribute value"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_LONG</name></expr>:</case>
	    <expr_stmt><expr><name>long_number</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>ap</argument>, <argument>unsigned long *</argument>)</argument_list></macro></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_long_number</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>long_number</name></expr></argument>, <argument><expr><name>str_buf</name></expr></argument>, <argument><expr><literal type="string">"input attribute value"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_STR</name></expr>:</case>
	    <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_VSTRING</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_string</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"input attribute value"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_DATA</name></expr>:</case>
	    <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_VSTRING</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_data</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"input attribute value"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_FUNC</name></expr>:</case>
	    <expr_stmt><expr><name>scan_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ATTR_SCAN_SLAVE_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>scan_arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>scan_fn</name><argument_list>(<argument><expr><name>attr_scan0</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ATTR_FLAG_MORE</name></expr></argument>, <argument><expr><name>scan_arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_HASH</name></expr>:</case>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>attr_scan0_string</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>str_buf</name></expr></argument>,
					<argument><expr><literal type="string">"input attribute value"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>acl_htable_locate</name><argument_list>(<argument><expr><name>hash_table</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ATTR_FLAG_EXTRA</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: duplicate attribute %s in input from %s"</literal></expr></argument>,
			     <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <return>return <expr><operator>(</operator><name>conversions</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_htable_used</name><argument_list>(<argument><expr><name>hash_table</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>ATTR_HASH_LIMIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: attribute count exceeds limit %d in input from %s"</literal></expr></argument>,
			 <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>ATTR_HASH_LIMIT</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>conversions</name><operator>)</operator></expr>;</return>
	    </block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>hash_table</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	    <break>break;</break>
	<default>default:</default>
	    <expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: unknown type code: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>wanted_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* attr_scan0 - read attribute list from stream */</comment>

<function><type><name>int</name></type>     <name>attr_scan0</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>attr_vscan0</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

 <comment type="block">/*
  * Proof of concept test program.  Mirror image of the attr_scan0 test
  * program.
  */</comment>

<decl_stmt><decl><type><name>int</name></type>     <name>var_line_limit</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unused_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>used_argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>data_val</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str_val</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_info_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>int_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>    <name>long_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>acl_msg_verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>attr_scan0</name><argument_list>(<argument><expr><name>ACL_VSTREAM_IN</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_STRICT</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>ATTR_NAME_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_val</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_LONG</name></expr></argument>, <argument><expr><name>ATTR_NAME_LONG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>long_val</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>ATTR_NAME_STR</name></expr></argument>, <argument><expr><name>str_val</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_DATA</name></expr></argument>, <argument><expr><name>ATTR_NAME_DATA</name></expr></argument>, <argument><expr><name>data_val</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_HASH</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s %d\n"</literal></expr></argument>, <argument><expr><name>ATTR_NAME_INT</name></expr></argument>, <argument><expr><name>int_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s %ld\n"</literal></expr></argument>, <argument><expr><name>ATTR_NAME_LONG</name></expr></argument>, <argument><expr><name>long_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>ATTR_NAME_STR</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>str_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>ATTR_NAME_DATA</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>str_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ht_info_list</name> <operator>=</operator> <call><name>acl_htable_list</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name>ht_info_list</name></expr>;</init> <condition><expr><operator>*</operator><name>ht</name></expr>;</condition> <incr><expr><name>ht</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"(hash) %s %s\n"</literal></expr></argument>, <argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ht_info_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"return: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>attr_scan0</name><argument_list>(<argument><expr><name>ACL_VSTREAM_IN</name></expr></argument>,
			  <argument><expr><name>ATTR_FLAG_STRICT</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>ATTR_NAME_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_val</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_LONG</name></expr></argument>, <argument><expr><name>ATTR_NAME_LONG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>long_val</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>ATTR_NAME_STR</name></expr></argument>, <argument><expr><name>str_val</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_DATA</name></expr></argument>, <argument><expr><name>ATTR_NAME_DATA</name></expr></argument>, <argument><expr><name>data_val</name></expr></argument>,
			  <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s %d\n"</literal></expr></argument>, <argument><expr><name>ATTR_NAME_INT</name></expr></argument>, <argument><expr><name>int_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s %ld\n"</literal></expr></argument>, <argument><expr><name>ATTR_NAME_LONG</name></expr></argument>, <argument><expr><name>long_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>ATTR_NAME_STR</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>str_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>ATTR_NAME_DATA</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>data_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ht_info_list</name> <operator>=</operator> <call><name>acl_htable_list</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name>ht_info_list</name></expr>;</init> <condition><expr><operator>*</operator><name>ht</name></expr>;</condition> <incr><expr><name>ht</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"(hash) %s %s\n"</literal></expr></argument>, <argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ht_info_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"return: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: write error: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>data_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>str_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>myfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
