<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_tls/attr/attr_clnt.c"><comment type="block">/*++
 * NAME
 *	attr_clnt 3
 * SUMMARY
 *	attribute query-reply client
 * SYNOPSIS
 *	#include &lt;attr_clnt.h&gt;
 *
 *	typedef int (*ATTR_CLNT_PRINT_FN) (VSTREAM *, int, va_list);
 *	typedef int (*ATTR_CLNT_SCAN_FN) (VSTREAM *, int, va_list);
 *
 *	ATTR_CLNT *attr_clnt_create(server, timeout, max_idle, max_ttl)
 *	const char *server;
 *	int	timeout;
 *	int	max_idle;
 *	int	max_ttl;
 *
 *	int	attr_clnt_request(client,
 *			send_flags, send_type, send_name, ..., ATTR_TYPE_END,
 *			recv_flags, recv_type, recv_name, ..., ATTR_TYPE_END)
 *	ATTR_CLNT *client;
 *	int	send_flags;
 *	int	send_type;
 *	const char *send_name;
 *	int	recv_flags;
 *	int	recv_type;
 *	const char *recv_name;
 *
 *	void	attr_clnt_free(client)
 *	ATTR_CLNT *client;
 *
 *	void	attr_clnt_control(client, name, value, ... ATTR_CLNT_CTL_END)
 *	ATTR_CLNT *client;
 *	int	name;
 * DESCRIPTION
 *	This module implements a client for a simple attribute-based
 *	protocol. The default protocol is described in attr_scan_plain(3).
 *
 *	attr_clnt_create() creates a client handle. See auto_clnt(3) for
 *	a description of the arguments.
 *
 *	attr_clnt_request() sends the specified request attributes and
 *	receives a reply. The reply argument specifies a name-value table.
 *	The other arguments are as described in attr_print_plain(3). The
 *	result is the number of attributes received or -1 in case of trouble.
 *
 *	attr_clnt_free() destroys a client handle and closes its connection.
 *
 *	attr_clnt_control() allows the user to fine tune the behavior of
 *	the specified client. The arguments are a list of (name, value)
 *	terminated with ATTR_CLNT_CTL_END.
 *	The following lists the names and the types of the corresponding
 *	value arguments.
 * .IP "ATTR_CLNT_CTL_PROTO(ATTR_CLNT_PRINT_FN, ATTR_CLNT_SCAN_FN)"
 *	Specifies alternatives for the attr_plain_print() and
 *	attr_plain_scan() functions.
 * DIAGNOSTICS
 *	Warnings: communication failure.
 * SEE ALSO
 *	auto_clnt(3), client endpoint management
 *	attr_scan_plain(3), attribute protocol
 *	attr_print_plain(3), attribute protocol
 * LICENSE
 * .ad
 * .fi
 *	The Secure Mailer license must be distributed with this software.
 * AUTHOR(S)
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"auto_clnt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr_clnt.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<struct>struct <name>ATTR_CLNT</name> <block>{
    <decl_stmt><decl><type><name>AUTO_CLNT</name> <modifier>*</modifier></type><name>auto_clnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ATTR_CLNT_PRINT_FN</name></type> <name>print</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ATTR_CLNT_SCAN_FN</name></type> <name>scan</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* attr_clnt_free - destroy attribute client */</comment>

<function><type><name>void</name></type>    <name>attr_clnt_free</name><parameter_list>(<parameter><decl><type><name>ATTR_CLNT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>auto_clnt_free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>auto_clnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* attr_clnt_create - create attribute client */</comment>

<function><type><name>ATTR_CLNT</name> <modifier>*</modifier></type><name>attr_clnt_create</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>eventp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_idle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_ttl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ATTR_CLNT</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>client</name> <operator>=</operator> <operator>(</operator><name>ATTR_CLNT</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>client</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>auto_clnt</name></name> <operator>=</operator> <call><name>auto_clnt_create</name><argument_list>(<argument><expr><name>eventp</name></expr></argument>, <argument><expr><name>service</name></expr></argument>,
	    <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>max_idle</name></expr></argument>, <argument><expr><name>max_ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>attr_vscan_plain</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <name>attr_vprint_plain</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>client</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attr_clnt_request - send query, receive reply */</comment>

<function><type><name>int</name></type>     <name>attr_clnt_request</name><parameter_list>(<parameter><decl><type><name>ATTR_CLNT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>send_flags</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"attr_clnt_request"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>recv_flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

    <comment type="block">/*
     * XXX If the stream is readable before we send anything, then assume the
     * remote end disconnected.
     * 
     * XXX For some reason we can't simply call the scan routine after the print
     * routine, that messes up the argument list.
     */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_ARG</name><parameter_list>(<parameter><type><name>ap</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    (void) va_arg(ap, char *); \
    (void) va_arg(ap, type); \
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_ARG2</name><parameter_list>(<parameter><type><name>ap</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    SKIP_ARG(ap, t1); \
    (void) va_arg(ap, t2); \
}</cpp:value></cpp:define>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stream</name> <operator>=</operator> <call><name>auto_clnt_access</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>auto_clnt</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <call><name>acl_readable</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>send_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><call><name><name>client</name><operator>-&gt;</operator><name>print</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>send_flags</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name>
		    <operator>||</operator> <call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>send_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ATTR_TYPE_END</name></expr>)</condition> <block>{<block_content>
		    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
		    <case>case <expr><name>ATTR_TYPE_STR</name></expr>:</case>
			<expr_stmt><expr><call><name>SKIP_ARG</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		    <case>case <expr><name>ATTR_TYPE_DATA</name></expr>:</case>
			<expr_stmt><expr><call><name>SKIP_ARG2</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		    <case>case <expr><name>ATTR_TYPE_INT</name></expr>:</case>
			<expr_stmt><expr><call><name>SKIP_ARG</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		    <case>case <expr><name>ATTR_TYPE_LONG</name></expr>:</case>
			<expr_stmt><expr><call><name>SKIP_ARG</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		    <case>case <expr><name>ATTR_TYPE_HASH</name></expr>:</case>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_HTABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		    <default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: unexpected attribute type %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></switch>
		</block_content>}</block></while>
		<expr_stmt><expr><name>recv_flags</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>client</name><operator>-&gt;</operator><name>scan</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>recv_flags</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>||</operator> <name>acl_msg_verbose</name>
		<operator>||</operator> <operator>(</operator><name>errno</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EPIPE</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ACL_ECONNRESET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: problem talking to server %s: %s"</literal></expr></argument>,
		    <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>auto_clnt_name</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>auto_clnt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block">/* XXX make configurable */</comment>
	<expr_stmt><expr><call><name>auto_clnt_recover</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>auto_clnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* attr_clnt_control - fine control */</comment>

<function><type><name>void</name></type>    <name>attr_clnt_control</name><parameter_list>(<parameter><decl><type><name>ATTR_CLNT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"attr_clnt_control"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ATTR_CLNT_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
	<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
	    <case>case <expr><name>ATTR_CLNT_CTL_PROTO</name></expr>:</case>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>print</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ATTR_CLNT_PRINT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ATTR_CLNT_SCAN_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	    <default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: bad name %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
