<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_tls/attr/attr_print64.c"><comment type="block">/*++
 * NAME
 *	attr_print64 3
 * SUMMARY
 *	send attributes over byte stream
 * SYNOPSIS
 *	#include &lt;attr.h&gt;
 *
 *	int	attr_print64(fp, flags, type, name, ..., ATTR_TYPE_END)
 *	ACL_VSTREAM	fp;
 *	int	flags;
 *	int	type;
 *	char	*name;
 *
 *	int	attr_vprint64(fp, flags, ap)
 *	ACL_VSTREAM	fp;
 *	int	flags;
 *	va_list	ap;
 * DESCRIPTION
 *	attr_print64() takes zero or more (name, value) simple attributes
 *	and converts its input to a byte stream that can be recovered with
 *	attr_scan64(). The stream is not flushed.
 *
 *	attr_vprint64() provides an alternate interface that is convenient
 *	for calling from within variadic functions.
 *
 *	Attributes are sent in the requested order as specified with the
 *	attr_print64() argument list. This routine satisfies the formatting
 *	rules as outlined in attr_scan64(3).
 *
 *	Arguments:
 * .IP fp
 *	Stream to write the result to.
 * .IP flags
 *	The bit-wise OR of zero or more of the following.
 * .RS
 * .IP ATTR_FLAG_MORE
 *	After sending the requested attributes, leave the output stream in
 *	a state that is usable for more attribute sending operations on
 *	the same output attribute list.
 *	By default, attr_print64() automatically appends an attribute list
 *	terminator when it has sent the last requested attribute.
 * .RE
 * .IP type
 *	The type determines the arguments that follow.
 * .RS
 * .IP "ATTR_TYPE_INT (char *, int)"
 *	This argument is followed by an attribute name and an integer.
 * .IP "ATTR_TYPE_LONG (char *, long)"
 *	This argument is followed by an attribute name and a long integer.
 * .IP "ATTR_TYPE_STR (char *, char *)"
 *	This argument is followed by an attribute name and a null-terminated
 *	string.
 * .IP "ATTR_TYPE_DATA (char *, ssize_t, char *)"
 *	This argument is followed by an attribute name, an attribute value
 *	length, and an attribute value pointer.
 * .IP "ATTR_TYPE_FUNC (ATTR_PRINT_SLAVE_FN, void *)"
 *	This argument is followed by a function pointer and generic data
 *	pointer. The caller-specified function returns whatever the
 *	specified attribute printing function returns.
 * .IP "ATTR_TYPE_HASH (HTABLE *)"
 * .IP "ATTR_TYPE_NAMEVAL (NVTABLE *)"
 *	The content of the table is sent as a sequence of string-valued
 *	attributes with names equal to the table lookup keys.
 * .IP ATTR_TYPE_END
 *	This terminates the attribute list.
 * .RE
 * DIAGNOSTICS
 *	The result value is 0 in case of success, ACL_VSTREAM_EOF in case
 *	of trouble.
 *
 *	Panic: interface violation. All system call errors are fatal.
 * SEE ALSO
 *	attr_scan64(3) recover attributes from byte stream
 * LICENSE
 * .ad
 * .fi
 *	The Secure Mailer license must be distributed with this software.
 * AUTHOR(S)
 *	Wietse Venema
 *	IBM T.J. Watson Research
 *	P.O. Box 704
 *	Yorktown Heights, NY 10598, USA
 *--*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>acl_vstring_str(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>ACL_VSTRING_LEN(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_vstring</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* attr_print64_str - encode and send attribute information */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>attr_print64_str</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>base64_buf</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>base64_buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>base64_buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>base64_buf</name></expr></argument>, <argument><expr><name>free_vstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>acl_vstring_base64_encode</name><argument_list>(<argument><expr><name>base64_buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_vstream_buffed_fputs</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>base64_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>attr_print64_num</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>plain</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>plain</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>plain</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>plain</name></expr></argument>, <argument><expr><name>free_vstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>plain</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>attr_print64_long_num</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>long_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>plain</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>plain</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>plain</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>plain</name></expr></argument>, <argument><expr><name>free_vstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>plain</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name>long_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* attr_vprint64 - send attribute list to stream */</comment>

<function><type><name>int</name></type>     <name>attr_vprint64</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"attr_print64"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>attr_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>attr_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>int_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>long_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>str_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_info_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>len_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ATTR_PRINT_SLAVE_FN</name></type> <name>print_fn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>print_arg</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Sanity check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>ATTR_FLAG_ALL</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: bad flags: 0x%x"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Iterate over all (type, name, value) triples, and produce output on
     * the fly.
     */</comment>
    <while>while <condition>(<expr><operator>(</operator><name>attr_type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ATTR_TYPE_END</name></expr>)</condition> <block>{<block_content>
	<switch>switch <condition>(<expr><name>attr_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ATTR_TYPE_INT</name></expr>:</case>
	    <expr_stmt><expr><name>attr_name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>int_val</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>attr_print64_num</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>int_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"send attr %s = %u"</literal></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><name>int_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_LONG</name></expr>:</case>
	    <expr_stmt><expr><name>attr_name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>long_val</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>attr_print64_long_num</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>long_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"send attr %s = %lu"</literal></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><name>long_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_STR</name></expr>:</case>
	    <expr_stmt><expr><name>attr_name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>str_val</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>str_val</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"send attr %s = %s"</literal></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><name>str_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_DATA</name></expr>:</case>
	    <expr_stmt><expr><name>attr_name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>len_val</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ssize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>str_val</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>str_val</name></expr></argument>, <argument><expr><name>len_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"send attr %s = [data %ld bytes]"</literal></expr></argument>,
			 <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_FUNC</name></expr>:</case>
	    <expr_stmt><expr><name>print_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ATTR_PRINT_SLAVE_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>print_arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>print_fn</name><argument_list>(<argument><expr><name>attr_print64</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ATTR_FLAG_MORE</name></expr></argument>, <argument><expr><name>print_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	<case>case <expr><name>ATTR_TYPE_HASH</name></expr>:</case>
	    <expr_stmt><expr><name>ht_info_list</name> <operator>=</operator> <call><name>acl_htable_list</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_HTABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name>ht_info_list</name></expr>;</init> <condition><expr><operator>*</operator><name>ht</name></expr>;</condition> <incr><expr><name>ht</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>attr_print64_str</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"send attr name %s value %s"</literal></expr></argument>,
			     <argument><expr><name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	    <expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ht_info_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	<default>default:</default>
	    <expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: unknown type code: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>attr_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ATTR_FLAG_MORE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ACL_VSTREAM_PUTC</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>     <name>attr_print64</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>attr_vprint64</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

 <comment type="block">/*
  * Proof of concept test program.  Mirror image of the attr_scan64 test
  * program.
  */</comment>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unused_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>acl_msg_verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"foo-name"</literal></expr></argument>, <argument><expr><call><name>mystrdup</name><argument_list>(<argument><expr><literal type="string">"foo-value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"bar-name"</literal></expr></argument>, <argument><expr><call><name>mystrdup</name><argument_list>(<argument><expr><literal type="string">"bar-value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>attr_print64</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>, <argument><expr><name>ATTR_FLAG_NONE</name></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>ATTR_NAME_INT</name></expr></argument>, <argument><expr><literal type="number">4711</literal></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_LONG</name></expr></argument>, <argument><expr><name>ATTR_NAME_LONG</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>ATTR_NAME_STR</name></expr></argument>, <argument><expr><literal type="string">"whoopee"</literal></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_DATA</name></expr></argument>, <argument><expr><name>ATTR_NAME_DATA</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"whoopee"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"whoopee"</literal></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_HASH</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>attr_print64</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>, <argument><expr><name>ATTR_FLAG_NONE</name></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_INT</name></expr></argument>, <argument><expr><name>ATTR_NAME_INT</name></expr></argument>, <argument><expr><literal type="number">4711</literal></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_LONG</name></expr></argument>, <argument><expr><name>ATTR_NAME_LONG</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_STR</name></expr></argument>, <argument><expr><name>ATTR_NAME_STR</name></expr></argument>, <argument><expr><literal type="string">"whoopee"</literal></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_DATA</name></expr></argument>, <argument><expr><name>ATTR_NAME_DATA</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"whoopee"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"whoopee"</literal></expr></argument>,
		 <argument><expr><name>ATTR_TYPE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: write error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>myfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
