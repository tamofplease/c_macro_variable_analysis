<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/samples/getaddrinfo/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>__dns_ip</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__dns_port</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>in</name> <init>=
			<expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>sin_addr</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>in6</name> <init>=
			<expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>in6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"invalid ai_family=%d\r\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;inet_ntop for ipv4 error\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nslookup</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_V4MAPPED</name> <operator>|</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; nslookup: %s\r\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">"80"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; result: getaddrinfo error=%s, name=%s\r\n"</literal></expr></argument>,
			<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>res</name> <operator>=</operator> <name>res0</name></expr>;</init> <condition><expr><name>res</name></expr>;</condition> <incr><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>getip</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; result: host: %s, ai_family: %d, ip: %s\r\n"</literal></expr></argument>,
				<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><operator>--</operator><name>__count</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OVER NOW!\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h [help] -n addrs -a dns_ip -p dns_port\r\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__dns_ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hn:a:p:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'a'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>__dns_ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__dns_ip</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
			<expr_stmt><expr><name>__dns_port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">";, \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__count</name> <operator>=</operator> <name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>tokens</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>addr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator> <operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>nslookup</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">320000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_fiber_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
