<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/samples/test/fiber1/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/lib_fiber.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__max_loop</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__max_fiber</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__stack_size</name> <init>= <expr><literal type="number">64000</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* åç¨å¤çå¥å£å½æ° */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_main</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* ä¸¤ç§æ¹å¼åå¯ä»¥è·å¾å½åçåç¨å· */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>acl_fiber_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__max_loop</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ä¸»å¨è®©åº CPU ç»å¶å®åç¨ */</comment>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fiber-%d\r\n"</literal></expr></argument>, <argument><expr><call><name>acl_fiber_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<comment type="block">/* åå»ºåç¨ */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__max_fiber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_main</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---- begin schedule fibers now ----\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* å¾ªç¯è°åº¦ææåç¨ï¼ç´è³ææåç¨éåº */</comment>
	<expr_stmt><expr><call><name>acl_fiber_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---- all fibers exit ----\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
