<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/samples/file_copy/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"io.h"</cpp:file></cpp:include>

<struct>struct <name>IO_CTX</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>   <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>THREAD</name> <block>{
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>  <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nfibers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>action</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>event_type</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>FIBER</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>THREAD</name></name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>  <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>!strcasecmp((x), (y))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>  <name>fiber_main</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fb</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>FIBER</name></name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><operator>(</operator>struct <name>FIBER</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl> ;</decl_stmt>

	<comment type="line">// For multiple threads with multiple coroutines, pread_pwrite and</comment>
	<comment type="line">// splice is safety, and sendfile can only be used to copy file</comment>
	<comment type="line">// in one fiber of one single thread!</comment>
	<comment type="line">// When copying large file, the splice_copy will be more efficietly</comment>
	<comment type="line">// than pread_pwrite, because splice_copy won't copy data between</comment>
	<comment type="line">// kernel and userspace, and pread_pwrite will copy data from kernel</comment>
	<comment type="line">// to userspace and from userspace to kernel.</comment>

	<if_stmt><if>if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>action</name></name></expr></argument>, <argument><expr><literal type="string">"pread_pwrite"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pread_pwrite</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>to</name></name></expr></argument>,
				<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>action</name></name></expr></argument>, <argument><expr><literal type="string">"splice"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"create pipe error %s\r\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>splice_copy</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>from</name></name></expr></argument>,
				<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>to</name></name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>action</name></name></expr></argument>, <argument><expr><literal type="string">"sendfile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sendfile_copy</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>to</name></name></expr></argument>,
				<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unkown action=%s\r\n"</literal></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>thread</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>fiber</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Copy error %s, ret=%zd, len=%zd\r\n"</literal></expr></argument>,
			<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>__debug</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Copy ok ret=%zd, len=%zd, off=%ld\r\n"</literal></expr></argument>,
			<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>thread_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>THREAD</name></name> <modifier>*</modifier></type><name>thr</name> <init>= <expr><operator>(</operator>struct <name>THREAD</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>FIBER</name></name>  <modifier>*</modifier></type><name>fibers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>step</name></decl>, <decl><type ref="prev"/><name>mod</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>thr</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>len</name></name> <operator>/</operator> <name><name>thr</name><operator>-&gt;</operator><name>nfibers</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mod</name>  <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>len</name></name> <operator>%</operator> <name><name>thr</name><operator>-&gt;</operator><name>nfibers</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>nfibers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>step</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mod</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>thr</name><operator>-&gt;</operator><name>nfibers</name></name></expr> </then><else>: <expr><operator>(</operator><name><name>thr</name><operator>-&gt;</operator><name>nfibers</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>fibers</name> <operator>=</operator> <operator>(</operator>struct <name>FIBER</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>FIBER</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>thr</name><operator>-&gt;</operator><name>nfibers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name> <operator>=</operator> <name>thr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>step</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_main</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">320000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name> <operator>=</operator> <name>thr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name>step</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_main</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">320000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fiber_schedule_with</name><argument_list>(<argument><expr><name><name>thr</name><operator>-&gt;</operator><name>event_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fibers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_filesize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"stat %s error %s\r\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>statbuf</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frompath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>topath</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfibers</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>THREAD</name></name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fromfd</name></decl>, <decl><type ref="prev"/><name>tofd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>mod</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>get_filesize</name><argument_list>(<argument><expr><name>frompath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid filesize=%zd\r\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>step</name> <operator>=</operator> <name>size</name> <operator>/</operator> <name>nthreads</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mod</name>  <operator>=</operator> <name>size</name> <operator>%</operator> <name>nthreads</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>nthreads</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>step</name> <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mod</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fromfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>frompath</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fromfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"open %s error %s\r\n"</literal></expr></argument>, <argument><expr><name>frompath</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//tofd = open(topath, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL, 0600);</comment>
	<expr_stmt><expr><name>tofd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>topath</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tofd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"open %s error %s\r\n"</literal></expr></argument>, <argument><expr><name>topath</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fromfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>nthreads</name></expr> </then><else>: <expr><operator>(</operator><name>nthreads</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>threads</name> <operator>=</operator> <operator>(</operator>struct <name>THREAD</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>THREAD</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>fromfd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name>   <operator>=</operator> <name>tofd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name>  <operator>=</operator> <name>step</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name>  <operator>=</operator> <name>step</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nfibers</name> <operator>=</operator> <name>nfibers</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>action</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event_type</name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				<argument><expr><name>thread_main</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Create thread error=%s\r\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>fromfd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name>   <operator>=</operator> <name>tofd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name>  <operator>=</operator> <name>step</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name>  <operator>=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nfibers</name> <operator>=</operator> <name>nfibers</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>action</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event_type</name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				<argument><expr><name>thread_main</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Create thread error=%s\r\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fromfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tofd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h [help] -d [if show debug info]\r\n"</literal>
		<literal type="string">"  -e event_type[kernel|select|poll|io_uring]\r\n"</literal>
		<literal type="string">"  -s from_filepath\r\n"</literal>
		<literal type="string">"  -d to_filepath\r\n"</literal>
		<literal type="string">"  -a action[pread_pwrite|sendfile|splice]\r\n"</literal>
		<literal type="string">"  -t nthreads\r\n"</literal>
		<literal type="string">"  -c nfibers\r\n"</literal></expr></argument>
		, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>nthreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nfibers</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>event_type</name> <init>= <expr><name>FIBER_EVENT_KERNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>from</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>to</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>action</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"from.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"to.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pread_pwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hDe:s:d:a:t:c:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><literal type="char">'D'</literal></expr>:</case>
			<expr_stmt><expr><name>__debug</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'e'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"io_uring"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>FIBER_EVENT_IO_URING</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"poll"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>FIBER_EVENT_POLL</name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"select"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>event_type</name> <operator>=</operator> <name>FIBER_EVENT_SELECT</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'a'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><name>nfibers</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>__debug</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_msg_stdout_enable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_stdout_enable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>nfibers</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
