<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/samples/file_copy/pread_pwrite.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"io.h"</cpp:file></cpp:include>

<function><type><name>ssize_t</name></type> <name>pread_pwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>left</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name>  <init>= <expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>left</name></expr> ?</condition><then>
			<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>left</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><call><name>pread</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">//printf("pread over ret=%zd\r\n", ret);</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>pwrite</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"pwrite error=%s, ret=%zd\r\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"thread-%lu, fiber-%d: copy over, size=%zd, off=%ld, left=%zd\r\n"</literal></expr></argument>,
		<argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>acl_fiber_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>size</name> <operator>-</operator> <name>left</name></expr>;</return>
</block_content>}</block></function>
</unit>
