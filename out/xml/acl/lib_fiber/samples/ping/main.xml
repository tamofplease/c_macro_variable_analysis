<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/samples/ping/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/lib_fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__nfibers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__npkt</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__delay</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__timeout</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__benchmark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__show_reply</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__show_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__show_unreach</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_res</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>chat</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÏÔÊ¾ PING µÄ½á¹û×Ü½á */</comment>
		<expr_stmt><expr><call><name>icmp_stat</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;max pkts: %d\r\n"</literal></expr></argument>, <argument><expr><call><name>icmp_chat_seqno</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reply_callback</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT_STATUS</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__show_reply</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><operator>(</operator><name>ICMP_HOST</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt_reply</name> <init>= <expr><call><name>icmp_pkt_peer</name><argument_list>(<argument><expr><name><name>status</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>ICMP_PKT_STATUS</name> <modifier>*</modifier></type><name>status_reply</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>       <name><name>buf</name><index>[<expr><name>ICMP_MAX_PACKET</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>     <name>dlen</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pkt_reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>status_reply</name> <operator>=</operator> <call><name>icmp_pkt_status</name><argument_list>(<argument><expr><name>pkt_reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <call><name>icmp_pkt_payload</name><argument_list>(<argument><expr><name>pkt_reply</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d bytes reply from %s: seq=%d ttl=%d time=%.2f ms"</literal>
			<literal type="string">" code=%d type=%d dlen=%d data=%s\r\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>status_reply</name><operator>-&gt;</operator><name>reply_len</name></name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>dest_ip</name></name></expr></argument>,
			<argument><expr><name><name>status</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>, <argument><expr><name><name>status</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>, <argument><expr><name><name>status</name><operator>-&gt;</operator><name>rtt</name></name></expr></argument>,
			<argument><expr><call><name>icmp_pkt_code</name><argument_list>(<argument><expr><name>pkt_reply</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>icmp_pkt_type</name><argument_list>(<argument><expr><name>pkt_reply</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timeout_callback</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT_STATUS</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__show_timeout</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><operator>(</operator><name>ICMP_HOST</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timeout: from %s, %.2f ms\r\n"</literal></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>dest_ip</name></name></expr></argument>, <argument><expr><name><name>status</name><operator>-&gt;</operator><name>rtt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unreach_callback</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT_STATUS</name> <modifier>*</modifier><name>status</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__show_unreach</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><operator>(</operator><name>ICMP_HOST</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"unreach: from %st\r\n"</literal></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>dest_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_callback</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_stat_host</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ping_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name> <init>= <expr><call><name>icmp_chat_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* ´´½¨ ICMP ¶ÔÏó */</comment>
	<decl_stmt><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>icmp_host_alloc</name><argument_list>(<argument><expr><name>chat</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>icmp_host_init</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>ICMP_TYPE_ECHO</name></expr></argument>, <argument><expr><name>ICMP_CODE_EXTRA</name></expr></argument>, <argument><expr><name>__npkt</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
		<argument><expr><name>__delay</name></expr></argument>, <argument><expr><name>__timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>icmp_host_set</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>reply_callback</name></expr></argument>, <argument><expr><name>timeout_callback</name></expr></argument>,
		<argument><expr><name>unreach_callback</name></expr></argument>, <argument><expr><name>finish_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>icmp_chat</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* ¿ªÊ¼ PING */</comment>
	<expr_stmt><expr><call><name>display_res</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* ÏÔÊ¾ PING ½á¹û */</comment>

	<expr_stmt><expr><call><name>icmp_host_free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>icmp_chat_free</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* ÊÍ·Å ICMP ¶ÔÏó */</comment>
</block_content>}</block></function>

<comment type="block">/* PING Ð­³ÌÈë¿Ú */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_ping</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name><modifier>*</modifier></type> <name>dns_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

	<comment type="block">/* Í¨¹ýÓòÃû½âÎö³öIPµØÖ· */</comment>
	<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>acl_gethostbyname</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dns_db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"Can't find domain %s"</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ö»È¡³öÓòÃûµÚÒ»¸ö IP µØÖ· PING */</comment>
	<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>acl_netdb_index_ip</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"ip invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ping_one</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÊÍ·ÅÓòÃû½âÎö¶ÔÏó */</comment>

	<if_stmt><if>if <condition>(<expr><operator>--</operator><name>__nfibers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fiber_schedule_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_pine_one</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ping_one</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>--</operator><name>__nfibers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fiber_schedule_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>progname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h help\r\n"</literal>
		<literal type="string">" -d delay[milliseconds]\r\n"</literal>
		<literal type="string">" -t timout[milliseconds]\r\n"</literal>
		<literal type="string">" -z stack_size\r\n"</literal>
		<literal type="string">" -f ip_list_file\r\n"</literal>
		<literal type="string">" -s show_result_list[timeout,reply,unreach,all]\r\n"</literal>
		<literal type="string">" -b benchmark [if &gt; 0 dest will be ignored]\r\n"</literal>
		<literal type="string">" -n npkt dest1 dest2...\r\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"example: %s -n 10 www.sina.com.cn www.qq.com\r\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><call><name>acl_argv_split</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">",;: \t\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQ</name></cpp:macro>	<cpp:value>!strcasecmp</cpp:value></cpp:define>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>tokens</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__show_timeout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>__show_reply</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>__show_unreach</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__show_timeout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"reply"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__show_reply</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"unreach"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__show_unreach</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* µ±ÊÕµ½ SIGINT ÐÅºÅ(¼´ÔÚ PING ¹ý³ÌÖÐÓÃ»§°´ÏÂ ctrl + c)Ê±µÄÐÅºÅ´¦Àíº¯Êý */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>on_sigint</name><parameter_list>(<parameter><decl><type><name>int</name> <name>signo</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>stack_size</name> <init>= <expr><literal type="number">16000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>iplist</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>on_sigint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÓÃ»§°´ÏÂ ctr + c Ê±ÖÐ¶Ï PING ³ÌÐò */</comment>
	<expr_stmt><expr><call><name>acl_msg_stdout_enable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÔÊÐí acl_msg_xxx ¼ÇÂ¼µÄÐÅÏ¢Êä³öÖÁÆÁÄ» */</comment>

	<expr_stmt><expr><name><name>iplist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hn:d:z:b:t:f:s:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>__npkt</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><literal type="char">'z'</literal></expr>:</case>
			<expr_stmt><expr><name>stack_size</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
			<expr_stmt><expr><name>__delay</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<expr_stmt><expr><name>__timeout</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'b'</literal></expr>:</case>
			<expr_stmt><expr><name>__benchmark</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>iplist</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iplist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><call><name>show_list</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>__npkt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__npkt</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__benchmark</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>localhost</name> <init>= <expr><literal type="string">"127.0.0.1"</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>__nfibers</name> <operator>=</operator> <name>__benchmark</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__benchmark</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_ping</name></expr></argument>, <argument><expr><name>localhost</name></expr></argument>, <argument><expr><name>stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>iplist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>ips</name> <init>= <expr><call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">10240</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>acl_fopen</name><argument_list>(<argument><expr><name>iplist</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"open file %s error %s\r\n"</literal></expr></argument>,
				<argument><expr><name>iplist</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>ips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<while>while <condition>(<expr><operator>!</operator><call><name>acl_feof</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>acl_fgets_nonl</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>ips</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>acl_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>ips</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_pine_one</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name>__nfibers</name> <operator>=</operator> <call><name>acl_argv_size</name><argument_list>(<argument><expr><name>ips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>ips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>==</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ¼ÇÂ¼ÒªÆô¶¯µÄÐ­³ÌµÄ×ÜÊý */</comment>
		<expr_stmt><expr><name>__nfibers</name> <operator>=</operator> <name>argc</name> <operator>-</operator> <name>optind</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>optind</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_ping</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_fiber_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
