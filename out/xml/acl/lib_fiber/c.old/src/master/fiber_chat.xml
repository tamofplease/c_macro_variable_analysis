<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c.old/src/master/fiber_chat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<comment type="block">/* including the internal headers from lib_acl/src/master */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"template/master_log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/lib_fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SIZE</name></cpp:macro>	<cpp:value>64000</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>acl_var_fiber_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_procname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_log_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>acl_var_fiber_stack_size</name> <init>= <expr><name>STACK_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>acl_var_fiber_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>acl_var_fiber_rw_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>acl_var_fiber_max_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>acl_var_fiber_enable_core</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>acl_var_fiber_use_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>acl_var_acl_fiber_idle_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_INT_TABLE</name></type> <name><name>__conf_int_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"fiber_stack_size"</literal></expr>, <expr><name>STACK_SIZE</name></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_stack_size</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_buf_size"</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_buf_size</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_rw_timeout"</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_rw_timeout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_max_debug"</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_max_debug</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_enable_core"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_enable_core</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_use_limit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_use_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"acl_fiber_idle_limit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_acl_fiber_idle_limit</name></expr>, <expr><literal type="number">0</literal></expr> , <expr><literal type="number">0</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_queue_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_log_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_deny_banner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_access_allow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_dispatch_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_var_fiber_dispatch_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_STR_TABLE</name></type> <name><name>__conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"fiber_queue_dir"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_queue_dir</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_log_debug"</literal></expr>, <expr><literal type="string">"all:1"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_log_debug</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_deny_banner"</literal></expr>, <expr><literal type="string">"Denied!\r\n"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_deny_banner</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_access_allow"</literal></expr>, <expr><literal type="string">"all"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_access_allow</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_owner"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_owner</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_dispatch_addr"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_dispatch_addr</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fiber_dispatch_type"</literal></expr>, <expr><literal type="string">"default"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_fiber_dispatch_type</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>CHAT_CTX</name> ;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>__argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>__argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>__daemon_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  (<modifier>*</modifier><name>__service</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name>   <modifier>*</modifier></type><name>__service_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>   <name><name>__service_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>__service_onexit</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>  <modifier>*</modifier></type><name>__deny_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  (<modifier>*</modifier><name>__service_on_accept</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type>      <name>__server_generation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>__sstreams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>           <name>__server_stopping</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>           <name>__nclients</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type>      <name>__nused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_exit</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber = %u, service exit now!"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
static void server_abort(ACL_FIBER *fiber)
{
	acl_msg_info("%s(%d), %s: service abort now",
		__FILE__, __LINE__, __FUNCTION__);
	server_exit(fiber, 1);
}
*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_stop</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__server_stopping</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__server_stopping</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_sleep</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>server_exit</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_monitor_master</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stat_stream</name> <init>= <expr><operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>stat_stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name>stat_stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: disconnect(%d) from acl_master"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>server_exit</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_monitor_used</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_var_fiber_use_limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid fiber_use_limit(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>acl_var_fiber_use_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>__server_stopping</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__nclients</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>__nused</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>acl_var_fiber_use_limit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: use_limit reached %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>acl_var_fiber_use_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>server_stop</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_fiber_sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_monitor_idle</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>time_t</name></type> <name>last</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>__server_stopping</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__nclients</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>last</name> <operator>&gt;=</operator> <name>acl_var_acl_fiber_idle_limit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: idle_limit reached %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>acl_var_acl_fiber_idle_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>server_stop</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_fiber_sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_read_client</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CHAT_CTX</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><operator>(</operator><name>CHAT_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__service</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
			<argument><expr><name>acl_var_fiber_rw_timeout</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_event_disable_readwrite</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_read_client</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>acl_var_fiber_stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_chat_ctx</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>conn</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>--</operator><name>__nclients</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>client_wakeup</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CHAT_CTX</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><call><name>ACL_VSTREAM_PEER</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>peer</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>acl_access_permit</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__deny_info</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>__deny_info</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>__deny_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__service_on_accept</name> <operator>&amp;&amp;</operator> <call><name>__service_on_accept</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__nclients</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>__nused</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>CHAT_CTX</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CHAT_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>free_chat_ctx</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>acl_var_fiber_rw_timeout</name></expr></argument>,
		<argument><expr><name>read_callback</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dispatch_receive</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dispatch_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>remote</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>local</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_read_fd</name><argument_list>(<argument><expr><name>dispatch_fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: read from master_dispatch(%s) error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>acl_var_fiber_dispatch_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>acl_var_fiber_buf_size</name></expr></argument>,
		<argument><expr><name>acl_var_fiber_rw_timeout</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_local</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>client_wakeup</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dispatch_report</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"count=%d&amp;used=%u&amp;pid=%u&amp;type=%s"</literal>
		<literal type="string">"&amp;max_threads=%d&amp;curr_threads=%d&amp;busy_threads=%d&amp;qlen=0\r\n"</literal></expr></argument>,
		<argument><expr><name>__nclients</name></expr></argument>, <argument><expr><name>__nused</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><name>acl_var_fiber_dispatch_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: write to master_dispatch(%s) failed"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>acl_var_fiber_dispatch_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_poll</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>last</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>__server_stopping</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: poll error %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>dispatch_receive</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>last</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>dispatch_report</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_dispatch</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><operator>(</operator><name>ACL_EVENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_fiber_dispatch_addr</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>acl_var_fiber_dispatch_addr</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>__server_stopping</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>acl_var_fiber_dispatch_addr</name></expr></argument>,
				<argument><expr><name>ACL_BLOCKING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect %s error %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>acl_var_fiber_dispatch_addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_fiber_sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect %s ok"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>acl_var_fiber_dispatch_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>dispatch_poll</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u exit now"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listen_callback</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__max_fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>__last_fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>acl_vstream_accept</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EAGAIN</name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ACL_EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ACL_EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name>
			<operator>||</operator> <name>errno</name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: accept error %s, maxfd: %d, "</literal>
			<literal type="string">"lastfd: %d, stoping ..."</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__max_fd</name></expr></argument>, <argument><expr><name>__last_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__last_fd</name> <operator>=</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__last_fd</name> <operator>&gt;</operator> <name>__max_fd</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__max_fd</name> <operator>=</operator> <name>__last_fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>client_wakeup</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_event</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><operator>(</operator><name>ACL_EVENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_loop</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_open</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>sstreams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sstreams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_event_enable_listen</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>sstreams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><name>listen_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* create event fier process */</comment>
	<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_event</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service_name</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): argc(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>service_name</name> <operator>=</operator> <call><name>acl_safe_basename</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"argv[%d]: %s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h[help]"</literal>
		<literal type="string">" -c [use chroot]"</literal>
		<literal type="string">" -n service_name"</literal>
		<literal type="string">" -s socket_count"</literal>
		<literal type="string">" -t transport"</literal>
		<literal type="string">" -u [use setgid initgroups setuid]"</literal>
		<literal type="string">" -v [on acl_msg_verbose]"</literal>
		<literal type="string">" -f conf_file"</literal>
		<literal type="string">" -L listen_addrs"</literal></expr></argument>,
		<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>server_daemon_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_daemon_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>sstreams</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stat_stream</name> <init>= <expr><call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>ACL_MASTER_STATUS_FD</name></expr></argument>,
			<argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* socket count is as same listen_fd_count in parent process */</comment>

	<expr_stmt><expr><name>sstreams</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>sstreams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>ACL_MASTER_LISTEN_FD</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <name>ACL_MASTER_LISTEN_FD</name> <operator>+</operator> <name>count</name></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>sstream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>,
				<argument><expr><name>acl_var_fiber_buf_size</name></expr></argument>,
				<argument><expr><name>acl_var_fiber_rw_timeout</name></expr></argument>, <argument><expr><name>fdtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: stream null, fd = %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sstreams</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>sstream</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_monitor_master</name></expr></argument>, <argument><expr><name>stat_stream</name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_STATUS_FD</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_FLOW_READ</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_FLOW_WRITE</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>sstreams</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>server_alone_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_alone_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name><modifier>*</modifier></type>     <name>tokens</name> <init>= <expr><call><name>acl_argv_split</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><literal type="string">";,| \t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>      <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>           <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>streams</name> <init>= <expr><operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>tokens</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>addr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type> <name>sstream</name> <init>= <expr><call><name>acl_vstream_listen</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>sstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): listen %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>streams</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>sstream</name></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>streams</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>open_service_log</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* first, close the master's log */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>master_log_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* second, open the service's log */</comment>
	<expr_stmt><expr><call><name>acl_msg_open</name><argument_list>(<argument><expr><name>acl_var_fiber_log_file</name></expr></argument>, <argument><expr><name>acl_var_fiber_procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_fiber_log_debug</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>acl_var_fiber_log_debug</name>
		<operator>&amp;&amp;</operator> <name>acl_var_fiber_max_debug</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_debug_init2</name><argument_list>(<argument><expr><name>acl_var_fiber_log_debug</name></expr></argument>,
			<argument><expr><name>acl_var_fiber_max_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>server_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"server_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>inited</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>procname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>procname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d); procname null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Don't die when a process goes away unexpectedly.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGPIPE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Don't die for frivolous reasons.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGXFSZ</name></cpp:ifdef>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGXFSZ</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * May need this every now and then.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>acl_var_fiber_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>acl_var_fiber_pid</name> <operator>=</operator> <call><name>_getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>acl_var_fiber_pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>acl_var_fiber_procname</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>acl_safe_basename</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_getenv</name><argument_list>(<argument><expr><literal type="string">"SERVICE_LOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>acl_getenv</name><argument_list>(<argument><expr><literal type="string">"SERVICE_LOG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>acl_var_fiber_log_file</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>acl_var_fiber_log_file</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">"acl_master.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: can't get SERVICE_LOG's env value,"</literal>
			<literal type="string">" use %s log"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>acl_var_fiber_log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_get_app_conf_int_table</name><argument_list>(<argument><expr><name>__conf_int_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_get_app_conf_str_table</name><argument_list>(<argument><expr><name>__conf_str_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__deny_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__deny_info</name> <operator>=</operator> <name>acl_var_fiber_deny_banner</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_fiber_access_allow</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>acl_var_fiber_access_allow</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_access_add</name><argument_list>(<argument><expr><name>acl_var_fiber_access_allow</name></expr></argument>, <argument><expr><literal type="string">", \t"</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__first_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>va_list</name></type> <name>__ap_dest</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_main</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"fiber_main"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service_name</name> <init>= <expr><call><name>acl_safe_basename</name><argument_list>(<argument><expr><name><name>__argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>root_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>c</name></decl>, <decl><type ref="prev"/><name>fdtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>socket_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>name</name> <init>= <expr><operator>-</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>generation</name></decl>, <decl><type ref="prev"/><name><name>conf_file</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pre_jail_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>post_init_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_INIT_FN</name></type> <name>pre_jail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_INIT_FN</name></type> <name>post_init</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>acl_event_new</name><argument_list>(<argument><expr><name>ACL_EVENT_KERNEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>master_log_open</name><argument_list>(<argument><expr><name><name>__argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>conf_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>__argc</name></expr></argument>, <argument><expr><name>__argv</name></expr></argument>, <argument><expr><literal type="string">"hc:n:s:t:uvf:L:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>__argc</name></expr></argument>, <argument><expr><name>__argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<expr_stmt><expr><call><name>acl_app_conf_load</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>conf_file</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conf_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><name>root_dir</name> <operator>=</operator> <literal type="string">"setme"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>service_name</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><name>socket_count</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'u'</literal></expr>:</case>
			<expr_stmt><expr><name>user</name> <operator>=</operator> <literal type="string">"setme"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<comment type="block">/* deprecated, just go through */</comment>
			<break>break;</break>
		<case>case <expr><literal type="char">'v'</literal></expr>:</case>
			<expr_stmt><expr><name>acl_msg_verbose</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'L'</literal></expr>:</case>
			<expr_stmt><expr><name>addrs</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>conf_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: no configure file"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: configure file = %s"</literal></expr></argument>, 
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>conf_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>__service_name</name></expr></argument>, <argument><expr><name>service_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__service_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>addrs</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>addrs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__daemon_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>__daemon_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

	<comment type="block">/* Application-specific initialization. */</comment>

	<comment type="block">/* load configure, set signal */</comment>
	<expr_stmt><expr><call><name>server_init</name><argument_list>(<argument><expr><name><name>__argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <name>__first_name</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_APP_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_MASTER_SERVER_BOOL_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_bool_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>ACL_CONFIG_BOOL_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_INT_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_int_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>ACL_CONFIG_INT_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_INT64_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_int64_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>ACL_CONFIG_INT64_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_STR_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_str_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>ACL_CONFIG_STR_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_PRE_INIT</name></expr>:</case>
			<expr_stmt><expr><name>pre_jail</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_POST_INIT</name></expr>:</case>
			<expr_stmt><expr><name>post_init</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_EXIT</name></expr>:</case>
			<expr_stmt><expr><name>__service_onexit</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_EXIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_DENY_INFO</name></expr>:</case>
			<expr_stmt><expr><name>__deny_info</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: bad name(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

	<if_stmt><if>if <condition>(<expr><name>root_dir</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>root_dir</name> <operator>=</operator> <name>acl_var_fiber_queue_dir</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>user</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>user</name> <operator>=</operator> <name>acl_var_fiber_owner</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Retrieve process generation from environment. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>generation</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>ACL_MASTER_GEN_NAME</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_alldig</name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"bad generation: %s"</literal></expr></argument>, <argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>generation</name></expr></argument>, <argument><expr><literal type="string">"%o"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>__server_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"process generation: %s (%o)"</literal></expr></argument>,
				<argument><expr><name>generation</name></expr></argument>, <argument><expr><name>__server_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block" format="doxygen">/*******************************************************************/</comment>

	<comment type="block">/* Run pre-jail initialization. */</comment>
	<if_stmt><if>if <condition>(<expr><name>__daemon_mode</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>acl_var_fiber_queue_dir</name>
		<operator>&amp;&amp;</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>acl_var_fiber_queue_dir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"chdir(\"%s\"): %s"</literal></expr></argument>, <argument><expr><name>acl_var_fiber_queue_dir</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* open all listen streams */</comment>

	<if_stmt><if>if <condition>(<expr><name>__daemon_mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__sstreams</name> <operator>=</operator> <call><name>server_alone_open</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><name>socket_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid socket_count: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>socket_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>__sstreams</name> <operator>=</operator> <call><name>server_daemon_open</name><argument_list>(<argument><expr><name>socket_count</name></expr></argument>, <argument><expr><name>fdtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): addrs NULL"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>server_open</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>__sstreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_fiber_dispatch_addr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>acl_var_fiber_dispatch_addr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_dispatch</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_fiber_use_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_monitor_used</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_acl_fiber_idle_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_monitor_idle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pre_jail</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pre_jail</name><argument_list>(<argument><expr><name>pre_jail_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>user</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>user</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_chroot_uid</name><argument_list>(<argument><expr><name>root_dir</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* open the server's log */</comment>
	<expr_stmt><expr><call><name>open_service_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<comment type="block">/* if enable dump core when program crashed ? */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_var_fiber_enable_core</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_set_core_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Run post-jail initialization. */</comment>
	<if_stmt><if>if <condition>(<expr><name>post_init</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>post_init</name><argument_list>(<argument><expr><name>post_init_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s daemon started, log: %s"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>__argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>acl_var_fiber_log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_chat_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>service</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>__argc</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__argv</name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

	<comment type="block">/* Set up call-back info. */</comment>
	<expr_stmt><expr><name>__service</name>     <operator>=</operator> <name>service</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__service_ctx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__first_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>__ap_dest</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_main</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
