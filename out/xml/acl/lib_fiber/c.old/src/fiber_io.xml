<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c.old/src/fiber_io.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/lib_fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>EVENT</name>      <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>      <name>io_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name>  <modifier>*</modifier></type><name>ev_fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name></type>    <name>ev_timer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>nsleeping</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>io_stop</name></decl>;</decl_stmt>
}</block></struct></type> <name>FIBER_TLS</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>FIBER_TLS</name> <modifier>*</modifier></type><name>__main_fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>FIBER_TLS</name> <modifier>*</modifier></type><name>__thread_fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fiber_io_loop</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXFD</name></cpp:macro>		<cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SIZE</name></cpp:macro>	<cpp:value>819200</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__maxfd</name>    <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>acl_fiber_schedule_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_TO_FIBER</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((ACL_FIBER *) ((char *) (r) - offsetof(ACL_FIBER, me)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_FIBER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(acl_ring_succ(head) != (head) ? RING_TO_FIBER(acl_ring_succ(head)) : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TIME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{  \
	gettimeofday(&amp;tv, NULL);  \
	(x) = tv.tv_sec * 1000 + tv.tv_usec / 1000; \
}</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>__fiber_key</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_TLS</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><operator>(</operator><name>FIBER_TLS</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__main_fiber</name> <operator>==</operator> <name>__thread_fiber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_io_main_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__main_fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>thread_free</name><argument_list>(<argument><expr><name>__main_fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>__main_fiber</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fiber_key</name></expr></argument>, <argument><expr><name>thread_free</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_key_create error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>fiber_io_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>thread_init</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_once error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__maxfd</name> <operator>=</operator> <call><name>acl_open_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__maxfd</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__maxfd</name> <operator>=</operator> <name>MAXFD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <operator>(</operator><name>FIBER_TLS</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIBER_TLS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <call><name>event_create</name><argument_list>(<argument><expr><name>__maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_fiber</name></name> <operator>=</operator> <call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_io_loop</name></expr></argument>,
			<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nsleeping</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>__thread_fiber</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>fiber_io_main_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>__fiber_key</name></expr></argument>, <argument><expr><name>__thread_fiber</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"acl_pthread_setspecific error!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_io_dec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_io_inc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>fiber_io_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_io_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVENT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_io_loop</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>self</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<while>while <condition>(<expr><call><name>acl_fiber_yield</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content/>}</block></while>

		<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name><name>timer</name><operator>-&gt;</operator><name>when</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name>now</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>left</name> <operator>&lt;</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* add 1 just for the deviation of epoll_wait */</comment>
		<expr_stmt><expr><call><name>event_process</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><ternary><condition><expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>left</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name>left</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_stop</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name>last</name> <operator>&lt;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<do>do <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>timer</name><operator>-&gt;</operator><name>sys</name></name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nsleeping</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fiber_count_dec</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block> while <condition>(<expr><name>timer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>now</name> <operator>&gt;=</operator> <name><name>timer</name><operator>-&gt;</operator><name>when</name></name></expr>)</condition>;</do>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: waiting io: %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_MIN</name></cpp:macro></cpp:define>

<function><type><name>unsigned</name> <name>int</name></type> <name>acl_fiber_delay</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>when</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>CHECK_MIN</name></cpp:ifdef>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>min</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_doze</name><argument_list>(<argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>when</name> <operator>+=</operator> <name>milliseconds</name></expr>;</expr_stmt>

	<macro><name>acl_ring_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>&amp;__thread_fiber-&gt;ev_timer</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>when</name> <operator>&gt;=</operator> <name><name>fiber</name><operator>-&gt;</operator><name>when</name></name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>CHECK_MIN</name></cpp:ifdef>
			<decl_stmt><decl><type><name>acl_int64</name></type> <name>n</name> <init>= <expr><name>when</name> <operator>-</operator> <name><name>fiber</name><operator>-&gt;</operator><name>when</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>min</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>CHECK_MIN</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>min</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>min</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator> <operator>||</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <name>when</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fiber</name><operator>-&gt;</operator><name>sys</name></name> <operator>&amp;&amp;</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>nsleeping</name></name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_count_inc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//acl_ring_detach(&amp;fiber-&gt;me);</comment>

	<if_stmt><if>if <condition>(<expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&lt;</operator> <name>when</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name>when</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_timer_callback</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>left</name> <operator>=</operator> <ternary><condition><expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>&gt;</operator> <name>now</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name>now</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_fiber_delay</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name><name>fiber</name><operator>-&gt;</operator><name>timer_fn</name></name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fiber_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>acl_fiber_create_timer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>milliseconds</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>when</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>when</name> <operator>+=</operator> <name>milliseconds</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>fiber</name>           <operator>=</operator> <call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_timer_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name>     <operator>=</operator> <name>when</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>timer_fn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
	<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_reset_timer</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>when</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>when</name> <operator>+=</operator> <name>milliseconds</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <name>when</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>acl_fiber_sleep</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_delay</name><argument_list>(<argument><expr><name>seconds</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name> <init>= <expr><operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_wait_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>,
		<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVENT_READABLE</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">//acl_msg_info("&gt;&gt;&gt;%s(%d): fd: %d, not sock&lt;&lt;&lt;",</comment>
		<comment type="line">//	__FUNCTION__, __LINE__, fd);</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name> <init>= <expr><operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_wait_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
		<argument><expr><name>EVENT_WRITABLE</name></expr></argument>, <argument><expr><name>write_callback</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_count</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_io_fibers_free</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name>  <modifier>*</modifier></type><name>fbr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fbw</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fbr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fbw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name> <operator>==</operator> <name>read_callback</name>
			<operator>&amp;&amp;</operator> <operator>(</operator><name>fbr</name> <operator>=</operator> <operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_ctx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

			<expr_stmt><expr><call><name>event_del_nodelay</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVENT_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_ctx</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name> <operator>==</operator> <name>write_callback</name>
			<operator>&amp;&amp;</operator> <operator>(</operator><name>fbw</name> <operator>=</operator> <operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_ctx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

			<expr_stmt><expr><call><name>event_del_nodelay</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVENT_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_ctx</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>fbr</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fbr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name>fbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fbw</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fbw</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name>fbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
