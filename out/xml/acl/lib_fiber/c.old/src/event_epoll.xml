<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c.old/src/event_epoll.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__USE_GNU</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_GNU</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_epoll.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_create_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_wait_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_ctl_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_create_fn</name></type> <name>__sys_epoll_create</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_wait_fn</name></type>   <name>__sys_epoll_wait</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_ctl_fn</name></type>    <name>__sys_epoll_ctl</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>hook_epoll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__called</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__called</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__called</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_epoll_create</name> <operator>=</operator> <operator>(</operator><name>epoll_create_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_epoll_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_epoll_wait</name>   <operator>=</operator> <operator>(</operator><name>epoll_wait_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_epoll_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_epoll_ctl</name>    <operator>=</operator> <operator>(</operator><name>epoll_ctl_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_ctl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_epoll_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>EVENT_EPOLL</name> <block>{
	<decl_stmt><decl><type><name>EVENT</name></type> <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>epfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>epoll_events</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVENT_EPOLL</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_event_free</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epoll_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_event_add</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>op</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* If the fd was already monitored for some event, we need a MOD
	 * operation. Otherwise we need an ADD operation. */</comment>
	<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>EVENT_NONE</name></expr>
		?</condition><then> <expr><name>EPOLL_CTL_ADD</name></expr> </then><else>: <expr><name>EPOLL_CTL_MOD</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name>  <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
	<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt> <comment type="block">/* Merge old events */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>EPOLLIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>EPOLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>EPOLLRDHUP</name></cpp:ifdef>
	ee.events |= EPOLLERR | EPOLLRDHUP | EPOLLHUP;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	ee.events |= EPOLLERR | EPOLLHUP;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_ctl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_epoll</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ee</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		acl_msg_error("%s, %s(%d): epoll_ctl error %s, epfd=%d, fd=%d",
			__FILE__, __FUNCTION__, __LINE__, acl_last_serror(),
			ep-&gt;epfd, fd);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_event_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>delmask</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name>  <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>EPOLLIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>EPOLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_ctl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_epoll</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>!=</operator> <name>EVENT_NONE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>__sys_epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_MOD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ee</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), epoll_ctl error: %s, fd: %d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Note, Kernel &lt; 2.6.9 requires a non null event pointer
		 * even for EPOLL_CTL_DEL.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>__sys_epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_DEL</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ee</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), epoll_ctl error: %s, fd: %d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_event_loop</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_wait</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_epoll</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_epoll_wait</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epoll_events</name></name></expr></argument>,
			<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ret</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>epoll_events</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLIN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>EVENT_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLOUT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>EVENT_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLERR</name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLHUP</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fd</name></name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>EVENT_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fd</name></name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>EVENT_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name>   <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>fd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_event_handle</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>epoll_event_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"epoll"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>event_epoll_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>setsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_EPOLL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>epoll_events</name></name> <operator>=</operator> <operator>(</operator>struct <name>epoll_event</name> <operator>*</operator><operator>)</operator>
		<call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>epoll_event</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_create</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_epoll</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name> <operator>=</operator> <call><name>__sys_epoll_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>name</name></name>   <operator>=</operator> <name>epoll_event_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>epoll_event_handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>loop</name></name>   <operator>=</operator> <name>epoll_event_loop</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add</name></name>    <operator>=</operator> <name>epoll_event_add</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del</name></name>    <operator>=</operator> <name>epoll_event_del</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>free</name></name>   <operator>=</operator> <name>epoll_event_free</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>EVENT</name><operator>*</operator><operator>)</operator> <name>ep</name></expr>;</return>
</block_content>}</block></function>
</unit>
