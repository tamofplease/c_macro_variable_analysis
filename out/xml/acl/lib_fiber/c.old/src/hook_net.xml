<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c.old/src/hook_net.c"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/lib_fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>close_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>socket_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>socketpair_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>sv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>bind_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>listen_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accept_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>connect_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>poll_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>select_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>gethostbyname_r_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>getaddrinfo_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name><modifier>*</modifier></type> <name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freeaddrinfo_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_create_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_wait_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_ctl_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>close_fn</name></type>           <name>__sys_close</name>           <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>socket_fn</name></type>          <name>__sys_socket</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>socketpair_fn</name></type>      <name>__sys_socketpair</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bind_fn</name></type>            <name>__sys_bind</name>            <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>listen_fn</name></type>          <name>__sys_listen</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>accept_fn</name></type>          <name>__sys_accept</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>connect_fn</name></type>         <name>__sys_connect</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>poll_fn</name></type>            <name>__sys_poll</name>            <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>poll_fn</name></type>            <name>__sys_xx_poll</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>select_fn</name></type>          <name>__sys_select</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>gethostbyname_r_fn</name></type> <name>__sys_gethostbyname_r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>getaddrinfo_fn</name></type>     <name>__sys_getaddrinfo</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>freeaddrinfo_fn</name></type>    <name>__sys_freeaddrinfo</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_create_fn</name></type>    <name>__sys_epoll_create</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_wait_fn</name></type>      <name>__sys_epoll_wait</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_ctl_fn</name></type>       <name>__sys_epoll_ctl</name>       <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>hook_net</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__called</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__called</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__called</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_close</name>      <operator>=</operator> <operator>(</operator><name>close_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_socket</name>     <operator>=</operator> <operator>(</operator><name>socket_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_socketpair</name> <operator>=</operator> <operator>(</operator><name>socketpair_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"socketpair"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_socketpair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_bind</name>       <operator>=</operator> <operator>(</operator><name>bind_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_listen</name>     <operator>=</operator> <operator>(</operator><name>listen_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_listen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_accept</name>     <operator>=</operator> <operator>(</operator><name>accept_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_accept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_connect</name>    <operator>=</operator> <operator>(</operator><name>connect_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_poll</name>       <operator>=</operator> <operator>(</operator><name>poll_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_poll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_xx_poll</name> <operator>=</operator> <operator>(</operator><name>poll_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"__poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_select</name>     <operator>=</operator> <operator>(</operator><name>select_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"select"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_gethostbyname_r</name> <operator>=</operator> <operator>(</operator><name>gethostbyname_r_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>,
			<argument><expr><literal type="string">"gethostbyname_r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_gethostbyname_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_getaddrinfo</name> <operator>=</operator> <operator>(</operator><name>getaddrinfo_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_getaddrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_freeaddrinfo</name> <operator>=</operator> <operator>(</operator><name>freeaddrinfo_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>,
			<argument><expr><literal type="string">"freeaddrinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_freeaddrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_epoll_create</name> <operator>=</operator> <operator>(</operator><name>epoll_create_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_epoll_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_epoll_wait</name>   <operator>=</operator> <operator>(</operator><name>epoll_wait_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_epoll_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_epoll_ctl</name>    <operator>=</operator> <operator>(</operator><name>epoll_ctl_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_ctl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_epoll_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>sockfd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_socket</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_socket</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>__sys_socket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>sockfd</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>sockfd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>socketpair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>sv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_socketpair</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_socketpair</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_socketpair</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_ACCEPT</name></cpp:macro></cpp:define>

<function><type><name>int</name></type> <name>bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_bind</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_bind</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>__sys_bind</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_listen</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_listen</name></expr> ?</condition><then> <expr><call><name>__sys_listen</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>__sys_listen</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>clifd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid sockfd %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_accept</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_accept</name></expr> ?</condition><then> <expr><call><name>__sys_accept</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>FAST_ACCEPT</name></cpp:ifdef>

	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>&amp;&amp;</operator> <call><name>event_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call><name>__sys_accept</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_tcp_nodelay</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>clifd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call><name>__sys_accept</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_tcp_nodelay</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>clifd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>clifd</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>&amp;&amp;</operator> <call><name>event_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call><name>__sys_accept</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>clifd</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>clifd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call><name>__sys_accept</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_tcp_nodelay</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>clifd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>clifd</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_connect</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_connect</name></expr> ?</condition><then> <expr><call><name>__sys_connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed, %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>__sys_connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_tcp_nodelay</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINPROGRESS</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ECONNREFUSED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect ECONNREFUSED"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ECONNRESET</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect ECONNRESET"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENETDOWN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect ENETDOWN"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENETUNREACH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect ENETUNREACH"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EHOSTDOWN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect EHOSTDOWN"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EHOSTUNREACH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect EHOSTUNREACH"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_LINUX</name></cpp:ifdef>
		<comment type="block">/* Linux returns EAGAIN instead of ECONNREFUSED
		 * for unix sockets if listen queue is full -- see nginx
		 */</comment>
		<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect EAGAIN"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect errno=%d, %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed, %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>peer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: getpeername error %s, fd: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): getsockopt error: %s, ret: %d, err: %d"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TIME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    struct timeval tv; \
    gettimeofday(&amp;tv, NULL); \
    (x) = ((acl_int64) tv.tv_sec) * 1000 + ((acl_int64) tv.tv_usec)/ 1000; \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_APPL</name></cpp:macro> <cpp:value>acl_ring_to_appl</cpp:value></cpp:define>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_events_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>event_del_nodelay</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>EVENT_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>]</index></name><operator>.</operator><name>pe</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>event_del_nodelay</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>EVENT_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>]</index></name><operator>.</operator><name>pe</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>poll_fibers_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_RING</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>head</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><call><name>TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>POLL_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><call><name>acl_stack_pop</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><call><name>acl_fifo_pop</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>poll_events_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></while>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pollfd_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>pe</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition> <block>{<block_content>
		<comment type="line">//if (pfd-&gt;events &amp; POLLIN)</comment>
		<comment type="line">//	event_del(ev, fd, EVENT_READABLE);</comment>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition> <block>{<block_content>
		<comment type="line">//if (pfd-&gt;events &amp; POLLOUT)</comment>
		<comment type="line">//	event_del(ev, fd, EVENT_WRITABLE);</comment>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_RING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>nready</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_poll_set</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_RING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>acl_stack_append</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_fifo_push_back</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>nready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>EVENT_READABLE</name></expr></argument>,
				<argument><expr><name>pollfd_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>]</index></name><operator>.</operator><name>pe</name> <operator>=</operator> <name>pe</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>event_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>EVENT_WRITABLE</name></expr></argument>,
				<argument><expr><name>pollfd_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>]</index></name><operator>.</operator><name>pe</name> <operator>=</operator> <name>pe</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_poll_clear</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>EVENT_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>EVENT_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_io_dec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>__poll</name><argument_list>(<argument><expr>struct <name>pollfd</name> <name><name>fds</name><index>[]</index></name></expr></argument>, <argument><expr><name>nfds_t</name> <name>nfds</name></expr></argument>, <argument><expr><name>int</name> <name>timeout</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>__poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>fds</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_xx_poll</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_xx_poll</name></expr> ?</condition><then> <expr><call><name>__sys_xx_poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>POLL_EVENT</name></type> <name>pe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_poll</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_poll</name></expr> ?</condition><then> <expr><call><name>__sys_poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ev</name>        <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>fds</name></name>    <operator>=</operator> <name>fds</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>nfds</name></name>   <operator>=</operator> <name>nfds</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>fiber</name></name>  <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>proc</name></name>   <operator>=</operator> <name>poll_callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>nready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_poll_set</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_io_inc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name><name>pe</name><operator>.</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed, %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name><name>pe</name><operator>.</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>nready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_RING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<if_stmt><if>if <condition>(<expr><call><name>acl_stack_size</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fifo_size</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>.</operator><name>nready</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name>begin</name> <operator>&gt;=</operator> <name>timeout</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>event_poll_clear</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>pe</name><operator>.</operator><name>nready</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>readfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>writefds</name></decl></parameter>,
	<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>exceptfds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>timo</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_select</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_select</name></expr> ?</condition><then> <expr><call><name>__sys_select</name>
			<argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fds</name> <operator>=</operator> <operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>nfds</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>readfds</name> <operator>&amp;&amp;</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>writefds</name> <operator>&amp;&amp;</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>exceptfds</name> <operator>&amp;&amp;</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLERR</name> <operator>|</operator> <name>POLLHUP</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timo</name> <operator>=</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>timo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>readfds</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>writefds</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>exceptfds</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <name>nfds</name> <operator>&amp;&amp;</operator> <name>nready</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>!=</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>readfds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nready</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>writefds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nready</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>exceptfds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <operator>(</operator><name>POLLERR</name> <operator>|</operator> <name>POLLHUP</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nready</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>nready</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_events_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ee</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>event_del_nodelay</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>EVENT_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>event_del_nodelay</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>EVENT_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>epoll_fibers_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_RING</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>head</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><call><name>TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>EPOLL_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><call><name>acl_stack_pop</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><call><name>acl_fifo_pop</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>epoll_events_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></while>

<function><type><specifier>static</specifier> <name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>epfd_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EPOLL_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>maxfd</name> <init>= <expr><call><name>acl_open_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>maxfd</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_open_limit error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>++</operator><name>maxfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name></name>  <operator>=</operator> <operator>(</operator><name>EPOLL_CTX</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>maxfd</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EPOLL_CTX</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>nfds</name></name> <operator>=</operator> <name>maxfd</name></expr>;</expr_stmt>

	<return>return <expr><name>ee</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>__main_epfds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>__epfds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type>  <name>__once_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>__main_epfds</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__main_epfds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>__epfds</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><operator>(</operator><name>EPOLL_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ee</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>epfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>__sys_close</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>__epfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__epfds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>main_thread_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__main_epfds</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>thread_free</name><argument_list>(<argument><expr><name>__main_epfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__main_epfds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_key</name></expr></argument>, <argument><expr><name>thread_free</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_key_create error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>epoll_event_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* using thread specific to store the epoll handles for each thread*/</comment>
	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>thread_init</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_once error %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>__epfds</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator>
			<call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>__main_epfds</name> <operator>=</operator> <name>__epfds</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>main_thread_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>__once_key</name></expr></argument>, <argument><expr><name>__epfds</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"acl_pthread_setspecific error!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>epfd_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>__epfds</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* duplicate the current thread's epoll fd, so we can assosiate the
	 * connection handles with one epoll fd for the current thread, and
	 * use one epoll fd for each thread to handle all fds
	 */</comment>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>epfd</name></name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ee</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><name>ee</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>epoll_event_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: __epfds NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>__epfds</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><operator>(</operator><name>EPOLL_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>epfd</name></name> <operator>==</operator> <name>epfd</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ee</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>epoll_event_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>epfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>__epfds</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>EPOLL_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>epfd</name></name> <operator>==</operator> <name>epfd</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ee</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ee</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_array_delete</name><argument_list>(<argument><expr><name>__epfds</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>__sys_close</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>epoll_create</name><parameter_list>(<parameter><decl><type><name>int</name> <name>size</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>epfd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_create</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_epoll_create</name></expr> ?</condition><then> <expr><call><name>__sys_epoll_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: create_event failed %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* get the current thread's epoll fd */</comment>
	<expr_stmt><expr><name>epfd</name> <operator>=</operator> <call><name>event_handle</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>epfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid event_handle %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>epfd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>epoll_event_create</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ee</name><operator>-&gt;</operator><name>epfd</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EPOLL_CLOEXEC</name></cpp:ifdef>
<function><type><name>int</name></type> <name>epoll_create1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>epfd</name> <init>= <expr><call><name>epoll_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>epfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EPOLL_CLOEXEC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>epfd</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epfd_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL_CTX</name>  <modifier>*</modifier></type><name>epx</name> <init>= <expr><operator>(</operator><name>EPOLL_CTX</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><name><name>epx</name><operator>-&gt;</operator><name>ee</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>&lt;</operator> <name><name>ee</name><operator>-&gt;</operator><name>maxevents</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>EPOLLIN</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>EPOLLOUT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* xxx */</comment>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid mask: %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fiber_io_dec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	acl_msg_error("%s(%d), %s: too large nready %d &gt;= %d",
		__FILE__, __LINE__, __FUNCTION__, ee-&gt;nready, ee-&gt;maxevents);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>epoll_ctl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_ctl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_epoll_ctl</name></expr> ?</condition><then>
			<expr><call><name>__sys_epoll_ctl</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>epoll_event_find</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: not exist epfd: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: EVENT NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLIN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>EVENT_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLOUT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>EVENT_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>EPOLL_CTL_ADD</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>EPOLL_CTL_MOD</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>EPOLL_CTX</name> <operator>*</operator><operator>)</operator>
				<call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EPOLL_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fd</name>    <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>op</name>    <operator>=</operator> <name>op</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name>  <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>rmask</name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>ee</name>    <operator>=</operator> <name>ee</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>epfd_callback</name></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: event_add error, fd: %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>EPOLL_CTL_DEL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVENT_READABLE</name> <operator>|</operator> <name>EVENT_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fd</name>    <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>op</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name>  <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>rmask</name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid op %d, fd %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_epoll_set</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_RING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>acl_stack_append</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_fifo_push_back</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>epoll_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>events</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>maxevents</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_wait</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_epoll_wait</name></expr> ?</condition><then>
			<expr><call><name>__sys_epoll_wait</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>maxevents</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: EVENT NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>epoll_event_find</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: not exist epfd %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>events</name></name>    <operator>=</operator> <name>events</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>maxevents</name></name> <operator>=</operator> <name>maxevents</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name>     <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>proc</name></name>      <operator>=</operator> <name>epoll_callback</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_epoll_set</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_io_inc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name>begin</name> <operator>&gt;=</operator> <name>timeout</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__dns_ip_default</name> <init>= <expr><literal type="string">"8.8.8.8"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>__dns_ip</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>__dns_port</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>acl_fiber_set_dns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>__dns_ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>__dns_ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__dns_ip</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>__dns_port</name> <operator>=</operator> <ternary><condition><expr><name>port</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>port</name></expr> </then><else>: <expr><literal type="number">53</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_WHILE</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ while (*cp &amp;&amp; (cond)) cp++; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_dns</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><literal type="string">"/etc/resolv.conf"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__dns_ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>__dns_ip</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">066</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>__dns_ip_default</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__dns_ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>acl_vstream_gets_nonl</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SKIP_WHILE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"nameserver"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_is_ip</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>__dns_ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__dns_ip</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__dns_ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>__dns_ip_default</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>__dns_ip</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>gethostbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><specifier>static</specifier> <name>__thread</name> struct <name>hostent</name> <name>ret</name></expr><operator>,</operator> <expr><operator>*</operator><name>result</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_LEN</name></cpp:macro>	<cpp:value>4096</cpp:value></cpp:define>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><call><name>gethostbyname_r</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUF_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_errno</name></expr></argument>)</argument_list></call>
		<operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gethostbyname_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_errnop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RES</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dns_ip</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	if (res) \
		acl_netdb_free(res); \
	if (ns) \
		acl_res_free(ns); \
	return (x); \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>__sys_gethostbyname_r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_gethostbyname_r</name></expr> ?</condition><then>  <expr><call><name>__sys_gethostbyname_r</name>
			<argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>h_errnop</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>get_dns</name><argument_list>(<argument><expr><name>dns_ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dns_ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hostent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>acl_res_new</name><argument_list>(<argument><expr><name>dns_ip</name></expr></argument>, <argument><expr><name>__dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>acl_res_lookup</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_res_lookup NULL, name: %s,"</literal>
			<literal type="string">" dns_ip: %s, dns_port: %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>dns_ip</name></expr></argument>, <argument><expr><name>__dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>HOST_NOT_FOUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: n(%d) &gt; buflen(%d)"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>h_name</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COUNT</name></cpp:macro>	<cpp:value>64</cpp:value></cpp:define>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>MAX_COUNT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: n(%d) &gt; buflen(%d)"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>h_addr_list</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>res</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_HOSTNAME</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>ACL_HOSTNAME</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>MAX_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>h_length</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: i == 0, n: %d, buflen: %d"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_port</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><literal type="string">"/etc/services"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sport</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>transport</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>service</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>service</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_alldig</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><call><name>acl_vstream_gets_nonl</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SKIP_WHILE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>sport</name> <operator>=</operator> <name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>transport</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>transport</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>transport</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_alldig</name><argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>socktype</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>port</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>SOCK_ADDR</name> <block>{
	<union>union <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>in6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>in</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>sa</name></decl>;</decl_stmt>
	}</block> <decl><name>sa</name></decl>;</union>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>create_addrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>port</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SOCK_ADDR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>SOCK_ADDR</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_is_ipv4</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>SOCK_ADDR</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_family</name></name>      <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name>        <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><call><name>acl_is_ipv6</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sa</name> <operator>=</operator> <operator>(</operator>struct <name>SOCK_ADDR</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name>   <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sa</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator>struct <name>addrinfo</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name>   <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>socktype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_flags</name></name>    <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name>  <operator>=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator> <name>addrlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name>     <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <name>sa</name></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name><modifier>*</modifier></type> <name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RES</name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dns_ip</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>socktype</name> <init>= <expr><ternary><condition><expr><name>hints</name></expr> ?</condition><then> <expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr> </then><else>: <expr><name>SOCK_STREAM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_getaddrinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_getaddrinfo</name></expr> ?</condition><then>
			<expr><call><name>__sys_getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>get_port</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_is_ip</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><call><name>create_addrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>hints</name></expr> ?</condition><then> <expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <operator>*</operator><name>res</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<return>return <expr><name>EAI_NODATA</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>get_dns</name><argument_list>(<argument><expr><name>dns_ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dns_ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>acl_res_new</name><argument_list>(<argument><expr><name>dns_ip</name></expr></argument>, <argument><expr><name>__dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>acl_res_lookup</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_res_lookup NULL, node: %s,"</literal>
			<literal type="string">" dns_ip: %s, dns_port: %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>dns_ip</name></expr></argument>, <argument><expr><name>__dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_res_free</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>EAI_NODATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>db</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_HOSTNAME</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>ACL_HOSTNAME</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><call><name>create_addrinfo</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>hints</name></expr> ?</condition><then> <expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <operator>*</operator><name>res</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_res_free</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_freeaddrinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_freeaddrinfo</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>__sys_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function></block_content></block></while></block_content></block></function></block_content></block></while></block_content></block></function>
</unit>
