<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c.old/src/hook_io.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_PIPE2</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sendfile.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__USE_GNU</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_GNU</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>unsigned</name> <name>int</name></type> (<modifier>*</modifier><name>sleep_fn</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>pipe_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_PIPE2</name></cpp:ifdef>
<typedef>typedef <function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>pipe2_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>FILE</name>   <modifier>*</modifier></type>(<modifier>*</modifier><name>popen_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>pclose_fn</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>close_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>stat_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>lstat_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>fstat_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>mkdir_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mode_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>read_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>readv_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>recv_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>recvfrom_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>recvmsg_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>write_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>writev_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>send_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>sendto_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>sendmsg_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__USE_FILE_OFFSET64</name></cpp:ifndef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>sendfile_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>off_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>__USE_LARGEFILE64</name></cpp:ifdef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>sendfile64_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>off64_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pread_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pwrite_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pread64_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>off64_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pwrite64_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>off64_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>sleep_fn</name></type>    <name>__sys_sleep</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pipe_fn</name></type>     <name>__sys_pipe</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_PIPE2</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pipe2_fn</name></type>    <name>__sys_pipe2</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>popen_fn</name></type>    <name>__sys_popen</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pclose_fn</name></type>   <name>__sys_pclose</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>close_fn</name></type>    <name>__sys_close</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>stat_fn</name></type>     <name>__sys_stat</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>lstat_fn</name></type>    <name>__sys_lstat</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>fstat_fn</name></type>    <name>__sys_fstat</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mkdir_fn</name></type>    <name>__sys_mkdir</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>read_fn</name></type>     <name>__sys_read</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>readv_fn</name></type>    <name>__sys_readv</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>recv_fn</name></type>     <name>__sys_recv</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>recvfrom_fn</name></type> <name>__sys_recvfrom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>recvmsg_fn</name></type>  <name>__sys_recvmsg</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>write_fn</name></type>    <name>__sys_write</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>writev_fn</name></type>   <name>__sys_writev</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>send_fn</name></type>     <name>__sys_send</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sendto_fn</name></type>   <name>__sys_sendto</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sendmsg_fn</name></type>  <name>__sys_sendmsg</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__USE_FILE_OFFSET64</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>static</specifier> <name>sendfile_fn</name></type>   <name>__sys_sendfile</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__USE_LARGEFILE64</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>sendfile64_fn</name></type> <name>__sys_sendfile64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>pread_fn</name></type>      <name>__sys_pread</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pwrite_fn</name></type>     <name>__sys_pwrite</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pread64_fn</name></type>    <name>__sys_pread64</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pwrite64_fn</name></type>   <name>__sys_pwrite64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>hook_io</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__called</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__called</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__called</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_sleep</name>      <operator>=</operator> <operator>(</operator><name>sleep_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"sleep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_pipe</name>       <operator>=</operator> <operator>(</operator><name>pipe_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_PIPE2</name></cpp:ifdef>
	<expr_stmt><expr><name>__sys_pipe2</name>      <operator>=</operator> <operator>(</operator><name>pipe2_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"pipe2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_pipe2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>__sys_popen</name>      <operator>=</operator> <operator>(</operator><name>popen_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"popen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_popen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_pclose</name>     <operator>=</operator> <operator>(</operator><name>pclose_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"pclose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_pclose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_close</name>      <operator>=</operator> <operator>(</operator><name>close_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_mkdir</name>      <operator>=</operator> <operator>(</operator><name>mkdir_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"mkdir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_mkdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_stat</name>       <operator>=</operator> <operator>(</operator><name>stat_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"__xstat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_fstat</name>      <operator>=</operator> <operator>(</operator><name>fstat_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"__fxstat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_fstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_read</name>       <operator>=</operator> <operator>(</operator><name>read_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_readv</name>      <operator>=</operator> <operator>(</operator><name>readv_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"readv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_readv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_recv</name>       <operator>=</operator> <operator>(</operator><name>recv_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_recv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_recvfrom</name>   <operator>=</operator> <operator>(</operator><name>recvfrom_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"recvfrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_recvfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_recvmsg</name>    <operator>=</operator> <operator>(</operator><name>recvmsg_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"recvmsg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_recvmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_write</name>      <operator>=</operator> <operator>(</operator><name>write_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_writev</name>     <operator>=</operator> <operator>(</operator><name>writev_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"writev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_writev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_send</name>       <operator>=</operator> <operator>(</operator><name>send_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_sendto</name>     <operator>=</operator> <operator>(</operator><name>sendto_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"sendto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_sendto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_sendmsg</name>    <operator>=</operator> <operator>(</operator><name>sendmsg_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"sendmsg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_sendmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__USE_FILE_OFFSET64</name></cpp:ifndef>
	<expr_stmt><expr><name>__sys_sendfile</name>   <operator>=</operator> <operator>(</operator><name>sendfile_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"sendfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_sendfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__USE_LARGEFILE64</name></cpp:ifdef>
	<expr_stmt><expr><name>__sys_sendfile64</name> <operator>=</operator> <operator>(</operator><name>sendfile64_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"sendfile64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_sendfile64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>__sys_pread</name> <operator>=</operator> <operator>(</operator><name>pread_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"pread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_pread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__sys_pwrite</name> <operator>=</operator> <operator>(</operator><name>pwrite_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"pwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_pwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_pread64</name> <operator>=</operator> <operator>(</operator><name>pread64_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"pread64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_pread64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__sys_pwrite64</name> <operator>=</operator> <operator>(</operator><name>pwrite64_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"pwrite64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__sys_pwrite64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>sleep</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_sleep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>__sys_sleep</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_fiber_sleep</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_pipe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_pipe</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_PIPE2</name></cpp:ifdef>
<function><type><name>int</name></type> <name>pipe2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_pipe2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_pipe2</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>popen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_popen</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>__sys_popen</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>fp</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_mkdir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_mkdir</name></expr> ?</condition><then> <expr><call><name>__sys_mkdir</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_mkdir</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>__xstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_stat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_stat</name></expr> ?</condition><then> <expr><call><name>__sys_stat</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_stat</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>__lxstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_lstat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_lstat</name></expr> ?</condition><then> <expr><call><name>__sys_lstat</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_lstat</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>__fxstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_fstat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>__sys_fstat</name></expr> ?</condition><then> <expr><call><name>__sys_fstat</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_fstat</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid fd: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_close</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>__sys_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_io_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* when the fd was closed by epoll_event_close normally, the fd
	 * must be a epoll fd which was created by epoll_create function
	 * hooked in hook_net.c
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>epoll_event_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_WAIT_FIRST</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>READ_WAIT_FIRST</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int check_fdtype(int fd)
{
	struct stat s;

	if (fstat(fd, &amp;s) &lt; 0) {
		acl_msg_info("fd: %d fstat error", fd);
		return -1;
	}

	if (S_ISSOCK(s.st_mode))
		acl_msg_info("fd %d S_ISSOCK", fd);
	else if (S_ISFIFO(s.st_mode))
		acl_msg_info("fd %d S_ISFIFO", fd);
	else if (S_ISCHR(s.st_mode))
		acl_msg_info("fd %d S_ISCHR", fd);

	if (S_ISSOCK(s.st_mode) || S_ISFIFO(s.st_mode) || S_ISCHR(s.st_mode))
		return 0;

	if (S_ISLNK(s.st_mode))
		acl_msg_info("fd %d S_ISLNK", fd);
	else if (S_ISREG(s.st_mode))
		acl_msg_info("fd %d S_ISREG", fd);
	else if (S_ISDIR(s.st_mode))
		acl_msg_info("fd %d S_ISDIR", fd);
	else if (S_ISCHR(s.st_mode))
		acl_msg_info("fd %d S_ISCHR", fd);
	else if (S_ISBLK(s.st_mode))
		acl_msg_info("fd %d S_ISBLK", fd);
	else if (S_ISFIFO(s.st_mode))
		acl_msg_info("fd %d S_ISFIFO", fd);
	else if (S_ISSOCK(s.st_mode))
		acl_msg_info("fd %d S_ISSOCK", fd);
	else
		acl_msg_info("fd: %d, unknoiwn st_mode: %d", fd, s.st_mode);

	return -1;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name>  <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid fd: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_read</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>__sys_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>&amp;&amp;</operator> <call><name>event_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_readv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name>  <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid fd: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_readv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>__sys_readv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>&amp;&amp;</operator> <call><name>event_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_readv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_readv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_recv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name>  <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid sockfd: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_recv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>__sys_recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>&amp;&amp;</operator> <call><name>event_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_recvfrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>src_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name>  <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid sockfd: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_recvfrom</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>__sys_recvfrom</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
				<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>&amp;&amp;</operator> <call><name>event_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_recvfrom</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
				<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_recvfrom</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_recvmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name>  <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid sockfd: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_recvmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>__sys_recvmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>&amp;&amp;</operator> <call><name>event_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_recvmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_clear_readable</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_recvmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_read</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_readv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_readv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_readv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_recv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_recv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_recvfrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>src_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_recvfrom</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_recvfrom</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
				<argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_recvmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_recvmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_recvmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* READ_WAIT_FIRST */</comment>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_write</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_writev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_writev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_send</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_send</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_send</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_sendto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_sendto</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_sendto</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
				<argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ssize_t</name></type> <name>fiber_sendmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_sendmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_sendmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><name>ssize_t</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>readv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_readv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_ARM_LINUX</name></cpp:ifdef>

<function><type><name>ssize_t</name></type> <name>recv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>recvfrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>src_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_recvfrom</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
			<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <name>src_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>recvmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_recvmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>ssize_t</name></type> <name>recv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>recvfrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>src_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_recvfrom</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>recvmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_recvmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ssize_t</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>writev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_ARM_LINUX</name></cpp:ifdef>

<function><type><name>ssize_t</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_send</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>sendto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_sendto</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>sendmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_sendmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>ssize_t</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_send</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>sendto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_sendto</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>sendmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fiber_sendmsg</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__USE_FILE_OFFSET64</name></cpp:ifndef>
<function><type><name>ssize_t</name></type> <name>sendfile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>out_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_sendfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content> 
		<return>return <expr><call><name>__sys_sendfile</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name>in_fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_sendfile</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name>in_fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>__USE_LARGEFILE64</name></cpp:ifdef>
<function><type><name>ssize_t</name></type> <name>sendfile64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>out_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_fd</name></decl></parameter>, <parameter><decl><type><name>off64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_sendfile64</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>__sys_sendfile64</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name>in_fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAGAIN</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>me</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u is existing"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__USE_UNIX98</name> <operator>||</operator> <name>defined</name> <name>__USE_XOPEN2K8</name></expr></cpp:if>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__USE_FILE_OFFSET64</name></cpp:ifndef>
<function><type><name>ssize_t</name></type> <name>pread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_pread</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator>  <call><name>__sys_pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_hook_sys_api</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>pwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_pwrite</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_hook_sys_api</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>__USE_LARGEFILE64</name></cpp:ifdef>
<function><type><name>ssize_t</name></type> <name>pread64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>off64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_pread64</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator>  <call><name>__sys_pread64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_hook_sys_api</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>pwrite64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>off64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_pwrite</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_pwrite64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_hook_sys_api</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
