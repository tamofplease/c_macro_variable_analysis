<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c.old/src/fiber.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__USE_GNU</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_GNU</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_VALGRIND</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//#define FIBER_STACK_GUARD</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>FIBER_STACK_GUARD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/lib_fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_epoll.h"</cpp:file></cpp:include>  <comment type="block">/* just for hook_epoll */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_CACHE</name></cpp:macro>	<cpp:value>1000</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name>  <modifier>*</modifier></type>(<modifier>*</modifier><name>errno_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>fcntl_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>errno_fn</name></type> <name>__sys_errno</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>fcntl_fn</name></type> <name>__sys_fcntl</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>THREAD</name> <block>{
	<decl_stmt><decl><type><name>ACL_RING</name></type>       <name>ready</name></decl>;</decl_stmt>		<comment type="block">/* ready fiber queue */</comment>
	<decl_stmt><decl><type><name>ACL_RING</name></type>       <name>dead</name></decl>;</decl_stmt>		<comment type="block">/* dead fiber queue */</comment>
	<decl_stmt><decl><type><name>ACL_FIBER</name>    <modifier>*</modifier><modifier>*</modifier></type><name>fibers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>       <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>       <name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>            <name>exitcode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name>     <modifier>*</modifier></type><name>running</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name></type>      <name>original</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>            <name>errnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>       <name>idgen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>            <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>         <name>switched</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>            <name>nlocal</name></decl>;</decl_stmt>
}</block></struct></type> <name>THREAD</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fiber_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> __attribute__ <parameter_list>(<parameter/></parameter_list>(constructor</function_decl>))<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>THREAD</name> <modifier>*</modifier></type><name>__main_fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>THREAD</name> <modifier>*</modifier></type><name>__thread_fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type> <name>__scheduled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__thread</name> <name>int</name></type> <name>acl_var_hook_sys_api</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>__fiber_key</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>FIBER_STACK_GUARD</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>page_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>long</name></type> <name>pgsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pgsz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pgsz</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pgsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pgsz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>stack_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pgsz</name> <init>= <expr><call><name>page_size</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>pgsz</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name>pgsz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <name>pgsz</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>pgsz</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stack_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pgsz</name> <init>= <expr><call><name>page_size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>stack_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>pgsz</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>posix_memalign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: posix_memalign error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mprotect</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>, <argument><expr><name>PROT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: mprotect error=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>pgsz</name></expr>;</expr_stmt>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stack_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pgsz</name> <init>= <expr><call><name>page_size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name> <operator>-</operator> <name>pgsz</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mprotect</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>page_size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PROT_READ</name><operator>|</operator><name>PROT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: mprotect error=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stack_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stack_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>USE_JMP</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stack_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>stack_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<comment type="block">/* forward declare */</comment>
<function_decl><type><specifier>static</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_alloc</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>acl_fiber_hook_api</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>acl_var_hook_sys_api</name> <operator>=</operator> <name>onoff</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_scheduled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__scheduled</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>THREAD</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><operator>(</operator><name>THREAD</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>fibers</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>fibers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>original</name><operator>.</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>original</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__main_fiber</name> <operator>==</operator> <name>__thread_fiber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_schedule_main_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__main_fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>thread_free</name><argument_list>(<argument><expr><name>__main_fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>__main_fiber</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fiber_key</name></expr></argument>, <argument><expr><name>thread_free</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_key_create error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>thread_init</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_once error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <operator>(</operator><name>THREAD</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>THREAD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_JMP</name></cpp:ifdef>
	<comment type="block">/* set context NULL when using setjmp that setcontext will not be
	 * called in fiber_swap.
	 */</comment>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name><operator>.</operator><name>context</name></name> <operator>=</operator> <operator>(</operator><name>ucontext_t</name> <operator>*</operator><operator>)</operator>
		<call><name>stack_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ucontext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>size</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>__thread_fiber</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>fiber_schedule_main_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>__fiber_key</name></expr></argument>, <argument><expr><name>__thread_fiber</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"acl_pthread_setspecific error!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HOOK_ERRNO</name></cpp:ifdef>

<comment type="block">/* see /usr/include/bits/errno.h for __errno_location */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_ARM_LINUX</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name><modifier>*</modifier></type>   <name>__errno</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <modifier>*</modifier><name>__errno_location</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>acl_var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_errno</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fiber_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>__sys_errno</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>errnum</name></name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name><operator>.</operator><name>errnum</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>acl_fiber_sys_errno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_errno</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>*</operator><call><name>__sys_errno</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_sys_errno_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__sys_errno</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><call><name>__sys_errno</name><argument_list>()</argument_list></call> <operator>=</operator> <name>errnum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fcntl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_fcntl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>F_GETFD</name></expr>:</case>
	<case>case <expr><name>F_GETFL</name></expr>:</case>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>F_SETFD</name></expr>:</case>
	<case>case <expr><name>F_SETFL</name></expr>:</case>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>F_GETLK</name></expr>:</case>
	<case>case <expr><name>F_SETLK</name></expr>:</case>
	<case>case <expr><name>F_SETLKW</name></expr>:</case>
		<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>struct <name>flock</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: unknown cmd: %d, fd: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_set_errno</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fiber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>errnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_errno</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_keep_errno</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yesno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fiber</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>yesno</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>FIBER_F_SAVE_ERRNO</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FIBER_F_SAVE_ERRNO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_save_errno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curr</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_F_SAVE_ERRNO</name></expr>)</condition> <block>{<block_content>
		<comment type="line">//curr-&gt;flag &amp;= ~FIBER_F_SAVE_ERRNO;</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_errno</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_errno</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><operator>*</operator><call><name>__sys_errno</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_errno</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AVX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CLOBBER</name></cpp:macro> \
        <cpp:value>, "ymm0", "ymm1", "ymm2", "ymm3", "ymm4", "ymm5", "ymm6", "ymm7",\
        "ymm8", "ymm9", "ymm10", "ymm11", "ymm12", "ymm13", "ymm14", "ymm15"</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CLOBBER</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//	asm(".cfi_undefined rip;\r\n")</comment>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SETJMP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({\
    int ret;\
	asm("lea     LJMPRET%=(%%rip), %%rcx\n\t"\
        "xor     %%rax, %%rax\n\t"\
        "mov     %%rbx, (%%rdx)\n\t"\
        "mov     %%rbp, 8(%%rdx)\n\t"\
        "mov     %%r12, 16(%%rdx)\n\t"\
        "mov     %%rsp, 24(%%rdx)\n\t"\
        "mov     %%r13, 32(%%rdx)\n\t"\
        "mov     %%r14, 40(%%rdx)\n\t"\
        "mov     %%r15, 48(%%rdx)\n\t"\
        "mov     %%rcx, 56(%%rdx)\n\t"\
        "mov     %%rdi, 64(%%rdx)\n\t"\
        "mov     %%rsi, 72(%%rdx)\n\t"\
        "LJMPRET%=:\n\t"\
        : "=a" (ret)\
        : "d" (ctx)\
        : "memory", "rcx", "r8", "r9", "r10", "r11",\
          "xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "xmm5", "xmm6", "xmm7",\
          "xmm8", "xmm9", "xmm10", "xmm11", "xmm12", "xmm13", "xmm14", "xmm15"\
          CLOBBER\
          );\
    ret;\
})</cpp:value></cpp:define>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LONGJMP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>asm("movq   (%%rax), %%rbx\n\t"\
	"movq   8(%%rax), %%rbp\n\t"\
	"movq   16(%%rax), %%r12\n\t"\
	"movq   24(%%rax), %%rdx\n\t"\
	"movq   32(%%rax), %%r13\n\t"\
	"movq   40(%%rax), %%r14\n\t"\
	"mov    %%rdx, %%rsp\n\t"\
	"movq   48(%%rax), %%r15\n\t"\
	"movq   56(%%rax), %%rdx\n\t"\
	"movq   64(%%rax), %%rdi\n\t"\
	"movq   72(%%rax), %%rsi\n\t"\
	"jmp    *%%rdx\n\t"\
        : : "a" (ctx) : "rdx" \
    )</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SETJMP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({\
    int ret;\
    asm("movl   $LJMPRET%=, %%eax\n\t"\
	"movl   %%eax, (%%edx)\n\t"\
	"movl   %%ebx, 4(%%edx)\n\t"\
	"movl   %%esi, 8(%%edx)\n\t"\
	"movl   %%edi, 12(%%edx)\n\t"\
	"movl   %%ebp, 16(%%edx)\n\t"\
	"movl   %%esp, 20(%%edx)\n\t"\
	"xorl   %%eax, %%eax\n\t"\
	"LJMPRET%=:\n\t"\
	: "=a" (ret) : "d" (ctx) : "memory");\
	ret;\
    })</cpp:value></cpp:define>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LONGJMP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>asm("movl   (%%eax), %%edx\n\t"\
	"movl   4(%%eax), %%ebx\n\t"\
	"movl   8(%%eax), %%esi\n\t"\
	"movl   12(%%eax), %%edi\n\t"\
	"movl   16(%%eax), %%ebp\n\t"\
	"movl   20(%%eax), %%esp\n\t"\
	"jmp    *%%edx\n\t"\
	: : "a" (ctx) : "edx" \
   )</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SETJMP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>sigsetjmp(ctx, 0)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LONGJMP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>siglongjmp(ctx, 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_kick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>,<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>max</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_swap</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FIBER_STATUS_EXITING</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>slot</name> <init>= <expr><name><name>from</name><operator>-&gt;</operator><name>slot</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* if the cached dead fibers reached the limit,
		 * some will be freed
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>MAX_CACHE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>MAX_CACHE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fiber_kick</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>from</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator>
			<name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><operator>--</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><name>slot</name></expr>]</index></name><operator>-&gt;</operator><name>slot</name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_JMP</name></cpp:ifdef>
	<comment type="block">/* use setcontext() for the initial jump, as it allows us to set up
	 * a stack, but continue with longjmp() as it's much faster.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SETJMP</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* context just be used once for set up a stack, which will
		 * be freed in fiber_start. The context in __thread_fiber
		 * was set NULL.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>setcontext</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>LONGJMP</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>swapcontext</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: swapcontext error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_timer</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>intptr</name> <init>= <expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>  <name>max</name> <init>= <expr><operator>*</operator><name>intptr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>intptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_kick</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_check_timer</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>intptr</name> <init>= <expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>intptr</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>check_timer</name></expr></argument>, <argument><expr><name>intptr</name></expr></argument>, <argument><expr><literal type="number">64000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>acl_fiber_running</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_kill</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_fiber_signal</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_killed</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fiber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>fiber</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_F_KILLED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_signal</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: current fiber NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGKILL</name> <operator>||</operator> <name>signum</name> <operator>==</operator> <name>SIGTERM</name> <operator>||</operator> <name>signum</name> <operator>==</operator> <name>SIGQUIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ECANCELED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>FIBER_F_KILLED</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>signum</name></name> <operator>=</operator> <name>signum</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>curr</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// just return if kill myself</comment>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* add the current fiber and signed fiber in the head of the ready */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	acl_fiber_ready(fiber);
	acl_fiber_yield();
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_signum</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>signum</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>exitcode</name></name> <operator>=</operator> <name>exit_code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_EXITING</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_ready</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_EXITING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_yield</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>  <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>switched</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// when switched overflows, it will be set to 0, then n saved last</comment>
	<comment type="line">// switched's value will larger than switched, so we need to use</comment>
	<comment type="line">// abs function to avoiding this problem</comment>
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>switched</name></name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<union>union <name>cc_arg</name>
<block>{
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_start</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>union</name>  <name>cc_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>fiber</name> <operator>=</operator> <operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <name><name>arg</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_JMP</name></cpp:ifdef>
	<comment type="block">/* when using setjmp/longjmp, the context just be used only once */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name><name>fiber</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>free_fn</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>free_fn</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_ndead</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbase_init</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>flag</name></name>      <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>mutex_in</name></name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>mutex_out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>atomic</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fbase</name><operator>-&gt;</operator><name>mutex_waiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>atomic</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>atomic</name></name> <operator>=</operator> <call><name>acl_atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbase</name><operator>-&gt;</operator><name>atomic_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_int64_set</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbase_finish</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fbase_event_close</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_free</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name> <init>= <expr><operator>(</operator><name>FIBER_BASE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIBER_BASE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fbase_init</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>, <argument><expr><name>FBASE_F_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fbase</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fbase_free</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fbase_finish</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_VALGRIND</name></cpp:ifdef>
	<expr_stmt><expr><call><name>VALGRIND_STACK_DEREGISTER</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>vid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>fbase_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_alloc</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sigset_t</name></type> <name>zero</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>union</name> <name>cc_arg</name></name></type> <name>carg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>APPL</name></cpp:macro>	<cpp:value>ACL_RING_TO_APPL</cpp:value></cpp:define>

	<comment type="block">/* try to reuse the fiber memory in dead queue */</comment>
	<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* no using calloc just avoiding using real memory */</comment>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fbase_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>FBASE_F_FIBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>fiber</name> <operator>=</operator> <call><name>APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* if using realloc, real memory will be used, when we first
		 * free and malloc again, then we'll just use virtual memory,
		 * because memcpy will be called in realloc.
		 */</comment>
		<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>fiber</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* overflow ? */</comment>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>id</name></name>     <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>signum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>fn</name></name>     <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>arg</name></name>    <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>size</name></name>   <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>waiting</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>holding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>carg</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>(</operator><name>ucontext_t</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ucontext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ucontext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGURG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	sigaddset(&amp;zero, SIGINT);</comment>
<comment type="line">//	sigaddset(&amp;zero, SIGHUP);</comment>
	<expr_stmt><expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>getcontext</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: getcontext error: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name>   <operator>=</operator> <name><name>fiber</name><operator>-&gt;</operator><name>buff</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name> <operator>=</operator> <name><name>fiber</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_JMP</name></cpp:ifdef>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_link</name></name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name><operator>.</operator><name>context</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_VALGRIND</name></cpp:ifdef>
	<comment type="block">/* avoding the valgrind's warning */</comment>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>vid</name></name> <operator>=</operator> <call><name>VALGRIND_STACK_REGISTER</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>fiber</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name>
			<operator>+</operator> <name><name>fiber</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>makecontext</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_start</name></expr></argument>,
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>carg</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>carg</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>acl_fiber_create</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>fiber_alloc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name> <operator>&gt;=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name></name> <operator>=</operator> <operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_myrealloc</name><argument_list>(
			<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name></name></expr></argument>, 
			<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>acl_fiber_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>acl_fiber_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__called</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__called</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__called</name><operator>++</operator></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_ARM_LINUX</name></cpp:ifdef>
	<expr_stmt><expr><name>__sys_errno</name>   <operator>=</operator> <operator>(</operator><name>errno_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"__errno"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>__sys_errno</name>   <operator>=</operator> <operator>(</operator><name>errno_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"__errno_location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>__sys_fcntl</name>   <operator>=</operator> <operator>(</operator><name>fcntl_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"fcntl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hook_io</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_net</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_epoll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_schedule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_hook_api</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__scheduled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"thread-%lu: NO ACL_FIBER NOW"</literal></expr></argument>,
				<argument><expr><call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>switched</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fiber_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name></name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* release dead fiber */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>head</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_fiber_hook_api</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__scheduled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_count_inc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_count_dec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_switch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fiber</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>current</name><operator>-&gt;</operator><name>buff</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// xxx: sanity checking, just for stack size checking</comment>
	<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: left=%ld, no space to save current"</literal>
			<literal type="string">" fiber's stack, current stack=%p, start stack=%p"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>left</name></expr></argument>,
			<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fiber</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>current</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"thread-%lu: NO FIBER in ready"</literal></expr></argument>,
			<argument><expr><call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_swap</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//fiber-&gt;status = FIBER_STATUS_READY;</comment>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>switched</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fiber_swap</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_set_specific</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_LOCAL</name> <modifier>*</modifier></type><name>local</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: key NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: __thread_fiber: NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: running: NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <operator>++</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>key</name> <operator>&gt;</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid key: %d &gt; nlocal: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><operator>*</operator><name>key</name></expr></argument>, <argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>&lt;</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>locals</name></name> <operator>=</operator> <operator>(</operator><name>FIBER_LOCAL</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_myrealloc</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>,
			<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FIBER_LOCAL</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>local</name> <operator>=</operator> <operator>(</operator><name>FIBER_LOCAL</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIBER_LOCAL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>locals</name><index>[<expr><operator>*</operator><name>key</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt>

	<return>return <expr><operator>*</operator><name>key</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_fiber_get_specific</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_LOCAL</name> <modifier>*</modifier></type><name>local</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: __thread_fiber NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: running fiber NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>local</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>key</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><name>local</name></expr> ?</condition><then> <expr><name><name>local</name><operator>-&gt;</operator><name>ctx</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
