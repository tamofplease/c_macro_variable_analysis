<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c.old/src/event.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_epoll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>

<comment type="line">//#define DEBUG</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT</name></cpp:macro> <cpp:value>assert</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT</name></cpp:macro> <cpp:value>(void)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>event_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name>   <init>= <expr><call><name>event_epoll_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name>   <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name></name> <operator>=</operator> <operator>(</operator><name>DEFER_DELETE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name></name> <operator>=</operator> <operator>(</operator><name>DEFER_DELETE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>fired</name></name>    <operator>=</operator> <operator>(</operator><name>FIRED_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIRED_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name>  <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name>    <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_RING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name>  <operator>=</operator> <call><name>acl_stack_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name> <operator>=</operator> <call><name>acl_stack_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name>  <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name> <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Events with mask == AE_NONE are not set. So let's initialize the
	 * vector with it.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name>       <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask_fired</name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r_defer</name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w_defer</name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event_name</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>ev</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_handle</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>ev</name><operator>-&gt;</operator><name>handle</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the current set size. */</comment>
<function><type><name>int</name></type> <name>event_size</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_free</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name>   <modifier>*</modifier></type><name>events</name>   <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIRED_EVENT</name>  <modifier>*</modifier></type><name>fired</name>    <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>fired</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DEFER_DELETE</name> <modifier>*</modifier></type><name>r_defers</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DEFER_DELETE</name> <modifier>*</modifier></type><name>w_defers</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>acl_stack_destroy</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_stack_destroy</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_RING</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>acl_fifo_free</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_free</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>r_defers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>w_defers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>fired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_fdtype</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>s</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fd: %d fstat error %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (S_ISLNK(s.st_mode))
		acl_msg_info("fd %d S_ISLNK", fd);
	else if (S_ISREG(s.st_mode))
		acl_msg_info("fd %d S_ISREG", fd);
	else if (S_ISDIR(s.st_mode))
		acl_msg_info("fd %d S_ISDIR", fd);
	else if (S_ISCHR(s.st_mode))
		acl_msg_info("fd %d S_ISCHR", fd);
	else if (S_ISBLK(s.st_mode))
		acl_msg_info("fd %d S_ISBLK", fd);
	else if (S_ISFIFO(s.st_mode))
		acl_msg_info("fd %d S_ISFIFO", fd);
	else if (S_ISSOCK(s.st_mode))
		acl_msg_info("fd %d S_ISSOCK", fd);
	else
		acl_msg_error("fd: %d, unknoiwn st_mode: %d", fd, s.st_mode);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISFIFO</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEL_DELAY</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEL_DELAY</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>event_defer_r_merge</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd2</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>r_defer</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>to_mask</name> <init>= <expr><name>mask</name> <operator>|</operator> <operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>mask</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>to_mask</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd2</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>mask</name>  <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>pos</name>   <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>fd</name>    <operator>=</operator> <name>fd2</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd2</name></expr>]</index></name><operator>.</operator><name>r_defer</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fd2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd2</name></expr>]</index></name><operator>.</operator><name>r_defer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>to_mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): mod fd(%d) error=%s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_defer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name>    <operator>=</operator> <name>to_mask</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_defer_w_merge</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd2</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>w_defer</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>to_mask</name> <init>= <expr><name>mask</name> <operator>|</operator> <operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>mask</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>to_mask</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd2</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>mask</name>  <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>pos</name>   <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>fd</name>    <operator>=</operator> <name>fd2</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd2</name></expr>]</index></name><operator>.</operator><name>w_defer</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fd2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd2</name></expr>]</index></name><operator>.</operator><name>w_defer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>to_mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): mod fd(%d) error=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_defer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name>    <operator>=</operator> <name>to_mask</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !DEL_DELAY */</comment>

<function><type><name>int</name></type> <name>event_add</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>event_proc</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nmerged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"fd: %d &gt;= setsize: %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_NOSOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_NONE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>check_fdtype</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SOCK</name></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_NOSOCK</name></expr>;</expr_stmt>
			<comment type="line">// return 0;</comment>
			<comment type="line">// call epoll_ctl by ev-&gt;add to try ADD this fd</comment>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DEL_DELAY</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_defer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>event_defer_r_merge</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>nmerged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_defer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>event_defer_w_merge</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>nmerged</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>nmerged</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
			acl_msg_error("%s, %s(%d): add fd(%d) error: %s",
				__FILE__, __FUNCTION__, __LINE__,
				fd, acl_last_serror());
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_NOSOCK</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SOCK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_ctx</name></name>  <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_ctx</name></name>  <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__event_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"fd: %d &gt;= setsize: %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>EVENT_NONE</name> <operator>||</operator> <name>mask</name> <operator>==</operator> <name>EVENT_ERROR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask_fired</name></name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_defer</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_defer</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>pe</name></name>         <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>del</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask_fired</name></name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name>       <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>pe</name></name>         <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name>       <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name>       <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>EVENT_NONE</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Update the max fd */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>!=</operator> <name>EVENT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DEL_DELAY</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_defer_r_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>r_defer</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>pos</name>  <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_defer</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>fd</name>   <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

		<comment type="block">/* move the last item here */</comment>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>r_defer</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>r_defer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_defer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_defer_w_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>w_defer</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>pos</name>  <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_defer</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>fd</name>   <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

		<comment type="block">/* move the last item here */</comment>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>w_defer</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>w_defer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_defer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_error_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>r_defer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_defer_r_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>w_defer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_defer_w_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>__event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_defer_r_add</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name>   <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>EVENT_READABLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name><operator>.</operator><name>pos</name>  <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>r_defer</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_defer_w_add</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>fd</name>   <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>EVENT_WRITABLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name><operator>.</operator><name>pos</name>  <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>w_defer</name> <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_NOSOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>EVENT_ERROR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>event_error_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>event_defer_r_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>event_defer_w_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type> <name>event_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>event_del_nodelay</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !DEL_DELAY */</comment>

<function><type><name>void</name></type> <name>event_del_nodelay</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TYPE_NOSOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>TYPE_NONE</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_process</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>numevents</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>rfired</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DEL_DELAY</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type> <name>ndefer</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* limit the event wait time just for fiber schedule exiting
	 * quickly when no tasks left
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">1000</literal> <operator>||</operator> <name>timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DEL_DELAY</name></cpp:ifdef>
	<expr_stmt><expr><name>ndefer</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ndefer</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>__event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>]</index></name><operator>.</operator><name>r_defer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_defers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>r_ndefer</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ndefer</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ndefer</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>__event_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>]</index></name><operator>.</operator><name>w_defer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_defers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>w_ndefer</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>numevents</name> <operator>=</operator> <call><name><name>ev</name><operator>-&gt;</operator><name>loop</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numevents</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fd</name>             <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mask</name>           <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fe</name>             <operator>=</operator> <operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask_fired</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

		<comment type="block">/* note the fe-&gt;mask &amp; mask &amp; ... code: maybe an already
		 * processed event removed an element that fired and we
		 * still didn't processed, so we check if the event is
		 * still valid.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rfired</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>r_ctx</name></name></expr></argument>, <argument><expr><name>EVENT_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>rfired</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rfired</name> <operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>w_ctx</name></name></expr></argument>, <argument><expr><name>EVENT_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_RING</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_APPL</name></cpp:macro>	<cpp:value>acl_ring_to_appl</cpp:value></cpp:define>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>pe</name> <operator>=</operator> <call><name>TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>POLL_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pe</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>EPOLL_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ee</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><call><name>acl_stack_pop</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name><name>pe</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><call><name>acl_stack_pop</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name><name>ee</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name> <init>= <expr><call><name>acl_fifo_pop</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name><name>pe</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><call><name>acl_fifo_pop</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name><name>ee</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* return the number of processed file/time events */</comment>
	<return>return <expr><name>processed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_readable</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"fd: %d &gt;= setsize: %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask_fired</name> <operator>&amp;</operator> <name>EVENT_READABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_writeable</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"fd: %d &gt;= setsize: %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask_fired</name> <operator>&amp;</operator> <name>EVENT_WRITABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_clear_readable</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"fd: %d &gt;= setsize: %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask_fired</name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READABLE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_clear_writeable</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"fd: %d &gt;= setsize: %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask_fired</name> <operator>&amp;=</operator> <operator>~</operator> <name>EVENT_WRITABLE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_clear</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"fd: %d &gt;= setsize: %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask_fired</name> <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
