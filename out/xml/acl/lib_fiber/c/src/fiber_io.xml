<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/fiber_io.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/gettimeofday.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook/hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>EVENT</name>     <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>ev_fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name></type>       <name>ev_timer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>nsleeping</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>io_stop</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<decl_stmt><decl><type><name>HTABLE</name>     <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier><modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>ARRAY</name>      <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>cache_max</name></decl>;</decl_stmt>
}</block></struct></type> <name>FIBER_TLS</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>FIBER_TLS</name> <modifier>*</modifier></type><name>__main_fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>FIBER_TLS</name> <modifier>*</modifier></type><name>__thread_fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fiber_io_loop</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXFD</name></cpp:macro>		<cpp:value>10240</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SIZE</name></cpp:macro>	<cpp:value>819200</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>var_maxfd</name> <init>= <expr><name>MAXFD</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>acl_fiber_schedule_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_TO_FIBER</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((ACL_FIBER *) ((char *) (r) - offsetof(ACL_FIBER, me)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_FIBER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(ring_succ(head) != (head) ? RING_TO_FIBER(ring_succ(head)) : 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>__fiber_key</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>(</operator><name>FILE_EVENT</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_TLS</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><operator>(</operator><name>FIBER_TLS</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tf</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<expr_stmt><expr><call><name>htable_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>free_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__main_fiber</name> <operator>==</operator> <name>__thread_fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_io_main_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__main_fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>thread_free</name><argument_list>(<argument><expr><name>__main_fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>__main_fiber</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fiber_key</name></expr></argument>, <argument><expr><name>thread_free</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_key_create error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>var_maxfd</name> <operator>=</operator> <call><name>open_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>var_maxfd</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>var_maxfd</name> <operator>=</operator> <name>MAXFD</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <operator>(</operator><name>FIBER_TLS</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIBER_TLS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <call><name>event_create</name><argument_list>(<argument><expr><name>var_maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_fiber</name></name>  <operator>=</operator> <call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_io_loop</name></expr></argument>,
			<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nsleeping</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_stop</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>htable_create</name><argument_list>(<argument><expr><name>var_maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>mem_calloc</name><argument_list>(<argument><expr><name>var_maxfd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_EVENT</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>cache</name></name>     <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>ARRAY_F_UNORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>cache_max</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>thread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>__thread_fiber</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>fiber_io_main_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>__fiber_key</name></expr></argument>, <argument><expr><name>__thread_fiber</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"pthread_setspecific error!\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Notice: don't write log here to avoid recursive calling when user call</comment>
<comment type="line">// acl_fiber_msg_register() to hook the log process.</comment>

<function><type><name>void</name></type> <name>fiber_io_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_fiber</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_fiber</name></name>  <operator>=</operator> <call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_io_loop</name></expr></argument>,
				<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nsleeping</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_stop</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>thread_once</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_once error %s\r\n"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>thread_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>fiber_io_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>fiber_io_stamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_io_loop</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>self</name></type> <name>fiber_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<while>while <condition>(<expr><call><name>acl_fiber_yield</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content/>}</block></while>

		<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>now</name>  <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;=</operator> <name><name>timer</name><operator>-&gt;</operator><name>when</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>timer</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name>now</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">//assert(left &lt; INT_MAX);</comment>

		<comment type="block">/* Add 1 just for the deviation of epoll_wait */</comment>
		<expr_stmt><expr><call><name>event_process</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><ternary><condition><expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name>left</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>io_stop</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): io_stop set!"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>


		<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Try again before exiting the IO fiber loop, some
			 * other fiber maybe in the ready queue and wants to
			 * add some IO event.
			 */</comment>
			<while>while <condition>(<expr><call><name>acl_fiber_yield</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content/>}</block></while>

			<if_stmt><if>if <condition>(<comment type="block">/*ev-&gt;fdcount &gt; 0 || */</comment> <expr><name><name>ev</name><operator>-&gt;</operator><name>waiter</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			
			<comment type="line">// Only sleep fiber alive ?</comment>
			<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>timer</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), tid=%lu: fdcount=0, waiter=%u, events=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>thread_self</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>waiter</name></name></expr></argument>, <argument><expr><call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name>last</name> <operator>&lt;</operator> <name>left</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<do>do <block>{<block_content>
			<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>timer</name><operator>-&gt;</operator><name>sys</name></name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nsleeping</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fiber_count_dec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_NONE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>timer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>now</name> <operator>&gt;=</operator> <name><name>timer</name><operator>-&gt;</operator><name>when</name></name></expr>)</condition>;</do>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), tid=%lu: IO fiber exit now"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>thread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Don't set ev_fiber NULL here, using fiber_io_clear() to set it NULL</comment>
	<comment type="line">// in acl_fiber_schedule() after scheduling finished.</comment>
	<comment type="line">// </comment>
	<comment type="line">// __thread_fiber-&gt;ev_fiber = NULL;</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_io_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_fiber</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_MIN</name></cpp:macro></cpp:define>

<function><type><name>unsigned</name> <name>int</name></type> <name>acl_fiber_delay</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>when</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>doze</name><argument_list>(<argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>when</name> <operator>=</operator> <name>now</name> <operator>+</operator> <name>milliseconds</name></expr>;</expr_stmt>

	<comment type="block">/* The timers in the ring were stored from small to large in ascending
	 * order, and we walk through the ring from head to tail until the
	 * current time is less than the timer's stamp, and the new timer will
	 * be prepend to the timer found.
	 */</comment>
	<macro><name>ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;__thread_fiber-&gt;ev_timer</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>ring_to_appl</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>when</name> <operator>&lt;</operator> <name><name>fiber</name><operator>-&gt;</operator><name>when</name></name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <name>when</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fiber</name><operator>-&gt;</operator><name>sys</name></name> <operator>&amp;&amp;</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>nsleeping</name></name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_count_inc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>CHECK_MIN</name></cpp:ifdef>
	<comment type="block">/* Compute the event waiting interval according the timers' head */</comment>
	<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If the first timer has been expired, we should wakeup it
		 * immediately, so the event waiting interval should be set 0.
		 */</comment>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Then we use the interval between the first timer and now */</comment>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name>now</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ev_timer</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&lt;</operator> <name>when</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name>when</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_timer_callback</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>fiber_io_stamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>left</name> <operator>=</operator> <ternary><condition><expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>&gt;</operator> <name>now</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name>now</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_fiber_delay</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>fiber_io_stamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name><name>fiber</name><operator>-&gt;</operator><name>timer_fn</name></name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fiber_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>acl_fiber_create_timer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>milliseconds</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>when</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>when</name> <operator>=</operator> <call><name>fiber_io_stamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>when</name> <operator>+=</operator> <name>milliseconds</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>fiber</name>           <operator>=</operator> <call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_timer_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name>     <operator>=</operator> <name>when</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>timer_fn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
	<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_reset_timer</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>when</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>when</name> <operator>=</operator> <call><name>fiber_io_stamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>when</name> <operator>+=</operator> <name>milliseconds</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>when</name></name> <operator>=</operator> <name>when</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>acl_fiber_sleep</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_delay</name><argument_list>(<argument><expr><name>seconds</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_del_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If the reader fiber has been set in ready status when the
	 * other fiber killed the reader fiber, the reader fiber should
	 * not be set in ready queue again.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_READY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Set fd in reading status by adding it to the event set if the fd is a
 * valid socket or pipe, or return immediately if the fd is not a valid
 * socket. In event_add_read the fd holding in fe will be checking if it's
 * a socket for the first time.
 */</comment>
<function><type><name>int</name></type> <name>fiber_wait_read</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// When return 0 just let it go continue</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>event_add_read</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_WAIT_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_INTERNAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_INTERNAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_del_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If the writer fiber has been set in ready status when the
	 * other fiber killed the writer fiber, the writer fiber should
	 * not be set in ready queue again.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_READY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fiber_wait_write</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>event_add_write</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_WAIT_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fiber_file_get</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//_snprintf(key, sizeof(key), "%u", fd);</comment>
	<expr_stmt><expr><call><name>_i64toa</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// key's space large enougth</comment>

	<return>return <expr><operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>htable_find</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;=</operator> <name>INVALID_SOCKET</name> <operator>||</operator> <name>fd</name> <operator>&gt;=</operator> <name>var_maxfd</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fd=%d\r\n"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fd=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_file_set</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="line">//_snprintf(key, sizeof(key), "%u", fe-&gt;fd);</comment>
	<expr_stmt><expr><call><name>_i64toa</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>htable_enter</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;=</operator> <name>INVALID_SOCKET</name> <operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <operator>(</operator><name>socket_t</name><operator>)</operator> <name>var_maxfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fd=%d\r\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): exist fd=%d, old=%p new=%p\r\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>]</index></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fiber_file_open_read</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>fiber_file_get</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>file_event_alloc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_file_set</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name> <operator>&amp;&amp;</operator> <call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_DIRECT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* We can't set the fe's type here because it'll effect the DGRAM IO,
	 * so, we'll set the fe's sock type in event.c.
	 */</comment>
	<comment type="line">// Don't set fiber_r here, which will be set in fiber_wait_read()</comment>
	<comment type="line">//fe-&gt;fiber_r = acl_fiber_running();</comment>
	<return>return <expr><name>fe</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fiber_file_open_write</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>fiber_file_get</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>file_event_alloc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_file_set</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name> <operator>&amp;&amp;</operator> <call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_DIRECT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Don't set fiber_w here, which will be set in fiber_wait_write()</comment>
	<comment type="line">//fe-&gt;fiber_w = acl_fiber_running();</comment>
	<return>return <expr><name>fe</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_set_sysio</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_get</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>file_event_alloc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_file_set</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_SYSIO</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fiber_file_del</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_SOCKET</name> <operator>||</operator> <name>fd</name> <operator>&gt;=</operator> <operator>(</operator><name>socket_t</name><operator>)</operator> <name>var_maxfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fd=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//_snprintf(key, sizeof(key), "%u", fe-&gt;fd);</comment>
	<expr_stmt><expr><call><name>_i64toa</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>htable_delete</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_SOCKET</name> <operator>||</operator> <name>fd</name> <operator>&gt;=</operator> <name>var_maxfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fd=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>!=</operator> <name>fe</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fe=%p, fd=%d, origin=%p"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_file_free</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>fd</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// We must set fd INVALID_SOCKET to stop any using the old fd,</comment>
	<comment type="line">// fe will be freed only when the reference of it is 0.</comment>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fiber_file_del</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// xxx: What happened?</comment>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): some error happened for fe=%p, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_file_close</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// At first, we should remove the IO event for the fd.</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_CLOSING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>event</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>event_close</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IS_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name> <operator>!=</operator> <name>curr</name>
		<operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_EXITING</name></expr>)</condition> <block>{<block_content>
		<comment type="line">//&amp;&amp; fe-&gt;fiber_r-&gt;status &gt;= FIBER_STATUS_WAIT_READ</comment>
		<comment type="line">//&amp;&amp; fe-&gt;fiber_r-&gt;status &lt;= FIBER_STATUS_EPOLL_WAIT) {</comment>

		<comment type="line">// The current fiber is closing the other fiber's fd, and the</comment>
		<comment type="line">// other fiber hoding the fd is blocked by waiting for the</comment>
		<comment type="line">// fd to be ready, so we just notify the blocked fiber to</comment>
		<comment type="line">// wakeup from read waiting status.</comment>

		<expr_stmt><expr><call><name>SET_CLOSING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>file_cancel</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>CANCEL_IO_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_kill</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>acl_fiber_kill</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IS_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name> <operator>!=</operator> <name>curr</name>
		<operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_EXITING</name></expr>)</condition> <block>{<block_content>
		<comment type="line">//&amp;&amp; fe-&gt;fiber_w-&gt;status &gt;= FIBER_STATUS_WAIT_READ</comment>
		<comment type="line">//&amp;&amp; fe-&gt;fiber_w-&gt;status &lt;= FIBER_STATUS_EPOLL_WAIT) {</comment>

		<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_CLOSING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>file_cancel</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>CANCEL_IO_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_kill</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>acl_fiber_kill</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fiber_file_cache_get</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_io_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name><operator>*</operator><operator>)</operator> <call><name>array_pop_back</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>file_event_alloc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>file_event_init</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name> <operator>&amp;&amp;</operator> <call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_DIRECT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>fiber_file_set</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fe</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_file_cache_put</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_file_del</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>array_size</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>cache_max</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_push_back</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>
</unit>
