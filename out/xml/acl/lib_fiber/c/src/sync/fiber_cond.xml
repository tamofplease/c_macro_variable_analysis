<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/sync/fiber_cond.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/fiber_cond.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/pthread_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sync_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sync_timer.h"</cpp:file></cpp:include>

<function><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>acl_fiber_cond_create</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>flag</name></type> <name>fiber_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>cond</name> <init>= <expr><operator>(</operator><name>ACL_FIBER_COND</name> <operator>*</operator><operator>)</operator>
		<call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER_COND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name> <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ARRAY_F_UNORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>cond</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_cond_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LOCK_COND</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	int n = pthread_mutex_lock(&amp;(c)-&gt;mutex);  \
	if (n) {  \
		acl_fiber_set_error(n);  \
		msg_fatal("%s(%d), %s: pthread_mutex_lock error=%s",  \
			__FILE__, __LINE__, __FUNCTION__, last_serror());  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>UNLOCK_COND</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	int n = pthread_mutex_unlock(&amp;(c)-&gt;mutex);  \
	if (n) {  \
		acl_fiber_set_error(n);  \
		msg_fatal("%s(%d), %s: pthread_mutex_unlock error=%s",  \
			__FILE__, __LINE__, __FUNCTION__, last_serror());  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>FIBER_LOCK</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	int n = acl_fiber_mutex_lock(l);  \
	if (n) {  \
		acl_fiber_set_error(n);  \
		msg_fatal("%s(%d), %s: acl_fiber_mutex_lock error=%s",  \
			__FILE__, __LINE__, __FUNCTION__, last_serror());  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>FIBER_UNLOCK</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	int n = acl_fiber_mutex_unlock(l);  \
	if (n) {  \
		acl_fiber_set_error(n);  \
		msg_fatal("%s(%d), %s: acl_fiber_mutex_unlock error=%s",  \
			__FILE__, __LINE__, __FUNCTION__, last_serror());  \
	}  \
} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fiber_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name>        <init>= <expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name>    <init>= <expr><call><name>sync_obj_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name>   <operator>=</operator> <name>SYNC_OBJ_T_FIBER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>fb</name></name>     <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>delay</name></name>  <operator>=</operator> <name>delay</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>cond</name></name>   <operator>=</operator> <name>cond</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>timer</name></name>  <operator>=</operator> <call><name>sync_timer_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UNLOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sync_timer_await</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FIBER_UNLOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FIBER_LOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_delete_obj</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UNLOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>SYNC_STATUS_TIMEOUT</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// The obj has been deleted in sync_timer.c when timeout.</comment>
		<expr_stmt><expr><call><name>sync_obj_unrefer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FIBER_ETIME</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>sync_obj_unrefer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Create one waiting object with the one reference added, which can</comment>
	<comment type="line">// be used by multiple threads, and will be released really when its</comment>
	<comment type="line">// refernece is zero.</comment>
	<decl_stmt><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>sync_obj_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SYNC_OBJ_T_THREAD</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>fbase_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>tid</name></name>  <operator>=</operator> <operator>(</operator><name>pthread_t</name><operator>)</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// The in/out fds opened by fbase_event_open() will be closed</comment>
	<comment type="line">// in sync_obj_unrefer().</comment>
	<expr_stmt><expr><call><name>fbase_event_open</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UNLOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FIBER_UNLOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>read_wait</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>LOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_delete_obj</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>UNLOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>FIBER_LOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sync_obj_unrefer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FIBER_ETIME</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fbase_event_wait</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: wait event error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_delete_obj</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>UNLOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>FIBER_LOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sync_obj_unrefer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FIBER_EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FIBER_LOCK</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sync_obj_unrefer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>delay_ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>fiber_cond_timedwait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>delay_ms</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name>thread_cond_timedwait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>delay_ms</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_cond_wait</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_cond_timedwait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_cond_signal</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>SYNC_OBJ</name><operator>*</operator><operator>)</operator> <call><name>array_head</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>UNLOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SYNC_OBJ_T_FIBER</name></expr>:</case>
	<case>case <expr><name>SYNC_OBJ_T_THREAD</name></expr>:</case>
		<expr_stmt><expr><call><name>sync_obj_refer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>array_pop_front</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown type=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>UNLOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// If the waiter is a fiber, we should use sync_timer_wakeup() to</comment>
	<comment type="line">// notify the fiber, or if it's a thread, we should use the</comment>
	<comment type="line">// fbase_event_wakeup() to notify it.</comment>
	<comment type="line">// That is to say, a fiber waiter is managed by the sync_timer, and</comment>
	<comment type="line">// the thread waiter uses a temporary IO to wait for a notice.</comment>
	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SYNC_OBJ_T_FIBER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sync_timer_wakeup</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SYNC_OBJ_T_THREAD</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>socket_t</name></type> <name>out</name> <init>= <expr><name><name>obj</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>event_out</name></name></expr></init></decl>;</decl_stmt>
			<comment type="line">// The waiter is a thread, the out fd is temporaryly</comment>
			<comment type="line">// created by the thread waiter, so we just use one</comment>
			<comment type="line">// temporary FILE_EVENT to bind the out fd, and</comment>
			<comment type="line">// release it after notify the waiter thread.</comment>
			<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>fiber_file_cache_get</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_SYSIO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fbase_event_wakeup</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fiber_file_cache_put</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fbase_event_wakeup</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown type=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Unrefer the waiter object, which will be really freed when its</comment>
	<comment type="line">// reference is zero. It's safely that the waiter object is used</comment>
	<comment type="line">// by multiple threads with using the reference way.</comment>
	<expr_stmt><expr><call><name>sync_obj_unrefer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fiber_cond_delete_waiter</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_COND</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>array_delete_obj</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UNLOCK_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
