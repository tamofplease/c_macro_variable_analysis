<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/sync/fiber_event.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<struct>struct <name>ACL_FIBER_EVENT</name> <block>{
	<decl_stmt><decl><type><name>FIBER_BASE</name>   <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ATOMIC</name>       <modifier>*</modifier></type><name>atomic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type>     <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name></type>          <name>waiters</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>flag</name></decl>;</decl_stmt>

	<union>union <block>{
		<decl_stmt><decl><type><name>pthread_mutex_t</name></type>   <name>tlock</name></decl>;</decl_stmt>
		<struct>struct <block>{
			<decl_stmt><decl><type><name>ATOMIC</name>   <modifier>*</modifier></type><name>alock</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl>;</decl_stmt>
		}</block> <decl><name>atomic</name></decl>;</struct>
	}</block> <decl><name>lock</name></decl>;</union>
}</block>;</struct>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_ferror</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_EVENT</name><modifier>*</modifier></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_FLAG_USE_FATAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><name>ACL_FIBER_EVENT</name> <modifier>*</modifier></type><name>acl_fiber_event_create</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER_EVENT</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><operator>(</operator><name>ACL_FIBER_EVENT</name> <operator>*</operator><operator>)</operator>
		<call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>tid</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>flag</name></name>  <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name> <operator>=</operator> <call><name>atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_set</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_int64_set</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FIBER_FLAG_USE_MUTEX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
		<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>tlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>tlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>atomic</name><operator>.</operator><name>alock</name></name> <operator>=</operator> <call><name>atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atomic_set</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>atomic</name><operator>.</operator><name>alock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>atomic</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atomic_int64_set</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>atomic</name><operator>.</operator><name>alock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>event</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_event_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>atomic_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_FLAG_USE_MUTEX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>tlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>atomic_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>atomic</name><operator>.</operator><name>alock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__ll_lock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_FLAG_USE_MUTEX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><call><name>atomic_int64_cas</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>atomic</name><operator>.</operator><name>alock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content/>}</block></while>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>tlock</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_lock error=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__ll_unlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_FLAG_USE_MUTEX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>atomic_int64_cas</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>atomic</name><operator>.</operator><name>alock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: lock corrupt"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>tlock</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_unlock error=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_event_wait</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name>  <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>    <name>wakeup</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>atomic_int64_cas</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><call><name>atomic_int64_cas</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>__ll_lock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>base</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>tid</name></name>   <operator>=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__ll_unlock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// FIBER_BASE obj will be created if is not in fiber scheduled</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fbase</name> <operator>=</operator> <call><name>fbase_alloc</name><argument_list>(<argument><expr><name>FBASE_F_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fbase</name> <operator>=</operator> <name><name>fiber</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>fbase</name> <operator>=</operator> <call><name>fbase_alloc</name><argument_list>(<argument><expr><name>FBASE_F_FIBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>fbase_event_open</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>wakeup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>__ll_lock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbase</name><operator>-&gt;</operator><name>event_waiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>atomic_int64_cas</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wakeup</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fbase</name><operator>-&gt;</operator><name>event_waiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>fbase</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>tid</name></name>   <operator>=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>__ll_unlock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>wakeup</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbase</name><operator>-&gt;</operator><name>event_waiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>__ll_unlock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>fbase_event_wait</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fbase_event_close</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FBASE_F_BASE</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fbase_free</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>event_ferror</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="string">"%s(%d), %s: event wait error %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>fbase_event_close</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FBASE_F_BASE</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fbase_free</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// overflow ?</comment>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>wakeup</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>wakeup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>__ll_lock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>fbase_event_close</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FBASE_F_BASE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__ll_lock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>fbase</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>__ll_unlock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fbase_free</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>acl_fiber_event_trywait</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>atomic_int64_cas</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>__ll_lock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name>     <operator>=</operator> <ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>base</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>tid</name></name>       <operator>=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__ll_unlock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_event_notify</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name>  <modifier>*</modifier></type><name>curr</name>  <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><ternary><condition><expr><name>curr</name></expr> ?</condition><then> <expr><name><name>curr</name><operator>-&gt;</operator><name>base</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>waiter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name>       <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>!=</operator> <name>owner</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_ferror</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="string">"%s(%d), %s: fiber(%p) isn't owner(%p)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>NULL</name>
		<operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>event_ferror</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="string">"%s(%d), %s: tid(%lu) isn't owner(%lu)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name><name>event</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><call><name>__pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>__ll_lock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>head</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>waiter</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>FIBER_BASE</name></expr></argument>, <argument><expr><name>event_waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>waiter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>tid</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>atomic_int64_cas</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__ll_unlock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>event_ferror</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="string">"%s(%d), %s: atomic corrupt"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>__ll_unlock</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>waiter</name> <operator>&amp;&amp;</operator> <call><name>fbase_event_wakeup</name><argument_list>(<argument><expr><name>waiter</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_ferror</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="string">"%s(%d), %s: wakup waiter error=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
