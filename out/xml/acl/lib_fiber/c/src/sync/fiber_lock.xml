<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/sync/fiber_lock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<struct>struct <name>ACL_FIBER_LOCK</name> <block>{
	<decl_stmt><decl><type><name>RING</name></type>       <name>me</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name></type>       <name>waiting</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ACL_FIBER_RWLOCK</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>        <name>readers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>writer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name></type>       <name>rwaiting</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name></type>       <name>wwaiting</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>ACL_FIBER_LOCK</name> <modifier>*</modifier></type><name>acl_fiber_lock_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER_LOCK</name> <modifier>*</modifier></type><name>lk</name> <init>= <expr><operator>(</operator><name>ACL_FIBER_LOCK</name> <operator>*</operator><operator>)</operator>
		<call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER_LOCK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>waiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>lk</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_lock_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_LOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>lk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__lock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_LOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>holding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// xxx: no support recursion lock</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name> <operator>!=</operator> <name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>waiting</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>waiting</name></name> <operator>=</operator> <name>lk</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Just for avoiding fiber_io_loop to exit</comment>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if switch to me because other killed me, I should detach myself;
	 * else if because other unlock, I'll be detached twice which is
	 * hamless because RING can deal with it.
	 */</comment>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>curr</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: lock fiber-%u was killed"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: qlock: owner=%p self=%p oops"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_lock_lock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_LOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>__lock</name><argument_list>(<argument><expr><name>lk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_lock_trylock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_LOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><call><name>__lock</name><argument_list>(<argument><expr><name>lk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_TO_FIBER</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>((ACL_FIBER *) ((char *) (r) - offsetof(ACL_FIBER, me)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_FIBER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>(ring_succ(head) != (head) ? RING_TO_FIBER(ring_succ(head)) : 0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>acl_fiber_lock_unlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_LOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>ready</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>curr</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: qunlock: owner NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name> <operator>!=</operator> <name>curr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid owner=%p, %p"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ready</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>waiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lk</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>ready</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ready</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<function><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>acl_fiber_rwlock_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name> <init>= <expr><operator>(</operator><name>ACL_FIBER_RWLOCK</name> <operator>*</operator><operator>)</operator>
		<call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER_RWLOCK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>readers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>writer</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>rwaiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>wwaiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>lk</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_rwlock_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>lk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__rlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>writer</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>wwaiting</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>readers</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>rwaiting</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Just for avoiding fiber_io_loop to exit</comment>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if switch to me because other killed me, I should detach myself */</comment>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_rwlock_rlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>__rlock</name><argument_list>(<argument><expr><name>lk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_rwlock_tryrlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>__rlock</name><argument_list>(<argument><expr><name>lk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__wlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>writer</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>lk</name><operator>-&gt;</operator><name>readers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>writer</name></name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>wwaiting</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Just for avoiding fiber_io_loop to exit</comment>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if switch to me because other killed me, I should detach myself */</comment>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_rwlock_wlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>__wlock</name><argument_list>(<argument><expr><name>lk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_rwlock_trywlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>__wlock</name><argument_list>(<argument><expr><name>lk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_rwlock_runlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>lk</name><operator>-&gt;</operator><name>readers</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>fiber</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>wwaiting</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>wwaiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>writer</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_rwlock_wunlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_RWLOCK</name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>writer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: wunlock: not locked"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>writer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>readers</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: wunlock: readers"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>fiber</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>rwaiting</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>rwaiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>readers</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>lk</name><operator>-&gt;</operator><name>readers</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>fiber</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>wwaiting</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>wwaiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lk</name><operator>-&gt;</operator><name>writer</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
