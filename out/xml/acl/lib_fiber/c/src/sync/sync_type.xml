<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/sync/sync_type.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sync_type.h"</cpp:file></cpp:include>

<function><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>sync_obj_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shared</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>SYNC_OBJ</name><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYNC_OBJ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>shared</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name> <operator>=</operator> <call><name>atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atomic_set</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>atomic_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atomic_int64_set</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_obj_free</name><parameter_list>(<parameter><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>atomic_free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fbase_event_close</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fbase_free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>sync_obj_refer</name><parameter_list>(<parameter><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>sync_obj_unrefer</name><parameter_list>(<parameter><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>sync_obj_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>n</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>sync_obj_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
