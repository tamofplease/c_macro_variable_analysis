<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/sync/fiber_sem.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<struct>struct <name>ACL_FIBER_SEM</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name></type> <name>waiting</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tid</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>acl_fiber_sem_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name> <init>= <expr><operator>(</operator><name>ACL_FIBER_SEM</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER_SEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>waiting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>sem</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_sem_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>acl_fiber_sem_get_tid</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_sem_set_tid</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>tid</name> <operator>&amp;&amp;</operator> <call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>waiting</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: curr sem waiting=%d not empty"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>waiting</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_sem_num</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_sem_wait</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	else if (sem-&gt;tid != __pthread_self()) {
		msg_error("%s(%d): current tid=%lu, sem tid=%lu",
			__FUNCTION__, __LINE__, __pthread_self(), sem-&gt;tid);
		return -1;
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>waiting</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Just for avoiding fiber_io_loop to exit</comment>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If switch to me because other killed me, I should detach myself;
	 * else if because other unlock, I'll be detached twice which is
	 * hamless because RIGN can deal with it.
	 */</comment>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fiber-%d be killed"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_sem_trywait</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	else if (sem-&gt;tid != __pthread_self()) {
		msg_error("%s(%d): current tid=%lu, sem tid=%lu",
			__FUNCTION__, __LINE__, __pthread_self(), sem-&gt;tid);
		return -1;
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_TO_FIBER</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>((ACL_FIBER *) ((char *) (r) - offsetof(ACL_FIBER, me)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_FIBER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>(ring_succ(head) != (head) ? RING_TO_FIBER(ring_succ(head)) : 0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>acl_fiber_sem_post</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_SEM</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>ready</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	else if (sem-&gt;tid != __pthread_self()) {
		msg_error("%s(%d): current tid=%lu, sem tid=%lu",
			__FUNCTION__, __LINE__, __pthread_self(), sem-&gt;tid);
		return -1;
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ready</name> <operator>=</operator> <call><name>FIRST_FIBER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sem</name><operator>-&gt;</operator><name>waiting</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>sem</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ready</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>sem</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>
</unit>
