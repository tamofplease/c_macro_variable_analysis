<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/sync/fiber_mutex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/fiber_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sync_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sync_waiter.h"</cpp:file></cpp:include>

<function><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>acl_fiber_mutex_create</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><operator>(</operator><name>ACL_FIBER_MUTEX</name><operator>*</operator><operator>)</operator>
		<call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER_MUTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>flags</name></name>  <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>waiters</name></name> <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ARRAY_F_UNORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>mutex</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_mutex_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fiber_mutex_lock_once</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>wakeup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// For the independent thread, only lock the thread mutex.</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <call><name>sync_waiter_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>array_append</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>wakeup</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>wakeup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_fiber_delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fiber_mutex_lock_try</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>wakeup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// For the independent thread, only lock the thread mutex.</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <call><name>sync_waiter_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>array_append</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>wakeup</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>wakeup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_fiber_delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_mutex_lock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FIBER_MUTEX_F_LOCK_TRY</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>fiber_mutex_lock_try</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name>fiber_mutex_lock_once</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_mutex_trylock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_MUTEX</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fiber</name> <operator>=</operator> <operator>(</operator><name>ACL_FIBER</name><operator>*</operator><operator>)</operator> <call><name>array_pop_front</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>thread_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fiber</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>__pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>fiber</name><operator>-&gt;</operator><name>tid</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>sync_waiter_wakeup</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
