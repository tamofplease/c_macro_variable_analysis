<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/sync/sync_timer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/mbox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sync_timer.h"</cpp:file></cpp:include>

<struct>struct <name>SYNC_TIMER</name> <block>{
	<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>stop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>waiters</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tid</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>SYNC_TIMER</name> <modifier>*</modifier></type><name>sync_timer_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>(</operator><name>SYNC_TIMER</name><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYNC_TIMER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name> <operator>=</operator> <call><name>mbox_create</name><argument_list>(<argument><expr><name>MBOX_T_MPSC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>waiters</name></name> <operator>=</operator> <call><name>timer_cache_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>mbox_out</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>TYPE_INTERNAL</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>mbox_in</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>TYPE_INTERNAL</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>timer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_timer_free</name><parameter_list>(<parameter><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mbox_free</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>timer_cache_free</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type>  <name>__timer_key</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>(</operator><name>SYNC_TIMER</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sync_timer_free</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__timer_key</name></expr></argument>, <argument><expr><name>thread_free</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_expire</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>expire</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_CACHE_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>waiters</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>expire</name> <operator>=</operator> <ternary><condition><expr><name>node</name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>expire</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>expire</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
		<macro><name>ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;node-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>ring_to_appl</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>SYNC_OBJ</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// Try to delete the obj from cond's waiters, 0 will</comment>
			<comment type="line">// be returned if the obj has been in the cond, or else</comment>
			<comment type="line">// -1 will return, so we just set the DELAYED flag.</comment>
			<if_stmt><if>if <condition>(<expr><call><name>fiber_cond_delete_waiter</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>SYNC_STATUS_TIMEOUT</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>SYNC_STATUS_DELAYED</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>waiters</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Remove all the waiters in the node and remove the node.</comment>
		<expr_stmt><expr><call><name>timer_cache_free_node</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;</operator> <name>expire</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>expire</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>expire</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>expire</name> <operator>&gt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>expire</name> <operator>-</operator> <name>now</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// xxx?</comment>
	<return>return <expr><literal type="number">100</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_wakeup</name><parameter_list>(<parameter><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>timer_cache_remove_exist</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>,
			<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>SYNC_STATUS_DELAYED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no obj=%p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_waiting</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>fiber_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name> <init>= <expr><operator>(</operator><name>SYNC_TIMER</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><name><name>timer</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SYNC_MSG</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>mbox_read</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>check_expire</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>

		<comment type="line">//assert(obj-&gt;fb-&gt;status == FIBER_STATUS_SUSPEND);</comment>

		<switch>switch <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SYNC_ACTION_AWAIT</name></expr>:</case>
			<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>delay</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>obj</name><operator>-&gt;</operator><name>delay</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>timer_cache_add</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>obj</name><operator>-&gt;</operator><name>delay</name></name> <operator>&lt;</operator> <name>delay</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>delay</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SYNC_ACTION_WAKEUP</name></expr>:</case>
			<expr_stmt><expr><call><name>handle_wakeup</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unkown action=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>check_expire</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>timer_cache_size</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>waiters</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>delay</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>sync_timer_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>thread_init</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>timer</name> <operator>=</operator> <operator>(</operator><name>SYNC_TIMER</name><operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>__timer_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>sync_timer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>__timer_key</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>fb</name></name> <operator>=</operator> <call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_waiting</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>, <argument><expr><literal type="number">320000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>timer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sync_timer_await</name><parameter_list>(<parameter><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>delay</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SYNC_MSG</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>SYNC_MSG</name><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYNC_MSG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>SYNC_ACTION_AWAIT</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mbox_send</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sync_timer_wakeup</name><parameter_list>(<parameter><decl><type><name>SYNC_TIMER</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>SYNC_OBJ</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_MSG</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>SYNC_MSG</name><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYNC_MSG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>SYNC_ACTION_WAKEUP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>socket_t</name></type> <name>out</name> <init>= <expr><call><name>mbox_out</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>same_thread</name></decl>;</decl_stmt>

		<comment type="line">// If the current fiber is in the same thread with the one</comment>
		<comment type="line">// to be noticed, the out fd is owned by the current thread</comment>
		<comment type="line">// and the FILE_EVENT with the out fd should be in long time</comment>
		<comment type="line">// status, so we use fiber_file_open_write to get it, or else</comment>
		<comment type="line">// the out fd we got is owned by the other thread, and</comment>
		<comment type="line">// we just need to get the temporary FILE_EVENT from cache to</comment>
		<comment type="line">// bind with the out fd, and release it after mbox_send.</comment>
		<if_stmt><if>if <condition>(<expr><call><name>__pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>timer</name><operator>-&gt;</operator><name>tid</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>same_thread</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_cache_get</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>same_thread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_SYSIO</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>mbox_send</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>same_thread</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fiber_file_cache_put</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>mbox_send</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
