<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/sync/channel.c"><comment type="block">/* Copyright (c) 2005 Russ Cox, MIT; see COPYRIGHT */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<enum>enum
<block>{
	<decl><name>CHANEND</name></decl>,
	<decl><name>CHANSND</name></decl>,
	<decl><name>CHANRCV</name></decl>,
	<decl><name>CHANNOP</name></decl>,
	<decl><name>CHANNOBLK</name></decl>,
}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>FIBER_ALT</name></name></type> <name>FIBER_ALT</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>FIBER_ALT_ARRAY</name></name></type> <name>FIBER_ALT_ARRAY</name>;</typedef>

<struct>struct <name>FIBER_ALT</name> <block>{
	<decl_stmt><decl><type><name>ACL_CHANNEL</name>   <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>          <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>   <name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name>     <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIBER_ALT</name>     <modifier>*</modifier></type><name>xalt</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>FIBER_ALT_ARRAY</name> <block>{
	<decl_stmt><decl><type><name>FIBER_ALT</name>  <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ACL_CHANNEL</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>bufsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>elemsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name>  <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>nbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIBER_ALT_ARRAY</name></type> <name>asend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIBER_ALT_ARRAY</name></type> <name>arecv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>ACL_CHANNEL</name><modifier>*</modifier></type> <name>acl_channel_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elemsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>ACL_CHANNEL</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>bufsize</name> <operator>*</operator> <name>elemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>elemsize</name></name> <operator>=</operator> <name>elemsize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bufsize</name></name>  <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nbuf</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name>      <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* bug - work out races */</comment>
<function><type><name>void</name></type> <name>acl_channel_free</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>arecv</name><operator>.</operator><name>a</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>arecv</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>asend</name><operator>.</operator><name>a</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>asend</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>array_add</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>alt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>m</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>m</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name>FIBER_ALT</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_realloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>m</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>alt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>array_del</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>--</operator><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * doesn't really work for things other than CHANSND and CHANRCV
 * but is only used as arg to acl_channel_array, which can handle it
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>otherop</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(CHANSND + CHANRCV - (op))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>FIBER_ALT_ARRAY</name><modifier>*</modifier></type> <name>channel_array</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>CHANSND</name></expr>:</case>
		<return>return <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>asend</name></name></expr>;</return>
	<case>case <expr><name>CHANRCV</name></expr>:</case>
		<return>return <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>arecv</name></name></expr>;</return>
	<default>default:</default>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alt_can_exec</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_ALT_ARRAY</name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>CHANNOP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>channel_array</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>otherop</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ar</name> <operator>&amp;&amp;</operator> <name><name>ar</name><operator>-&gt;</operator><name>n</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<default>default:</default>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><name>CHANSND</name></expr>:</case>
			<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>bufsize</name></name></expr>;</return>
		<case>case <expr><name>CHANRCV</name></expr>:</case>
			<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alt_queue</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_ALT_ARRAY</name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>channel_array</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_add</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alt_dequeue</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_ALT_ARRAY</name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>channel_array</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ar</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: bad use of altdequeue op=%d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ar</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>a</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_del</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: cannot find self in altdq"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alt_all_dequeue</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>CHANEND</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>CHANNOBLK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>CHANNOP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>alt_dequeue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>amove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Actually move the data around.  There are up to three
 * players: the sender, the receiver, and the channel itself.
 * If the channel is unbuffered or the buffer is empty,
 * data goes from sender to receiver.  If the channel is full,
 * the receiver removes some from the channel and the sender
 * gets to put some in.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>alt_copy</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Work out who is sender and who is receiver
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>CHANRCV</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>s</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>CHANSND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>CHANRCV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * ACL_CHANNEL is empty (or unbuffered) - copy directly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>amove</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>elemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Otherwise it's always okay to receive and then send.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>off</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>elemsize</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>amove</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>elemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>--</operator><name><name>c</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>c</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>bufsize</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>nbuf</name></name><operator>)</operator> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>elemsize</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>amove</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>elemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>c</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alt_exec</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_ALT_ARRAY</name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIBER_ALT</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name>channel_array</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>otherop</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ar</name> <operator>&amp;&amp;</operator> <name><name>ar</name><operator>-&gt;</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>ar</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>other</name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>alt_copy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>alt_all_dequeue</name><argument_list>(<argument><expr><name><name>other</name><operator>-&gt;</operator><name>xalt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>other</name><operator>-&gt;</operator><name>xalt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xalt</name> <operator>=</operator> <name>other</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>other</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>alt_copy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgalt</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>channel_alt</name><parameter_list>(<parameter><decl><type><name>FIBER_ALT</name></type> <name><name>a</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ncan</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>canblock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>CHANEND</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>CHANNOBLK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>canblock</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>==</operator> <name>CHANEND</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fiber</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xalt</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>dbgalt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"alt "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ncan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>dbgalt</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %c:"</literal></expr></argument>, <argument><expr><literal type="string">"esrnb"</literal><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>alt_can_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dbgalt</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>ncan</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ncan</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>ncan</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>alt_can_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>j</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>dbgalt</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" =&gt; %c:"</literal></expr></argument>, <argument><expr><literal type="string">"esrnb"</literal><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>alt_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>i</name></expr>;</return>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dbgalt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>canblock</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>!=</operator> <name>CHANNOP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>alt_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Just for avoiding fiber_io_loop to exit</comment>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * the guy who ran the op took care of dequeueing us
	 * and then set a[0].alt to the one that was executed.
	 */</comment>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xalt</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>channel_op</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>canblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_ALT</name></type> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>c</name>  <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>op</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v</name>  <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>op</name> <operator>=</operator> <ternary><condition><expr><name>canblock</name></expr> ?</condition><then> <expr><name>CHANEND</name></expr> </then><else>: <expr><name>CHANNOBLK</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>channel_alt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_channel_send</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANSND</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_channel_send_nb</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANSND</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_channel_recv</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANRCV</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_channel_recv_nb</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANRCV</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_channel_sendp</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANSND</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_channel_recvp</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANRCV</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_channel_sendp_nb</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANSND</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_channel_recvp_nb</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANRCV</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_channel_sendul</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANSND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>acl_channel_recvul</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANRCV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_channel_sendul_nb</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANSND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>acl_channel_recvul_nb</name><parameter_list>(<parameter><decl><type><name>ACL_CHANNEL</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>channel_op</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>CHANRCV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>
</unit>
