<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/sync/sync_waiter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/mbox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sync_waiter.h"</cpp:file></cpp:include>

<struct>struct <name>SYNC_WAITER</name> <block>{
	<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>stop</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>SYNC_WAITER</name> <modifier>*</modifier></type><name>sync_waiter_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_WAITER</name> <modifier>*</modifier></type><name>waiter</name> <init>= <expr><operator>(</operator><name>SYNC_WAITER</name><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYNC_WAITER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>box</name></name> <operator>=</operator> <call><name>mbox_create</name><argument_list>(<argument><expr><name>MBOX_T_MPSC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>mbox_out</name><argument_list>(<argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>TYPE_INTERNAL</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>mbox_in</name><argument_list>(<argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>TYPE_INTERNAL</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>waiter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_waiter_free</name><parameter_list>(<parameter><decl><type><name>SYNC_WAITER</name> <modifier>*</modifier></type><name>waiter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>waiter</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mbox_free</name><argument_list>(<argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type>  <name>__waiter_key</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_WAITER</name> <modifier>*</modifier></type><name>waiter</name> <init>= <expr><operator>(</operator><name>SYNC_WAITER</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sync_waiter_free</name><argument_list>(<argument><expr><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__waiter_key</name></expr></argument>, <argument><expr><name>thread_free</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_waiting</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>fiber_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_WAITER</name> <modifier>*</modifier></type><name>waiter</name> <init>= <expr><operator>(</operator><name>SYNC_WAITER</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><name><name>waiter</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><call><name>mbox_read</name><argument_list>(<argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>fb</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FIBER_STATUS_SUSPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>SYNC_WAITER</name> <modifier>*</modifier></type><name>sync_waiter_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SYNC_WAITER</name> <modifier>*</modifier></type><name>waiter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>thread_init</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>waiter</name> <operator>=</operator> <operator>(</operator><name>SYNC_WAITER</name><operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>__waiter_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>waiter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>waiter</name> <operator>=</operator> <call><name>sync_waiter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>__waiter_key</name></expr></argument>, <argument><expr><name>waiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>fb</name></name> <operator>=</operator> <call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>fiber_waiting</name></expr></argument>, <argument><expr><name>waiter</name></expr></argument>, <argument><expr><literal type="number">320000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>waiter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sync_waiter_wakeup</name><parameter_list>(<parameter><decl><type><name>SYNC_WAITER</name> <modifier>*</modifier></type><name>waiter</name></decl></parameter>, <parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// When using io_uring, we should call the system API of write</comment>
		<comment type="line">// to send data, because the fd is shared by multiple threads</comment>
		<comment type="line">// and which can't use io_uring directly, so we set the mask</comment>
		<comment type="line">// as EVENT_SYSIO to use system write API.</comment>
		<decl_stmt><decl><type><name>socket_t</name></type> <name>out</name> <init>= <expr><call><name>mbox_out</name><argument_list>(<argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>box</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>fiber_file_cache_get</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_SYSIO</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>mbox_send</name><argument_list>(<argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_file_cache_put</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>mbox_send</name><argument_list>(<argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>box</name></name></expr></argument>, <argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
