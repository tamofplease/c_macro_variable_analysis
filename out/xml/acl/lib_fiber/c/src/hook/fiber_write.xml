<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/hook/fiber_write.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"io.h"</cpp:file></cpp:include>

<comment type="line">// In the API connect() being hooked in hook/socket.c, the STATUS_NDUBLOCK</comment>
<comment type="line">// flag was set and the fd was in non-block status in order to return imaginary</comment>
<comment type="line">// from connecting process.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SET_NBLOCK</name><parameter_list>(<parameter><type><name>_fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                          \
    if (var_hook_sys_api &amp;&amp; !EVENT_IS_IO_URING(fiber_io_event())) {          \
        FILE_EVENT *_fe = fiber_file_get(_fd);                               \
        if (_fe &amp;&amp; IS_NDUBLOCK(_fe)) {                                       \
            non_blocking(_fd, NON_BLOCKING);                                 \
            CLR_NDUBLOCK(_fe);                                               \
        }                                                                    \
    }                                                                        \
} while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SET_NBLOCK</name><parameter_list>(<parameter><type><name>_fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                          \
    if (var_hook_sys_api) {                                                  \
        FILE_EVENT *_fe = fiber_file_get(_fd);                               \
        if (_fe &amp;&amp; IS_NDUBLOCK(_fe)) {                                       \
            non_blocking(_fd, NON_BLOCKING);                                 \
            CLR_NDUBLOCK(_fe);                                               \
        }                                                                    \
    }                                                                        \
} while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wait_write</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_file_free</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVENT_ERR</name> <operator>|</operator> <name>EVENT_HUP</name> <operator>|</operator> <name>EVENT_NVAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_canceled</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_wait_write</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>res</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><call><name>wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>res</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>res</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>error_again</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_EVENTABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fiber_file_free</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>fiber_iocp_write</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>write_ctx</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>write_ctx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAS_IO_URING</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_WRITE_RESULT</name><parameter_list>(<parameter><type><name>_fe</name></type></parameter>, <parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                     \
    int _err;                                                                \
    if (_n &gt;= 0) {                                                           \
        return _n;                                                           \
    }                                                                        \
    _err = acl_fiber_last_error();                                           \
    fiber_save_errno(_err);                                                  \
    if (!error_again(_err)) {                                                \
        return -1;                                                           \
    }                                                                        \
    if (wait_write(_fe) == -1) {                                             \
        return -1;                                                           \
    }                                                                        \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_ALLOC</name><parameter_list>(<parameter><type><name>__fe</name></type></parameter>, <parameter><type><name>__type</name></type></parameter>, <parameter><type><name>_fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                   \
    (__fe) = file_event_alloc(_fd);                                          \
    (__fe)-&gt;fiber_r-&gt;status = FIBER_STATUS_NONE;                             \
    (__fe)-&gt;fiber_w-&gt;status = FIBER_STATUS_NONE;                             \
    (__fe)-&gt;mask   = (__type);                                               \
    (__fe)-&gt;type   = TYPE_EVENTABLE;                                         \
} while (0)</cpp:value></cpp:define>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
<function><type><name>ssize_t</name></type> <name>fiber_write</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_SYSIO</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_WRITE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                    \
    (f)-&gt;out.write_ctx.buf = buf;                                            \
    (f)-&gt;out.write_ctx.len = (unsigned) count;                               \
    (f)-&gt;mask |= EVENT_WRITE;                                                \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_WRITE</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_WRITE</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_SET_NBLOCK</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call>(<modifier>*</modifier><name>sys_write</name>)<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_WRITE_RESULT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>fiber_writev</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_WRITEV</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                   \
    (f)-&gt;out.writev_ctx.iov = iov;                                           \
    (f)-&gt;out.writev_ctx.cnt = iovcnt;                                        \
    (f)-&gt;out.writev_ctx.off = 0;                                             \
    (f)-&gt;mask |= EVENT_WRITEV;                                               \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_WRITEV</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_WRITEV</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_SET_NBLOCK</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call>(<modifier>*</modifier><name>sys_writev</name>)<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_WRITE_RESULT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ssize_t</name></type> <name>fiber_send</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SEND</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                     \
    (f)-&gt;out.send_ctx.buf   = buf;                                           \
    (f)-&gt;out.send_ctx.len   = (unsigned) len;                                \
    (f)-&gt;out.send_ctx.flags = flags;                                         \
    (f)-&gt;mask |= EVENT_SEND;                                                 \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_SEND</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_SEND</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_SET_NBLOCK</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call>(<modifier>*</modifier><name>sys_send</name>)<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_WRITE_RESULT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>fiber_sendto</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IO_URING_HAS_SENDTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SENDTO</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                   \
    (f)-&gt;out.sendto_ctx.buf       = buf;                                     \
    (f)-&gt;out.sendto_ctx.len       = (unsigned) len;                          \
    (f)-&gt;out.sendto_ctx.flags     = flags;                                   \
    (f)-&gt;out.sendto_ctx.dest_addr = dest_addr;                               \
    (f)-&gt;out.sendto_ctx.addrlen   = addrlen;                                 \
    (f)-&gt;mask |= EVENT_SENDTO;                                               \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_SENDTO</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_SENDTO</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_SET_NBLOCK</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call>(<modifier>*</modifier><name>sys_sendto</name>)<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
				<argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_WRITE_RESULT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
<function><type><name>ssize_t</name></type> <name>fiber_sendmsg</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SENDMSG</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                  \
    (f)-&gt;out.sendmsg_ctx.msg   = msg;                                        \
    (f)-&gt;out.sendmsg_ctx.flags = flags;                                      \
    (f)-&gt;mask |= EVENT_SENDMSG;                                              \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_SENDMSG</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_WRITE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_SENDMSG</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>CHECK_SET_NBLOCK</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call>(<modifier>*</modifier><name>sys_sendmsg</name>)<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_WRITE_RESULT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__USE_LARGEFILE64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_HOOK_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>ssize_t</name></type> <name>fiber_sendfile64</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>out_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_fd</name></decl></parameter>, <parameter><decl><type><name>off64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>file_sendfile</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name>in_fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_SET_NBLOCK</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call>(<modifier>*</modifier><name>sys_sendfile64</name>)<argument_list>(<argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name>in_fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>error_again</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_write</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fiber_wait_write error=%s, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fiber_file_free</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>IS_CLOSING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fd=%d being closing"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVENT_ERR</name> <operator>|</operator> <name>EVENT_HUP</name> <operator>|</operator> <name>EVENT_NVAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fd=%d error"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_canceled</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
