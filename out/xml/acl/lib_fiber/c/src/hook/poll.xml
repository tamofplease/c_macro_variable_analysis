<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/hook/poll.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_POLL</name></cpp:ifdef>

<struct>struct <name>POLLFD</name> <block>{
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pfd</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_APPL</name></cpp:macro> <cpp:value>ring_to_appl</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * The callback is set by poll_event_set() when user calls acl_fiber_poll().
 * The callback will be called when the fd included by FILE_EVENT is ready,
 * and POLLIN flag will be set in the specified FILE_EVENT that will be used
 * by the application called acl_fiber_poll().
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>POLLFD</name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>pfd</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* In iocp mode on windows, the pfd maybe be set NULL when more
	 * overlapped events happened by IO or poll events.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>pfd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>POLLIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_del_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_ERR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_HUP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLHUP</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_NVAL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLNVAL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>POLLOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>pfd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If any fe has been ready, the pe holding fe should be removed from
	 * ev-&gt;poll_list to avoid to be called in timeout process.
	 * We should just remove pe only once by checking if the value of
	 * pe-&gt;nready is 0. After the pe has been removed from the
	 * ev-&gt;poll_list, the pe's callback will not be called again in the
	 * timeout process in event_process_poll() in event.c.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>nready</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* The cache timer has been be set when timeout &gt;= 0. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>timer_cache_remove</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>nready</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_READABLE</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Similiar to read_callback except that the POLLOUT flag will be set in it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>write_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>POLLFD</name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>pfd</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pfd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_del_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_ERR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_HUP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLHUP</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_NVAL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>|=</operator> <name>POLLNVAL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>pfd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>nready</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>timer_cache_remove</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pe</name><operator>-&gt;</operator><name>nready</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_WRITABLE</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Set all fds' callbacks in POLL_EVENT, thease callbacks will be called
 * by event_wait() of different event engines for different OS platforms.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_event_set</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>POLLFD</name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
			<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_POLLIN</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name><operator>-&gt;</operator><name>r_timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>event_add_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_READWAIT</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
			<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_POLLOUT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name><operator>-&gt;</operator><name>w_timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>event_add_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>, <argument><expr><name>write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_WRITEWAIT</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name><operator>-&gt;</operator><name>pfd</name></name>      <operator>=</operator> <name>pfd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_event_clean</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>POLLFD</name> <modifier>*</modifier></type><name>pfd</name> <init>= <expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* maybe has been cleaned in read_callback/write_callback */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
			<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_POLLIN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>event_del_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>-&gt;</operator><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
			<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_POLLOUT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>event_del_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name><operator>-&gt;</operator><name>pfd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>fe</name></name>      <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This callback will be called from event_process_poll() in event.c and the
 * fiber blocked after calling acl_fiber_switch() in acl_fiber_poll() will
 * wakeup and continue to run.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>fiber_unused</name></decl></parameter>, <parameter><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_READY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>POLLFD</name> <modifier>*</modifier></type><name>pollfd_alloc</name><parameter_list>(<parameter><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>nfds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>POLLFD</name> <modifier>*</modifier></type><name>pfds</name> <init>= <expr><operator>(</operator><name>POLLFD</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><name>nfds</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>POLLFD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>nfds_t</name></type>  <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_read</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>pfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_write</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IOCP</name></cpp:ifdef>
		<expr_stmt><expr><name><name>pfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fe</name><operator>-&gt;</operator><name>rbuf</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fe</name><operator>-&gt;</operator><name>rsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>pfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pe</name>  <operator>=</operator> <name>pe</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pfd</name> <operator>=</operator> <operator>&amp;</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pfd</name><operator>-&gt;</operator><name>revents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_POLLING</name><argument_list>(<argument><expr><name><name>pfds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>pfds</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pollfd_free</name><parameter_list>(<parameter><decl><type><name>POLLFD</name> <modifier>*</modifier></type><name>pfds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>pfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHARE_STACK</name></cpp:ifdef>

<typedef>typedef <type><struct>struct <name>pollfds</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>nfds_t</name></type> <name>nfds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>pollfds</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_on_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pollfds</name> <modifier>*</modifier></type><name>pfds</name> <init>= <expr><operator>(</operator><name>pollfds</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>pfds</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>pfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type> <name>__local_key</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>pollfds</name> <modifier>*</modifier></type><name>pollfds_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>nfds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pollfds</name> <modifier>*</modifier></type><name>pfds</name> <init>= <expr><operator>(</operator><name>pollfds</name> <operator>*</operator><operator>)</operator> <call><name>acl_fiber_get_specific</name><argument_list>(<argument><expr><name>__local_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pfds</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pfds</name> <operator>=</operator> <operator>(</operator><name>pollfds</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pollfds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfds</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>nfds</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfds</name><operator>-&gt;</operator><name>fds</name></name>  <operator>=</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfds</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pfds</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_set_specific</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__local_key</name></expr></argument>, <argument><expr><name>pfds</name></expr></argument>, <argument><expr><name>fiber_on_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pfds</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>nfds</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>pfds</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfds</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>nfds</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pfds</name><operator>-&gt;</operator><name>fds</name></name>  <operator>=</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pfds</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>pfds</name><operator>-&gt;</operator><name>nfds</name></name> <operator>=</operator> <name>nfds</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>pfds</name><operator>-&gt;</operator><name>nfds</name></name> <operator>=</operator> <name>nfds</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pfds</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pfds</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pollfds_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pollfds</name> <modifier>*</modifier></type><name>pfds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name><name>pfds</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pfds</name><operator>-&gt;</operator><name>nfds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// SHARE_STACK</comment>

<comment type="line">//#define	MAX_TIMEOUT	200000000</comment>

<function><type><name>int</name> <name>WINAPI</name></type> <name>acl_fiber_poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>old_timeout</name></decl>, <decl><type ref="prev"/><name>nready</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHARE_STACK</name></cpp:ifdef>
	<comment type="line">// In shared stack mode, we should use heap memory for pe to hold</comment>
	<comment type="line">// all the fds, because the pe will be operated by the event fiber,</comment>
	<comment type="line">// but the shared stack can be used by only one fiber, the stack</comment>
	<comment type="line">// memory of the current fiber will be occupied by the other fiber</comment>
	<comment type="line">// after switching the other fiber. So, we use heap memory to hold</comment>
	<comment type="line">// pe to avoid stack memory collision.</comment>
	<decl_stmt><decl><type><name>pollfds</name>    <modifier>*</modifier></type><name>pfds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>POLL_EVENT</name></type>  <name>pevent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>POLL_EVENT</name></type>  <name>pevent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>sys_poll</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>sys_poll</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>sys_poll</name>)<argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (timeout &lt; 0) {
		timeout = MAX_TIMEOUT;
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>ev</name>          <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_timeout</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHARE_STACK</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>oflag</name></name> <operator>&amp;</operator> <name>ACL_FIBER_ATTR_SHARE_STACK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pfds</name>      <operator>=</operator> <call><name>pollfds_save</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pe</name>        <operator>=</operator> <operator>(</operator><name>POLL_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POLL_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name></name>   <operator>=</operator> <call><name>pollfd_alloc</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pfds</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>pfds</name>      <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pe</name>        <operator>=</operator> <operator>&amp;</operator><name>pevent</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name></name>   <operator>=</operator> <call><name>pollfd_alloc</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>pe</name>        <operator>=</operator> <operator>&amp;</operator><name>pevent</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name></name>   <operator>=</operator> <call><name>pollfd_alloc</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>nfds</name></name>  <operator>=</operator> <name>nfds</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>proc</name></name>  <operator>=</operator> <name>poll_callback</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>poll_event_set</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* The cache timer should be set when timeout &gt;= 0. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>timer_cache_add</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>nready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_POLL_WAIT</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>nready</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>timer_cache_remove</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>old_timeout</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>nready</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>nready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed, %s, timeout=%d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>timer_cache_size</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>nready</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>&gt;=</operator> <name><name>pe</name><operator>-&gt;</operator><name>expire</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>FIBER_ETIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>poll_event_clean</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pollfd_free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nready</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>nready</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHARE_STACK</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>oflag</name></name> <operator>&amp;</operator> <name>ACL_FIBER_ATTR_SHARE_STACK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pollfds_copy</name><argument_list>(<argument><expr><name>pfds</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>nready</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
<function><type><name>int</name></type> <name>poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAS_POLL</comment>
</unit>
