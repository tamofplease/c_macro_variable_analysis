<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/hook/fiber_read.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"io.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uring_wait_read</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

		<comment type="line">// Must clear the EVENT_READ flags in order to set IO event</comment>
		<comment type="line">// for each IO process.</comment>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVENT_ERR</name> <operator>|</operator> <name>EVENT_HUP</name> <operator>|</operator> <name>EVENT_NVAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_canceled</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>error_again</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_EVENTABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fiber_file_free</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_wait_read</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<comment type="line">// Add one reference to prevent being released prematurely.</comment>
	<expr_stmt><expr><call><name>file_event_refer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uring_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fiber_iocp_read</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<return>return <expr><call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// HAS_IO_URING</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IOCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_wait_read</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fiber_wait_read error=%s, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_ERR</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_canceled</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>res</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>fe</name><operator>-&gt;</operator><name>res</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>error_again</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_SPIPE</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fiber_file_free</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fiber_iocp_read</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If the socket type is UDP, We must check the fixed buffer first,
	 * which maybe used in iocp_add_read() and set for polling read status.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>sock_type</name></name> <operator>==</operator> <name>SOCK_DGRAM</name>
		<operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>rbuf</name></name> <operator>==</operator> <name><name>fe</name><operator>-&gt;</operator><name>packet</name></name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>res</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>res</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>res</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>len</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rbuf</name></name>  <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rsize</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>res</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAS_IOCP</comment>

<comment type="line">// After calling fiber_wait_read():</comment>
<comment type="line">// The fiber_wait_read will return three status:</comment>
<comment type="line">// 1: The fd is a valid socket/pipe/fifo, which can be</comment>
<comment type="line">//    monitored by event engine, such as epoll, select or poll;</comment>
<comment type="line">// 0: The fd isn't a socket/pipe/fifo, maybe a file, and can't</comment>
<comment type="line">//    be monitored by event engine and can read directly;</comment>
<comment type="line">// -1: The fd isn't a valid descriptor, just return error, and</comment>
<comment type="line">//   the fe should be freed.</comment>

<comment type="line">// After calling acl_fiber_canceled():</comment>
<comment type="line">// If the suspending fiber wakeup for the reason that it was</comment>
<comment type="line">// killed by the other fiber which called acl_fiber_kill and</comment>
<comment type="line">// want to close the fd owned by the current fiber, we just</comment>
<comment type="line">// set the errno status and return -1, and the killer fiber</comment>
<comment type="line">// will close the fd in acl_fiber_close API.</comment>

<comment type="line">// After calling error_again();</comment>
<comment type="line">// Check if the fd can monitored by event, if the fd</comment>
<comment type="line">// isn't monitored by the event engine, the above</comment>
<comment type="line">// fiber_wait_read() must return 0, so we must free</comment>
<comment type="line">// the fe here. Because epoll can only monitor socket</comment>
<comment type="line">// fd, not including file fd, the event_add_read will</comment>
<comment type="line">// not monitor the file fd in fiber_wait_read.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_READ</name><parameter_list>(<parameter><type><name>_fn</name></type></parameter>, <parameter><type><name>_fe</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                       \
    ssize_t ret;                                                             \
    int err;                                                                 \
    if (IS_READABLE(_fe)) {                                                  \
        CLR_READABLE(_fe);                                                   \
    } else if (fiber_wait_read(_fe) &lt; 0) {                                   \
        return -1;                                                           \
    }                                                                        \
    if (acl_fiber_canceled(_fe-&gt;fiber_r)) {                                  \
        acl_fiber_set_error(_fe-&gt;fiber_r-&gt;errnum);                           \
        return -1;                                                           \
    }                                                                        \
    ret = (*_fn)(_fe-&gt;fd, __VA_ARGS__);                                      \
    if (ret &gt;= 0) {                                                          \
        return ret;                                                          \
    }                                                                        \
    err = acl_fiber_last_error();                                            \
    fiber_save_errno(err);                                                   \
    if (!error_again(err)) {                                                 \
        if (!(_fe-&gt;type &amp; TYPE_EVENTABLE)) {                                 \
            fiber_file_free(_fe);                                            \
        }                                                                    \
        return -1;                                                           \
    }                                                                        \
} while (1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIBER_READ</name><parameter_list>(<parameter><type><name>_fn</name></type></parameter>, <parameter><type><name>_fe</name></type></parameter>, <parameter><type><name>_args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                  \
    ssize_t ret;                                                             \
    int err;                                                                 \
    if (IS_READABLE(_fe)) {                                                  \
        CLR_READABLE(_fe);                                                   \
    } else if (fiber_wait_read(_fe) &lt; 0) {                                   \
        return -1;                                                           \
    }                                                                        \
    if (acl_fiber_canceled(_fe-&gt;fiber_r)) {                                  \
        acl_fiber_set_error(_fe-&gt;fiber_r-&gt;errnum);                           \
        return -1;                                                           \
    }                                                                        \
    ret = (*_fn)(_fe-&gt;fd, ##_args);                                          \
    if (ret &gt;= 0) {                                                          \
        return ret;                                                          \
    }                                                                        \
    err = acl_fiber_last_error();                                            \
    fiber_save_errno(err);                                                   \
    if (!error_again(err)) {                                                 \
        if (!(_fe-&gt;type &amp; TYPE_EVENTABLE)) {                                 \
            fiber_file_free(_fe);                                            \
        }                                                                    \
        return -1;                                                           \
    }                                                                        \
} while (1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_ALLOC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                            \
    (f) = file_event_alloc(fd);                                              \
    (f)-&gt;fiber_r-&gt;status = FIBER_STATUS_NONE;                                \
    (f)-&gt;fiber_w-&gt;status = FIBER_STATUS_NONE;                                \
    (f)-&gt;mask   = (t);                                                       \
    (f)-&gt;type   = TYPE_EVENTABLE;                                            \
} while (0)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>

<function><type><name>ssize_t</name></type> <name>fiber_read</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>,  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
	<comment type="line">// One FILE_EVENT can be used by multiple fibers with the same</comment>
	<comment type="line">// EVENT_BUSY_READ or EVENT_BUSY_WRITE in the same time. But can be</comment>
	<comment type="line">// used by two fibers that one is a reader and the other is a writer,</comment>
	<comment type="line">// because there're two different objects for reader and writer.</comment>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_READ</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                     \
    (f)-&gt;in.read_ctx.buf = buf;                                              \
    (f)-&gt;in.read_ctx.len = (int) count;                                      \
    (f)-&gt;mask |= EVENT_READ;                                                 \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_READ</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_READ</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FIBER_READ</name><argument_list>(<argument><expr><name>sys_read</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>fiber_readv</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_READV</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                    \
    (f)-&gt;in.readv_ctx.iov = iov;                                             \
    (f)-&gt;in.readv_ctx.cnt = iovcnt;                                          \
    (f)-&gt;in.readv_ctx.off = 0;                                               \
    (f)-&gt;mask |= EVENT_READV;                                                \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_READV</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_READV</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FIBER_READ</name><argument_list>(<argument><expr><name>sys_readv</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>fiber_recvmsg</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_RECVMSG</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                  \
    (f)-&gt;in.recvmsg_ctx.msg   = msg;                                         \
    (f)-&gt;in.recvmsg_ctx.flags = flags;                                       \
    (f)-&gt;mask |= EVENT_RECVMSG;                                              \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_RECVMSG</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_RECVMSG</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FIBER_READ</name><argument_list>(<argument><expr><name>sys_recvmsg</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// SYS_UNIX</comment>

<function><type><name>ssize_t</name></type> <name>fiber_recv</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IOCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IOCP</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>file_iocp_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_RECV</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                     \
    (f)-&gt;in.recv_ctx.buf   = buf;                                            \
    (f)-&gt;in.recv_ctx.len   = (unsigned) len;                                 \
    (f)-&gt;in.recv_ctx.flags = flags;                                          \
    (f)-&gt;mask |= EVENT_RECV;                                                 \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_RECV</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_RECV</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FIBER_READ</name><argument_list>(<argument><expr><name>sys_recv</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>fiber_recvfrom</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>src_addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLR_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive>  <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IOCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IOCP</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>file_iocp_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>  <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IO_URING_HAS_RECVFROM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_RECVFROM</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                 \
    (f)-&gt;in.recvfrom_ctx.buf      = buf;                                     \
    (f)-&gt;in.recvfrom_ctx.len      = (unsigned) len;                          \
    (f)-&gt;in.recvfrom_ctx.flags    = flags;                                   \
    (f)-&gt;in.recvfrom_ctx.src_addr = src_addr;                                \
    (f)-&gt;in.recvfrom_ctx.addrlen  = addrlen;                                 \
    (f)-&gt;mask |= EVENT_RECVFROM;                                             \
} while (0)</cpp:value></cpp:define>

		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;</operator> <name>EVENT_BUSY_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SET_RECVFROM</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>|=</operator> <name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>busy</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_BUSY_READ</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_RECVFROM</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iocp_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FIBER_READ</name><argument_list>(<argument><expr><name>sys_recvfrom</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
