<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/hook/select.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FD_SETSIZE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SETSIZE</name></cpp:macro> <cpp:value>10240</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>get_pollfd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>fds</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>socket_t</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>&amp;</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_fdset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>fds</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>cnt</name></decl></parameter>,
	<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pfd</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rset</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pfd</name> <operator>=</operator> <call><name>get_pollfd</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>*</operator><name>cnt</name></expr></argument>, <argument><expr><name><name>rset</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pfd</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pfd</name><operator>-&gt;</operator><name>events</name></name> <operator>|=</operator> <name>oper</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cnt</name> <operator>&gt;=</operator> <name>nfds</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: overflow, nfds=%d, cnt=%d, fd=%u"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><operator>*</operator><name>cnt</name></expr></argument>, <argument><expr><name><name>rset</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name>  <operator>=</operator> <name>oper</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name>      <operator>=</operator> <name><name>rset</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cnt</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pfds_create</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>readfds</name></decl></parameter>,
	<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>writefds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>exceptfds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>nfds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>readfds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>readfds</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;</operator> <operator>*</operator><name>nfds</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>nfds</name> <operator>=</operator> <name><name>readfds</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>writefds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>writefds</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;</operator> <operator>*</operator><name>nfds</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>nfds</name> <operator>=</operator> <name><name>writefds</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>exceptfds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>exceptfds</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;</operator> <operator>*</operator><name>nfds</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>nfds</name> <operator>=</operator> <name><name>exceptfds</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fds</name> <operator>=</operator> <operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><operator>*</operator><name>nfds</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>readfds</name> <operator>&amp;&amp;</operator> <call><name>set_fdset</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>*</operator><name>nfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>writefds</name> <operator>&amp;&amp;</operator> <call><name>set_fdset</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>*</operator><name>nfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>, <argument><expr><name>POLLOUT</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>exceptfds</name> <operator>&amp;&amp;</operator> <call><name>set_fdset</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>*</operator><name>nfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>, <argument><expr><name>POLLERR</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>fds</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pfds_create</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>readfds</name></decl></parameter>,
	<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>writefds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier><name>exceptfds</name></type> <name>fiber_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fds</name> <operator>=</operator> <operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><operator>*</operator><name>nfds</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <operator>*</operator><name>nfds</name></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>readfds</name> <operator>&amp;&amp;</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>writefds</name> <operator>&amp;&amp;</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		if (exceptfds &amp;&amp; FD_ISSET(fd, exceptfds)) {
			fds[fd].fd = fd;
			fds[fd].events |= POLLERR | POLLHUP;
		}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></for>
	<return>return <expr><name>fds</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
<decl_stmt><decl><type><name>int</name> <name>WINAPI</name></type> <name>acl_fiber_select</name><argument_list>(<argument><expr><name>int</name> <name>nfds</name></expr></argument>, <argument><expr><name>fd_set</name> <operator>*</operator><name>readfds</name></expr></argument>, <argument><expr><name>fd_set</name> <operator>*</operator><name>writefds</name></expr></argument>,
	<argument><expr><name>fd_set</name> <operator>*</operator><name>exceptfds</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>timeval</name> <operator>*</operator><name>timeout</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>acl_fiber_select</name><argument_list>(<argument><expr><name>int</name> <name>nfds</name></expr></argument>, <argument><expr><name>fd_set</name> <operator>*</operator><name>readfds</name></expr></argument>, <argument><expr><name>fd_set</name> <operator>*</operator><name>writefds</name></expr></argument>,
	<argument><expr><name>fd_set</name> <operator>*</operator><name>exceptfds</name></expr></argument>, <argument><expr>struct <name>timeval</name> <operator>*</operator><name>timeout</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>timo</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_select</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>sys_select</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>sys_select</name>)
			<argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fds</name> <operator>=</operator> <call><name>pfds_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nfds</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fds</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>FIBER_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>timo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_fiber_poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>readfds</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>writefds</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>exceptfds</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name> <operator>&amp;&amp;</operator> <name>nready</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>readfds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nready</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>writefds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nready</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>exceptfds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <operator>(</operator><name>POLLERR</name> <operator>|</operator> <name>POLLHUP</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nready</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>nready</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
<function><type><name>int</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>readfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>writefds</name></decl></parameter>,
	<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>exceptfds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_select</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
