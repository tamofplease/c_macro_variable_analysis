<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/hook/epoll.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EPOLL</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<struct>struct <name>EPOLL_CTX</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>  <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>rmask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name>  <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>epoll_data_t</name></type> <name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * All EPOLL_EVENT owned by its fiber are assosiate with the same one epoll fd.
 * one epoll fd -|- one EPOLL -|- fiber EPOLL_EVENT
 *                             |- fiber EPOLL_EVENT
 *                             |- ...
 *                             |- fiber EPOLL_EVENT -|- socket EPOLL_CTX
 *                                                   |- socket EPOLL_CTX
 *                                                   |- socket EPOLL_CTX
 *                                                   |- ...
 */</comment>
<struct>struct <name>EPOLL</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>         <name>epfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_CTX</name> <modifier>*</modifier><modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>      <name>nfds</name></decl>;</decl_stmt>

	<comment type="line">// Store all EPOLL_EVENT, every fiber should use its own EPOLL_EVENT,</comment>
	<comment type="line">// Because in some case, one thread maybe have many fibers but it maybe</comment>
	<comment type="line">// use only one epoll fd to handle IO events, see acl_read_epoll_wait()</comment>
	<comment type="line">// in lib_acl/src/stdlib/iostuff/acl_read_wait.c.</comment>
	<decl_stmt><decl><type><name>HTABLE</name>      <modifier>*</modifier></type><name>ep_events</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SNPRINTF</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SNPRINTF</name></cpp:macro> <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_event_free</name><parameter_list>(<parameter><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_on_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><operator>(</operator><name>EPOLL_EVENT</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// If the epoll in ee has been set NULL in epoll_free(), the EPOLL</comment>
	<comment type="line">// must have been freed and the associated epoll fd must also have</comment>
	<comment type="line">// been closed, so we just only free the ee here.</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>epoll_event_free</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SNPRINTF</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>EPOLL_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>htable_find</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name><operator>-&gt;</operator><name>ep_events</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: not found ee=%p, curr fiber=%d,"</literal>
			<literal type="string">" ee fiber=%d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>ee</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>==</operator> <name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>htable_delete</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name><operator>-&gt;</operator><name>ep_events</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>epoll_event_free</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type> <name>__local_key</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>epoll_event_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// One EPOLL_EVENT can be owned by one fiber and be stored in the</comment>
	<comment type="line">// fiber's local store, so the EPOLL_EVENT can be used repeated by</comment>
	<comment type="line">// its owner fiber, and can be freed when the fiber is exiting.</comment>

	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><operator>(</operator><name>EPOLL_EVENT</name><operator>*</operator><operator>)</operator> <call><name>acl_fiber_get_specific</name><argument_list>(<argument><expr><name>__local_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ee</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ee</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EPOLL_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_set_specific</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__local_key</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>, <argument><expr><name>fiber_on_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ee</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>ARRAY</name>     <modifier>*</modifier></type><name>__main_epfds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ARRAY</name> <modifier>*</modifier></type><name>__epfds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type>  <name>__once_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>epoll_free</name><parameter_list>(<parameter><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>fiber_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>__main_epfds</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__main_epfds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>__epfds</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EPOLL</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>sys_close</name>)<argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>epoll_free</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>__epfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__epfds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>main_thread_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__main_epfds</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>thread_free</name><argument_list>(<argument><expr><name>__main_epfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__main_epfds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_key</name></expr></argument>, <argument><expr><name>thread_free</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_key_create error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EPOLL</name> <modifier>*</modifier></type><name>epoll_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
	<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><call><name>open_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>maxfd</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: open_limit error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Using thread local to store the epoll handles for each thread. */</comment>
	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>thread_init</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_once error %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>__epfds</name> <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ARRAY_F_UNORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>__pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__main_epfds</name> <operator>=</operator> <name>__epfds</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>main_thread_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>__once_key</name></expr></argument>, <argument><expr><name>__epfds</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"pthread_setspecific error!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EPOLL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>__epfds</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Duplicate the current thread's epoll fd, so we can assosiate the
	 * connection handles with one epoll fd for the current thread, and
	 * use one epoll fd for each thread to handle all fds.
	 */</comment>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>nfds</name></name> <operator>=</operator> <name>maxfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name></name>  <operator>=</operator> <operator>(</operator><name>EPOLL_CTX</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><name>maxfd</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EPOLL_CTX</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>ep_events</name></name> <operator>=</operator> <call><name>htable_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ep</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_free</name><parameter_list>(<parameter><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="line">// Walk through all EPOLL_EVENT stored in ep_events, and just set their</comment>
	<comment type="line">// epoll variable to NULL, because they will be freed in fiber_on_exit()</comment>
	<comment type="line">// when the fiber the EPOLL_EVENT belonging to is exiting.</comment>

	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>ep-&gt;ep_events</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name> <init>= <expr><operator>(</operator><name>EPOLL_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>htable_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep_events</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ep</name><operator>-&gt;</operator><name>nfds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>epoll_event_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sys_epfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>epfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>__epfds</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>EPOLL</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>epfd</name></name> <operator>==</operator> <name>epfd</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ep</name>  <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sys_epfd</name> <operator>=</operator> <call><name>event_handle</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sys_epfd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// We can't close the epfd same as the internal fiber event's fd.</comment>
	<comment type="line">// Because we've alloced a new fd as a duplication of internal epfd</comment>
	<comment type="line">// in epoll_alloc by calling sys API dup(), the epfd here shouldn't</comment>
	<comment type="line">// be same as the internal epfd.</comment>

	<if_stmt><if>if <condition>(<expr><name>epfd</name> <operator>==</operator> <name>sys_epfd</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): can't close the event sys_epfd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>epoll_free</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_delete</name><argument_list>(<argument><expr><name>__epfds</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call>(<modifier>*</modifier><name>sys_close</name>)<argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>epoll_event_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>create</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__epfds</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: __epfds NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>__epfds</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>EPOLL</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>epfd</name></name> <operator>==</operator> <name>epfd</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d, %s: not found epfd=%d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SNPRINTF</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ee</name> <operator>=</operator> <operator>(</operator><name>EPOLL_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>htable_find</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep_events</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
		<return>return <expr><name>ee</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>epoll_event_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>htable_enter</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep_events</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>ee</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><name>int</name></type> <name>epoll_create</name><parameter_list>(<parameter><decl><type><name>int</name> <name>size</name></type> <name>fiber_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>epfd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_epoll_create</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>sys_epoll_create</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>sys_epoll_create</name>)<argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get the current thread's epoll fd.</comment>
	<expr_stmt><expr><name>epfd</name> <operator>=</operator> <call><name>event_handle</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>epfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid event_handle %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>epfd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// The epoll fd will be duplicated in the below function, and the new</comment>
	<comment type="line">// fd will be returned to the caller.</comment>
	<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>epoll_alloc</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EPOLL_CLOEXEC</name></cpp:ifdef>
<function><type><name>int</name></type> <name>epoll_create1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>epfd</name> <init>= <expr><call><name>epoll_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>epfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>EPOLL_CLOEXEC</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close_on_exec</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>epfd</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL_CTX</name>   <modifier>*</modifier></type><name>epx</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>epx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL</name>       <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>epx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>epx</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <name><name>epx</name><operator>-&gt;</operator><name>ee</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// If the ready count exceeds the maxevents been set which limits the</comment>
	<comment type="line">// the buffer space to hold the the ready fds, we just return to let</comment>
	<comment type="line">// the left ready fds keeped in system buffer, and hope they'll be</comment>
	<comment type="line">// handled in the next epoll_wait().</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>&gt;=</operator> <name><name>ee</name><operator>-&gt;</operator><name>maxevents</name></name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>EPOLLIN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>epx</name><operator>-&gt;</operator><name>fd</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>epx</name><operator>-&gt;</operator><name>fd</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>timer_cache_remove</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>EPOLLOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SET_READABLE</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>fiber_unused</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL_CTX</name>   <modifier>*</modifier></type><name>epx</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>epx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL</name>       <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>epx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>epx</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <name><name>epx</name><operator>-&gt;</operator><name>ee</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>&gt;=</operator> <name><name>ee</name><operator>-&gt;</operator><name>maxevents</name></name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>EPOLLOUT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>epx</name><operator>-&gt;</operator><name>fd</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name><name>epx</name><operator>-&gt;</operator><name>fd</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>timer_cache_remove</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>EPOLLIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SET_WRITABLE</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_ctl_add</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>EPOLL_CTX</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EPOLL_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fd</name>      <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>op</name>      <operator>=</operator> <name>op</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name>    <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>rmask</name>   <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>ee</name>      <operator>=</operator> <name>ee</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLIN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name>   <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name>      <operator>=</operator> <call><name>fiber_file_open_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name><name>fe</name><operator>-&gt;</operator><name>epx</name></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>event_add_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_READWAIT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLOUT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name>   <operator>|=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name>      <operator>=</operator> <call><name>fiber_file_open_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name><name>fe</name><operator>-&gt;</operator><name>epx</name></name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>event_add_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name></expr></argument>, <argument><expr><name>write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_WRITEWAIT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_ctl_del</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_del_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_del_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fd</name>      <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>op</name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>mask</name>    <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>rmask</name>   <operator>=</operator> <name>EVENT_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name><name>fe</name><operator>-&gt;</operator><name>epx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>fe</name>      <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>epoll_ctl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_epoll_ctl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>sys_epoll_ctl</name></expr> ?</condition><then>  <expr><call>(<modifier>*</modifier><name>sys_epoll_ctl</name>)<argument_list>(<argument><expr><name>epfd</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>epoll_event_find</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: not exist epfd=%d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>EPOLL_CTL_ADD</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>EPOLL_CTL_MOD</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>epoll_ctl_add</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>!=</operator> <name>EPOLL_CTL_DEL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid op %d, fd %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>epoll</name><operator>-&gt;</operator><name>fds</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>epoll_ctl_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>fiber_unused</name></decl></parameter>, <parameter><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_READY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_epoll_set</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ee</name><operator>-&gt;</operator><name>maxevents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>epoll_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>epfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxevents</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>old_timeout</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_epoll_wait</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>sys_epoll_wait</name></expr> ?</condition><then>  <expr><call>(<modifier>*</modifier><name>sys_epoll_wait</name>)
			<argument_list>(<argument><expr><name>epfd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>maxevents</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: EVENT NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>epoll_event_find</name><argument_list>(<argument><expr><name>epfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ee</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: not exist epfd %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>epfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>events</name></name>    <operator>=</operator> <name>events</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>maxevents</name></name> <operator>=</operator> <name>maxevents</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name>     <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>proc</name></name>      <operator>=</operator> <name>epoll_callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>old_timeout</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_epoll_set</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>timer_cache_add</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_EPOLL_WAIT</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>timer_cache_remove</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>expire</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ee</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>old_timeout</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>timer_cache_size</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>&gt;=</operator> <name><name>ee</name><operator>-&gt;</operator><name>expire</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>FIBER_ETIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name><name>ee</name><operator>-&gt;</operator><name>nready</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="line">// end HAS_EPOLL</comment>
</unit>
