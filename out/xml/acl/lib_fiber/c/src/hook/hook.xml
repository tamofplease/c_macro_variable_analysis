<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/hook/hook.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>socket_fn</name></type>     <name>__sys_socket</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socket_fn</name>     <modifier>*</modifier></type><name>sys_socket</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>close_fn</name></type>      <name>__sys_close</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>close_fn</name>      <modifier>*</modifier></type><name>sys_close</name>                    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listen_fn</name></type>     <name>__sys_listen</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listen_fn</name>     <modifier>*</modifier></type><name>sys_listen</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>accept_fn</name></type>     <name>__sys_accept</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_fn</name>     <modifier>*</modifier></type><name>sys_accept</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>connect_fn</name></type>    <name>__sys_connect</name>                 <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>connect_fn</name>    <modifier>*</modifier></type><name>sys_connect</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>recv_fn</name></type>       <name>__sys_recv</name>                    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>recv_fn</name>       <modifier>*</modifier></type><name>sys_recv</name>                     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>recvfrom_fn</name></type>   <name>__sys_recvfrom</name>                <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>recvfrom_fn</name>   <modifier>*</modifier></type><name>sys_recvfrom</name>                 <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>send_fn</name></type>       <name>__sys_send</name>                    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>send_fn</name>       <modifier>*</modifier></type><name>sys_send</name>                     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sendto_fn</name></type>     <name>__sys_sendto</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sendto_fn</name>     <modifier>*</modifier></type><name>sys_sendto</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>poll_fn</name></type>       <name>__sys_poll</name>                    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>poll_fn</name>       <modifier>*</modifier></type><name>sys_poll</name>                     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>select_fn</name></type>     <name>__sys_select</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>select_fn</name>     <modifier>*</modifier></type><name>sys_select</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>getaddrinfo_fn</name></type>   <name>__sys_getaddrinfo</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getaddrinfo_fn</name>   <modifier>*</modifier></type><name>sys_getaddrinfo</name>           <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>freeaddrinfo_fn</name></type>  <name>__sys_freeaddrinfo</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>freeaddrinfo_fn</name>  <modifier>*</modifier></type><name>sys_freeaddrinfo</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gethostbyname_fn</name></type> <name>__sys_gethostbyname</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gethostbyname_fn</name> <modifier>*</modifier></type><name>sys_gethostbyname</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>

<decl_stmt><decl><type><name>sleep_fn</name></type>    <name>__sys_sleep</name>                     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sleep_fn</name>    <modifier>*</modifier></type><name>sys_sleep</name>                      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>setsockopt_fn</name></type> <name>__sys_setsockopt</name>              <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>setsockopt_fn</name> <modifier>*</modifier></type><name>sys_setsockopt</name>               <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>read_fn</name></type>     <name>__sys_read</name>                      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>read_fn</name>     <modifier>*</modifier></type><name>sys_read</name>                       <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readv_fn</name></type>    <name>__sys_readv</name>                     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>readv_fn</name>    <modifier>*</modifier></type><name>sys_readv</name>                      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>recvmsg_fn</name></type>  <name>__sys_recvmsg</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>recvmsg_fn</name>  <modifier>*</modifier></type><name>sys_recvmsg</name>                    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>write_fn</name></type>    <name>__sys_write</name>                     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>write_fn</name>    <modifier>*</modifier></type><name>sys_write</name>                      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>writev_fn</name></type>   <name>__sys_writev</name>                    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>writev_fn</name>   <modifier>*</modifier></type><name>sys_writev</name>                     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sendmsg_fn</name></type>  <name>__sys_sendmsg</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sendmsg_fn</name>  <modifier>*</modifier></type><name>sys_sendmsg</name>                    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>__USE_LARGEFILE64</name></cpp:ifdef>
<decl_stmt><decl><type><name>sendfile64_fn</name></type> <name>__sys_sendfile64</name>              <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sendfile64_fn</name> <modifier>*</modifier></type><name>sys_sendfile64</name>               <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>pread_fn</name></type>      <name>__sys_pread</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pread_fn</name>      <modifier>*</modifier></type><name>sys_pread</name>                    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pwrite_fn</name></type>     <name>__sys_pwrite</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pwrite_fn</name>     <modifier>*</modifier></type><name>sys_pwrite</name>                   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_EPOLL</name></cpp:ifdef>
<decl_stmt><decl><type><name>epoll_create_fn</name></type> <name>__sys_epoll_create</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>epoll_create_fn</name> <modifier>*</modifier></type><name>sys_epoll_create</name>           <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>epoll_wait_fn</name></type>   <name>__sys_epoll_wait</name>            <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>epoll_wait_fn</name>   <modifier>*</modifier></type><name>sys_epoll_wait</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>epoll_ctl_fn</name></type>    <name>__sys_epoll_ctl</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>epoll_ctl_fn</name>    <modifier>*</modifier></type><name>sys_epoll_ctl</name>              <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
<decl_stmt><decl><type><name>openat_fn</name></type>       <name>__sys_openat</name>                <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>openat_fn</name>       <modifier>*</modifier></type><name>sys_openat</name>                 <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unlink_fn</name></type>       <name>__sys_unlink</name>                <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unlink_fn</name>       <modifier>*</modifier></type><name>sys_unlink</name>                 <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_STATX</name></cpp:ifdef>
<decl_stmt><decl><type><name>statx_fn</name></type>        <name>__sys_statx</name>                 <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>statx_fn</name>        <modifier>*</modifier></type><name>sys_statx</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_RENAMEAT2</name></cpp:ifdef>
<decl_stmt><decl><type><name>renameat2_fn</name></type>    <name>__sys_renameat2</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>renameat2_fn</name>    <modifier>*</modifier></type><name>sys_renameat2</name>              <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>mkdirat_fn</name></type>      <name>__sys_mkdirat</name>               <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkdirat_fn</name>      <modifier>*</modifier></type><name>sys_mkdirat</name>                <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>splice_fn</name></type>       <name>__sys_splice</name>                <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>splice_fn</name>       <modifier>*</modifier></type><name>sys_splice</name>                 <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__APPLE__</name></cpp:ifndef>
<decl_stmt><decl><type><name>gethostbyname_r_fn</name></type> <name>__sys_gethostbyname_r</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gethostbyname_r_fn</name> <modifier>*</modifier></type><name>sys_gethostbyname_r</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>WSARecv_fn</name></type> <name>__sys_WSARecv</name>                     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSARecv_fn</name> <modifier>*</modifier></type><name>sys_WSARecv</name>                      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WSAAccept_fn</name></type> <name>__sys_WSAAccept</name>                 <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAAccept_fn</name> <modifier>*</modifier></type><name>sys_WSAAccept</name>                  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// SYS_WIN</comment>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_socket_fn</name><parameter_list>(<parameter><decl><type><name>socket_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_socket</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_close_fn</name><parameter_list>(<parameter><decl><type><name>close_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_close</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_listen_fn</name><parameter_list>(<parameter><decl><type><name>listen_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_listen</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_accept_fn</name><parameter_list>(<parameter><decl><type><name>accept_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_accept</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_connect_fn</name><parameter_list>(<parameter><decl><type><name>connect_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_connect</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_recv_fn</name><parameter_list>(<parameter><decl><type><name>recv_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_recv</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_recvfrom_fn</name><parameter_list>(<parameter><decl><type><name>recvfrom_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_recvfrom</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_send_fn</name><parameter_list>(<parameter><decl><type><name>send_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_send</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_sendto_fn</name><parameter_list>(<parameter><decl><type><name>sendto_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_sendto</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_poll_fn</name><parameter_list>(<parameter><decl><type><name>poll_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_poll</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_select_fn</name><parameter_list>(<parameter><decl><type><name>select_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_select</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_getaddrinfo_fn</name><parameter_list>(<parameter><decl><type><name>getaddrinfo_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_getaddrinfo</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_freeaddrinfo_fn</name><parameter_list>(<parameter><decl><type><name>freeaddrinfo_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_freeaddrinfo</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_gethostbyname_fn</name><parameter_list>(<parameter><decl><type><name>gethostbyname_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_gethostbyname</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name> <name>WINAPI</name></type> <name>set_WSAAccept_fn</name><parameter_list>(<parameter><decl><type><name>WSAAccept_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_WSAAccept</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>set_WSARecv_fn</name><parameter_list>(<parameter><decl><type><name>WSARecv_fn</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sys_WSARecv</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hook_api</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>MINGW</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_FN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>, <parameter><type><name>fp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	(fn) = (type) dlsym(RTLD_DEFAULT, name); \
	assert((fn)); \
	(fp) = &amp;(fn); \
} while (0)</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_FN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>, <parameter><type><name>fp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	(fn) = (type) dlsym(RTLD_NEXT, name); \
	assert((fn)); \
	(fp) = &amp;(fn); \
} while (0)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>, <argument><expr><name>socket_fn</name></expr></argument>, <argument><expr><name>__sys_socket</name></expr></argument>, <argument><expr><name>sys_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>close_fn</name></expr></argument>, <argument><expr><name>__sys_close</name></expr></argument>, <argument><expr><name>sys_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"listen"</literal></expr></argument>, <argument><expr><name>listen_fn</name></expr></argument>, <argument><expr><name>__sys_listen</name></expr></argument>, <argument><expr><name>sys_listen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"accept"</literal></expr></argument>, <argument><expr><name>accept_fn</name></expr></argument>, <argument><expr><name>__sys_accept</name></expr></argument>, <argument><expr><name>sys_accept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"connect"</literal></expr></argument>, <argument><expr><name>connect_fn</name></expr></argument>, <argument><expr><name>__sys_connect</name></expr></argument>, <argument><expr><name>sys_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"setsockopt"</literal></expr></argument>, <argument><expr><name>setsockopt_fn</name></expr></argument>, <argument><expr><name>__sys_setsockopt</name></expr></argument>, <argument><expr><name>sys_setsockopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"sleep"</literal></expr></argument>, <argument><expr><name>sleep_fn</name></expr></argument>, <argument><expr><name>__sys_sleep</name></expr></argument>, <argument><expr><name>sys_sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><name>read_fn</name></expr></argument>, <argument><expr><name>__sys_read</name></expr></argument>, <argument><expr><name>sys_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"readv"</literal></expr></argument>, <argument><expr><name>readv_fn</name></expr></argument>, <argument><expr><name>__sys_readv</name></expr></argument>, <argument><expr><name>sys_readv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"recv"</literal></expr></argument>, <argument><expr><name>recv_fn</name></expr></argument>, <argument><expr><name>__sys_recv</name></expr></argument>, <argument><expr><name>sys_recv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"recvfrom"</literal></expr></argument>, <argument><expr><name>recvfrom_fn</name></expr></argument>, <argument><expr><name>__sys_recvfrom</name></expr></argument>, <argument><expr><name>sys_recvfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"recvmsg"</literal></expr></argument>, <argument><expr><name>recvmsg_fn</name></expr></argument>, <argument><expr><name>__sys_recvmsg</name></expr></argument>, <argument><expr><name>sys_recvmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><name>write_fn</name></expr></argument>, <argument><expr><name>__sys_write</name></expr></argument>, <argument><expr><name>sys_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"writev"</literal></expr></argument>, <argument><expr><name>writev_fn</name></expr></argument>, <argument><expr><name>__sys_writev</name></expr></argument>, <argument><expr><name>sys_writev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"send"</literal></expr></argument>, <argument><expr><name>send_fn</name></expr></argument>, <argument><expr><name>__sys_send</name></expr></argument>, <argument><expr><name>sys_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"sendto"</literal></expr></argument>, <argument><expr><name>sendto_fn</name></expr></argument>, <argument><expr><name>__sys_sendto</name></expr></argument>, <argument><expr><name>sys_sendto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"sendmsg"</literal></expr></argument>, <argument><expr><name>sendmsg_fn</name></expr></argument>, <argument><expr><name>__sys_sendmsg</name></expr></argument>, <argument><expr><name>sys_sendmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>__USE_LARGEFILE64</name></cpp:ifdef>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"sendfile64"</literal></expr></argument>, <argument><expr><name>sendfile64_fn</name></expr></argument>, <argument><expr><name>__sys_sendfile64</name></expr></argument>, <argument><expr><name>sys_sendfile64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"pread"</literal></expr></argument>, <argument><expr><name>pread_fn</name></expr></argument>, <argument><expr><name>__sys_pread</name></expr></argument>, <argument><expr><name>sys_pread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"pwrite"</literal></expr></argument>, <argument><expr><name>pwrite_fn</name></expr></argument>, <argument><expr><name>__sys_pwrite</name></expr></argument>, <argument><expr><name>sys_pwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"poll"</literal></expr></argument>, <argument><expr><name>poll_fn</name></expr></argument>, <argument><expr><name>__sys_poll</name></expr></argument>, <argument><expr><name>sys_poll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"select"</literal></expr></argument>, <argument><expr><name>select_fn</name></expr></argument>, <argument><expr><name>__sys_select</name></expr></argument>, <argument><expr><name>sys_select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive>	<name>HAS_EPOLL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"epoll_create"</literal></expr></argument>, <argument><expr><name>epoll_create_fn</name></expr></argument>, <argument><expr><name>__sys_epoll_create</name></expr></argument>, <argument><expr><name>sys_epoll_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"epoll_wait"</literal></expr></argument>, <argument><expr><name>epoll_wait_fn</name></expr></argument>, <argument><expr><name>__sys_epoll_wait</name></expr></argument>, <argument><expr><name>sys_epoll_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"epoll_ctl"</literal></expr></argument>, <argument><expr><name>epoll_ctl_fn</name></expr></argument>, <argument><expr><name>__sys_epoll_ctl</name></expr></argument>, <argument><expr><name>sys_epoll_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAS_EPOLL</comment>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"openat"</literal></expr></argument>, <argument><expr><name>openat_fn</name></expr></argument>, <argument><expr><name>__sys_openat</name></expr></argument>, <argument><expr><name>sys_openat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"unlink"</literal></expr></argument>, <argument><expr><name>unlink_fn</name></expr></argument>, <argument><expr><name>__sys_unlink</name></expr></argument>, <argument><expr><name>sys_unlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_STATX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"statx"</literal></expr></argument>, <argument><expr><name>statx_fn</name></expr></argument>, <argument><expr><name>__sys_statx</name></expr></argument>, <argument><expr><name>sys_statx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_RENAMEAT2</name></cpp:ifdef>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"renameat2"</literal></expr></argument>, <argument><expr><name>renameat2_fn</name></expr></argument>, <argument><expr><name>__sys_renameat2</name></expr></argument>, <argument><expr><name>sys_renameat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"mkdirat"</literal></expr></argument>, <argument><expr><name>mkdirat_fn</name></expr></argument>, <argument><expr><name>__sys_mkdirat</name></expr></argument>, <argument><expr><name>sys_mkdirat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"splice"</literal></expr></argument>, <argument><expr><name>splice_fn</name></expr></argument>, <argument><expr><name>__sys_splice</name></expr></argument>, <argument><expr><name>sys_splice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo"</literal></expr></argument>, <argument><expr><name>getaddrinfo_fn</name></expr></argument>, <argument><expr><name>__sys_getaddrinfo</name></expr></argument>, <argument><expr><name>sys_getaddrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"freeaddrinfo"</literal></expr></argument>, <argument><expr><name>freeaddrinfo_fn</name></expr></argument>, <argument><expr><name>__sys_freeaddrinfo</name></expr></argument>, <argument><expr><name>sys_freeaddrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"gethostbyname"</literal></expr></argument>, <argument><expr><name>gethostbyname_fn</name></expr></argument>, <argument><expr><name>__sys_gethostbyname</name></expr></argument>, <argument><expr><name>sys_gethostbyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__APPLE__</name></cpp:ifndef>
	<expr_stmt><expr><call><name>LOAD_FN</name><argument_list>(<argument><expr><literal type="string">"gethostbyname_r"</literal></expr></argument>, <argument><expr><name>gethostbyname_r_fn</name></expr></argument>, <argument><expr><name>__sys_gethostbyname_r</name></expr></argument>, <argument><expr><name>sys_gethostbyname_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>__sys_socket</name>    <operator>=</operator> <name>socket</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_socket</name>      <operator>=</operator> <operator>&amp;</operator><name>__sys_socket</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_listen</name>    <operator>=</operator> <name>listen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_listen</name>      <operator>=</operator> <operator>&amp;</operator><name>__sys_listen</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_accept</name>    <operator>=</operator> <name>accept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_accept</name>      <operator>=</operator> <operator>&amp;</operator><name>__sys_accept</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_connect</name>   <operator>=</operator> <name>connect</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_connect</name>     <operator>=</operator> <operator>&amp;</operator><name>__sys_connect</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_close</name>     <operator>=</operator> <name>closesocket</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_close</name>       <operator>=</operator> <operator>&amp;</operator><name>__sys_close</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_recv</name>      <operator>=</operator> <name>recv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_recv</name>        <operator>=</operator> <operator>&amp;</operator><name>__sys_recv</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_recvfrom</name>  <operator>=</operator> <name>recvfrom</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_recvfrom</name>    <operator>=</operator> <operator>&amp;</operator><name>__sys_recvfrom</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_send</name>      <operator>=</operator> <name>send</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_send</name>        <operator>=</operator> <operator>&amp;</operator><name>__sys_send</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_sendto</name>    <operator>=</operator> <name>sendto</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_sendto</name>      <operator>=</operator> <operator>&amp;</operator><name>__sys_sendto</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_poll</name>      <operator>=</operator> <name>WSAPoll</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_poll</name>        <operator>=</operator> <operator>&amp;</operator><name>__sys_poll</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_select</name>    <operator>=</operator> <name>select</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_select</name>      <operator>=</operator> <operator>&amp;</operator><name>__sys_select</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_WSARecv</name>   <operator>=</operator> <name>WSARecv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_WSARecv</name>     <operator>=</operator> <operator>&amp;</operator><name>__sys_WSARecv</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_WSAAccept</name> <operator>=</operator> <name>WSAAccept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_WSAAccept</name>   <operator>=</operator> <operator>&amp;</operator><name>__sys_WSAAccept</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_getaddrinfo</name>   <operator>=</operator> <name>getaddrinfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_getaddrinfo</name>     <operator>=</operator> <operator>&amp;</operator><name>__sys_getaddrinfo</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_freeaddrinfo</name>  <operator>=</operator> <name>freeaddrinfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_freeaddrinfo</name>    <operator>=</operator> <operator>&amp;</operator><name>__sys_freeaddrinfo</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_gethostbyname</name> <operator>=</operator> <name>gethostbyname</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_gethostbyname</name>   <operator>=</operator> <operator>&amp;</operator><name>__sys_gethostbyname</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>hook_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>hook_api</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
