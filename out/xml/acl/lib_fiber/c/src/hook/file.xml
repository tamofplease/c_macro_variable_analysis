<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/hook/file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"io.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../event/event_io_uring.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CHECK_API</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if ((fn) == NULL) {  \
		hook_once();  \
		if ((fn) == NULL) {  \
			msg_error("%s: %s NULL", __FUNCTION__, (name));  \
			return -1;  \
		}  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>FILE_ALLOC</name><parameter_list>(<parameter><type><name>__fe</name></type></parameter>, <parameter><type><name>__type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	(__fe) = file_event_alloc(-1);  \
	(__fe)-&gt;fiber_r-&gt;status = FIBER_STATUS_NONE;  \
	(__fe)-&gt;fiber_w-&gt;status = FIBER_STATUS_NONE;  \
	(__fe)-&gt;r_proc = file_read_callback;  \
	(__fe)-&gt;mask   = (__type);  \
	(__fe)-&gt;type   = TYPE_EVENTABLE | TYPE_FILE;  \
} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>file_read_callback</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_READY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>file_close</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>close_other</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_API</name><argument_list>(<argument><expr><literal type="string">"sys_close"</literal></expr></argument>, <argument><expr><name>sys_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_close</name>)<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_close</name>)<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe_tmp</name></expr></argument>, <argument><expr><name>EVENT_FILE_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>fd</name></name>              <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>fiber_r</name></name>         <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>r_proc</name></name>          <operator>=</operator> <name>file_read_callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>mask</name></name>           <operator>|=</operator> <name>EVENT_FILE_CLOSE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name> <operator>!=</operator> <name><name>fe_tmp</name><operator>-&gt;</operator><name>fiber_r</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>close_other</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name> <operator>!=</operator> <name><name>fe_tmp</name><operator>-&gt;</operator><name>fiber_r</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>close_other</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>close_other</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>event_uring_file_close</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>file_event_refer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FILE_CLOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name><name>fe_tmp</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><operator>-</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>close_other</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ECANCELED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>flag</name></name>  <operator>|=</operator> <name>FIBER_F_CLOSED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_kill</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>close_other</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ECANCELED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>flag</name></name>  <operator>|=</operator> <name>FIBER_F_CLOSED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_kill</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>file_cancel</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iotype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>cancel_type</name> <init>= <expr><name>CANCEL_NONE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe_tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe_tmp</name></expr></argument>, <argument><expr><name>EVENT_FILE_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>fd</name></name>              <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>fiber_r</name></name>         <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>r_proc</name></name>          <operator>=</operator> <name>file_read_callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>mask</name></name>           <operator>|=</operator> <name>EVENT_FILE_CANCEL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iotype</name> <operator>==</operator> <name>CANCEL_IO_READ</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>fiber_r</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cancel_type</name> <operator>=</operator> <name>iotype</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>iotype</name> <operator>==</operator> <name>CANCEL_IO_WRITE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe_tmp</name><operator>-&gt;</operator><name>fiber_w</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cancel_type</name> <operator>=</operator> <name>iotype</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid cancel iotype=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>iotype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>event_uring_file_cancel</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>fe_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>file_event_refer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>fe_tmp</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cancel_type</name> <operator>==</operator> <name>CANCEL_IO_READ</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ECANCELED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>flag</name></name>  <operator>|=</operator> <name>FIBER_F_KILLED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_kill</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cancel_type</name> <operator>==</operator> <name>CANCEL_IO_WRITE</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ECANCELED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>flag</name></name>  <operator>|=</operator> <name>FIBER_F_KILLED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>res</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_kill</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>openat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>mode_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_API</name><argument_list>(<argument><expr><literal type="string">"sys_openat"</literal></expr></argument>, <argument><expr><name>sys_openat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_openat</name>)<argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_openat</name>)<argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>EVENT_FILE_OPENAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_uring_file_openat</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FILE_OPENAT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name>   <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_FILE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_file_set</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Save the fe for the future using.</comment>
		<return>return <expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><operator>-</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>mode_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>openat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_API</name><argument_list>(<argument><expr><literal type="string">"sys_unlink"</literal></expr></argument>, <argument><expr><name>sys_unlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_unlink</name>)<argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_unlink</name>)<argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>EVENT_FILE_UNLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_uring_file_unlink</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FILE_UNLINK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><operator>-</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_RENAMEAT2</name></cpp:ifdef>
<function><type><name>int</name></type> <name>renameat2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>olddirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>newdirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_API</name><argument_list>(<argument><expr><literal type="string">"sys_renameat2"</literal></expr></argument>, <argument><expr><name>sys_renameat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_renameat2</name>)<argument_list>(<argument><expr><name>olddirfd</name></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>, <argument><expr><name>newdirfd</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_renameat2</name>)<argument_list>(<argument><expr><name>olddirfd</name></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>, <argument><expr><name>newdirfd</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>EVENT_FILE_RENAMEAT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>oldpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_uring_file_renameat2</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>olddirfd</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>,
		<argument><expr><name>newdirfd</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FILE_RENAMEAT2</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><operator>-</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>renameat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>olddirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newdirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>renameat2</name><argument_list>(<argument><expr><name>olddirfd</name></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>, <argument><expr><name>newdirfd</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>renameat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>, <argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_STATX</name></cpp:ifdef>
<function><type><name>int</name></type> <name>statx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>statx</name></name> <modifier>*</modifier></type><name>statxbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_API</name><argument_list>(<argument><expr><literal type="string">"sys_statx"</literal></expr></argument>, <argument><expr><name>sys_statx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_statx</name>)<argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>statxbuf</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_statx</name>)<argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>statxbuf</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>EVENT_FILE_STATX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>statxbuf</name></name> <operator>=</operator> <operator>(</operator>struct <name>statx</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>statx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//memcpy(fe-&gt;var.statxbuf, statxbuf, sizeof(struct statx));</comment>

	<expr_stmt><expr><call><name>event_uring_file_statx</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
		<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>statxbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_FILE_STATX</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>statxbuf</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>statxbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>statx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>statxbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><operator>-</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>statxbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>statbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>AT_STATX_SYNC_AS_STAT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><name>STATX_ALL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>statx</name></name></type> <name>statxbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>statx</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statxbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_dev</name></name>         <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_dev_major</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_ino</name></name>         <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_ino</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_mode</name></name>        <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_nlink</name></name>       <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_nlink</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_uid</name></name>         <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_uid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_gid</name></name>         <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_gid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_rdev</name></name>        <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_rdev_major</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_size</name></name>        <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_blksize</name></name>     <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_blksize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_blocks</name></name>      <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_blocks</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_atim</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_atime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_mtim</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_mtime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>statbuf</name><operator>-&gt;</operator><name>st_ctim</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>statxbuf</name><operator>.</operator><name>stx_ctime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>mkdirat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_API</name><argument_list>(<argument><expr><literal type="string">"sys_mkdirat"</literal></expr></argument>, <argument><expr><name>sys_mkdirat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_mkdirat</name>)<argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_mkdirat</name>)<argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>EVENT_DIR_MKDIRAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_uring_mkdirat</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_DIR_MKDIRAT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><operator>-</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>pread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid fd: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_pread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_pread</name>)<argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_pread</name>)<argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// We alloc one new FILE_EVENT for the fd so that multiple fibers</comment>
	<comment type="line">// can pread or pwrite the same fd.</comment>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>EVENT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fiber_iocp_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>pwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid fd: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_pwrite</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_pwrite</name>)<argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_pwrite</name>)<argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>EVENT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>write_ctx</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fiber_iocp_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>splice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd_in</name></decl></parameter>, <parameter><decl><type><name>loff_t</name> <modifier>*</modifier></type><name>poff_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_out</name></decl></parameter>,
	<parameter><decl><type><name>loff_t</name> <modifier>*</modifier></type><name>poff_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>loff_t</name></type> <name>off_in</name></decl>, <decl><type ref="prev"/><name>off_out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sqe_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd_in</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fd_out</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid fd_in: %d, fd_out: %d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fd_in</name></expr></argument>, <argument><expr><name>fd_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CHECK_API</name><argument_list>(<argument><expr><literal type="string">"sys_splice"</literal></expr></argument>, <argument><expr><name>sys_splice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_splice</name>)<argument_list>(<argument><expr><name>fd_in</name></expr></argument>, <argument><expr><name>poff_in</name></expr></argument>, <argument><expr><name>fd_out</name></expr></argument>, <argument><expr><name>poff_out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>sys_splice</name>)<argument_list>(<argument><expr><name>fd_in</name></expr></argument>, <argument><expr><name>poff_in</name></expr></argument>, <argument><expr><name>fd_out</name></expr></argument>, <argument><expr><name>poff_out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>off_in</name>  <operator>=</operator> <ternary><condition><expr><name>poff_in</name></expr>  ?</condition><then> <expr><operator>*</operator><name>poff_in</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>off_out</name> <operator>=</operator> <ternary><condition><expr><name>poff_out</name></expr> ?</condition><then> <expr><operator>*</operator><name>poff_out</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

	<comment type="line">// The same fd_in maybe be shared by multiple fibers, so we should</comment>
	<comment type="line">// alloc one new FILE_EVENT for each operation.</comment>
	<expr_stmt><expr><call><name>FILE_ALLOC</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>EVENT_SPLICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_WAIT_READ</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_uring_splice</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>fd_in</name></expr></argument>, <argument><expr><name>off_in</name></expr></argument>, <argument><expr><name>fd_out</name></expr></argument>, <argument><expr><name>off_out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
		<argument><expr><name>sqe_flags</name></expr></argument>, <argument><expr><name>IORING_OP_SPLICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WAITER_INC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WAITER_DEC</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_SPLICE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><operator>-</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>off_in</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>poff_in</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>poff_in</name> <operator>+=</operator> <name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>off_out</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>poff_out</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>poff_out</name> <operator>+=</operator> <name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>file_event_unrefer</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>file_sendfile</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>out_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_fd</name></decl></parameter>, <parameter><decl><type><name>off64_t</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>SPLICE_F_MOVE</name> <operator>|</operator> <name>SPLICE_F_MORE</name> <operator>|</operator> <name>SPLICE_F_NONBLOCK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


	<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pipe error=%s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>splice</name><argument_list>(<argument><expr><name>in_fd</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>splice</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>out_fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAS_IO_URING</comment>
</unit>
