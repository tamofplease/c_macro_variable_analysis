<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/hook/gethostbyname.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier> <name>WINAPI</name></type> <name>acl_fiber_gethostbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<expr_stmt><expr><specifier>static</specifier> <name>__thread</name> struct <name>hostent</name> <name>res</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_LEN</name></cpp:macro>	<cpp:value>4096</cpp:value></cpp:define>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>    <name>errnum</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>fiber_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>fiber_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type>  <name>__fiber_buf_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type>  <name>__fiber_res_key</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_fiber_gethostbyname_r</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUF_LEN</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
		<expr_stmt><expr><call><name>WSASetLastError</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>h_errno</name> <operator>=</operator> <name>errnum</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fiber_buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_fiber_get_specific</name><argument_list>(<argument><expr><name>__fiber_buf_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fiber_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber_buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><name>BUF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_set_specific</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fiber_buf_key</name></expr></argument>, <argument><expr><name>fiber_buf</name></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fiber_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fiber_res</name> <operator>=</operator> <operator>(</operator>struct <name>hostent</name> <operator>*</operator><operator>)</operator> <call><name>acl_fiber_get_specific</name><argument_list>(<argument><expr><name>__fiber_res_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fiber_res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber_res</name> <operator>=</operator> <operator>(</operator>struct <name>hostent</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hostent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_set_specific</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fiber_res_key</name></expr></argument>, <argument><expr><name>fiber_res</name></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fiber_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_fiber_gethostbyname_r</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fiber_res</name></expr></argument>, <argument><expr><name>fiber_buf</name></expr></argument>, <argument><expr><name>BUF_LEN</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<expr_stmt><expr><call><name>WSASetLastError</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>h_errno</name> <operator>=</operator> <name>errnum</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>get_addrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name>   <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): getaddrinfo error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COUNT</name></cpp:macro>	<cpp:value>64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>save_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ncopied</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>res</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>h_name</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ai</name> <operator>=</operator> <name>res</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ai</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SOCK_ADDR</name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator><name>SOCK_ADDR</name> <operator>*</operator><operator>)</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then>
			<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>
		<comment type="line">//len = sizeof(struct in_addr);</comment>
		<expr_stmt><expr><name>ncopied</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ncopied</name> <operator>&gt;</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sa</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>h_length</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>AF_INET6</name></cpp:ifdef>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sa</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>h_length</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>MAX_COUNT</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name>                <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>WINAPI</name></type> <name>acl_fiber_gethostbyname_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_errnop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ncopied</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>sys_gethostbyname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>sys_gethostbyname_r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_gethostbyname</name>)<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>h_errno</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><ternary><condition><expr><name>sys_gethostbyname_r</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>sys_gethostbyname_r</name>)
			<argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>h_errnop</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hostent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/********************************************************************/</comment>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ncopied</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ncopied</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): n(%d) &gt; buflen(%d)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>ncopied</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block" format="doxygen">/********************************************************************/</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>get_addrinfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>NO_DATA</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block" format="doxygen">/********************************************************************/</comment>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>MAX_COUNT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ncopied</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ncopied</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): n(%d) &gt; buflen(%d)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>ncopied</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>h_addr_list</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>save_result</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>ncopied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: i == 0, ncopied: %d, buflen: %d"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>ncopied</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>h_errnop</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>h_errnop</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>

<function><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>gethostbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_gethostbyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>gethostbyname_r</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr>struct <name>hostent</name> <operator>*</operator><name>ent</name></expr></argument>,
	<argument><expr><name>char</name> <operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size_t</name> <name>buflen</name></expr></argument>, <argument><expr>struct <name>hostent</name> <operator>*</operator><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>h_errnop</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MINGW</name></cpp:ifndef>
<function><type><name>int</name></type> <name>gethostbyname_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_errnop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_gethostbyname_r</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,
			<argument><expr><name>result</name></expr></argument>, <argument><expr><name>h_errnop</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></block_content></block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SYS_UNIX */</comment>
</unit>
