<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/hook/socket.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook.h"</cpp:file></cpp:include>

<function><type><name>socket_t</name> <name>WINAPI</name></type> <name>acl_fiber_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>sockfd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_socket</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sys_socket</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt> 

	<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_socket</name>)<argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>sockfd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="block">/* We shouldn't set NON_BLOCKING where because the NON_BLOCKING will
	 * be checked in acl_fiber_connect(). -- zsx, 2022.01.21
	 */</comment>
	if (sockfd != INVALID_SOCKET) {
		non_blocking(sockfd, NON_BLOCKING);
	} else {
		fiber_save_errno(acl_fiber_last_error());
	}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>sockfd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>WINAPI</name></type> <name>acl_fiber_listen</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>sys_listen</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sys_listen</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: sys_listen NULL"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>sys_listen</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>sys_listen</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>sys_listen</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
<function><type><name>socket_t</name> <name>WSAAPI</name></type> <name>acl_fiber_WSAAccept</name><parameter_list>(
    <parameter><decl><type><name>socket_t</name></type> <name>s</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <name>FAR</name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>,
    <parameter><decl><type><name>LPINT</name></type> <name>addrlen</name></decl></parameter>,
    <parameter><decl><type><name>LPCONDITIONPROC</name></type> <name>lpfnCondition</name></decl></parameter>,
    <parameter><decl><type><name>DWORD_PTR</name></type> <name>dwCallbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_accept</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>socket_t</name></type> <name>fiber_iocp_accept</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_ACCEPT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fiber_wait_read error=%s, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_ACCEPT</name></cpp:macro></cpp:define>

<function><type><name>socket_t</name> <name>WINAPI</name></type> <name>acl_fiber_accept</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
	<parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>clifd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>err</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid sockfd %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WSA_API</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>sys_WSAAccept</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sys_WSAAccept</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: sys_accept NULL"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>sys_accept</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sys_accept</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: sys_accept NULL"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WSA_API</name></cpp:ifdef>
		<return>return <expr><ternary><condition><expr><name>sys_WSAAccept</name></expr> ?</condition><then>
			<expr><call>(<modifier>*</modifier><name>sys_WSAAccept</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>INVALID_SOCKET</name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><ternary><condition><expr><name>sys_accept</name></expr> ?</condition><then>
			<expr><call>(<modifier>*</modifier><name>sys_accept</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>INVALID_SOCKET</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>fiber_iocp_accept</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>FAST_ACCEPT</name></cpp:ifdef>

	<comment type="line">// We can set the sockfd in non-blocking mode for not the io_uring.</comment>
	<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>SYS_WSA_API</name></cpp:ifdef>
	<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_WSAAccept</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_accept</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tcp_nodelay</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>clifd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//fiber_save_errno();</comment>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>error_again</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_read</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fiber_wait_read error=%s, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_IOCP</name></cpp:ifdef>
		<expr_stmt><expr><name>clifd</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>iocp_sock</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>tcp_nodelay</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>iocp_sock</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
			<comment type="block">/* iocp ·½Ê½ÏÂ£¬Ðèµ÷ÓÃÏÂÃæ¹ý³ÌÒÔÔÊÐíµ÷ÓÃ
			 * getpeername/getsockname
			 */</comment>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>,
				<argument><expr><name>SO_UPDATE_ACCEPT_CONTEXT</name></expr></argument>,
				<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name>clifd</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>SYS_WSA_API</name></cpp:ifdef>
		<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_WSAAccept</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_accept</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>tcp_nodelay</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>clifd</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>error_again</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !FAST_ACCEPT */</comment>
	<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IS_READABLE</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>CLR_READABLE</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_read</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fiber_wait_read error=%s, fd=%d"</literal></expr></argument>,
					<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed"</literal></expr></argument>,
					<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
					<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

		</block_content>}</block></else></if_stmt>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HAS_IOCP</name></cpp:ifdef>
		<expr_stmt><expr><name>clifd</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>iocp_sock</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>tcp_nodelay</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>iocp_sock</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
			<return>return <expr><name>clifd</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>clifd</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_accept</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>clifd</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>tcp_nodelay</name><argument_list>(<argument><expr><name>clifd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>clifd</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>error_again</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FAST_ACCEPT */</comment>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>event_iocp_connect</name><parameter_list>(<parameter><decl><type><name>EVENT</name><modifier>*</modifier></type> <name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name><modifier>*</modifier></type> <name>fe</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>socket_t</name></type> <name>fiber_iocp_connect</name><parameter_list>(<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_CONNECT</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_CONNECT</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fiber_wait_write rrror=%s, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_CONNECT</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>res</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><operator>-</operator><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name> <name>WINAPI</name></type> <name>acl_fiber_connect</name><parameter_list>(<parameter><decl><type><name>socket_t</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
	<parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>nblock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_connect</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sys_connect</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: sys_connect NULL"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>sys_connect</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>sys_connect</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>fiber_file_open_write</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_NDUBLOCK</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_CONNECTING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IOCP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>addrlen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="line">// The socket must be set to in no blocking status to avoid to be</comment>
	<comment type="line">// blocked by the sys_connect API. If sys_connect returns an error</comment>
	<comment type="line">// which is FIBER_EINPROGRESS or FIBER_EAGAIN and the original status</comment>
	<comment type="line">// of the socket is blocking, the socket should be be in waiting for</comment>
	<comment type="line">// writable by calling fiber_wait_write, which is just like the</comment>
	<comment type="line">// connecting process being in blocking mode.</comment>
	<expr_stmt><expr><name>nblock</name> <operator>=</operator> <call><name>is_non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nblock</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="line">// For IO_URING event, if the socket hasn't been set non-block,</comment>
	<comment type="line">// we should use io_uring to connect the server in block mode,</comment>
	<comment type="line">// else we should use connect system API in non-block, so the</comment>
	<comment type="line">// user can poll waiting for writable to check the connection is ok.</comment>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>nblock</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>fiber_iocp_connect</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IOCP</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>EVENT_IS_IOCP</name><argument_list>(<argument><expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>fiber_io_event</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SPIPE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>event_iocp_connect</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_connect</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_connect</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tcp_nodelay</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CLR_CONNECTING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>FIBER_EINPROGRESS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>error_again</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>FIBER_ECONNREFUSED</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect ECONNREFUSED"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>FIBER_ECONNRESET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect ECONNRESET"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>FIBER_ENETDOWN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect ENETDOWN"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>FIBER_ENETUNREACH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect ENETUNREACH"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>FIBER_EHOSTDOWN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect EHOSTDOWN"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>FIBER_EHOSTUNREACH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect EHOSTUNREACH"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_LINUX</name></cpp:ifdef>
		<comment type="block">/* Linux returns EAGAIN instead of ECONNREFUSED
		 * for unix sockets if listen queue is full -- see nginx
		 */</comment>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>FIBER_EAGAIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect EAGAIN"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: connect errno=%d, %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
				<argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If the non-blocking has bee set, we should return and don't wait */</comment>
	<if_stmt><if>if <condition>(<expr><name>nblock</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fiber_wait_write</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fiber_wait_write error=%s, fd=%d, cost=%ld"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sockfd</name></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLR_CONNECTING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_killed</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber-%u was killed, %s, spend %ld"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SOCK_ADDR</name></type> <name>saddr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>socklen_t</name></type> <name>n</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>fiber_save_errno</name><argument_list>(<argument><expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: getpeername error %s, fd: %d, spend %ld"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): getsockopt error: %s, ret: %d, err: %d, spend %ld"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
		<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>

<function><type><name>int</name></type> <name>socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_socket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_listen</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_accept</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_fiber_connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>TIMEOUT_CTX</name> <block>{
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>sockfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>   <name>id</name></decl>;</decl_stmt>
}</block></struct></type> <name>TIMEOUT_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMEOUT_CTX</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><operator>(</operator><name>TIMEOUT_CTX</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>fiber_file_get</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// we must check the fiber carefully here.</comment>
	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>tc</name><operator>-&gt;</operator><name>fiber</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name></name>
		<operator>||</operator> <name><name>tc</name><operator>-&gt;</operator><name>fiber</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// we can kill the fiber only if the fiber is waiting</comment>
	<comment type="line">// for readable ore writable of IO process.</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fiber_r</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FIBER_STATUS_WAIT_READ</name>
		<operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>fiber_w</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FIBER_STATUS_WAIT_WRITE</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>FIBER_EAGAIN</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_signal</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>setsockopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>optlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMEOUT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_setsockopt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name> <operator>||</operator> <operator>(</operator><name>optname</name> <operator>!=</operator> <name>SO_RCVTIMEO</name>
				<operator>&amp;&amp;</operator> <name>optname</name> <operator>!=</operator> <name>SO_SNDTIMEO</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>sys_setsockopt</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>sys_setsockopt</name>)<argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
			<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_setsockopt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"sys_setsockopt null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>optlen</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="number">0</literal></expr>:</case>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"optlen is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	<case>case <expr><literal type="number">1</literal></expr>:</case>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>optval</name><operator>)</operator></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">2</literal></expr>:</case>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>short</name><operator>*</operator><operator>)</operator> <name>optval</name><operator>)</operator></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">4</literal></expr>:</case>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int</name><operator>*</operator><operator>)</operator> <name>optval</name><operator>)</operator></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">8</literal></expr>:</case>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>long</name> <name>long</name><operator>*</operator><operator>)</operator> <name>optval</name><operator>)</operator></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">16</literal></expr>:</case>
		<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>timeval</name><operator>*</operator><operator>)</operator> <name>optval</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"invalid optlen=%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>TIMEOUT_CTX</name><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIMEOUT_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fiber</name></name>  <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_create_timer</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>val</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">64000</literal></expr></argument>, <argument><expr><name>fiber_timeout</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
