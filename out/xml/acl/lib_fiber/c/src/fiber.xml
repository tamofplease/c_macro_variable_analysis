<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/fiber.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_VALGRIND</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//#define FIBER_STACK_GUARD</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>FIBER_STACK_GUARD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_CACHE</name></cpp:macro>	<cpp:value>1000</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HOOK_ERRNO</name></cpp:ifdef>
<typedef>typedef <function_decl><type><name>int</name>  <modifier>*</modifier></type>(<modifier>*</modifier><name>errno_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>fcntl_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>errno_fn</name></type> <name>__sys_errno</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>fcntl_fn</name></type> <name>__sys_fcntl</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>THREAD</name> <block>{
	<decl_stmt><decl><type><name>RING</name></type>       <name>ready</name></decl>;</decl_stmt>		<comment type="block">/* ready fiber queue */</comment>
	<decl_stmt><decl><type><name>RING</name></type>       <name>dead</name></decl>;</decl_stmt>		<comment type="block">/* dead fiber queue */</comment>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><modifier>*</modifier></type><name>fibers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>   <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>   <name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>exitcode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>running</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>original</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>errnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>   <name>idgen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>     <name>switched</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>     <name>switched_old</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>nlocal</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SHARE_STACK</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name>      <modifier>*</modifier></type><name>stack_buff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>     <name>stack_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>     <name>stack_dlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>THREAD</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>THREAD</name>          <modifier>*</modifier></type><name>__main_fiber</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>THREAD</name> <modifier>*</modifier></type><name>__thread_fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type> <name>__scheduled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type> <name>__schedule_auto</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__thread</name> <name>int</name></type> <name>var_hook_sys_api</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SHARE_STACK</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>__shared_stack_size</name> <init>= <expr><literal type="number">1024000</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SYS_UNIX</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>FIBER_ALLOC_FN</name></type>  <name>__fiber_alloc_fn</name>  <init>= <expr><name>fiber_unix_alloc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FIBER_ORIGIN_FN</name></type> <name>__fiber_origin_fn</name> <init>= <expr><name>fiber_unix_origin</name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <name>FIBER_ALLOC_FN</name></type>  <name>__fiber_alloc_fn</name>  <init>= <expr><name>fiber_win_alloc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FIBER_ORIGIN_FN</name></type> <name>__fiber_origin_fn</name> <init>= <expr><name>fiber_win_origin</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_dummy_alloc</name><argument_list>(<argument><expr><name>ACL_FIBER_ATTR</name> <operator>*</operator><name>attr</name> <name>fiber_unused</name></expr></argument>,
	<argument><expr><macro><name>void</name><argument_list>(<argument>*start_fn</argument>)</argument_list></macro><operator>(</operator><name>ACL_FIBER</name><operator>*</operator><operator>)</operator> <name>fiber_unused</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name> <name>fiber_unused</name></expr></argument>)</argument_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"unknown OS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_dummy_origin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"unknown OS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>FIBER_ALLOC_FN</name></type>  <name>__fiber_alloc_fn</name>  <init>= <expr><name>fiber_dummy_alloc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FIBER_ORIGIN_FN</name></type> <name>__fiber_origin_fn</name> <init>= <expr><name>fiber_dummy_origin</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>acl_fiber_register</name><parameter_list>(<parameter><decl><type><name>FIBER_ALLOC_FN</name></type> <name>alloc_fn</name></decl></parameter>, <parameter><decl><type><name>FIBER_ORIGIN_FN</name></type> <name>origin_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__fiber_alloc_fn</name>  <operator>=</operator> <name>alloc_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__fiber_origin_fn</name> <operator>=</operator> <name>origin_fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>__fiber_key</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>acl_fiber_scheduled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__scheduled</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>THREAD</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><operator>(</operator><name>THREAD</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Free fiber object in the dead fibers link */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Free all possible aliving fiber object */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>tf</name><operator>-&gt;</operator><name>fibers</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>fibers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SHARE_STACK</name></cpp:ifdef>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>stack_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name><name>tf</name><operator>-&gt;</operator><name>original</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name><name>tf</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__main_fiber</name> <operator>==</operator> <name>__thread_fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_schedule_main_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__main_fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>thread_free</name><argument_list>(<argument><expr><name>__main_fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>__main_fiber</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fiber_key</name></expr></argument>, <argument><expr><name>thread_free</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_key_create error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>thread_init</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_once error %s\r\n"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__thread_fiber</name> <operator>=</operator> <operator>(</operator><name>THREAD</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>THREAD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name></name> <operator>=</operator> <call><name>__fiber_origin_fn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>size</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SHARE_STACK</name></cpp:ifdef>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_size</name></name> <operator>=</operator> <name>__shared_stack_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_buff</name></name> <operator>=</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_dlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__main_fiber</name> <operator>=</operator> <name>__thread_fiber</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>fiber_schedule_main_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>__fiber_key</name></expr></argument>, <argument><expr><name>__thread_fiber</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"pthread_setspecific error!\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_origin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SHARE_STACK</name></cpp:ifdef>

<function><type><name>char</name> <modifier>*</modifier></type><name>fiber_share_stack_addr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_buff</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>fiber_share_stack_bottom</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_buff</name></name> <operator>+</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>fiber_share_stack_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>fiber_share_stack_dlen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_dlen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_share_stack_set_dlen</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>stack_dlen</name></name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HOOK_ERRNO</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>

	<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>__lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__called</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__called</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__called</name><operator>++</operator></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ANDROID</name></cpp:ifdef>
	<expr_stmt><expr><name>__sys_errno</name>   <operator>=</operator> <operator>(</operator><name>errno_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"__errno"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>__sys_errno</name>   <operator>=</operator> <operator>(</operator><name>errno_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"__errno_location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>__sys_fcntl</name>   <operator>=</operator> <operator>(</operator><name>fcntl_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"fcntl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* See /usr/include/bits/errno.h for __errno_location */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ANDROID</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name><modifier>*</modifier></type>   <name>__errno</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <modifier>*</modifier><name>__errno_location</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__sys_errno</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fiber_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><call><name>__sys_errno</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>errnum</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name><operator>.</operator><name>errnum</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int fcntl(int fd, int cmd, ...)
{
	long arg;
	struct flock *lock;
	va_list ap;
	int ret;

	if (__sys_fcntl == NULL) {
		fiber_init();
	}

	va_start(ap, cmd);

	switch (cmd) {
	case F_GETFD:
	case F_GETFL:
		ret = __sys_fcntl(fd, cmd);
		break;
	case F_SETFD:
	case F_SETFL:
		arg = va_arg(ap, long);
		ret = __sys_fcntl(fd, cmd, arg);
		break;
	case F_GETLK:
	case F_SETLK:
	case F_SETLKW:
		lock = va_arg(ap, struct flock*);
		ret = __sys_fcntl(fd, cmd, lock);
		break;
	default:
		ret = -1;
		msg_error("%s(%d), %s: unknown cmd: %d, fd: %d",
			__FILE__, __LINE__, __FUNCTION__, cmd, fd);
		break;
	}

	va_end(ap);

	if (ret &lt; 0) {
		fiber_save_errno(acl_fiber_last_error());
	}

	return ret;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>acl_fiber_set_errno</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>errnum</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_errno</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_keep_errno</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yesno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fiber</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>yesno</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>FIBER_F_SAVE_ERRNO</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FIBER_F_SAVE_ERRNO</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_save_errno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curr</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_F_SAVE_ERRNO</name></expr>)</condition> <block>{<block_content>
		<comment type="line">//curr-&gt;flag &amp;= ~FIBER_F_SAVE_ERRNO;</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fiber_set_errno</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_kick</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>max</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_swap</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FIBER_STATUS_EXITING</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>slot</name> <init>= <expr><name><name>from</name><operator>-&gt;</operator><name>slot</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* If the cached dead fibers reached the limit,
		 * some will be freed
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>MAX_CACHE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>MAX_CACHE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fiber_kick</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>from</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator>
			<name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><operator>--</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><name>slot</name></expr>]</index></name><operator>-&gt;</operator><name>slot</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>slot</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>from</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_SUSPEND</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_EXITING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_RUNNING</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>from</name><operator>-&gt;</operator><name>swap_fn</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_timer</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier><name>fiber</name></type> <name>fiber_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>intptr</name> <init>= <expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>  <name>max</name> <init>= <expr><operator>*</operator><name>intptr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>intptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
		<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>fiber_kick</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_check_timer</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>intptr</name> <init>= <expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>intptr</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_create</name><argument_list>(<argument><expr><name>check_timer</name></expr></argument>, <argument><expr><name>intptr</name></expr></argument>, <argument><expr><literal type="number">64000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>acl_fiber_running</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_killed</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>fiber</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_F_KILLED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_signaled</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>fiber</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_F_SIGNALED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_closed</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>fiber</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_F_CLOSED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_canceled</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>fiber</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>FIBER_F_CANCELED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_kill</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ECANCELED</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_signal</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_signal</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: current fiber NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGTERM</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGKILL</name> <operator>||</operator> <name>signum</name> <operator>==</operator> <name>SIGTERM</name> <operator>||</operator> <name>signum</name> <operator>==</operator> <name>SIGQUIT</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>FIBER_F_KILLED</name> <operator>|</operator> <name>FIBER_F_SIGNALED</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>FIBER_F_SIGNALED</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>signum</name></name> <operator>=</operator> <name>signum</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>curr</name></expr>)</condition> <block>{<block_content> <comment type="line">// Just return if kill myself</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add the current fiber and signaled fiber in the head of the ready */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	fiber_ready(fiber);
	fiber_yield();
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>
	<comment type="block">/* First add current fiber, then the signaled fiber, and the signaled
	 * fiber will run first, then the current fiber.
	 */</comment>

	<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FIBER_F_SIGNALED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>acl_fiber_signum</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>signum</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exit_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>exitcode</name></name> <operator>=</operator> <name>exit_code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_EXITING</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_ready</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_EXITING</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>FIBER_STATUS_READY</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__thread_fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_yield</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>switched_old</name></name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>switched</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_switch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>acl_fiber_ndead</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>acl_fiber_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbase_init</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>flag</name></name>      <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fbase</name><operator>-&gt;</operator><name>event_waiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase_alloc</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name> <init>= <expr><operator>(</operator><name>FIBER_BASE</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIBER_BASE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fbase_init</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fbase</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fbase_free</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fbase_event_close</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Not closed? try again!</comment>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>fbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fbase_event_close</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>fiber</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_start</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>fiber</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>free_fn</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>free_fn</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>locals</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fiber_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>acl_fiber_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>pptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>fiber</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_alloc</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>APPL</name></cpp:macro>	<cpp:value>RING_TO_APPL</cpp:value></cpp:define>

	<comment type="block">/* Try to reuse the fiber memory in dead queue */</comment>
	<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>__fiber_alloc_fn</name><argument_list>(<argument><expr><name>fiber_start</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>__pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* Overflow ? */</comment>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>id</name></name>     <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>idgen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>signum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>fn</name></name>     <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>arg</name></name>    <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>oflag</name></name>  <operator>=</operator> <ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><name><name>attr</name><operator>-&gt;</operator><name>oflag</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>flag</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_NONE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>waiting</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fiber</name><operator>-&gt;</operator><name>holding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>fiber</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><name>fiber</name></expr></argument>, <argument><expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><name><name>attr</name><operator>-&gt;</operator><name>stack_size</name></name></expr> </then><else>: <expr><literal type="number">128000</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_schedule_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__schedule_auto</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_attr_init</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>oflag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>stack_size</name></name>  <operator>=</operator> <literal type="number">128000</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_attr_setstacksize</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>stack_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_attr_setsharestack</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>oflag</name></name> <operator>|=</operator> <name>ACL_FIBER_ATTR_SHARE_STACK</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>oflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_FIBER_ATTR_SHARE_STACK</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>acl_fiber_create</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER_ATTR</name></type> <name>attr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_fiber_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>stack_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<return>return <expr><call><name>acl_fiber_create2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>acl_fiber_create2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name> <init>= <expr><call><name>fiber_alloc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name> <operator>&gt;=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>size</name></name>  <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name></name> <operator>=</operator> <operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_realloc</name><argument_list>(
			<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name></name></expr></argument>, 
			<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FIBER</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>fibers</name><index>[<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>slot</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_fiber_ready</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__schedule_auto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>acl_fiber_scheduled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>fiber</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_use_share_stack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name><name>fiber</name><operator>-&gt;</operator><name>oflag</name></name> <operator>&amp;</operator> <name>ACL_FIBER_ATTR_SHARE_STACK</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>acl_fiber_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>acl_fiber_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>acl_fiber_id</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>fiber</name></expr> ?</condition><then> <expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_set_shared_stack_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SHARE_STACK</name></cpp:ifdef>
		<expr_stmt><expr><name>__shared_stack_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_fiber_get_shared_stack_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SHARE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<return>return <expr><name>__shared_stack_size</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_hook_api</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>var_hook_sys_api</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_schedule_set_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_schedule_with</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_fiber_schedule_set_event</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fiber_schedule</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_schedule</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__scheduled</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FAST_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>set_time_metric</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>fiber_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fiber_hook_api</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__scheduled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"thread-%lu: NO FIBER NOW"</literal></expr></argument>, <argument><expr><call><name>__pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fiber</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>FIBER_STATUS_READY</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>switched</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fiber_swap</name><argument_list>(<argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name></name></expr></argument>, <argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Release dead fiber */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>dead</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_free</name><argument_list>(<argument><expr><name>fiber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>fiber_io_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fiber_hook_api</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__scheduled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_count_inc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fiber_count_dec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_switch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"thread-%lu: NO FIBER in ready"</literal></expr></argument>, <argument><expr><call><name>__pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_swap</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fiber</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>ACL_FIBER</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//fiber-&gt;status = FIBER_STATUS_READY;</comment>

	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>switched</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fiber_swap</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_set_specific</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_LOCAL</name> <modifier>*</modifier></type><name>local</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: key NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: __thread_fiber: NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: running: NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <operator>++</operator><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>key</name> <operator>&gt;</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid key: %d &gt; nlocal: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><operator>*</operator><name>key</name></expr></argument>, <argument><expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>&lt;</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>nlocal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>locals</name></name> <operator>=</operator> <operator>(</operator><name>FIBER_LOCAL</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_realloc</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>locals</name></name></expr></argument>,
			<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FIBER_LOCAL</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>local</name> <operator>=</operator> <operator>(</operator><name>FIBER_LOCAL</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FIBER_LOCAL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>local</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>locals</name><index>[<expr><operator>*</operator><name>key</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt>

	<return>return <expr><operator>*</operator><name>key</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_fiber_get_specific</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_LOCAL</name> <modifier>*</modifier></type><name>local</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_fiber</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: __thread_fiber NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: running fiber NULL"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>__thread_fiber</name><operator>-&gt;</operator><name>running</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>nlocal</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>local</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>locals</name><index>[<expr><name>key</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><name>local</name></expr> ?</condition><then> <expr><name><name>local</name><operator>-&gt;</operator><name>ctx</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_last_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SYS_WIN</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>   <name>error</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WSASetLastError</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>error</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><name>errno</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_set_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>SYS_WIN</name></cpp:ifdef>
	<expr_stmt><expr><call><name>WSASetLastError</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>errnum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fiber_memstat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_stat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></function>
</unit>
