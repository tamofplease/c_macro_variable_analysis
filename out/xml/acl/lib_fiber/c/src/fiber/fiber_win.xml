<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/fiber/fiber_win.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>

<comment type="line">// see &lt;sdkddkver.h&gt;</comment>
<comment type="line">// see https://docs.microsoft.com/en-us/cpp/porting/modifying-winver-and-win32-winnt?redirectedfrom=MSDN&amp;view=msvc-170</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WINNT</name></cpp:ifdef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT_WS08</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&gt;=</operator> <name>_WIN32_WINNT_WS08</name></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_FIBER_EX</name></cpp:macro></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT_VISTA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&gt;=</operator> <name>_WIN32_WINNT_VISTA</name></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_FIBER_EX</name></cpp:macro></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>FIBER_WIN</name> <block>{
	<decl_stmt><decl><type><name>ACL_FIBER</name></type> <name>fiber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPVOID</name></type> <name>context</name></decl>;</decl_stmt>
}</block></struct></type> <name>FIBER_WIN</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_win_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_WIN</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><operator>(</operator><name>FIBER_WIN</name> <operator>*</operator><operator>)</operator> <name>fiber</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>DeleteFiber</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_win_swap</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_WIN</name> <modifier>*</modifier></type><name>fb_to</name> <init>= <expr><operator>(</operator><name>FIBER_WIN</name> <operator>*</operator><operator>)</operator> <name>to</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SwitchToFiber</name><argument_list>(<argument><expr><name><name>fb_to</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>fiber_win_start</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_WIN</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><operator>(</operator><name>FIBER_WIN</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>start_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fb</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_win_init</name><parameter_list>(<parameter><decl><type><name>FIBER_WIN</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>DeleteFiber</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_FIBER_EX</name></cpp:ifdef>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>CreateFiberEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>FIBER_FLAG_FLOAT_SWITCH</name></expr></argument>,
		<argument><expr><name>fiber_win_start</name></expr></argument>, <argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>CreateFiber</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>fiber_win_start</name></expr></argument>, <argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: CreateFiberEx error=%s, %d"</literal></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_win_alloc</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_WIN</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><operator>(</operator><name>FIBER_WIN</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><name><name>attr</name><operator>-&gt;</operator><name>stack_size</name></name></expr> </then><else>: <expr><literal type="number">128000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>init_fn</name></name>  <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_win_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>free_fn</name></name>  <operator>=</operator> <name>fiber_win_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>swap_fn</name></name>  <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>, <argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_win_swap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>start_fn</name></name> <operator>=</operator> <name>start_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name>        <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <name>fb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_win_origin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_WIN</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><operator>(</operator><name>FIBER_WIN</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_FIBER_EX</name></cpp:ifdef>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>ConvertThreadToFiberEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FIBER_FLAG_FLOAT_SWITCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>ConvertThreadToFiber</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>free_fn</name></name> <operator>=</operator> <name>fiber_win_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>swap_fn</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>, <argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_win_swap</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <name>fb</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
