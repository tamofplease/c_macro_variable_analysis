<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/fiber/fiber_unix.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>USE_BOOST_JMP</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>USE_BOOST_JMP</name></cpp:macro></cpp:define>
<cpp:undef>#  <cpp:directive>undef</cpp:directive> <name>SHARE_STACK</name></cpp:undef>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"boost_jmp.h"</cpp:file></cpp:include>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JMP_DEF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>USE_JMP</name></cpp:macro></cpp:define>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"x86_jmp.h"</cpp:file></cpp:include>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JMP_EXP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>USE_JMP</name></cpp:macro></cpp:define>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"exp_jmp.h"</cpp:file></cpp:include>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SETJMP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sigsetjmp(ctx, 0)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>LONGJMP</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>siglongjmp(ctx, 1)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>USE_VALGRIND</name></cpp:ifdef>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>FIBER_UNIX</name> <block>{
	<decl_stmt><decl><type><name>ACL_FIBER</name></type> <name>fiber</name></decl>;</decl_stmt>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>USE_VALGRIND</name></cpp:ifdef>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vid</name></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if># <cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>fcontext_t</name></type> <name>fcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>      <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#  <cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JMP_DEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#   <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>env</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#   <cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>sigjmp_buf</name></type> <name>env</name></decl>;</decl_stmt>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#  <cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JMP_EXP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>label_t</name></type> <name>env</name></decl>;</decl_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name></decl>;</decl_stmt>
}</block></struct></type> <name>FIBER_UNIX</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SHARE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#  <cpp:directive>error</cpp:directive> <cpp:literal>"Not support shared stack when using boost jmp!"</cpp:literal></cpp:error>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>s_jump_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swap_fcontext</name><parameter_list>(<parameter><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>s_jump_t</name></type> <name>jump</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>jmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>transfer_t</name></type> <name>trans</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name><name>jump</name><operator>.</operator><name>from</name></name>  <operator>=</operator> <name>from</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>.</operator><name>to</name></name>    <operator>=</operator> <name>to</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>trans</name>      <operator>=</operator> <call><name>jump_fcontext</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>fcontext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>jmp</name>        <operator>=</operator> <operator>(</operator><name>s_jump_t</name><operator>*</operator><operator>)</operator> <name><name>trans</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jmp</name><operator>-&gt;</operator><name>from</name><operator>-&gt;</operator><name>fcontext</name></name> <operator>=</operator> <name><name>trans</name><operator>.</operator><name>fctx</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SHARE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_stack_save</name><parameter_list>(<parameter><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>curr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stack_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <call><name>fiber_share_stack_bottom</name><argument_list>()</argument_list></call> <operator>-</operator> <name>stack_top</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name> <operator>&gt;</operator> <name><name>curr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name>stack_top</name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_stack_restore</name><parameter_list>(<parameter><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>curr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// After coming back, the current fiber's stack should be</comment>
	<comment type="line">// restored and copied from its private memory to the shared</comment>
	<comment type="line">// stack running memory.</comment>
	<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bottom</name> <init>= <expr><call><name>fiber_share_stack_bottom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bottom</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fiber_share_stack_set_dlen</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// else if from-&gt;dlen == 0, the fiber must be the origin fiber</comment>
	<comment type="line">// that its fiber id should be 0.</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_unix_swap</name><parameter_list>(<parameter><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// The shared stack mode isn't supported in USE_BOOST_JMP current,</comment>
	<comment type="line">// which may be supported in future.</comment>
	<comment type="line">// If the fiber isn't in exiting status, and not the origin fiber,</comment>
	<comment type="line">// the fiber's running stack should be copied from the shared running</comment>
	<comment type="line">// stack to the fiber's private memory.</comment>
<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SHARE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>oflag</name></name> <operator>&amp;</operator> <name>ACL_FIBER_ATTR_SHARE_STACK</name>
		<operator>&amp;&amp;</operator> <name><name>from</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_EXITING</name>
		<operator>&amp;&amp;</operator> <name><name>from</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<decl_stmt><decl><type><name>char</name></type> <name>stack_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>fiber_stack_save</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stack_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>swap_fcontext</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>

	<comment type="block">/* Use setcontext() for the initial jump, as it allows us to set up
	 * a stack, but continue with longjmp() as it's much faster.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SETJMP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Context just be used once for set up a stack, which will
		 * be freed in fiber_start. The context in __thread_fiber
		 * was set NULL.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>setcontext</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>LONGJMP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>	<comment type="line">// Use the default context swap API</comment>
	<if_stmt><if>if <condition>(<expr><call><name>swapcontext</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: swapcontext error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SHARE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><operator>(</operator><name>FIBER_UNIX</name> <operator>*</operator><operator>)</operator> <call><name>acl_fiber_running</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>oflag</name></name> <operator>&amp;</operator> <name>ACL_FIBER_ATTR_SHARE_STACK</name>
			<operator>&amp;&amp;</operator> <name><name>curr</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>FIBER_STATUS_EXITING</name></expr>)</condition> <block>{<block_content>

			<expr_stmt><expr><call><name>fiber_stack_restore</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_unix_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><operator>(</operator><name>FIBER_UNIX</name> <operator>*</operator><operator>)</operator> <name>fiber</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_VALGRIND</name></cpp:ifdef>
	<expr_stmt><expr><call><name>VALGRIND_STACK_DEREGISTER</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>vid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_unix_start</name><parameter_list>(<parameter><decl><type><name>transfer_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>s_jump_t</name> <modifier>*</modifier></type><name>jmp</name> <init>= <expr><operator>(</operator><name>s_jump_t</name><operator>*</operator><operator>)</operator> <name><name>arg</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>jmp</name><operator>-&gt;</operator><name>from</name><operator>-&gt;</operator><name>fcontext</name></name> <operator>=</operator> <name><name>arg</name><operator>.</operator><name>fctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>jmp</name><operator>-&gt;</operator><name>to</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>start_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jmp</name><operator>-&gt;</operator><name>to</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<union>union <name>cc_arg</name>
<block>{
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_unix_start</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>union</name>  <name>cc_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>fb</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>fb</name> <operator>=</operator> <operator>(</operator><name>FIBER_UNIX</name> <operator>*</operator><operator>)</operator><name><name>arg</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_JMP</name></cpp:ifdef>
	<comment type="block">/* When using setjmp/longjmp, the context just be used only once */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>start_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fb</name><operator>-&gt;</operator><name>fiber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// !USE_BOOST_JMP</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fiber_unix_init</name><parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><operator>(</operator><name>FIBER_UNIX</name> <operator>*</operator><operator>)</operator> <name>fiber</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>origin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>union</name> <name>cc_arg</name></name></type> <name>carg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sigset_t</name></type> <name>zero</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If using realloc, real memory will be used, when we first
		 * free and malloc again, then we'll just use virtual memory,
		 * because memcpy will be called in realloc.
		 */</comment>
		<expr_stmt><expr><call><name>stack_free</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>buff</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SHARE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>oflag</name></name> <operator>&amp;</operator> <name>ACL_FIBER_ATTR_SHARE_STACK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>fiber_share_stack_bottom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fcontext</name></name> <operator>=</operator> <call><name>make_fcontext</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>,
			<argument><expr><call><name>fiber_share_stack_size</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>transfer_t</name></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_unix_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>fb</name><operator>-&gt;</operator><name>buff</name></name> <operator>+</operator> <name><name>fb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fcontext</name></name> <operator>=</operator> <call><name>make_fcontext</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>transfer_t</name></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_unix_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>fb</name><operator>-&gt;</operator><name>buff</name></name> <operator>+</operator> <name><name>fb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fcontext</name></name> <operator>=</operator> <call><name>make_fcontext</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
		<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>transfer_t</name></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_unix_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>carg</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>fiber</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>(</operator><name>ucontext_t</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ucontext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ucontext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGURG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>getcontext</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: getcontext error: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SHARE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>oflag</name></name> <operator>&amp;</operator> <name>ACL_FIBER_ATTR_SHARE_STACK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name>   <operator>=</operator> <call><name>fiber_share_stack_addr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name> <operator>=</operator> <call><name>fiber_share_stack_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name>   <operator>=</operator> <name><name>fb</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name> <operator>=</operator> <name><name>fb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name>   <operator>=</operator> <name><name>fb</name><operator>-&gt;</operator><name>buff</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name> <operator>=</operator> <name><name>fb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>origin</name> <operator>=</operator> <operator>(</operator><name>FIBER_UNIX</name><operator>*</operator><operator>)</operator> <call><name>fiber_origin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_link</name></name> <operator>=</operator> <name><name>origin</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>makecontext</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_unix_start</name></expr></argument>,
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>carg</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>carg</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_VALGRIND</name></cpp:ifdef>
	<comment type="block">/* Avoid the valgrind warning */</comment>
<cpp:if># <cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BOOST_JMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>vid</name></name> <operator>=</operator> <call><name>VALGRIND_STACK_REGISTER</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>vid</name></name> <operator>=</operator> <call><name>VALGRIND_STACK_REGISTER</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name></expr></argument>,
		<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_sp</name></name>
		<operator>+</operator> <name><name>fb</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>uc_stack</name><operator>.</operator><name>ss_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_unix_alloc</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_FIBER</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>ACL_FIBER_ATTR</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><operator>(</operator><name>FIBER_UNIX</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><name><name>attr</name><operator>-&gt;</operator><name>stack_size</name></name></expr> </then><else>: <expr><literal type="number">128000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<comment type="block">/* No using calloc just avoiding using real memory */</comment>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>buff</name></name>           <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>size</name></name>           <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>oflag</name></name>    <operator>=</operator> <ternary><condition><expr><name>attr</name></expr> ?</condition><then> <expr><name><name>attr</name><operator>-&gt;</operator><name>oflag</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>init_fn</name></name>  <operator>=</operator> <name>fiber_unix_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>free_fn</name></name>  <operator>=</operator> <name>fiber_unix_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>swap_fn</name></name>  <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>, <argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>fiber_unix_swap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>start_fn</name></name> <operator>=</operator> <name>start_fn</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>ACL_FIBER</name> <operator>*</operator><operator>)</operator> <name>fb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_FIBER</name> <modifier>*</modifier></type><name>fiber_unix_origin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIBER_UNIX</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><operator>(</operator><name>FIBER_UNIX</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_BOOST_JMP</name></cpp:ifdef>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>size</name></name>           <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>buff</name></name>           <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>init_fn</name></name>  <operator>=</operator> <name>fiber_unix_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>free_fn</name></name>  <operator>=</operator> <name>fiber_unix_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>swap_fn</name></name>  <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>, <argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>fiber_unix_swap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>start_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_JMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<comment type="block">/* Set context NULL when using setjmp that setcontext will not be
	 * called in fiber_swap.
	 */</comment>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>(</operator><name>ucontext_t</name> <operator>*</operator><operator>)</operator> <call><name>stack_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ucontext_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>free_fn</name></name> <operator>=</operator> <name>fiber_unix_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>fiber</name><operator>.</operator><name>swap_fn</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>, <argument><expr><name>ACL_FIBER</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>fiber_unix_swap</name></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>fb</name><operator>-&gt;</operator><name>fiber</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
