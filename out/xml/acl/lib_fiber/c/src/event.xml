<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/event.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/event_epoll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/event_kqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/event_select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/event_poll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/event_wmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/event_iocp.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/event_io_uring.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type> <name>__event_mode</name> <init>= <expr><name>FIBER_EVENT_KERNEL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>event_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>__event_mode</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>FIBER_EVENT_KERNEL</name></expr>:</case>
	<case>case <expr><name>FIBER_EVENT_POLL</name></expr>:</case>
	<case>case <expr><name>FIBER_EVENT_SELECT</name></expr>:</case>
	<case>case <expr><name>FIBER_EVENT_WMSG</name></expr>:</case>
	<case>case <expr><name>FIBER_EVENT_IO_URING</name></expr>:</case>
		<expr_stmt><expr><name>__event_mode</name> <operator>=</operator> <name>event_mode</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>event_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>__event_mode</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>FIBER_EVENT_POLL</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_POLL</name></cpp:ifdef>
		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_poll_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support!\r\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	<case>case <expr><name>FIBER_EVENT_SELECT</name></expr>:</case>
		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_select_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>FIBER_EVENT_WMSG</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_WMSG</name></cpp:ifdef>
		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_wmsg_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): WMSG not support!\r\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	<case>case <expr><name>FIBER_EVENT_IO_URING</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_IO_URING</name></cpp:ifdef>
		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_io_uring_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): IO_URING not support!\r\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_epoll_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_kqueue_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IOCP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>event_iocp_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support!\r\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>fdcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>maxfd</name></name>   <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>waiter</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// init the event's stamp when create each event</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_POLL</name></cpp:ifdef>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name> <operator>=</operator> <call><name>timer_cache_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_EPOLL</name></cpp:ifdef>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name> <operator>=</operator> <call><name>timer_cache_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event_name</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>ev</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_handle_t</name></type> <name>event_handle</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>ev</name><operator>-&gt;</operator><name>handle</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_free</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>timer_cache_free</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EPOLL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>timer_cache_free</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>event_set_stamp</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SET_TIME</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// decrease the SET_TIME's calling count.</comment>
	<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>stamp</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>event_get_stamp</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>ev</name><operator>-&gt;</operator><name>stamp</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
<function><type><name>int</name></type> <name>event_checkfd</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>getsockfamily</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SPIPE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>checkfd</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SPIPE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_FILE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>event_checkfd</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If we cannot seek, it must be a pipe, socket or fifo, else it
	 * should be a file.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ESPIPE</name></expr>:</case>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SPIPE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		<case>case <expr><name>EBADF</name></expr>:</case>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_BADFD</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): badfd=%d, fe=%p"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_FILE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>EVENT_IS_IO_URING</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_FILE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// Try to check if the fd can be monitored by the current</comment>
		<comment type="line">// event engine by really add_read/del_read it.</comment>

		<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>add_read</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_FILE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>del_read</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): del_read error=%s, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SPIPE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// !SYS_WIN</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int check_read_wait(EVENT *ev, FILE_EVENT *fe)
{
	if (ev-&gt;add_read(ev, fe) == -1) {
		fe-&gt;type = TYPE_NOSOCK;
		return -1;
	}

	if (ev-&gt;del_read(ev, fe) == -1) {
		fe-&gt;type = TYPE_NOSOCK;
		msg_error("%s(%d): del_read failed, fd=%d",
			__FUNCTION__, __LINE__, fe-&gt;fd);
		return -1;
	}

	fe-&gt;type = TYPE_SOCK;
	return 0;
}

static int check_write_wait(EVENT *ev, FILE_EVENT *fe)
{
	if (ev-&gt;add_write(ev, fe) == -1) {
		fe-&gt;type = TYPE_NOSOCK;
		return -1;
	}

	if (ev-&gt;del_write(ev, fe) == -1) {
		fe-&gt;type = TYPE_NOSOCK;
		msg_error("%s(%d): del_write failed, fd=%d",
			__FUNCTION__, __LINE__, fe-&gt;fd);
		return -1;
	}

	fe-&gt;type = TYPE_SOCK;
	return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>event_add_read</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>event_proc</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_NONE</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>event_checkfd</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ret</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// If the fd's type has been checked and it isn't a valid socket,</comment>
	<comment type="line">// return immediately.</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_EVENTABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_FILE</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_BADFD</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>EBADF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid fd=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_UNIX</name></cpp:ifdef>
			<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid type=%d, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <operator>(</operator><name>socket_t</name><operator>)</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fd=%d &gt;= setsize=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;</operator> <name>EVENT_DEL_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_DEL_READ</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_DIRECT</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>add_read</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<comment type="line">// we should check the fd's type for the first time.</comment>
		<if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>parent</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>|=</operator> <name>EVENT_ADD_READ</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_add_write</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>event_proc</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_NONE</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>event_checkfd</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ret</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_EVENTABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_FILE</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_BADFD</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <operator>(</operator><name>socket_t</name><operator>)</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fd=%d &gt;= setsize=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>ev</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;</operator> <name>EVENT_DEL_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_DEL_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_DIRECT</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>add_write</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>parent</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>|=</operator> <name>EVENT_ADD_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_del_read</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;</operator> <name>EVENT_ADD_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;=</operator><operator>~</operator><name>EVENT_ADD_READ</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>parent</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>|=</operator> <name>EVENT_DEL_READ</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_del_write</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;</operator> <name>EVENT_ADD_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_ADD_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>parent</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>|=</operator> <name>EVENT_DEL_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_close</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>del_read</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>del_write</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* when one fiber add read/write and del read/write by another fiber
	 * in one loop, the fe-&gt;mask maybe be 0 and the fiber's fe maybe been
	 * added into events task list
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>parent</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>event_fflush</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>event_fflush</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_prepare</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <call><name>ring_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <call><name>ring_to_appl</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>FILE_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;</operator> <name>EVENT_DEL_READ</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>del_read</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;</operator> <name>EVENT_DEL_WRITE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>del_write</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;</operator> <name>EVENT_ADD_READ</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>add_read</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>&amp;</operator> <name>EVENT_ADD_WRITE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ev</name><operator>-&gt;</operator><name>add_write</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>oper</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_APPL</name></cpp:macro>	<cpp:value>ring_to_appl</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_POLL</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>event_process_poll</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>POLL_EVENT</name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_CACHE_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<comment type="block">/* Check and call all the pe's callback which was timeout except the
	 * pe which has been ready and been removed from ev-&gt;poll_list. The
	 * removing operations are in read_callback or write_callback in the
	 * hook/poll.c.
	 */</comment>
	<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>expire</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_list</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Call all the pe's callback with the same expire time.</comment>
		<macro><name>ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;node-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
			<expr_stmt><expr><name>pe</name> <operator>=</operator> <call><name>TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>POLL_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>pe</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><operator>(</operator><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_ready</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pe</name> <operator>=</operator> <call><name>TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>POLL_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pe</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>poll_ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EPOLL</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>event_process_epoll</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPOLL_EVENT</name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name> <init>= <expr><call><name>event_get_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_CACHE_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>expire</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>expire</name></name> <operator>&lt;=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_list</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<macro><name>ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;node-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
			<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>EPOLL_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ee</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><operator>(</operator><name>head</name> <operator>=</operator> <call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_ready</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ee</name> <operator>=</operator> <call><name>TO_APPL</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>EPOLL_EVENT</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ee</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>epoll_ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>event_process</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* limit the event wait time just for fiber schedule exiting
	 * quickly when no tasks left
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">1000</literal> <operator>||</operator> <name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>event_prepare</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// call the system event waiting API for any event arriving.</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ev</name><operator>-&gt;</operator><name>event_wait</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>event_set_stamp</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// reset the stamp after event waiting.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_POLL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>event_process_poll</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EPOLL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>event_process_epoll</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

</unit>
