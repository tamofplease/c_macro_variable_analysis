<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/dns/valid_hostname.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"valid_hostname.h"</cpp:file></cpp:include>

<comment type="block">/* valid_hostname - screen out bad hostnames */</comment>

<function><type><name>int</name></type> <name>valid_hostname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gripe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"valid_hostname"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>label_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>label_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>non_numeric</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Trivial cases first.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: empty hostname"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Find bad characters or label lengths. Find adjacent delimiters.
	 */</comment>
	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* grr.. */</comment>
			<if_stmt><if>if <condition>(<expr><name>label_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>label_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>label_length</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>label_length</name> <operator>&gt;</operator> <name>VALID_LABEL_LEN</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: hostname label too "</literal>
						<literal type="string">"long: %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>non_numeric</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>label_length</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: misplaced delimiter:"</literal>
						<literal type="string">" %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>label_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>label_length</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>label_length</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: misplaced hyphen:"</literal>
						<literal type="string">" %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SLOPPY_VALID_HOSTNAME</name></cpp:ifdef>
		<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <call><name>valid_ipv6_hostaddr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>DONT_GRIPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>non_numeric</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: invalid character %d"</literal>
					<literal type="string">"(decimal): %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>non_numeric</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: numeric hostname: %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SLOPPY_VALID_HOSTNAME</name></cpp:ifndef>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>-</operator> <name>name</name> <operator>&gt;</operator> <name>VALID_HOSTNAME_LEN</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: bad length %d for %.100s..."</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>cp</name> <operator>-</operator> <name>name</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* valid_hostaddr - verify numerical address syntax */</comment>

<function><type><name>int</name></type> <name>valid_hostaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gripe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"valid_hostaddr"</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Trivial cases first.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: empty address"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Protocol-dependent processing next.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>valid_ipv6_hostaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>gripe</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>valid_ipv4_hostaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>gripe</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* valid_ipv4_hostaddr - test dotted quad string for correctness */</comment>

<function><type><name>int</name></type> <name>valid_ipv4_hostaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gripe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"valid_ipv4_hostaddr"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>    <name><name>addr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>in_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>byte_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>byte_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_NEEDED</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>SAFE_STRNCPY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Scary code to avoid sscanf() overflow nasties.
	 * 
	 * This routine is called by valid_ipv6_hostaddr(). It must not call that
	 * routine, to avoid deadly recursion.
	 */</comment>
	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>addr</name></expr>;</init> <condition><expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>in_byte</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>in_byte</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>byte_val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>byte_count</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>byte_val</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>byte_val</name> <operator>+=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>byte_val</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: invalid octet value:"</literal>
						<literal type="string">" %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>in_byte</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: misplaced dot:"</literal>
						<literal type="string">" %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* XXX Allow 0.0.0.0 but not 0.1.2.3 */</comment>
			<if_stmt><if>if <condition>(<expr><name>byte_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>byte_val</name> <operator>==</operator> <literal type="number">0</literal>
			    <operator>&amp;&amp;</operator> <name><name>addr</name><index>[<expr><call><name>strspn</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">"0."</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: bad initial octet"</literal>
						<literal type="string">" value: %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>in_byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: invalid character %d(decimal): %.100s"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>byte_count</name> <operator>!=</operator> <name>BYTES_NEEDED</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: invalid octet count: %.100s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* valid_ipv6_hostaddr - validate IPv6 address syntax */</comment>

<function><type><name>int</name></type> <name>valid_ipv6_hostaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gripe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"valid_ipv6_hostaddr"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>null_field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SAFE_STRNCPY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * FIX 200501 The IPv6 patch validated syntax with getaddrinfo(), but I
	 * am not confident that everyone's system library routines are robust
	 * enough, like buffer overflow free. Remember, the valid_hostmumble()
	 * routines are meant to protect Postfix against malformed information
	 * in data received from the network.
	 * 
	 * We require eight-field hex addresses of the form 0:1:2:3:4:5:6:7,
	 * 0:1:2:3:4:5:6a.6b.7c.7d, or some :: compressed version of the same.
	 * 
	 * Note: the character position is advanced inside the loop. I have added
	 * comments to show why we can't get stuck.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<comment type="block">/* Terminate the loop. */</comment>
			<if_stmt><if>if <condition>(<expr><name>field</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: too few `:' in IPv6 "</literal>
						<literal type="string">"address: %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>null_field</name> <operator>!=</operator> <name>field</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: bad null last field "</literal>
						<literal type="string">"in IPv6 address: %.100s"</literal></expr></argument>,
						<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
		<case>case <expr><literal type="char">'.'</literal></expr>:</case>
			<comment type="block">/* Terminate the loop. */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>field</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>field</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malformed IPv4-in-IPv6"</literal>
						<literal type="string">" address: %.100s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt> 
			<comment type="block">/* NOT: valid_hostaddr(). Avoid recursion. */</comment>
			<return>return <expr><call><name>valid_ipv4_hostaddr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>gripe</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><literal type="char">':'</literal></expr>:</case>
		<comment type="block">/* advance by exactly 1 character position or terminate. */</comment>
			<if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isalnum</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: bad null first field"</literal>
						<literal type="string">" in IPv6 address: %.100s"</literal></expr></argument>,
						<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>field</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>field</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: too many `:' in"</literal>
						<literal type="string">" IPv6 address: %.100s"</literal></expr></argument>,
						<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>null_field</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: too many `::'"</literal>
							<literal type="string">" in IPv6 address: %.100s"</literal></expr></argument>,
							<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<return>return <expr><literal type="number">0</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>null_field</name> <operator>=</operator> <name>field</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt> 
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* Advance by at least 1 character position or terminate. */</comment>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name></expr></argument>, <argument><expr><literal type="string">"0123456789abcdefABCDEF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <comment type="block">/* - strspn((char *) cp, "0") */</comment> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: malformed IPv6 address: %.100s"</literal></expr></argument>,
						<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>gripe</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: invalid character"</literal>
						<literal type="string">" %d(decimal) in IPv6 address: %.100s"</literal></expr></argument>,
						<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
