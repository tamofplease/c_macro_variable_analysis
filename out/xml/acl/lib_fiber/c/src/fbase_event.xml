<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/fbase_event.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALPINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive>	<cpp:macro><name>HAS_EVENTFD</name></cpp:macro></cpp:define>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/eventfd.h&gt;</cpp:file></cpp:include>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/version.h&gt;</cpp:file></cpp:include>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>LINUX_VERSION_CODE</name> <operator>&gt;=</operator> <call><name>KERNEL_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">6</literal><operator>,</operator><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive>	<cpp:macro><name>HAS_EVENTFD</name></cpp:macro></cpp:define>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/eventfd.h&gt;</cpp:file></cpp:include>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/fiber_hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook/hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>

<comment type="line">//#undef	HAS_EVENTFD</comment>

<function><type><name>void</name></type> <name>fbase_event_open</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALPINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive>	<expr><name>LINUX_VERSION_CODE</name> <operator>&gt;=</operator> <call><name>KERNEL_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">6</literal><operator>,</operator><literal type="number">27</literal></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FD_CLOEXEC</name></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name>  <operator>=</operator> <call><name>eventfd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name> <operator>=</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>socket_t</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>sane_socketpair</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_duplex_pipe error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name>  <operator>=</operator> <name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name> <operator>=</operator> <name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s event_in(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <call><name>fiber_file_open_read</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name> <operator>==</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name><name>fbase</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>fiber_file_open_write</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_IO_URING</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>in</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SPIPE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>EVENT_SYSIO</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name></name> <operator>!=</operator> <name><name>fbase</name><operator>-&gt;</operator><name>in</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_SPIPE</name> <operator>|</operator> <name>TYPE_EVENTABLE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>EVENT_SYSIO</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fbase_event_close</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CLOSE_SOCKET</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name> <operator>!=</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name>
		 <operator>&amp;&amp;</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CLOSE_SOCKET</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Set the fds to INVALID_SOCKET to avoid closing the same fd</comment>
	<comment type="line">// more than once, because the fbase_event_close() maybe be called</comment>
	<comment type="line">// more than once:(</comment>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name>  <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>in</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fbase_event_wait</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>, <decl><type ref="prev"/><name>interrupt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>fd</name> <init>= <expr><name><name>fbase</name><operator>-&gt;</operator><name>in</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid event_in=%d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>read_wait</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: read_wait error=%s, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EVENTFD</name></cpp:ifdef>
			<comment type="line">// The eventfd can only use read API.</comment>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>fiber_read</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>fiber_recv</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EVENTFD</name></cpp:ifdef>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_fiber_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator> <name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_fiber_recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator> <name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: read ret=%d invalid length, "</literal>
				<literal type="string">"interrupt=%d, fd=%d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>interrupt</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>interrupt</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: read EINTR=%d, in=%d, ret=%d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>interrupt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>doze</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>FIBER_EAGAIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: scheduled %s, read EAGAIN, "</literal>
				<literal type="string">"in=%d, ret=%d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>acl_fiber_scheduled</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>:<expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>doze</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: read error %s, %d, in=%d, ret=%d,"</literal>
				<literal type="string">" interrupt=%d, fiber=%d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_in</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>interrupt</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fbase_event_wakeup</name><parameter_list>(<parameter><decl><type><name>FIBER_BASE</name> <modifier>*</modifier></type><name>fbase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>, <decl><type ref="prev"/><name>interrupt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>fd</name> <init>= <expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fbase=%p, invalid event_out=%d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>fbase</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EVENTFD</name></cpp:ifdef>
			<comment type="line">// The eventfd can only use write API.</comment>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fiber_write</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fiber_send</name><argument_list>(<argument><expr><name><name>fbase</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EVENTFD</name></cpp:ifdef>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_fiber_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_fiber_send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fiber=%d, write ret=%d invalid"</literal>
				<literal type="string">" length, interrupt=%d, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_fiber_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>interrupt</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>interrupt</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: write EINTR=%d, out=%d, ret=%d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>interrupt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>doze</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: write error %s, fb=%p, out=%d, ret=%d, "</literal>
			<literal type="string">"interrupt=%d, fiber=%d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fbase</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fbase</name><operator>-&gt;</operator><name>event_out</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>interrupt</name></expr></argument>,
			<argument><expr><call><name>acl_fiber_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
