<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/common/array.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"array.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>array_push_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ARRAY</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>array_push_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ARRAY</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>array_prepend</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>array_pop_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ARRAY</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>array_pop_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ARRAY</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARRAY_F_UNORDER</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* array_iter_head - get the head of the array */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>array_iter_head</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ARRAY</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* array_iter_next - get the next of the array */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>array_iter_next</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ARRAY</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>
 
<comment type="block">/* array_iter_tail - get the tail of the array */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>array_iter_tail</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ARRAY</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* array_iter_prev - get the prev of the array */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>array_iter_prev</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ARRAY</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* grows internal buffer to satisfy required minimal capacity */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>array_grow</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>min_delta</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>

	<comment type="block">/* don't need to grow the capacity of the array */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;=</operator> <name>min_capacity</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>min_capacity</name></expr>;</expr_stmt>
	<comment type="block">/* make delta a multiple of min_delta */</comment>
	<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>min_delta</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>delta</name> <operator>/=</operator> <name>min_delta</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>delta</name> <operator>*=</operator> <name>min_delta</name></expr>;</expr_stmt>
	<comment type="block">/* actual grow */</comment>
	<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>capacity</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_realloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* reset, just in case */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ARRAY</name> <modifier>*</modifier></type><name>array_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>init_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>ARRAY</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ARRAY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name>      <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>push_back</name></name>  <operator>=</operator> <name>array_push_back</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>push_front</name></name> <operator>=</operator> <name>array_push_front</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pop_back</name></name>   <operator>=</operator> <name>array_pop_back</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pop_front</name></name>  <operator>=</operator> <name>array_pop_front</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>iter_head</name></name>  <operator>=</operator> <name>array_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>iter_next</name></name>  <operator>=</operator> <name>array_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>iter_tail</name></name>  <operator>=</operator> <name>array_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>iter_prev</name></name>  <operator>=</operator> <name>array_iter_prev</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>init_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>init_size</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>array_pre_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>init_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>array_clean</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>	<name>idx</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>free_fn</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* sanity set to be null */</comment>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>array_free</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>array_clean</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_append</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_grow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
	<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_pred_insert</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>	<name>idx</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * a-&gt;items[count - 1] should be the last valid item node
	 * position should: positioin &gt;= 0 &amp;&amp; position &lt;= a-&gt;count - 1
	 */</comment>
	<if_stmt><if>if<condition>(<expr><name>position</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>position</name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_grow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* NOTICE: the C's index begin with 0
	 * when position == 0, just prepend one new node before the first node
	 * of the array
	 */</comment>
	<for>for<control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;</operator> <name>position</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>idx</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* if idx == 0 then we has arrived
		 * at the beginning of the array
		 */</comment>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>position</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_succ_insert</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>	<name>idx</name></decl>, <decl><type ref="prev"/><name>position_succ</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * a-&gt;items[count - 1] should be the last valid item node
	 * position should: position &gt;= 0 &amp;&amp; position &lt;= a-&gt;count - 1
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>position</name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_grow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>position_succ</name> <operator>=</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * position_succ should:
	 * position_succ &gt; 0 (position &gt;= 0 and position_succ = position + 1)
	 * and position_succ &lt;= a-&gt;count (when position == a-&gt;count - 1,
	 * position == a-&gt;count, and just append one new node after the
	 * last node)
	 * NOTICE: the C's index begin with 0
	 */</comment>
	<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;</operator> <name>position_succ</name></expr>;</condition> <incr><expr><name>idx</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>position_succ</name></expr>]</index></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>position_succ</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_prepend</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>array_pred_insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_delete</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pos</name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
		<return>return  <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARRAY_F_UNORDER</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_delete_obj</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>idx</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* not found */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* don't need to free the obj in array_delete */</comment>
	<return>return <expr><call><name>array_delete</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_delete_range</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ibegin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iend</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>imax</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ibegin</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>iend</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ibegin</name> <operator>&gt;</operator> <name>iend</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>imax</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>iend</name> <operator>&gt;</operator> <name>imax</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>iend</name> <operator>=</operator> <name>imax</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ibegin</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>iend</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-=</operator> <name>iend</name> <operator>-</operator> <name>ibegin</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>iend</name><operator>++</operator></expr>;</init> <condition><expr><name>iend</name> <operator>&lt;=</operator> <name>imax</name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>ibegin</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>iend</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_mv_idx</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ito</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ifrom</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>i_obj</name></decl>, <decl><type ref="prev"/><name>i_src</name></decl>, <decl><type ref="prev"/><name>i_max</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ito</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ifrom</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ito</name> <operator>&gt;=</operator> <name>ifrom</name> <operator>||</operator> <name>ifrom</name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>i_obj</name> <operator>=</operator> <name>ito</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i_src</name> <operator>=</operator> <name>ifrom</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i_max</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i_obj</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_src</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>i_src</name> <operator>&lt;=</operator> <name>i_max</name></expr>;</condition> <incr><expr><name>i_src</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i_obj</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i_src</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_obj</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-=</operator> <name>ifrom</name> <operator>-</operator> <name>ito</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* imposible, sanity check */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* if you are going to append a known and large number of items,
 * call this first
 */</comment>
<function><type><name>void</name></type> <name>array_pre_append</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>app_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">"array_pre_append"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>app_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: invalid input"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <name>app_count</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_grow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <name>app_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>array_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>idx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>idx</name></expr></argument> &gt;</argument_list></name> <name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>array_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>array_head</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>array_tail</name><parameter_list>(<parameter><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
