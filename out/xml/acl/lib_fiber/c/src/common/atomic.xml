<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/common/atomic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomic.h"</cpp:file></cpp:include>

<comment type="block">/* don't use atomic for IOS and MacOS */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#  <cpp:directive>undef</cpp:directive> <name>HAS_ATOMIC</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ATOMIC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/pthread_patch.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
#if !defined(HAS_ATOMIC)
# pragma message "Atomic not support, using thread mutex instead!"
#endif
*/</comment>

<struct>struct <name>ATOMIC</name> <block>{
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<function><type><name>ATOMIC</name> <modifier>*</modifier></type><name>atomic_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>ATOMIC</name><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ATOMIC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>atomic_free</name><parameter_list>(<parameter><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>atomic_set</name><parameter_list>(<parameter><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>InterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>PVOID</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>atomic_cas</name><parameter_list>(<parameter><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>cmp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>old</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><call><name>InterlockedCompareExchangePointer</name><argument_list>(
		<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>PVOID</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>atomic_xchg</name><parameter_list>(<parameter><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>old</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><call><name>InterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>PVOID</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>atomic_int64_set</name><parameter_list>(<parameter><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>InterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>PVOID</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>atomic_int64_fetch_add</name><parameter_list>(<parameter><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><call><name>InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>LONGLONG</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>atomic_int64_add_fetch</name><parameter_list>(<parameter><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><name>n</name> <operator>+</operator> <call><name>InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>LONGLONG</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>atomic_int64_cas</name><parameter_list>(<parameter><decl><type><name>ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ATOMIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>old</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <name>cmp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>old</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><call><name>InterlockedCompareExchange64</name><argument_list>(
		<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>LONGLONG</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>__sync_val_compare_and_swap</name><argument_list>(
			<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
