<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/common/pthread_patch.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread_patch.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>pthread_key_t</name></type> <name>key</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>TLS_KEY</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>TLS_KEY</name> <modifier>*</modifier></type><name>tls_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>TLS_VALUE</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>     <name>__thread_inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TLS_KEY</name></type> <name><name>__tls_key_list</name><index>[<expr><name>PTHREAD_KEYS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>__thread_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type>   <name>__tls_value_list_key</name>         <init>= <expr><name>TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type>  <name>__create_thread_control_once</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tls_value_list_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>pthread_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__thread_ended</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tls_value_list_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_ended</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__thread_ended</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__thread_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PTHREAD_KEYS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>&lt;</operator> <name>PTHREAD_KEYS_MAX</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>TlsFree</name><argument_list>(<argument><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>destructor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Ã¿¸ö½ø³ÌµÄÎ¨Ò»³õÊ¼»¯º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pthread_init_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pthread_init_once"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__thread_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__thread_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PTHREAD_KEYS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>destructor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name>        <operator>=</operator> <name>TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>__tls_value_list_key</name> <operator>=</operator> <call><name>TlsAlloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__tls_value_list_key</name> <operator>==</operator> <name>TLS_OUT_OF_INDEXES</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): TlsAlloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>__tls_value_list_key</name> <operator>&lt;</operator> <literal type="number">0</literal>
		<operator>||</operator> <name>__tls_value_list_key</name> <operator>&gt;=</operator> <name>PTHREAD_KEYS_MAX</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): TlsAlloc error(%s), not in(%d, %d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PTHREAD_KEYS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>__tls_value_list_key</name></expr>]</index></name><operator>.</operator><name>destructor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><name>__tls_value_list_key</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>__tls_value_list_key</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* »ñµÃÏß³Ì¾Ö²¿±äÁ¿Á´±í */</comment>

<function><type><specifier>static</specifier> <name>FIFO</name> <modifier>*</modifier></type><name>tls_value_list_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>tls_value_list_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tls_value_list_ptr</name> <operator>=</operator> <operator>(</operator><name>FIFO</name><operator>*</operator><operator>)</operator> <call><name>TlsGetValue</name><argument_list>(<argument><expr><name>__tls_value_list_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_value_list_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tls_value_list_ptr</name> <operator>=</operator> <call><name>fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TlsSetValue</name><argument_list>(<argument><expr><name>__tls_value_list_key</name></expr></argument>, <argument><expr><name>tls_value_list_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>tls_value_list_ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tls_value_list_on_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tls_value_list_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>tls_value_list_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tls_value_list_ptr</name> <operator>=</operator> <operator>(</operator><name>FIFO</name><operator>*</operator><operator>)</operator> <call><name>TlsGetValue</name><argument_list>(<argument><expr><name>__tls_value_list_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tls_value_list_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>TlsSetValue</name><argument_list>(<argument><expr><name>__tls_value_list_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fifo_free</name><argument_list>(<argument><expr><name>tls_value_list_ptr</name></expr></argument>, <argument><expr><name>tls_value_list_on_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_once</name><parameter_list>(<parameter><decl><type><name>pthread_once_t</name> <modifier>*</modifier></type><name>once_control</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>once_control</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>init_routine</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ö»ÓÐµÚÒ»¸öµ÷ÓÃ InterlockedCompareExchange µÄÏß³Ì²Å»áÖ´ÐÐ
	 * init_routine, ºóÐøÏß³ÌÓÀÔ¶ÔÚ InterlockedCompareExchange
	 * ÍâÔËÐÐ£¬²¢ÇÒÒ»Ö±½øÈë¿ÕÑ­»·Ö±ÖÁµÚÒ»¸öÏß³ÌÖ´ÐÐ init_routine
	 * Íê±Ï²¢ÇÒ½« *once_control ÖØÐÂ¸³Öµ, Ö»ÓÐÔÚ¶àºË»·¾³ÖÐ¶à¸öÏß³Ì
	 * Í¬Ê±ÔËÐÐÖÁ´ËÊ±²ÅÓÐ¿ÉÄÜ³öÏÖ¶ÌÔÝµÄºóÐøÏß³Ì¿ÕÑ­»·ÏÖÏó£¬Èç¹û
	 * ¶à¸öÏß³ÌË³ÐòÖÁ´Ë£¬ÔòÒòÎª *once_control ÒÑ¾­±»µÚÒ»¸öÏß³ÌÖØÐÂ
	 * ¸³Öµ¶ø²»»á½øÈëÑ­»·ÌåÄÚÖ»ËùÒÔÈç´Ë´¦Àí£¬ÊÇÎªÁË±£Ö¤ËùÓÐÏß³ÌÔÚ
	 * µ÷ÓÃ pthread_once ·µ»ØÇ° init_routine ±ØÐë±»µ÷ÓÃÇÒ½öÄÜ
	 * ±»µ÷ÓÃÒ»´Î, µ«ÔÚVC6ÏÂ£¬InterlockedCompareExchange ½Ó¿Ú¶¨Òå
	 * ÓÐÐ©¹ÖÒì£¬ÐèÒª×öÓ²ÐÔÖ¸¶¨²ÎÊýÀàÐÍ£¬²Î¼û &lt;Windows ¸ß¼¶±à³ÌÖ¸ÄÏ&gt;
	 * Jeffrey Richter, 366 Ò³
	 */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>LONG</name></type> <name>prev</name> <init>= <expr><call><name>InterlockedCompareExchange</name><argument_list>(
			<argument><expr><operator>(</operator><name>LONG</name><operator>*</operator><operator>)</operator> <name>once_control</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>PTHREAD_ONCE_INIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Ö»ÓÐµÚÒ»¸öÏß³Ì²Å»áÖÁ´Ë */</comment>
			<expr_stmt><expr><call><name>init_routine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* ½« *conce_control ÖØÐÂ¸³ÖµÒÔÊ¹ºóÐøÏß³Ì²»½øÈë while
			 * Ñ­»·»ò´Ó while Ñ­»·ÖÐÌø³ö
			 */</comment>
			<expr_stmt><expr><call><name>InterlockedExchange</name><argument_list>(<argument><expr><operator>(</operator><name>LONG</name><operator>*</operator><operator>)</operator> <name>once_control</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>prev</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ·ÀÖ¹¿ÕÑ­»·¹ý¶àµØÀË·ÑCPU */</comment>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" format="doxygen">/** sleep 1ms */</comment>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* ²»¿É´ï´úÂë£¬±ÜÃâ±àÒëÆ÷±¨¾¯¸æ */</comment>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_key_create</name><parameter_list>(<parameter><decl><type><name>pthread_key_t</name> <modifier>*</modifier></type><name>key_ptr</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pthread_key_create"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__create_thread_control_once</name></expr></argument>, <argument><expr><name>pthread_init_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>key_ptr</name> <operator>=</operator> <call><name>TlsAlloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key_ptr</name> <operator>==</operator> <name>TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ENOMEM</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>key_ptr</name> <operator>&gt;=</operator> <name>PTHREAD_KEYS_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%d) &gt; PTHREAD_KEYS_MAX(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>*</operator><name>key_ptr</name></expr></argument>, <argument><expr><name>PTHREAD_KEYS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TlsFree</name><argument_list>(<argument><expr><operator>*</operator><name>key_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>key_ptr</name> <operator>=</operator> <name>TLS_OUT_OF_INDEXES</name></expr>;</expr_stmt>
		<return>return <expr><name>ENOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><operator>*</operator><name>key_ptr</name></expr>]</index></name><operator>.</operator><name>destructor</name> <operator>=</operator> <name>destructor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__tls_key_list</name><index>[<expr><operator>*</operator><name>key_ptr</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <operator>*</operator><name>key_ptr</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>pthread_getspecific</name><parameter_list>(<parameter><decl><type><name>pthread_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TlsGetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_setspecific</name><parameter_list>(<parameter><decl><type><name>pthread_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pthread_setspecific"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>tls_value_list_ptr</name> <init>= <expr><call><name>tls_value_list_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>key</name> <operator>&gt;=</operator> <name>PTHREAD_KEYS_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%d) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>__tls_key_list</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>!=</operator> <name>key</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __tls_key_list[%d].key(%d) != key(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>__tls_key_list</name><index>[<expr><name>key</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>EINVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>tls_value_list_ptr</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>TLS_VALUE</name> <modifier>*</modifier></type><name>tls_value</name> <init>= <expr><operator>(</operator><name>TLS_VALUE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name></name> <operator>!=</operator> <name>NULL</name>
			<operator>&amp;&amp;</operator> <name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>

			<comment type="block">/* Èç¹ûÏàÍ¬µÄ¼ü´æÔÚÔòÐèÒªÏÈÊÍ·Å¾ÉÊý¾Ý */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>destructor</name></name> <operator>&amp;&amp;</operator> <name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name><operator>-&gt;</operator><name>destructor</name></name><argument_list>(<argument><expr><name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><call><name>TlsSetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>TLS_VALUE</name> <modifier>*</modifier></type><name>tls_value</name> <init>= <expr><operator>(</operator><name>TLS_VALUE</name><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TLS_VALUE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>tls_value</name><operator>-&gt;</operator><name>tls_key</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>__tls_key_list</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tls_value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fifo_push</name><argument_list>(<argument><expr><name>tls_value_list_ptr</name></expr></argument>, <argument><expr><name>tls_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): TlsSetValue(key=%d) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Free the mutex */</comment>
<function><type><name>int</name></type> <name>pthread_mutex_destroy</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_mutex_init</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pthread_mutexattr_t</name> <modifier>*</modifier></type><name>mattr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pthread_mutex_init"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>dynamic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Create the mutex, with initial value signaled */</comment>
	<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>(<argument><expr><operator>(</operator><name>SECURITY_ATTRIBUTES</name> <operator>*</operator><operator>)</operator> <name>mattr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): CreateMutex error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_mutex_lock</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pthread_mutex_lock"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_FAILED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): WaitForSingleObject error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_mutex_trylock</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pthread_mutex_trylock"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>FIBER_ETIME</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_FAILED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): WaitForSingleObject error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pthread_mutex_unlock"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mutex</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ReleaseMutex error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>thread_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>

<function><type><name>long</name></type> <name>thread_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>syscall</name><argument_list>(<argument><expr><name>SYS_gettid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><name>long</name></type> <name>thread_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><name>long</name></type> <name>thread_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__FreeBSD__</name> <operator>&gt;=</operator> <literal type="number">9</literal><operator>)</operator></expr></cpp:if>
	<return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>pthread_getthreadid_np</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"Unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
