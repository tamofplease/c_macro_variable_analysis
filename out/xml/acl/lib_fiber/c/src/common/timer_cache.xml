<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/common/timer_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timer_cache.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avl_cmp_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TIMER_CACHE_NODE</name> <modifier>*</modifier></type><name>n1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TIMER_CACHE_NODE</name><operator>*</operator><operator>)</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TIMER_CACHE_NODE</name> <modifier>*</modifier></type><name>n2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TIMER_CACHE_NODE</name><operator>*</operator><operator>)</operator> <name>v2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name> <init>= <expr><name><name>n1</name><operator>-&gt;</operator><name>expire</name></name> <operator>-</operator> <name><name>n2</name><operator>-&gt;</operator><name>expire</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>timer_cache_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIMER_CACHE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>avl_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>avl_cmp_fn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIMER_CACHE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>TIMER_CACHE_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>caches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cache_max</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

	<return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>timer_cache_size</name><parameter_list>(<parameter><decl><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>avl_numnodes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>timer_cache_free</name><parameter_list>(<parameter><decl><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_CACHE_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>caches</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ring_to_appl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>TIMER_CACHE_NODE</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>timer_cache_add</name><parameter_list>(<parameter><decl><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>expire</name></decl></parameter>, <parameter><decl><type><name>RING</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_CACHE_NODE</name></type> <name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>n</name><operator>.</operator><name>expire</name></name> <operator>=</operator> <name>expire</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>avl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>ring</name> <init>= <expr><call><name>ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>caches</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ring_to_appl</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>TIMER_CACHE_NODE</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIMER_CACHE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>expire</name></name> <operator>=</operator> <name>expire</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>timer_cache_remove</name><parameter_list>(<parameter><decl><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>expire</name></decl></parameter>, <parameter><decl><type><name>RING</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TIMER_CACHE_NODE</name></type> <name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>n</name><operator>.</operator><name>expire</name></name> <operator>=</operator> <name>expire</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>avl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"not found expire=%lld"</literal></expr></argument>, <argument><expr><name>expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>timer_cache_free_node</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>timer_cache_free_node</name><parameter_list>(<parameter><decl><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>TIMER_CACHE_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// The node will be removed if it hasn't any entry.</comment>
	<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// The node object can be cached for being reused in future.</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>cache_max</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>caches</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>cache_max</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>caches</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>timer_cache_remove_exist</name><parameter_list>(<parameter><decl><type><name>TIMER_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>expire</name></decl></parameter>, <parameter><decl><type><name>RING</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIMER_CACHE_NODE</name></type> <name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>n</name><operator>.</operator><name>expire</name></name> <operator>=</operator> <name>expire</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>avl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;node-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>entry</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>timer_cache_free_node</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
