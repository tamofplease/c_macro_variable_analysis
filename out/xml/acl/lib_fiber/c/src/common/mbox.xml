<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/common/mbox.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ypipe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mbox.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MINGW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALPINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/eventfd.h&gt;</cpp:file></cpp:include>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_EVENTFD</name></cpp:macro></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/version.h&gt;</cpp:file></cpp:include>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>LINUX_VERSION_CODE</name> <operator>&gt;=</operator> <call><name>KERNEL_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">6</literal><operator>,</operator><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/eventfd.h&gt;</cpp:file></cpp:include>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_EVENTFD</name></cpp:macro></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#   <cpp:directive>undef</cpp:directive>  <name>HAS_EVENTFD</name></cpp:undef>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#  <cpp:directive>undef</cpp:directive>  <name>HAS_EVENTFD</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//#  undef  HAS_EVENTFD</comment>

<struct>struct <name>MBOX</name> <block>{
	<decl_stmt><decl><type><name>socket_t</name></type> <name>in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nsend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YPIPE</name> <modifier>*</modifier></type><name>ypipe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>socket_t</name></type> <name>mbox_in</name><parameter_list>(<parameter><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mbox</name><operator>-&gt;</operator><name>in</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>socket_t</name></type> <name>mbox_out</name><parameter_list>(<parameter><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mbox</name><operator>-&gt;</operator><name>out</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox_create</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALPINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><name>INUX_VERSION_CODE</name> <operator>&gt;=</operator> <call><name>KERNEL_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">6</literal><operator>,</operator><literal type="number">27</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>FD_CLOEXEC</name></expr></init></decl>;</decl_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>eventfd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>sane_socketpair</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: duplex_pipe error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>mbox</name>        <operator>=</operator> <operator>(</operator><name>MBOX</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MBOX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>in</name></name>    <operator>=</operator> <name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>out</name></name>   <operator>=</operator> <name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>nsend</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>nread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>ypipe</name></name> <operator>=</operator> <call><name>ypipe_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>MBOX_T_MPSC</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>lock</name></name>  <operator>=</operator> <operator>(</operator><name>pthread_mutex_t</name> <operator>*</operator><operator>)</operator>
			<call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_mutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pthread_mutex_init error"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>mbox</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbox_free</name><parameter_list>(<parameter><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CLOSE_SOCKET</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mbox</name><operator>-&gt;</operator><name>out</name></name> <operator>!=</operator> <name><name>mbox</name><operator>-&gt;</operator><name>in</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CLOSE_SOCKET</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ypipe_free</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>ypipe</name></name></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mbox</name><operator>-&gt;</operator><name>lock</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbox_send</name><parameter_list>(<parameter><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name><name>mbox</name><operator>-&gt;</operator><name>lock</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ypipe_write</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>ypipe</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ypipe_flush</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>ypipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>nsend</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_fiber_send</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_fiber_write</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_EVENTFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: mbox write %d error %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>mbox_read</name><parameter_list>(<parameter><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>ypipe_read</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>ypipe</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>msg</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>mbox</name><operator>-&gt;</operator><name>nread</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>read_wait</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FIBER_ETIME</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_fiber_recv</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_fiber_read</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>ypipe_read</name><argument_list>(<argument><expr><name><name>mbox</name><operator>-&gt;</operator><name>ypipe</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>mbox_nsend</name><parameter_list>(<parameter><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mbox</name><operator>-&gt;</operator><name>nsend</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>mbox_nread</name><parameter_list>(<parameter><decl><type><name>MBOX</name> <modifier>*</modifier></type><name>mbox</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>mbox</name><operator>-&gt;</operator><name>nread</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
