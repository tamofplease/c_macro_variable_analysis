<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/common/argv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE_LEFT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;len - (a)-&gt;argc - 1)</cpp:value></cpp:define>

<comment type="block">/* argv_extend - extend array */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>argv_extend</name><parameter_list>(<parameter><decl><type><name>ARGV</name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>new_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name><name>argvp</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_realloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>new_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>argv_push_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ARGV</name></name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>argv_push_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ARGV</name></name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure that always argvp-&gt;argc &lt; argvp-&gt;len. */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>SPACE_LEFT</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>argv_extend</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>STRDUP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>argv_pop_back</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ARGV</name></name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>--</operator><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>argv_pop_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ARGV</name></name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* argv_iter_head - get the head of the array */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>argv_iter_head</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ARGV</name></name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* argv_iter_next - get the next of the array */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>argv_iter_next</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ARGV</name></name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>
 
<comment type="block">/* argv_iter_tail - get the tail of the array */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>argv_iter_tail</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ARGV</name></name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name>    <operator>=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* argv_iter_prev - get the prev of the array */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>argv_iter_prev</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ARGV</name></name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* argv_free - destroy string array */</comment>

<function><type><name>ARGV</name>   <modifier>*</modifier></type><name>argv_free</name><parameter_list>(<parameter><decl><type><name>ARGV</name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier><modifier>*</modifier></type><name>cpp</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>cpp</name> <operator>=</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argv</name></name></expr>;</init> <condition><expr><name>cpp</name> <operator>&lt;</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argv</name></name> <operator>+</operator> <name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>cpp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><operator>*</operator><name>cpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* argv_alloc - initialize string array */</comment>

<function><type><name>ARGV</name>   <modifier>*</modifier></type><name>argv_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ARGV</name>   <modifier>*</modifier></type><name>argvp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>sane_len</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure that always argvp-&gt;argc &lt; argvp-&gt;len. */</comment>

	<expr_stmt><expr><name>argvp</name>          <operator>=</operator> <operator>(</operator><name>ARGV</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>argvp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>len</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>sane_len</name>       <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>size</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name></name>    <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>sane_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>len</name></name>     <operator>=</operator> <name>sane_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>push_back</name></name>  <operator>=</operator> <name>argv_push_back</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>push_front</name></name> <operator>=</operator> <name>argv_push_front</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>pop_back</name></name>   <operator>=</operator> <name>argv_pop_back</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>pop_front</name></name>  <operator>=</operator> <name>argv_pop_front</name></expr>;</expr_stmt>

	<comment type="block">/* set the iterator callback */</comment>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>argv_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>argv_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>argv_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>argv_iter_prev</name></expr>;</expr_stmt>

	<return>return <expr><name>argvp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* argv_add - add string to vector */</comment>

<function><type><name>void</name></type>    <name>argv_add</name><parameter_list>(<parameter><decl><type><name>ARGV</name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure that always argvp-&gt;argc &lt; argvp-&gt;len. */</comment>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>SPACE_LEFT</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>argv_extend</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>STRDUP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>    <name>argv_addv</name><parameter_list>(<parameter><decl><type><name>ARGV</name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure that always argvp-&gt;argc &lt; argvp-&gt;len. */</comment>

	<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>SPACE_LEFT</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>argv_extend</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>STRDUP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* argv_terminate - terminate string array */</comment>

<function><type><name>void</name></type>    <name>argv_terminate</name><parameter_list>(<parameter><decl><type><name>ARGV</name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Trust that argvp-&gt;argc &lt; argvp-&gt;len. */</comment>
	<expr_stmt><expr><name><name>argvp</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>   <name>argv_size</name><parameter_list>(<parameter><decl><type><name>ARGV</name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>argvp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>argvp</name><operator>-&gt;</operator><name>argc</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* argv_split - split string into token array */</comment>

<function><type><name>ARGV</name> <modifier>*</modifier></type><name>argv_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ARGV</name>   <modifier>*</modifier></type><name>argvp</name> <init>= <expr><call><name>argv_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_string</name> <init>= <expr><call><name>STRDUP</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>saved_string</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>argv_terminate</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>argvp</name></expr>;</return>
</block_content>}</block></function>
</unit>
