<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/common/gettimeofday.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/fiber_base.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gettimeofday.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<struct>struct <name>timezone</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>tz_minuteswest</name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; minutes W of Greenwich */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>tz_dsttime</name></decl>;</decl_stmt>     <comment type="block" format="doxygen">/**&lt; type of dst correction */</comment>
}</block>;</struct>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>__GNUC__</name></cpp:ifndef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>EPOCHFILETIME</name></cpp:macro> <cpp:value>(116444736000000000i64)</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>EPOCHFILETIME</name></cpp:macro> <cpp:value>(116444736000000000LL)</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dummy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ptr</name></type> <name>fiber_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_tls</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__tls</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>main_free_tls</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__tls</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>__tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__tls</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type>  <name>once_key</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>once_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>__pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_key</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>main_free_tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_key</name></expr></argument>, <argument><expr><name>free_tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tls_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_control</name></expr></argument>, <argument><expr><name>once_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>once_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>once_key</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>__pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__tls</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>time_t</name></type> <name>last_init</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tvbase</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>frequency</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>stamp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tzflag</name></decl>;</decl_stmt>
}</block></struct></type> <name>TIME_CTX_T</name>;</typedef>

<function><type><name>int</name></type> <name>gettimeofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILETIME</name></type>        <name>ft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LARGE_INTEGER</name></type>   <name>li</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__int64</name></type>         <name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>             <name>nnested</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LARGE_INTEGER</name></type>   <name>stamp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TIME_CTX_T</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>TIME_CTX_T</name><operator>*</operator><operator>)</operator> <call><name>tls_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TIME_CTX_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ã¿¸öÏß³Ìµ÷ÓÃ´Ëº¯ÊýÊ±¶¼ÐèÒª½øÐÐ³õÊ¼»¯£¬µ«ÎªÁË·ÀÖ¹¿ª»úÊ±¼äÌ«³¤
	 * ¶øÔì³ÉÊ±ÖÓ¼ÆÊý¹éÁãÒç³ö£¬ËùÒÔÃ¿¸ô 1 ÌìÐ£¶ÔÒ»´Î»ù×¼Ê±¼ä
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAY_SEC</name></cpp:macro>	<cpp:value>(3600 * 24)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>last_init</name></name> <operator>&gt;</operator> <name>DAY_SEC</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_init</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

		<comment type="block">/* »ñµÃCPUµÄÊ±ÖÓÆµÂÊ */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Unable to get System Frequency(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* »ñµÃÏµÍ³Ê±¼ä(×Ô 1970 ÖÁ½ñ) */</comment>
		<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>li</name><operator>.</operator><name>LowPart</name></name>  <operator>=</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>li</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name>  <operator>=</operator> <name><name>li</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>       <comment type="block">/* In 100-nanosecond intervals */</comment>
		<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>EPOCHFILETIME</name></expr>;</expr_stmt>     <comment type="block">/* Offset to the Epoch time */</comment>
		<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>                <comment type="block">/* In microseconds */</comment>

		<comment type="block">/* ×ª»»³É±¾´Î¿ª»úºóµÄ»ù×¼Ê±¼ä */</comment>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tvbase</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>t</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tvbase</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>t</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* »ñµÃ±¾´Î¿ª»úºóµ½ÏÖÔÚµÄÊ±ÖÓ¼ÆÊý */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>stamp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unable to get System time(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¿ªÊ¼»ñµÃÏÖÔÚµÄÊ±¼ä½Ø */</comment>

	<if_stmt><if>if <condition>(<expr><name>tv</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* »ñµÃ±¾´Î¿ª»úºóÖÁÏÖÔÚµÄÊ±ÖÓ¼ÆÊý  */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stamp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unable to get System time(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ¼ÆËãµ±Ç°¾«È·Ê±¼ä½Ø */</comment>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name><name>stamp</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>stamp</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal>
			<operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tvbase</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>t</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tvbase</name><operator>.</operator><name>tv_usec</name></name> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>t</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tz</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>tzflag</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>_tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tzflag</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>tz</name><operator>-&gt;</operator><name>tz_minuteswest</name></name> <operator>=</operator> <name>_timezone</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tz</name><operator>-&gt;</operator><name>tz_dsttime</name></name> <operator>=</operator> <name>_daylight</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FAST_TIME</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomic.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>rte_rdtsc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<union>union <block>{
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>tsc_64</name></decl>;</decl_stmt>
		<struct>struct <block>{
			<decl_stmt><decl><type><name>unsigned</name></type> <name>lo_32</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>hi_32</name></decl>;</decl_stmt>
		}</block>;</struct>
	}</block> <decl><name>tsc</name></decl>;</union>

	<asm>asm <specifier>volatile</specifier>("rdtsc" :
			"=a" (tsc.lo_32),
			"=d" (tsc.hi_32));</asm>
	<return>return <expr><name><name>tsc</name><operator>.</operator><name>tsc_64</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__one_msec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__one_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__metric_diff</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>set_time_metric</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>startup</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>begin</name> <init>= <expr><call><name>rte_rdtsc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name>ms</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>end</name>        <operator>=</operator> <call><name>rte_rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__one_msec</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator> <operator>/</operator> <name>ms</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__one_sec</name>  <operator>=</operator> <name>__one_msec</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>startup</name>    <operator>=</operator> <call><name>rte_rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>now</name>        <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__one_sec</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;</operator> <name>startup</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__metric_diff</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name>startup</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>__metric_diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control2</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_metric_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>set_time_metric</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_fiber_gettimeofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier><name>tz</name></type> <name>fiber_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>now</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>UNLIKELY</name><argument_list>(<argument><expr><name>__metric_diff</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control2</name></expr></argument>, <argument><expr><name>time_metric_once</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>rte_rdtsc</name><argument_list>()</argument_list></call> <operator>+</operator> <name>__metric_diff</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name>  <operator>=</operator> <name>now</name> <operator>/</operator> <name>__one_sec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <operator>(</operator><name>now</name> <operator>%</operator> <name>__one_sec</name><operator>)</operator> <operator>/</operator> <name>__one_msec</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>HOOK_GETTIMEOFDAY</name></cpp:ifdef>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>gettimeofday_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>gettimeofday_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>gettimeofday_fn</name></type> <name>__gettimeofday</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hook_api</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__gettimeofday</name> <operator>=</operator> <operator>(</operator><name>gettimeofday_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"gettimeofday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__gettimeofday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hook_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>hook_api</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
<decl_stmt><decl><type><name>int</name></type> <name>gettimeofday</name><argument_list>(<argument><expr>struct <name>timeval</name> <operator>*</operator><name>tv</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>tz</name></expr></argument>)</argument_list>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>gettimeofday</name><argument_list>(<argument><expr>struct <name>timeval</name> <operator>*</operator><name>tv</name></expr></argument>, <argument><expr>struct <name>timezone</name> <operator>*</operator><name>tz</name></expr></argument>)</argument_list>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_hook_sys_api</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__gettimeofday</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>hook_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>__gettimeofday</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_fiber_gettimeofday</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>timezone</name><operator>*</operator><operator>)</operator> <name>tz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HOOK_GETTIMEOFDAY */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>acl_fiber_gettimeofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>gettimeofday</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_FAST_TIME */</comment>
</unit>
