<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_fiber/c/src/common/htable.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"htable.h"</cpp:file></cpp:include>

<comment type="block">/* htable_iter_head */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>htable_iter_head</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_iter_next */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>htable_iter_next</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>HTABLE_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_iter_tail */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>htable_iter_tail</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_iter_prev */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>htable_iter_prev</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>HTABLE_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_iter_info */</comment>

<function><type><specifier>static</specifier> <name>HTABLE_INFO</name> <modifier>*</modifier></type><name>htable_iter_info</name><parameter_list>(<parameter><decl><type><name>ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>HTABLE</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>table</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>HTABLE_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* __def_hash_fn - hash a string */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>__def_hash_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * From the "Dragon" book by Aho, Sethi and Ullman.
         */</comment>

        <while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>g</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>g</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>h</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* htable_link - insert element into table */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htable_link</name><parameter_list>(<parameter><type><name>_table</name></type></parameter>, <parameter><type><name>_element</name></type></parameter>, <parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
	HTABLE_INFO **_h = _table-&gt;data + _n; \
	_element-&gt;prev = 0; \
	if ((_element-&gt;next = *_h) != 0) \
		(*_h)-&gt;prev = _element; \
	*_h = _element; \
	_table-&gt;used++; \
}</cpp:value></cpp:define>

<comment type="block">/* htable_size - allocate and initialize hash table */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__htable_size</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>h</name> <operator>=</operator> <operator>(</operator><name>HTABLE_INFO</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTABLE_INFO</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_grow - extend existing table */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>htable_grow</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>old_size</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h0</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_entries</name> <init>= <expr><name>h0</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__htable_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>old_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>old_size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h0</name><operator>++</operator></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>__def_hash_fn</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>htable_link</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>old_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>HTABLE</name> <modifier>*</modifier></type><name>htable_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator>	<operator>(</operator><name>HTABLE</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTABLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>init_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__htable_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">13</literal></expr> ?</condition><then> <expr><literal type="number">13</literal></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>htable_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>htable_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>htable_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>htable_iter_prev</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_info</name></name> <operator>=</operator> <name>htable_iter_info</name></expr>;</expr_stmt>

	<return>return <expr><name>table</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>htable_errno</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>HTABLE_STAT_INVAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>htable_set_errno</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STREQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x == y || (x[0] == y[0] &amp;&amp; strcmp(x,y) == 0))</cpp:value></cpp:define>

<comment type="block">/* htable_enter - enter (key, value) pair */</comment>

<function><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>htable_enter</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>HTABLE_STAT_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>__def_hash_fn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>htable_grow</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>hash</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>HTABLE_STAT_DUPLEX_KEY</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): duplex key(%s) exist"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ht</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><name>HTABLE_INFO</name> <operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTABLE_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): alloc error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>_strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>mem_strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): alloc error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>hash</name></name>  <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>htable_link</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ht</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_find - lookup value */</comment>

<function><type><name>void</name> <modifier>*</modifier></type><name>htable_find</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>htable_locate</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><name>ht</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_locate - lookup entry */</comment>

<function><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>htable_locate</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>     <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>__def_hash_fn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ht</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>htable_delete_entry</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>hash</name></name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>free_fn</name>) <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* htable_delete - delete one entry */</comment>

<function><type><name>int</name></type> <name>htable_delete</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>     <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>__def_hash_fn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h</name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>htable_delete_entry</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_free - destroy hash table */</comment>

<function><type><name>void</name></type> <name>htable_free</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name>  <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name>  <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h</name><operator>++</operator></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call>(<modifier>*</modifier><name>free_fn</name>) <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>htable_reset</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h</name><operator>++</operator></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call>(<modifier>*</modifier><name>free_fn</name>) <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__htable_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>table</name><operator>-&gt;</operator><name>init_size</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr> ?</condition><then> <expr><literal type="number">13</literal></expr> </then><else>: <expr><name><name>table</name><operator>-&gt;</operator><name>init_size</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_walk - iterate over hash table */</comment>

<function><type><name>void</name></type> <name>htable_walk</name><parameter_list>(<parameter><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>action</name>)<parameter_list>(<parameter><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h</name><operator>++</operator></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call>(<modifier>*</modifier><name>action</name>) <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>htable_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>htable_used</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
HTABLE_INFO **htable_data(HTABLE *table)
{
	return (HTABLE_INFO**) table-&gt;data;
}
*/</comment>

<comment type="block">/* htable_list - list all table members */</comment>

<function><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>htable_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>(</operator><name>HTABLE_INFO</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>used</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<for>for <control>(<init><expr><name>member</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>member</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition>
				<incr><expr><name>member</name> <operator>=</operator> <name><name>member</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>list</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>member</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>(</operator><name>HTABLE_INFO</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>list</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>htable_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTABLE_INFO</name> <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash stat count for each key:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>member</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<for>for<control>(<init>;</init> <condition><expr><name>member</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>member</name> <operator>=</operator> <name><name>member</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"chains[%d]: count[%d]\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash stat all values for each key:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>member</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>member</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"chains[%d]: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init>;</init> <condition><expr><name>member</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>member</name> <operator>=</operator> <name><name>member</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]"</literal></expr></argument>, <argument><expr><name><name>member</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash table size=%d, used=%d\n"</literal></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
