<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/common/strops.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strops.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>maptolower</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
	<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
	<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,
	<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>,
	<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x37</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
	<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
	<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>,
	<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
	<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x5f</literal></expr>,
	<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
	<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>,
	<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
	<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,
	<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x87</literal></expr>,
	<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x8f</literal></expr>,
	<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
	<expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,
	<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xa7</literal></expr>,
	<expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xaf</literal></expr>,
	<expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xb7</literal></expr>,
	<expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xbf</literal></expr>,
	<expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xc7</literal></expr>,
	<expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xcf</literal></expr>,
	<expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xd7</literal></expr>,
	<expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xdf</literal></expr>,
	<expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xe7</literal></expr>,
	<expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
	<expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xf7</literal></expr>,
	<expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xff</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>strncasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>maptolower</name></expr></init></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>us1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s1</name></expr></init></decl>,
			<decl><type ref="prev"><modifier>*</modifier></type><name>us2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s2</name></expr></init></decl>;</decl_stmt>

		<do>do <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>cm</name><index>[<expr><operator>*</operator><name>us1</name></expr>]</index></name> <operator>!=</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>us2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name><name>cm</name><index>[<expr><operator>*</operator><name>us1</name></expr>]</index></name> <operator>-</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>us2</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>us1</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>us1</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>us2</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* mystrtok - safe tokenizer */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>mystrtok</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>start</name> <init>= <expr><operator>*</operator><name>src</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Skip over leading delimiters.
	 */</comment>
	<expr_stmt><expr><name>start</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Separate off one token.
	 */</comment>
	<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>+</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>end</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	<return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>lowercase</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>alldig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
