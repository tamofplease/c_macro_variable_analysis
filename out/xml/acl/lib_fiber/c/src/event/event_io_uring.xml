<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/event/event_io_uring.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IO_URING</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;liburing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_io_uring.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>EVENT_URING</name> <block>{
	<decl_stmt><decl><type><name>EVENT</name></type> <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring</name></name></type> <name>ring</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sqe_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>appending</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVENT_URING</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>event_uring_free</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_queue_exit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>TRY_SUBMMIT</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (++(e)-&gt;appending &gt;= (e)-&gt;sqe_size) {  \
		(e)-&gt;appending = 0;  \
		io_uring_submit(&amp;(e)-&gt;ring);  \
	}  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SUBMMIT</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	(e)-&gt;appending = 0;  \
	 io_uring_submit(&amp;(e)-&gt;ring);  \
} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_read_wait</name><parameter_list>(<parameter><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tmo_ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sqe</name> <operator>=</operator> <call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_prep_poll_add</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLIN</name> <operator>|</operator> <name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqe</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>IOSQE_IO_LINK</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rts</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <name>tmo_ms</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>tmo_ms</name><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>sqe</name> <operator>=</operator> <call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_prep_link_timeout</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>rts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_uring_add_read</name><parameter_list>(<parameter><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVENT_POLLIN</name> <operator>|</operator> <name>EVENT_ACCEPT</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READV</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_readv</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>readv_ctx</name><operator>.</operator><name>iov</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>readv_ctx</name><operator>.</operator><name>cnt</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>readv_ctx</name><operator>.</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_RECV</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_recv</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recv_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recv_ctx</name><operator>.</operator><name>len</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recv_ctx</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IO_URING_HAS_RECVFROM</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_RECVFROM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_recvfrom</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recvfrom_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recvfrom_ctx</name><operator>.</operator><name>len</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recvfrom_ctx</name><operator>.</operator><name>flags</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recvfrom_ctx</name><operator>.</operator><name>src_addr</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recvfrom_ctx</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_RECVMSG</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_recvmsg</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recvmsg_ctx</name><operator>.</operator><name>msg</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>recvmsg_ctx</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_read</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>len</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_POLLIN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>add_read_wait</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>r_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_ACCEPT</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>io_uring_prep_accept</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
			<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>addr</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>socklen_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_write_wait</name><parameter_list>(<parameter><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tmo_ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sqe</name> <operator>=</operator> <call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_prep_poll_add</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>POLLOUT</name> <operator>|</operator> <name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqe</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>IOSQE_IO_LINK</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>wts</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <name>tmo_ms</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>wts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>tmo_ms</name><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>sqe</name> <operator>=</operator> <call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_prep_link_timeout</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>wts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_uring_add_write</name><parameter_list>(<parameter><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
	<comment type="line">//fe-&gt;writer_ctx.cnt++;</comment>

	<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVENT_POLLOUT</name> <operator>|</operator> <name>EVENT_CONNECT</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITEV</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_writev</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>writev_ctx</name><operator>.</operator><name>iov</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>writev_ctx</name><operator>.</operator><name>cnt</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>writev_ctx</name><operator>.</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_SEND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_send</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>send_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>send_ctx</name><operator>.</operator><name>len</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>send_ctx</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IO_URING_HAS_SENDTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_SENDTO</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_sendto</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>sendto_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>sendto_ctx</name><operator>.</operator><name>len</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>sendto_ctx</name><operator>.</operator><name>flags</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>sendto_ctx</name><operator>.</operator><name>dest_addr</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>sendto_ctx</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_SENDMSG</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_sendmsg</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>sendmsg_ctx</name><operator>.</operator><name>msg</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>sendmsg_ctx</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>io_uring_prep_write</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>write_ctx</name><operator>.</operator><name>buf</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>write_ctx</name><operator>.</operator><name>len</name></name></expr></argument>,
				<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>write_ctx</name><operator>.</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_POLLOUT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>add_write_wait</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>r_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_CONNECT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>non_blocking</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>io_uring_prep_connect</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
			<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>addr</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_uring_file_close</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_prep_close</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_uring_file_cancel</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe_orig</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_prep_cancel</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe_orig</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_uring_file_openat</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_prep_openat</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_uring_file_unlink</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_prep_unlink</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_STATX</name></cpp:ifdef>
<function><type><name>void</name></type> <name>event_uring_file_statx</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>statx</name></name> <modifier>*</modifier></type><name>statxbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_prep_statx</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>statxbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_RENAMEAT2</name></cpp:ifdef>
<function><type><name>void</name></type> <name>event_uring_file_renameat2</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>olddirfd</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newdirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_prep_renameat</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name>olddirfd</name></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>, <argument><expr><name>newdirfd</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>event_uring_mkdirat</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_prep_mkdirat</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>event_uring_splice</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_in</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>off_in</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>fd_out</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>off_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>splice_flags</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sqe_flags</name></decl></parameter>, <parameter><decl><type><name>__u8</name></type> <name>opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_sqe</name></name> <modifier>*</modifier></type><name>sqe</name> <init>= <expr><call><name>io_uring_get_sqe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_uring_prep_splice</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><name>fd_in</name></expr></argument>, <argument><expr><name>off_in</name></expr></argument>, <argument><expr><name>fd_out</name></expr></argument>, <argument><expr><name>off_out</name></expr></argument>,
		<argument><expr><name>len</name></expr></argument>, <argument><expr><name>splice_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>fe</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>io_uring_sqe_set_data</name><argument_list>(<argument><expr><name>sqe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqe</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>sqe_flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqe</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRY_SUBMMIT</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="line">// Some problems can't be resolve current, so I use another way to do it.</comment>

void event_uring_sendfile(EVENT *ev, FILE_EVENT *fe, int out, int in,
	off64_t off, size_t cnt)
{
	EVENT_URING *ep = (EVENT_URING*) ev;
	struct io_uring_sqe *sqe = io_uring_get_sqe(&amp;ep-&gt;ring);
	unsigned flags = SPLICE_F_MOVE | SPLICE_F_MORE; <comment type="line">// | SPLICE_F_NONBLOCK;</comment>

	io_uring_prep_splice(sqe, in, off, fe-&gt;var.pipefd[1], -1, cnt, flags);
	fe-&gt;reader_ctx.fe = fe;
	io_uring_sqe_set_data(sqe, &amp;fe-&gt;reader_ctx);
	sqe-&gt;flags |= IOSQE_IO_LINK | SPLICE_F_FD_IN_FIXED | IOSQE_ASYNC;
	sqe-&gt;opcode = IORING_OP_SPLICE;

	TRY_SUBMMIT(ep);

	flags = 0;
	sqe = io_uring_get_sqe(&amp;ep-&gt;ring);
	io_uring_prep_splice(sqe, fe-&gt;var.pipefd[0], -1, out, -1, cnt, flags);
	fe-&gt;reader_ctx.fe = fe;
	io_uring_sqe_set_data(sqe, &amp;fe-&gt;reader_ctx);
	sqe-&gt;opcode = IORING_OP_SPLICE;

	TRY_SUBMMIT(ep);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_uring_del_read</name><parameter_list>(<parameter><decl><type><name>EVENT_URING</name> <modifier>*</modifier><name>ep</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_uring_del_write</name><parameter_list>(<parameter><decl><type><name>EVENT_URING</name> <modifier>*</modifier><name>ep</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ERR</name></cpp:macro>	<cpp:value>(POLLERR | POLLHUP | POLLNVAL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_read</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVENT_ACCEPT</name> <operator>|</operator> <name>EVENT_POLLIN</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_FILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READV</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>readv_ctx</name><operator>.</operator><name>off</name></name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>read_ctx</name><operator>.</operator><name>off</name></name>  <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_ACCEPT</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Do nothing!</comment>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_POLLIN</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>ERR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <name>POLLERR</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_ERR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <name>POLLHUP</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_HUP</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <name>POLLNVAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_NVAL</name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_POLLIN</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown res=%d, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>EVENT_READ</name> <operator>|</operator> <name>EVENT_READV</name> <operator>|</operator> <name>EVENT_RECV</name>
			<operator>|</operator> <name>EVENT_RECVFROM</name> <operator>|</operator> <name>EVENT_RECVMSG</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_write</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>EVENT_CONNECT</name> <operator>|</operator> <name>EVENT_POLLOUT</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>TYPE_FILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITEV</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>writev_ctx</name><operator>.</operator><name>off</name></name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>write_ctx</name><operator>.</operator><name>off</name></name>  <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_CONNECT</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Do nothing!</comment>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_POLLOUT</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <operator>(</operator><name>POLLOUT</name> <operator>|</operator> <name>ERR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <name>POLLERR</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_ERR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <name>POLLHUP</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_HUP</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;</operator> <name>POLLNVAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_NVAL</name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_POLLOUT</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown res=%d, fd=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>EVENT_WRITE</name> <operator>|</operator> <name>EVENT_WRITEV</name> <operator>|</operator> <name>EVENT_SEND</name>
			<operator>|</operator> <name>EVENT_SENDTO</name> <operator>|</operator> <name>EVENT_SENDMSG</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_one</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>IO_URING_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>fe</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <comment type="line">// xxx?</comment>
		<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fe null here?"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>EVENT_READ</name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>handle_read</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>writer_ctx</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>EVENT_WRITE</name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">//fe-&gt;writer_ctx.cnt--;</comment>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>handle_write</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>FLAGS</name></cpp:macro>	<cpp:value>(EVENT_FILE_CLOSE \
		| EVENT_FILE_CANCEL \
		| EVENT_FILE_OPENAT \
		| EVENT_FILE_UNLINK \
		| EVENT_FILE_STAT \
		| EVENT_FILE_STATX \
		| EVENT_FILE_RENAMEAT \
		| EVENT_FILE_RENAMEAT2 \
		| EVENT_DIR_MKDIRAT \
		| EVENT_SPLICE)</cpp:value></cpp:define>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader_ctx</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>FLAGS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown mask=%u, fd=%d, fe=%p, "</literal>
			<literal type="string">"EVENT_SYSIO=%s, EVENT_READ=%s, EVENT_POLLIN=%s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>~</operator><name>FLAGS</name><operator>)</operator></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_SYSIO</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_POLLIN</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>peek_more</name><parameter_list>(<parameter><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_cqe</name></name> <modifier>*</modifier></type><name>cqe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>head</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IO_URING_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<macro><name>io_uring_for_each_cqe</name><argument_list>(<argument>&amp;ep-&gt;ring</argument>, <argument>head</argument>, <argument>cqe</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>IO_URING_CTX</name><operator>*</operator><operator>)</operator> <call><name>io_uring_cqe_get_data</name><argument_list>(<argument><expr><name>cqe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>cqe</name><operator>-&gt;</operator><name>res</name></name></expr>;</expr_stmt>
		<comment type="line">//io_uring_cqe_seen(&amp;ep-&gt;ring, cqe);</comment>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>ENOBUFS</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ENOBUFS error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>ETIME</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <operator>-</operator><name>ECANCELED</name> <operator>||</operator> <name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>handle_one</name><argument_list>(<argument><expr><operator>(</operator><name>EVENT</name><operator>*</operator><operator>)</operator> <name>ep</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>io_uring_cq_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>submit_and_wait</name><parameter_list>(<parameter><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>__kernel_timespec</name></name></type> <name>ts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_cqe</name></name> <modifier>*</modifier></type><name>cqe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IO_URING_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>timeout</name><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>tp</name>         <operator>=</operator> <operator>&amp;</operator><name>ts</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>tp</name>         <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<label><name>AGAIN</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>appending</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>appending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>io_uring_submit_and_wait_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cqe</name></expr></argument>,
				<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>io_uring_wait_cqes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cqe</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>ETIME</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>EAGAIN</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>EINTR</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>AGAIN</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): io_uring_wait_cqe error=%s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>cqe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>cqe</name><operator>-&gt;</operator><name>res</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>IO_URING_CTX</name><operator>*</operator><operator>)</operator> <call><name>io_uring_cqe_get_data</name><argument_list>(<argument><expr><name>cqe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>io_uring_cqe_seen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><name>cqe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>ENOBUFS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ENOBUFS error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>ETIME</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <operator>-</operator><name>ECANCELED</name> <operator>||</operator> <name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>handle_one</name><argument_list>(<argument><expr><operator>(</operator><name>EVENT</name><operator>*</operator><operator>)</operator> <name>ep</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_uring_wait</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>loop_count</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>submit_and_wait</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>peek_more</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>count</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
	<comment type="line">//usleep(10000);</comment>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_uring_checkfd</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier><name>fe</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>event_uring_handle</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>ring</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event_uring_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"io_uring"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>event_io_uring_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_URING</name> <modifier>*</modifier></type><name>eu</name> <init>= <expr><operator>(</operator><name>EVENT_URING</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_URING</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>io_uring_params</name></name></type> <name>params</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>sqe_size</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>sqe_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// XXX: Don't write log here to avoid IO write recursive!</comment>

	<comment type="line">//eu-&gt;sqe_size = 256;</comment>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//params.flags = IORING_SETUP_SQPOLL;</comment>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>io_uring_queue_init_params</name><argument_list>(<argument><expr><name><name>eu</name><operator>-&gt;</operator><name>sqe_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eu</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): init io_uring error=%s, size=%zd\r\n"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eu</name><operator>-&gt;</operator><name>sqe_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): thread-%lu init io_uring ok, size=%zd\r\n"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>thread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>eu</name><operator>-&gt;</operator><name>sqe_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>params</name><operator>.</operator><name>features</name></name> <operator>&amp;</operator> <name>IORING_FEAT_FAST_POLL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"IORING_FEAT_FAST_POLL not available in the kernel\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"IORING_FEAT_FAST_POLL is available in the kernel\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>appending</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>name</name></name>   <operator>=</operator> <name>event_uring_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><call><call><name>acl_handle_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>EVENT</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>event_uring_handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>free</name></name>   <operator>=</operator> <name>event_uring_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>flag</name></name>   <operator>=</operator> <name>EVENT_F_IO_URING</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event_wait</name></name> <operator>=</operator> <name>event_uring_wait</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>checkfd</name></name>    <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>event_uring_checkfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>event_uring_add_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>event_uring_add_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>event_uring_del_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eu</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>event_uring_del_write</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>EVENT</name><operator>*</operator><operator>)</operator> <name>eu</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAS_IO_URING */</comment>
</unit>
