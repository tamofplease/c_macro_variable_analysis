<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/event/event_select.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_SELECT</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fiber/libfiber.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hook/hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_select.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>EVENT_SELECT</name> <block>{
	<decl_stmt><decl><type><name>EVENT</name></type>  <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type> <name>rset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type> <name>wset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type> <name>xset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>maxfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>dirty</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>r_ready</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>w_ready</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>EVENT_SELECT</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>select_free</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_SELECT</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>(</operator><name>EVENT_SELECT</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>r_ready</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>w_ready</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_add_read</name><parameter_list>(<parameter><decl><type><name>EVENT_SELECT</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>==</operator> <name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>xset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_add_write</name><parameter_list>(<parameter><decl><type><name>EVENT_SELECT</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>==</operator> <name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>xset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_del_read</name><parameter_list>(<parameter><decl><type><name>EVENT_SELECT</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>xset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_del_write</name><parameter_list>(<parameter><decl><type><name>EVENT_SELECT</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>xset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_event_wait</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_SELECT</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>(</operator><name>EVENT_SELECT</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type> <name>rset</name> <init>= <expr><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></init></decl>, <decl><type ref="prev"/><name>wset</name> <init>= <expr><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></init></decl>, <decl><type ref="prev"/><name>xset</name> <init>= <expr><name><name>es</name><operator>-&gt;</operator><name>xset</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ITER</name></type> <name>iter</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS_WIN</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>fdcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_select</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xset</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>fe</name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call>(<modifier>*</modifier><name>sys_select</name>)<argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xset</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FIBER_EINTR</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: select error %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>es</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>r_ready</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>w_ready</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rset</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>r_ready</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wset</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>w_ready</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>es-&gt;r_ready</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>es-&gt;w_ready</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>array_clean</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>r_ready</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clean</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>w_ready</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_checkfd</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier><name>fe</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>acl_handle_t</name></type> <name>select_handle</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ev</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>acl_handle_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>select_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"select"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>event_select_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_SELECT</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><operator>(</operator><name>EVENT_SELECT</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_SELECT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_select</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sys_select</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// override size with system open limit setting</comment>
	<expr_stmt><expr><name>size</name>      <operator>=</operator> <call><name>open_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>size</name></name>  <operator>=</operator> <ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><literal type="number">10240</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_EVENT</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>r_ready</name></name> <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>w_ready</name></name> <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>rset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>wset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es</name><operator>-&gt;</operator><name>xset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>name</name></name>   <operator>=</operator> <name>select_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>select_handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>free</name></name>   <operator>=</operator> <name>select_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event_wait</name></name> <operator>=</operator> <name>select_event_wait</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>checkfd</name></name>    <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>select_checkfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>select_add_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>select_add_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>select_del_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>select_del_write</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>EVENT</name><operator>*</operator><operator>)</operator> <name>es</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
