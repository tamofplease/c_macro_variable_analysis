<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/event/event_wmsg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_WMSG</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winuser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_wmsg.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_SOCKET_NOTIFY</name></cpp:macro>	<cpp:value>(WM_USER + 8192)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>EVENT_WMSG</name> <block>{
	<decl_stmt><decl><type><name>EVENT</name></type> <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UINT</name></type>  <name>nMsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type>  <name>hWnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HINSTANCE</name></type>   <name>hInstance</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>count</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVENT_WMSG</name>;</typedef>

<function><type><specifier>static</specifier> <name>EVENT_WMSG</name> <modifier>*</modifier></type><name>get_hwnd_event</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name><operator>*</operator><operator>)</operator> <call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_hwnd_event</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG_PTR</name><operator>)</operator> <name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FILE_EVENT</name> <modifier>*</modifier></type><name>file_event_find</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="line">//_snprintf(key, sizeof(key), "%u", fd);</comment>
	<expr_stmt><expr><call><name>_i64toa</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>htable_find</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tbl</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wmsg_free</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ew</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ew</name><operator>-&gt;</operator><name>hWnd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>WNDCLASSEX</name></type> <name>wcx</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>ew</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ew</name><operator>-&gt;</operator><name>class_name</name></name> <operator>&amp;&amp;</operator> <call><name>GetClassInfoEx</name><argument_list>(<argument><expr><name><name>ew</name><operator>-&gt;</operator><name>hInstance</name></name></expr></argument>,
			<argument><expr><name><name>ew</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unregister class: %s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>UnregisterClass</name><argument_list>(<argument><expr><name><name>ew</name><operator>-&gt;</operator><name>class_name</name></name></expr></argument>, <argument><expr><name><name>ew</name><operator>-&gt;</operator><name>hInstance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>htable_free</name><argument_list>(<argument><expr><name><name>ew</name><operator>-&gt;</operator><name>tbl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ew</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wmsg_fdmap_set</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>pfe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="line">//_snprintf(key, sizeof(key), "%u", fe-&gt;fd);</comment>
	<expr_stmt><expr><call><name>_i64toa</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pfe</name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>htable_find</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tbl</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pfe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>htable_enter</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tbl</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pfe</name> <operator>!=</operator> <name>fe</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): old fe(%p) exist, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>pfe</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FILE_EVENT</name> <modifier>*</modifier></type><name>wmsg_fdmap_get</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="line">//_snprintf(key, sizeof(key), "%u", fd);</comment>
	<expr_stmt><expr><call><name>_i64toa</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <call><name>htable_find</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tbl</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wmsg_fdmap_del</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="line">//_snprintf(key, sizeof(key), "%u", fe-&gt;fd);</comment>
	<expr_stmt><expr><call><name>_i64toa</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>htable_delete</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>tbl</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wmsg_add_read</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>lEvent</name> <init>= <expr><name>FD_READ</name> <operator>|</operator> <name>FD_CLOSE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lEvent</name> <operator>|=</operator> <name>FD_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_listen_socket</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lEvent</name> <operator>|=</operator> <name>FD_ACCEPT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>lEvent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set read error: %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>wmsg_fdmap_set</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wmsg_add_write</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>lEvent</name> <init>=  <expr><name>FD_WRITE</name> <operator>|</operator> <name>FD_CLOSE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lEvent</name> <operator>|=</operator> <name>FD_READ</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>STATUS_CONNECTING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lEvent</name> <operator>|=</operator> <name>FD_CONNECT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr></argument>, <argument><expr><name>lEvent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set read error: %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>wmsg_fdmap_set</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wmsg_del_read</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>lEvent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_CLOSE</name> <operator>|</operator> <name>FD_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>wmsg_fdmap_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>lEvent</name></expr> ?</condition><then> <expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>lEvent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set read error: %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wmsg_del_write</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>lEvent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_CLOSE</name> <operator>|</operator> <name>FD_READ</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>lEvent</name> <operator>=</operator> <name>FD_CLOSE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>wmsg_fdmap_del</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WSAAsyncSelect</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>hWnd</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>lEvent</name></expr> ?</condition><then> <expr><name><name>ev</name><operator>-&gt;</operator><name>nMsg</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>lEvent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set read error: %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wmsg_checkfd</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ev</name></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><call><name>getsockfamily</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wmsg_wait</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UINT_PTR</name></type> <name>id</name> <init>= <expr><call><name>SetTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>res</name> <init>= <expr><call><name>GetMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>KillTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
	<while>while <condition>(<expr><call><name>PeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>message</name></name> <operator>==</operator> <name>WM_QUIT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onRead</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>wmsg_fdmap_get</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no FILE_EVENT, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): r_proc NULL, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">//fe-&gt;mask &amp;= ~EVENT_READ;</comment>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onWrite</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>wmsg_fdmap_get</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no FILE_EVENT, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): w_proc NULL, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">//fe-&gt;mask &amp;= ~EVENT_WRITE;</comment>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onAccept</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>wmsg_fdmap_get</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no FILE_EVENT, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): r_proc NULL, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">//fe-&gt;mask &amp;= ~EVENT_READ;</comment>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onConnect</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>onWrite</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onClose</name><parameter_list>(<parameter><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><call><name>wmsg_fdmap_get</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* don nothing */</comment>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">//fe-&gt;mask &amp;= ~EVENT_READ;</comment>
			<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">//fe-&gt;mask &amp;= ~EVENT_WRITE;</comment>
			<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ev</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>WndProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>get_hwnd_event</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>WM_SOCKET_NOTIFY</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SOCKET</name></type> <name>fd</name> <init>= <expr><name>wParam</name></expr></init></decl>;</decl_stmt>
		<switch>switch <condition>(<expr><call><name>WSAGETSELECTEVENT</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>FD_ACCEPT</name></expr>:</case>
			<expr_stmt><expr><call><name>onAccept</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FD_CONNECT</name></expr>:</case>
			<expr_stmt><expr><call><name>onConnect</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FD_READ</name></expr>:</case>
			<expr_stmt><expr><call><name>onRead</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FD_WRITE</name></expr>:</case>
			<expr_stmt><expr><call><name>onWrite</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FD_CLOSE</name></expr>:</case>
			<expr_stmt><expr><call><name>onClose</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>InitApplication</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<decl_stmt><decl><type><name>WNDCLASSEX</name></type> <name>wcx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetClassInfoEx</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* class already registered */</comment>
		<expr_stmt><expr><call><name>msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): class(%s) already registered"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>TRUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fill in the window class structure with parameters
	 * that describe the main window.
	 */</comment>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wcx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wcx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>cbSize</name></name>      <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wcx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>       <comment type="block">/* size of structure */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>style</name></name>       <operator>=</operator> <name>CS_HREDRAW</name> <operator>|</operator> <name>CS_VREDRAW</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>lpfnWndProc</name></name> <operator>=</operator> <name>WndProc</name></expr>;</expr_stmt>           <comment type="block">/* points to window procedure */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>cbClsExtra</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                 <comment type="block">/* no extra class memory */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>cbWndExtra</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                 <comment type="block">/* no extra window memory */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hInstance</name></name>   <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt>         <comment type="block">/* handle to instance */</comment>

	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hIcon</name></name> <operator>=</operator> <call><name>LoadIcon</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDI_APPLICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* predefined app. icon */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hCursor</name></name> <operator>=</operator> <call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* predefined arrow */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hbrBackground</name></name> <operator>=</operator> <operator>(</operator><name>HBRUSH</name><operator>)</operator> <call><name>GetStockObject</name><argument_list>(<argument><expr><name>WHITE_BRUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* white background brush */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>lpszMenuName</name></name>  <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>          <comment type="block">/* name of menu resource */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>lpszClassName</name></name> <operator>=</operator> <name>class_name</name></expr>;</expr_stmt>     <comment type="block">/* name of window class */</comment>
	<expr_stmt><expr><name><name>wcx</name><operator>.</operator><name>hIconSm</name></name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator> <call><name>LoadImage</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>,  <comment type="block">/* small class icon */</comment>
		<argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>IMAGE_ICON</name></expr></argument>,
		<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXSMICON</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYSMICON</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Register the window class. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RegisterClassEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wcx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): RegisterClassEx error(%d, %s)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>TRUE</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type> <name>InitInstance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CREATESTRUCT</name></type> <name>cs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>dwExStyle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lpszClass</name></name> <operator>=</operator> <name>class_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lpszName</name></name>  <operator>=</operator> <literal type="string">"Acl Fiber Socket Notification Sink"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>WS_OVERLAPPED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>x</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>y</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>hwndParent</name></name>     <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>hMenu</name></name>          <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>hInstance</name></name>      <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>.</operator><name>lpCreateParams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>hWnd</name> <operator>=</operator> <call><name>CreateWindowEx</name><argument_list>(<argument><expr><name><name>cs</name><operator>.</operator><name>dwExStyle</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>lpszClass</name></name></expr></argument>,
		<argument><expr><name><name>cs</name><operator>.</operator><name>lpszName</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>style</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>cy</name></name></expr></argument>,
		<argument><expr><name><name>cs</name><operator>.</operator><name>hwndParent</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>hMenu</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>hInstance</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>.</operator><name>lpCreateParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hWnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): create windows error: %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>hWnd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type> <name>CreateSockWindow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>InitApplication</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>InitInstance</name><argument_list>(<argument><expr><name>class_name</name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>acl_handle_t</name></type> <name>wmsg_handle</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ew</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>acl_handle_t</name><operator>)</operator> <name><name>ew</name><operator>-&gt;</operator><name>hInstance</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wmsg_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"wmsg"</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__class_name</name> <init>= <expr><literal type="string">"__AclFiberEventsMainWClass"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>event_wmsg_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_WMSG</name> <modifier>*</modifier></type><name>ew</name> <init>= <expr><operator>(</operator><name>EVENT_WMSG</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_WMSG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hInstance</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name> <init>= <expr><call><name>CreateSockWindow</name><argument_list>(<argument><expr><name>__class_name</name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_EVENT</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>size</name></name>  <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>nMsg</name></name>         <operator>=</operator> <name>WM_SOCKET_NOTIFY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>hWnd</name></name>         <operator>=</operator> <name>hWnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>hInstance</name></name>    <operator>=</operator> <name>hInstance</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>class_name</name></name>   <operator>=</operator> <name>__class_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>tbl</name></name>          <operator>=</operator> <call><name>htable_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>name</name></name>   <operator>=</operator> <name>wmsg_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>wmsg_handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>free</name></name>   <operator>=</operator> <name>wmsg_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event_wait</name></name> <operator>=</operator> <name>wmsg_wait</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>checkfd</name></name>    <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>wmsg_checkfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>wmsg_add_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>wmsg_add_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>wmsg_del_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ew</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>wmsg_del_write</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_hwnd_event</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>ew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>EVENT</name><operator>*</operator><operator>)</operator> <name>ew</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
