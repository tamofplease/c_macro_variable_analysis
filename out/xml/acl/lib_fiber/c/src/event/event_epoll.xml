<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_fiber/c/src/event/event_epoll.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_EPOLL</name></cpp:ifdef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__USE_GNU</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_GNU</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_epoll.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_create_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_wait_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>epoll_ctl_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_create_fn</name></type> <name>__sys_epoll_create</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_wait_fn</name></type>   <name>__sys_epoll_wait</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>epoll_ctl_fn</name></type>    <name>__sys_epoll_ctl</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hook_api</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sys_epoll_create</name> <operator>=</operator> <operator>(</operator><name>epoll_create_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__sys_epoll_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_epoll_wait</name>   <operator>=</operator> <operator>(</operator><name>epoll_wait_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__sys_epoll_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sys_epoll_ctl</name>    <operator>=</operator> <operator>(</operator><name>epoll_ctl_fn</name><operator>)</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><literal type="string">"epoll_ctl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__sys_epoll_ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hook_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>hook_api</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<typedef>typedef <type><struct>struct <name>EVENT_EPOLL</name> <block>{
	<decl_stmt><decl><type><name>EVENT</name></type>  <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>epfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>size</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>r_ready</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>w_ready</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>EVENT_EPOLL</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>epoll_free</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>r_ready</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>w_ready</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_add_read</name><parameter_list>(<parameter><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>u32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>EPOLLIN</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>EPOLLOUT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>EPOLL_CTL_MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>EPOLL_CTL_ADD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>  <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ee</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPERM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): epoll_ctl error %s, epfd=%d, fd=%d\n"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_add_write</name><parameter_list>(<parameter><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>u32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>EPOLLOUT</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>EPOLLIN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>EPOLL_CTL_MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>EPOLL_CTL_ADD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>  <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ee</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPERM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): epoll_ctl error %s, epfd=%d, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_del_read</name><parameter_list>(<parameter><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>EPOLLOUT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>EPOLL_CTL_MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>EPOLL_CTL_DEL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ee</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), epoll_ctl error: %s, epfd=%d, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_del_write</name><parameter_list>(<parameter><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>EPOLLIN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>EPOLL_CTL_MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>EPOLL_CTL_DEL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__sys_epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ee</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), epoll_ctl error: %s, efd=%d, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_event_wait</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ITER</name></type> <name>iter</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_wait</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>__sys_epoll_wait</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FIBER_EINTR</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: epoll_wait error %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ee</name> <operator>=</operator> <operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>ee</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name></cpp:macro>	<cpp:value>(EPOLLERR | EPOLLHUP)</cpp:value></cpp:define>

		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EPOLLIN</name> <operator>|</operator> <name>ERR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>fe</name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLERR</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_ERR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLHUP</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_HUP</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>r_ready</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EPOLLOUT</name> <operator>|</operator> <name>ERR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>fe</name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLERR</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_ERR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLHUP</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_HUP</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>w_ready</name></name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>ep-&gt;r_ready</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<macro><name>foreach</name><argument_list>(<argument>iter</argument>, <argument>ep-&gt;w_ready</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>array_clean</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>r_ready</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clean</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>w_ready</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_checkfd</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier><name>ev</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier><name>fe</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>add_read</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>del_read</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): del_read failed, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>epoll_handle</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>epoll_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"epoll"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>event_epoll_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_EPOLL</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>EVENT_EPOLL</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_EPOLL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sys_epoll_create</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Limit the max events buff maybe a good idea to impromve performance</comment>
	<comment type="line">// for handling large fds. Because epoll uses robin round to handle</comment>
	<comment type="line">// all the ready fds, so we needn't worry about the starvation of the</comment>
	<comment type="line">// left ready fds.</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <operator>(</operator>struct <name>epoll_event</name> <operator>*</operator><operator>)</operator>
		<call><name>mem_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>epoll_event</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>size</name></name>    <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DELAY_CALL</name></cpp:ifdef>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>r_ready</name></name> <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>w_ready</name></name> <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name> <operator>=</operator> <call><name>__sys_epoll_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>epfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>name</name></name>   <operator>=</operator> <name>epoll_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><call><call><name>acl_handle_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>EVENT</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>epoll_handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>free</name></name>   <operator>=</operator> <name>epoll_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event_wait</name></name> <operator>=</operator> <name>epoll_event_wait</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>checkfd</name></name>    <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>epoll_checkfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>epoll_add_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>epoll_add_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>epoll_del_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>epoll_del_write</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>EVENT</name><operator>*</operator><operator>)</operator> <name>ep</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="line">// end HAS_EPOLL</comment>
</unit>
