<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_fiber/c/src/event/event_iocp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_IOCP</name></cpp:ifdef>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"Ws2_32.lib"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"Kernel32.lib"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"Mswsock.lib"</cpp:literal><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../hook/hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_iocp.h"</cpp:file></cpp:include>

<typedef>typedef <macro><name>BOOL</name> <argument_list>(<argument>PASCAL FAR* LPFN_CONNECTEX</argument>)</argument_list></macro> <expr_stmt><expr><operator>(</operator>
        <name>IN</name>   <name>SOCKET</name> <name>s</name><operator>,</operator>
        <name>IN</name>   <specifier>const</specifier> struct <name>sockaddr</name> <name>FAR</name> <operator>*</operator><name>name</name><operator>,</operator>
        <name>IN</name>   <name>int</name> <name>namelen</name><operator>,</operator>
        <name>IN</name>   <name>PVOID</name> <name>lpSendBuffer</name> <name>OPTIONAL</name><operator>,</operator>
        <name>IN</name>   <name>DWORD</name> <name>dwSendDataLength</name><operator>,</operator>
        <name>OUT</name>  <name>LPDWORD</name> <name>lpdwBytesSent</name><operator>,</operator>
        <name>IN</name>   <name>LPOVERLAPPED</name> <name>lpOverlapped</name>
<operator>)</operator></expr>;</expr_stmt></typedef>

<typedef>typedef <type><struct>struct <name>EVENT_IOCP</name> <block>{
	<decl_stmt><decl><type><name>EVENT</name></type>  <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>h_iocp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ARRAY</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVENT_IOCP</name>;</typedef>

<struct>struct <name>IOCP_EVENT</name> <block>{
	<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>overlapped</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IOCP_EVENT_READ</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCP_EVENT_WRITE</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOCP_EVENT_DEAD</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IOCP_EVENT_POLLR</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IOCP_EVENT_POLLW</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type>   <name>refer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>event_proc</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCEPT_ADDRESS_LENGTH</name></cpp:macro> <cpp:value>((sizeof(struct sockaddr_in) + 16))</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myAddrBlock</name><index>[<expr><name>ACCEPT_ADDRESS_LENGTH</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>iocp_event_save</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name></decl></parameter>, <parameter><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>trans</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iocp_remove</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <operator>--</operator><name><name>ev</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name>     <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_close_sock</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>iocp_remove</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* must close socket before releasing fe-&gt;reader/fe-&gt;writer */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// because closesocket API has been hooked, so we should use the</comment>
		<comment type="line">// real system API to close the socket.</comment>
		<comment type="line">//closesocket(fe-&gt;fd);</comment>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>sys_close</name>)<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set fd INVALID_SOCKET notifying the caller the socket be closed*/</comment>
		<comment type="line">//fe-&gt;fd = INVALID_SOCKET;</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* On Windows XP, must check if the OVERLAPPED IO is in STATUS_PENDING
	 * status before the socket being closed.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * If the IOCP Port isn't in completed status, the OVERLAPPED
		 * object should not be released, which should be released in
		 * the GetQueuedCompletionStatus process.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>HasOverlappedIoCompleted</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>refer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>fe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_DEAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>fe</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If the IOCP Port is in incompleted status, the OVERLAPPED
		 * object shouldn't be released, which should be released in
		 * the GetQueuedCompletionStatus process.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>HasOverlappedIoCompleted</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>refer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>fe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_DEAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>fe</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name><operator>-&gt;</operator><name>refer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name><operator>-&gt;</operator><name>fe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>refer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>fe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//printf("------------fdcount=%d------------\r\n", ev-&gt;event.fdcount);</comment>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iocp_check</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>fdcount</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>!=</operator> <name>fe</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>==</operator> <name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>=</operator> <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
			<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG_PTR</name><operator>)</operator> <name>fe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>!=</operator> <name><name>ev</name><operator>-&gt;</operator><name>h_iocp</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): CreateIoCompletionPort error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_add_listen</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type>    <name>ReceiveLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socket_t</name></type> <name>sock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type>     <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>WSASocket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WSA_FLAG_OVERLAPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>iocp_sock</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcceptEx</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
		<argument><expr><name>sock</name></expr></argument>,
		<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>myAddrBlock</name></name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>ACCEPT_ADDRESS_LENGTH</name></expr></argument>,
		<argument><expr><name>ACCEPT_ADDRESS_LENGTH</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ReceiveLen</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): AcceptEx error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_ERR</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_add_read</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WSABUF</name></type> <name>wsaData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>  <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>is_listener</name> <init>= <expr><call><name>is_listen_socket</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>iocp_check</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check if the fe has been set STATUS_POLLING in io.c/poll.c/socket.c,
	 * and will set poller_write or writer IOCP_EVENT.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IS_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name></name> <operator>=</operator> <operator>(</operator><name>IOCP_EVENT</name><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOCP_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name><operator>-&gt;</operator><name>refer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name><operator>-&gt;</operator><name>fe</name></name>    <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name><operator>-&gt;</operator><name>type</name></name>  <operator>=</operator> <name>IOCP_EVENT_POLLR</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>poller_read</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name></name> <operator>=</operator> <operator>(</operator><name>IOCP_EVENT</name><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOCP_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>refer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>fe</name></name>    <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_READ</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>reader</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>r_proc</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>refer</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_listener</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>iocp_add_listen</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If fe-&gt;rbuf has been set in io.c, we use it as overlapped buffer,
	 * or we must check if the socket is for UDP and being in poll reading
	 * status, if so, we must use the fixed buffer as UDP's reading buffer,
	 * because IOCP will discard UDP packet when no buffer provided.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>rbuf</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>rsize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>wsaData</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rbuf</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wsaData</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rsize</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>sock_type</name></name> <operator>==</operator> <name>SOCK_DGRAM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rbuf</name></name>    <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>packet</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rsize</name></name>   <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>res</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wsaData</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>packet</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wsaData</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rsize</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>wsaData</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rbuf</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wsaData</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rsize</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WSARecv</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>,
		<argument><expr><operator>(</operator><name>OVERLAPPED</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_READ</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ReadFile error(%s), fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_fiber_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_ERR</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		fe-&gt;mask &amp;= ~EVENT_READ;
		fe-&gt;res   = -1;
		array_append(ev-&gt;events, event);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>iocp_event_save</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>event_iocp_connect</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><operator>(</operator><name>EVENT_IOCP</name><operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>SentLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPFN_CONNECTEX</name></type> <name>lpfnConnectEx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GUID</name></type>  <name>GuidConnectEx</name> <init>= <expr><name>WSAID_CONNECTEX</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dwErr</name></decl>, <decl><type ref="prev"/><name>dwBytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type>  <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>any_ip</name> <init>= <expr><literal type="string">"0.0.0.0"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>iocp_check</name><argument_list>(<argument><expr><name>ei</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_family</name></name>      <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name>any_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name>        <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// In IOCP, the local address must be bound first, or WSAEINVAL will</comment>
	<comment type="line">// return when calling lpfnConnectEx.</comment>
	<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): bind local ip(%s) error(%s, %d), sock: %u"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>any_ip</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dwErr</name> <operator>=</operator> <call><name>WSAIoctl</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
		<argument><expr><name>SIO_GET_EXTENSION_FUNCTION_POINTER</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>GuidConnectEx</name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GuidConnectEx</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>lpfnConnectEx</name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpfnConnectEx</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>dwBytes</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>dwErr</name>  <operator>==</operator>  <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): WSAIoctl error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name> <operator>=</operator> <operator>(</operator><name>IOCP_EVENT</name><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOCP_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>refer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>fe</name></name>    <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>event</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>refer</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lpfnConnectEx</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
		<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>var</name><operator>.</operator><name>peer</name><operator>.</operator><name>addr</name></name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>dwErr</name> <operator>=</operator> <call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_fiber_set_error</name><argument_list>(<argument><expr><name>FIBER_EINPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ConnectEx error(%s), sock(%u)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>iocp_event_save</name><argument_list>(<argument><expr><name>ei</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_add_write</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>sendBytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type>  <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>iocp_check</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check if the fe has been set STATUS_POLLING in io.c/poll.c/socket.c,
	 * and will set poller_write or writer IOCP_EVENT.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IS_POLLING</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>STATUS_CONNECTING</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name> <operator>=</operator> <operator>(</operator><name>IOCP_EVENT</name><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOCP_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>refer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>fe</name></name>    <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>type</name></name>  <operator>=</operator> <name>IOCP_EVENT_POLLW</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name></name>        <operator>=</operator> <operator>(</operator><name>IOCP_EVENT</name><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IOCP_EVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>refer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>fe</name></name>    <operator>=</operator> <name>fe</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IOCP_EVENT_WRITE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>event</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>writer</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>w_proc</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>STATUS_CONNECTING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>refer</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WriteFile</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendBytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_WRITE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): WriteFile error(%d, %s)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>EVENT_ERR</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		fe-&gt;mask &amp;= ~EVENT_WRITE;
		fe-&gt;res   = -1;
		array_append(ev-&gt;events, event);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>iocp_event_save</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_del_read</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CancelIoEx</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): cancel read error %s, fd=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_fiber_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IOCP_EVENT_READ</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_read</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IOCP_EVENT_POLLR</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>iocp_remove</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_del_write</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CancelIoEx</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): cancel write error %s, fd=%d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_fiber_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IOCP_EVENT_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>poller_write</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IOCP_EVENT_POLLW</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>iocp_remove</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iocp_event_save</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name></decl></parameter>, <parameter><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>(</operator><name>IOCP_EVENT_READ</name> <operator>|</operator> <name>IOCP_EVENT_POLLR</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_READ</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CLR_READWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>(</operator><name>IOCP_EVENT_WRITE</name> <operator>|</operator> <name>IOCP_EVENT_POLLW</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>STATUS_CONNECTING</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// Just for the calling of getpeername():</comment>
			<comment type="line">// If the socket is ready for connecting server, we</comment>
			<comment type="line">// should set SO_UPDATE_CONNECT_CONTEXT here, because</comment>
			<comment type="line">// the peer address wasn't associated with the socket</comment>
			<comment type="line">// automaticlly in IOCP mode.</comment>
			<decl_stmt><decl><type><name>DWORD</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_UPDATE_CONNECT_CONTEXT</name></expr></argument>,
				<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>EVENT_WRITE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CLR_WRITEWAIT</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>trans</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_event</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name></decl></parameter>, <parameter><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>,
		<parameter><decl><type><name>DWORD</name></type> <name>bytesTransferred</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>IOCP_EVENT_DEAD</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HasOverlappedIoCompleted</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_warn</name><argument_list>(<argument><expr><literal type="string">"overlapped not completed yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>refer</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="line">// If the associated FILE_EVENT with the event has gone in</comment>
	<comment type="line">// iocp_close_sock(), we should check the event's refer and</comment>
	<comment type="line">// free it when refer is 0.</comment>

	<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>fe</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>refer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fe</name> <operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>fe</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fe</name> <operator>==</operator> <name><name>event</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>EVENT_ERR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>iocp_event_save</name><argument_list>(<argument><expr><name>ei</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>bytesTransferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iocp_wait_one</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>bytesTransferred</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>BOOL</name></type> <name>ok</name> <init>= <expr><call><name>GetQueuedCompletionStatus</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>h_iocp</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>bytesTransferred</name></expr></argument>, <argument><expr><operator>(</operator><name>PULONG_PTR</name><operator>)</operator> <operator>&amp;</operator><name>fe</name></expr></argument>,
			<argument><expr><operator>(</operator><name>OVERLAPPED</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>handle_event</name><argument_list>(<argument><expr><name>ei</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>bytesTransferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d):GetQueuedCompletionStatus error=%d, %s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iocp_wait_more</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ULONG</name></type> <name>ready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OVERLAPPED_ENTRY</name></type> <name><name>entries</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ULONG</name></type> <name>MAX_ENTRIES</name> <init>= <expr><call><name>_countof</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetQueuedCompletionStatusEx</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>h_iocp</name></name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>MAX_ENTRIES</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>ready</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ready</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>LPOVERLAPPED_ENTRY</name></type> <name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IOCP_EVENT</name><modifier>*</modifier></type> <name>ev</name> <init>= <expr><operator>(</operator><name>IOCP_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FILE_EVENT</name><modifier>*</modifier></type> <name>fe</name> <init>= <expr><operator>(</operator><name>FILE_EVENT</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>lpCompletionKey</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>DWORD</name></type> <name>bytesTransferred</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>dwNumberOfBytesTransferred</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>handle_event</name><argument_list>(<argument><expr><name>ei</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>, <argument><expr><name>bytesTransferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>acl_fiber_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d):GetQueuedCompletionStatusEx error=%d, %s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__use_wait_more</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_wait</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><operator>(</operator><name>EVENT_IOCP</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IOCP_EVENT</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__use_wait_more</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>iocp_wait_more</name><argument_list>(<argument><expr><name>ei</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>iocp_wait_one</name><argument_list>(<argument><expr><name>ei</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<comment type="block">/* peek and handle all IOCP EVENT added in iocp_event_save(). */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <operator>(</operator><name>IOCP_EVENT</name><operator>*</operator><operator>)</operator> <call><name><name>ei</name><operator>-&gt;</operator><name>events</name><operator>-&gt;</operator><name>pop_back</name></name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>proc</name></name> <operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>fe</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>fe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iocp_free</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><operator>(</operator><name>EVENT_IOCP</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ei</name><operator>-&gt;</operator><name>h_iocp</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>h_iocp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mem_free</name><argument_list>(<argument><expr><name>ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iocp_checkfd</name><parameter_list>(<parameter><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>FILE_EVENT</name> <modifier>*</modifier></type><name>fe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ev</name></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><call><name>getsockfamily</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>acl_handle_t</name></type> <name>iocp_handle</name><parameter_list>(<parameter><decl><type><name>EVENT</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><operator>(</operator><name>EVENT_IOCP</name> <operator>*</operator><operator>)</operator> <name>ev</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>acl_handle_t</name><operator>)</operator> <name><name>ei</name><operator>-&gt;</operator><name>h_iocp</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iocp_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"iocp"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>EVENT</name> <modifier>*</modifier></type><name>event_iocp_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EVENT_IOCP</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><operator>(</operator><name>EVENT_IOCP</name> <operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EVENT_IOCP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>=</operator> <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ei</name><operator>-&gt;</operator><name>h_iocp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): create iocp error(%s)\r\n"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>ARRAY_F_UNORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>FILE_EVENT</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>mem_calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_EVENT</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>size</name></name>  <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>name</name></name>   <operator>=</operator> <name>iocp_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>iocp_handle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>free</name></name>   <operator>=</operator> <name>iocp_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>flag</name></name>   <operator>=</operator> <name>EVENT_F_IOCP</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>event_wait</name></name> <operator>=</operator> <name>iocp_wait</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>checkfd</name></name>    <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>iocp_checkfd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>iocp_add_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>add_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>iocp_add_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_read</name></name>   <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>iocp_del_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>del_write</name></name>  <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>iocp_del_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ei</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>close_sock</name></name> <operator>=</operator> <operator>(</operator><name>event_oper</name> <operator>*</operator><operator>)</operator> <name>iocp_close_sock</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>EVENT</name> <operator>*</operator><operator>)</operator> <name>ei</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
