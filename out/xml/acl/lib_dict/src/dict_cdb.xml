<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_dict/src/dict_cdb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_CDB</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_cdb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cdb.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TINYCDB_VERSION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cdb_make.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>cdb_fileno</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cdb_fileno</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c)-&gt;fd)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CDB_SUFFIX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDB_SUFFIX</name></cpp:macro> <cpp:value>".cdb"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CDB_TMP_SUFFIX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDB_TMP_SUFFIX</name></cpp:macro> <cpp:value>CDB_SUFFIX ".tmp"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Application-specific. */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>DICT</name></type>    <name>dict</name></decl>;</decl_stmt>			<comment type="block">/* generic members */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>cdb</name></name></type> <name>cdb</name></decl>;</decl_stmt>			<comment type="block">/* cdb structure */</comment>
}</block></struct></type> <name>DICT_CDBQ</name>;</typedef>				<comment type="block">/* query interface */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>DICT</name></type>    <name>dict</name></decl>;</decl_stmt>			<comment type="block">/* generic members */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>cdb_make</name></name></type> <name>cdbm</name></decl>;</decl_stmt>		<comment type="block">/* cdb_make structure */</comment>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cdb_path</name></decl>;</decl_stmt>		<comment type="block">/* cdb pathname (.cdb) */</comment>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>tmp_path</name></decl>;</decl_stmt>		<comment type="block">/* temporary pathname (.tmp) */</comment>
}</block></struct></type> <name>DICT_CDBM</name>;</typedef>				<comment type="block">/* rebuild interface */</comment>

<comment type="block">/* dict_cdbq_lookup - find database entry, query mode */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_cdbq_lookup</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_CDBQ</name> <modifier>*</modifier></type><name>dict_cdbq</name> <init>= <expr><operator>(</operator><name>DICT_CDBQ</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>vlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>dict_errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dict_db_lookup: value null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* CDB is constant, so do not try to acquire a lock. */</comment>

	<comment type="block">/*
	 * Optionally fold the key.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_lowercase</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * See if this CDB file was written with one null byte appended to key
	 * and value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>cdb_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY0NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * See if this CDB file was written with no null byte appended to key and
	 * value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>cdb_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY1NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"error reading %s: %s"</literal></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>cdb_datalen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>cdb_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>,
			<argument><expr><call><name>cdb_datapos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"error reading %s: %s"</literal></expr></argument>,
				<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* No locking so not release the lock.  */</comment>

	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_cdbq_close - close data base, query mode */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_cdbq_close</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_CDBQ</name> <modifier>*</modifier></type><name>dict_cdbq</name> <init>= <expr><operator>(</operator><name>DICT_CDBQ</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>cdb_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>stat_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>dict_free</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_cdbq_open - open data base, query mode */</comment>

<function><type><specifier>static</specifier> <name>DICT</name> <modifier>*</modifier></type><name>dict_cdbq_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_CDBQ</name> <modifier>*</modifier></type><name>dict_cdbq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cdb_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cdb_path</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>CDB_SUFFIX</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>cdb_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: open database %s: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>cdb_path</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dict_cdbq</name> <operator>=</operator> <operator>(</operator><name>DICT_CDBQ</name> <operator>*</operator><operator>)</operator> <call><name>dict_alloc</name><argument_list>(<argument><expr><name>DICT_TYPE_CDB</name></expr></argument>,
			<argument><expr><name>cdb_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dict_cdbq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TINYCDB_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>cdb_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>cdb</name></name><operator>)</operator></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dict_cdbq_open: unable to init %s: %s"</literal></expr></argument>,
			<argument><expr><name>cdb_path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>cdb_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>cdb</name></name><operator>)</operator></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>dict_cdbq</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>lookup</name></name> <operator>=</operator> <name>dict_cdbq_lookup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_cdbq</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dict_cdbq_close</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_cdbq</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>stat_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dict_dbq_open: fstat: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>dict_cdbq</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>mtime</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Warn if the source file is newer than the indexed file, except when
	 * the source file changed only seconds ago.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name><name>dict_cdbq</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>mtime</name></name>
		<operator>&amp;&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;</operator> <call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"database %s is older than source file %s"</literal></expr></argument>,
			<argument><expr><name>cdb_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If undecided about appending a null byte to key and value, choose to
	 * try both in query mode.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict_flags</name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dict_flags</name> <operator>|=</operator> <name>DICT_FLAG_TRY0NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY1NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>dict_cdbq</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>dict_flags</name> <operator>|</operator> <name>DICT_FLAG_FIXED</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_cdbq</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cdb_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>dict_cdbq</name><operator>-&gt;</operator><name>dict</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_cdbm_update - add database entry, create mode */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_cdbm_update</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_CDBM</name> <modifier>*</modifier></type><name>dict_cdbm</name> <init>= <expr><operator>(</operator><name>DICT_CDBM</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ksize</name></decl>, <decl><type ref="prev"/><name>vsize</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TINYCDB_VERSION</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>     <name>r</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Optionally fold the key.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_lowercase</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ksize</name> <operator>=</operator> <name>name_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>vsize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Optionally append a null byte to key and value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ksize</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>vsize</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Do the add operation.  No locking is done.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TINYCDB_VERSION</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CDB_PUT_ADD</name></cpp:ifndef>
<cpp:error>#<cpp:directive>error</cpp:directive> please upgrate tinycdb to at least 0.5 version</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_DUP_IGNORE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>CDB_PUT_ADD</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_DUP_REPLACE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>CDB_PUT_REPLACE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>CDB_PUT_INSERT</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>cdb_make_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdbm</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vsize</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"error writing %s: %s"</literal></expr></argument>,
			<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>tmp_path</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_DUP_IGNORE</name> <operator>|</operator> <name>DICT_FLAG_DUP_REPLACE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* void */</comment> <empty_stmt>;</empty_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_DUP_WARN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: duplicate entry: \"%s\""</literal></expr></argument>,
				<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: duplicate entry: \"%s\""</literal></expr></argument>,
				<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>cdb_make_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdbm</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vsize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"error writing %s: %s"</literal></expr></argument>,
			<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>tmp_path</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* dict_cdbm_close - close data base and rename file.tmp to file.cdb */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_cdbm_close</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_CDBM</name> <modifier>*</modifier></type><name>dict_cdbm</name> <init>= <expr><operator>(</operator><name>DICT_CDBM</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>fd</name> <init>= <expr><call><name>cdb_fileno</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdbm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Note: if FCNTL locking is used, closing any file descriptor on a
	 * locked file cancels all locks that the process may have on that file.
	 * CDB is FCNTL locking safe, because it uses the same file descriptor
	 * for database I/O and locking.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>cdb_make_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdbm</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"finish database %s: %s"</literal></expr></argument>,
			<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>tmp_path</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>tmp_path</name></name></expr></argument>, <argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdb_path</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>tmp_path</name></name></expr></argument>, <argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdb_path</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"rename database from %s to %s: %s"</literal></expr></argument>,
				<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>tmp_path</name></name></expr></argument>, <argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdb_path</name></name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>				<comment type="block">/* releases a lock */</comment>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"close database %s: %s"</literal></expr></argument>,
			<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdb_path</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdb_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>tmp_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>dict_free</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_cdbm_open - create database as file.tmp */</comment>

<function><type><specifier>static</specifier> <name>DICT</name> <modifier>*</modifier></type><name>dict_cdbm_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_CDBM</name> <modifier>*</modifier></type><name>dict_cdbm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cdb_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>tmp_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st0</name></decl>, <decl><type ref="prev"/><name>st1</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cdb_path</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>CDB_SUFFIX</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	tmp_path = acl_concatenate(path, CDB_SUFFIX, (char *) 0);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>tmp_path</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>CDB_TMP_SUFFIX</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Repeat until we have opened *and* locked *existing* file. Since the
	 * new (tmp) file will be renamed to be .cdb file, locking here is
	 * somewhat funny to work around possible race conditions.  Note that we
	 * can't open a file with O_TRUNC as we can't know if another process
	 * isn't creating it at the same time.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal>
			<operator>||</operator> <call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: open database %s: %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Get an exclusive lock - we're going to change the database
		 * so we can't have any spectators.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>acl_myflock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_INTERNAL_LOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_EXCLUSIVE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"lock %s: %s"</literal></expr></argument>, <argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"stat(%s): %s"</literal></expr></argument>, <argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Compare file's state before and after lock: should be the same,
		 * and nlinks should be &gt;0, or else we opened non-existing file...
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>st0</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <name><name>st1</name><operator>.</operator><name>st_ino</name></name> <operator>&amp;&amp;</operator> <name><name>st0</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>st1</name><operator>.</operator><name>st_dev</name></name>
			<operator>&amp;&amp;</operator> <name><name>st0</name><operator>.</operator><name>st_rdev</name></name> <operator>==</operator> <name><name>st1</name><operator>.</operator><name>st_rdev</name></name>
			<operator>&amp;&amp;</operator> <name><name>st0</name><operator>.</operator><name>st_nlink</name></name> <operator>==</operator> <name><name>st1</name><operator>.</operator><name>st_nlink</name></name>
			<operator>&amp;&amp;</operator> <name><name>st0</name><operator>.</operator><name>st_nlink</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>				<comment type="block">/* successefully opened */</comment>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_FTRUNCATE</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><name><name>st0</name><operator>.</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>dict_cdbm</name> <operator>=</operator> <operator>(</operator><name>DICT_CDBM</name> <operator>*</operator><operator>)</operator> <call><name>dict_alloc</name><argument_list>(<argument><expr><name>DICT_TYPE_CDB</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dict_cdbm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>cdb_make_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdbm</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"initialize database %s: %s"</literal></expr></argument>,
			<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dict_cdbm_close</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>update</name></name> <operator>=</operator> <name>dict_cdbm_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>cdb_path</name></name> <operator>=</operator> <name>cdb_path</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>tmp_path</name></name> <operator>=</operator> <name>tmp_path</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If undecided about appending a null byte to key and value, choose a
	 * default to not append a null byte when creating a cdb.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict_flags</name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dict_flags</name> <operator>|=</operator> <name>DICT_FLAG_TRY0NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <operator>(</operator><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dict_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY0NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>dict_flags</name> <operator>|</operator> <name>DICT_FLAG_FIXED</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_cdbm</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>dict_cdbm</name><operator>-&gt;</operator><name>dict</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_cdb_open - open data base for query mode or create mode */</comment>

<function><type><name>DICT</name>   <modifier>*</modifier></type><name>dict_cdb_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>open_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>open_flags</name> <operator>&amp;</operator> <operator>(</operator><name>O_RDONLY</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>O_RDONLY</name></expr>:</case>					<comment type="block">/* query mode */</comment>
		<return>return <expr><call><name>dict_cdbq_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>:</case>		<comment type="block">/* create mode */</comment>
	<case>case <expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>:</case>		<comment type="block">/* sloppiness */</comment>
		<return>return <expr><call><name>dict_cdbm_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call></expr>;</return>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dict_cdb_open: inappropriate open flags for"</literal>
			<literal type="string">" cdb database - specify O_RDONLY or O_WRONLY|O_CREAT|O_TRUNC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* not reached */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>					<comment type="block">/* HAS_CDB */</comment>
</unit>
