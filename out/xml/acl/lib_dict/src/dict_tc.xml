<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_dict/src/dict_tc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_TC</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_tc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tcutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tcadb.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>DICT</name></type>    <name>dict</name></decl>;</decl_stmt>			<comment type="block">/* generic members */</comment>
	<decl_stmt><decl><type><name>TCADB</name>	<modifier>*</modifier></type><name>adb</name></decl>;</decl_stmt>			<comment type="block">/* TCADB structure */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DICT_TC_HDB</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DICT_TC_BDB</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DICT_TC_FDB</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DICT_TC_TDB</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DICT_TC_HMDB</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DICT_TC_BMDB</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type>	<name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>DICT_TC</name>;</typedef>

<comment type="block">/* dict_tc_error - get the error status */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_tc_error</name><parameter_list>(<parameter><decl><type><name>DICT_TC</name> <modifier>*</modifier></type><name>dict_tc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ecode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_tc_error"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="string">"unknown error"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>dict_tc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>DICT_TC_HDB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>hdb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: hdb null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tchdbecode</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>hdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ecode</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ecode</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tchdberrmsg</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>DICT_TC_BDB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>bdb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: bdb null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcbdbecode</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>bdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ecode</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ecode</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tcbdberrmsg</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>DICT_TC_FDB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>fdb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: fdb null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tcfdbecode</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>fdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ecode</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ecode</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tcfdberrmsg</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>DICT_TC_TDB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>tdb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: tdb null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tctdbecode</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>tdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ecode</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ecode</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tctdberrmsg</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>DICT_TC_HMDB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>mdb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: mdb null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<case>case <expr><name>DICT_TC_BMDB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name><operator>-&gt;</operator><name>ndb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: ndb null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<default>default:</default>
		<if_stmt><if>if <condition>(<expr><name>ecode</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ecode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_tc_lookup - find database entry */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_tc_lookup</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_TC</name> <modifier>*</modifier></type><name>dict_tc</name> <init>= <expr><operator>(</operator><name>DICT_TC</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>dict_errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dict_db_lookup: value null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Optionally fold the key.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_lowercase</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * See if this TC file was written with one null byte appended to key
	 * and value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tcadbget</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY0NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * See if this TC file was written with no null byte appended to key and
	 * value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tcadbget</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY1NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><operator>*</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>*</operator><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* free the memory allocated by TC db */</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* No locking so not release the lock.  */</comment>

	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_tc_update - add database entry */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_tc_update</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_tc_update"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_TC</name> <modifier>*</modifier></type><name>dict_tc</name> <init>= <expr><operator>(</operator><name>DICT_TC</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ksize</name></decl>, <decl><type ref="prev"/><name>vsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ecode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Optionally fold the key.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_lowercase</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ksize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>vsize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Optionally append a null byte to key and value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ksize</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>vsize</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Do the add operation.  No locking is done.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_DUP_IGNORE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbputcat</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add error(%d, %s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_DUP_WARN</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbput</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add error(%d, %s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbput</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add error(%d, %s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbputkeep</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add error(%d, %s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ecode</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_SYNC_UPDATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbsync</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): delete from %s error(%d, %s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_tc_delete - delete one entry from the dictionary */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_tc_delete</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_tc_delete"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_TC</name> <modifier>*</modifier></type><name>dict_tc</name> <init>= <expr><operator>(</operator><name>DICT_TC</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>ecode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity check.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"dict_db_delete: no DICT_FLAG_TRY1NULL | DICT_FLAG_TRY0NULL flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Optionally fold the key.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_lowercase</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * See if this DB file was written with one null byte appended to key and
	 * value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbout</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): delete from %s error(%d, %s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * See if this DB file was written with no null byte appended to key and
	 * value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ecode</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbout</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): delete from %s error(%d, %s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ecode</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_SYNC_UPDATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbsync</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): delete from %s error(%d, %s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>ecode</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* dict_tc_close - close data base */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_tc_close</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_tc_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_TC</name> <modifier>*</modifier></type><name>dict_tc</name> <init>= <expr><operator>(</operator><name>DICT_TC</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ecode</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcadbclose</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dict_tc_error</name><argument_list>(<argument><expr><name>dict_tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: close tc db error(%d, %s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>dict_free</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_tc_open - open data base */</comment>

<function><type><specifier>static</specifier> <name>DICT</name> <modifier>*</modifier></type><name>dict_tc_open2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_tc_open2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_TC</name> <modifier>*</modifier></type><name>dict_tc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dict_tc</name> <operator>=</operator> <operator>(</operator><name>DICT_TC</name> <operator>*</operator><operator>)</operator> <call><name>dict_alloc</name><argument_list>(<argument><expr><name>DICT_TYPE_TC</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dict_tc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name> <operator>=</operator> <call><name>tcadbnew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"*#"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DICT_TC_HMDB</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"+#"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DICT_TC_BMDB</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">".tch"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DICT_TC_HDB</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">".tcb"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DICT_TC_BDB</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">".tcf"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DICT_TC_FDB</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">".tct"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DICT_TC_TDB</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ext(%s) in path(%s) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>tcadbopen</name><argument_list>(<argument><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>adb</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: tcadbopen %s error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>lookup</name></name> <operator>=</operator> <name>dict_tc_lookup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>update</name></name> <operator>=</operator> <name>dict_tc_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>delete_it</name></name> <operator>=</operator> <name>dict_tc_delete</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dict_tc_close</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>stat_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	dict_cdbq-&gt;dict.mtime = st.st_mtime;
	acl_close_on_exec(fd, ACL_CLOSE_ON_EXEC);
	*/</comment>

	<comment type="block">/*
	 * Warn if the source file is newer than the indexed file, except when
	 * the source file changed only seconds ago.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>mtime</name></name>
			<operator>&amp;&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;</operator> <call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"database %s is older than source file %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If undecided about appending a null byte to key and value, choose to
	 * try both in query mode.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict_flags</name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dict_flags</name> <operator>|=</operator> <name>DICT_FLAG_TRY0NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY1NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>dict_flags</name> <operator>|</operator> <name>DICT_FLAG_FIXED</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>dict_tc</name><operator>-&gt;</operator><name>dict</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_tc_open - open data base */</comment>

<function><type><name>DICT</name>   <modifier>*</modifier></type><name>dict_tc_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>open_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>open_flags</name> <operator>&amp;</operator> <operator>(</operator><name>O_RDONLY</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>O_RDONLY</name></expr>:</case>			<comment type="block">/* query mode */</comment>
		<case>case <expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>:</case>		<comment type="block">/* create mode */</comment>
		<case>case <expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>:</case>		<comment type="block">/* sloppiness */</comment>
			<return>return <expr><call><name>dict_tc_open2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dict_cdb_open: inappropriate open flags for cdb database"</literal>
				<literal type="string">" - specify O_RDONLY or O_WRONLY|O_CREAT|O_TRUNC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* not reached */</comment>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>					<comment type="block">/* HAS_TC */</comment>
</unit>
