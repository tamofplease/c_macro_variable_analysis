<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_dict/src/name_mask.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STRCASECMP_IN_STRINGS_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"name_mask.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>acl_vstring_str(x)</cpp:value></cpp:define>

<comment type="block">/* name_mask_delim_opt - compute mask corresponding to list of names */</comment>

<function><type><name>int</name></type>     <name>name_mask_delim_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NAME_MASK</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"name_mask"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_names</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>saved_names</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NAME_MASK</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<function_decl><type><name>int</name></type>     (<modifier>*</modifier><name>lookup</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_ANY_CASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>lookup</name> <operator>=</operator> <name>strcasecmp</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>lookup</name> <operator>=</operator> <name>strcmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Break up the names string, and look up each component in the table. If
	 * the name is found, merge its mask with the result.
	 */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name>table</name></expr>;</init> <comment type="block">/* void */</comment> <condition>;</condition> <incr><expr><name>np</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"unknown %s value \"%s\" in \"%s\""</literal></expr></argument>,
							<argument><expr><name>context</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_RETURN</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"unknown %s value \"%s\" in \"%s\""</literal></expr></argument>,
							<argument><expr><name>context</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>lookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_NAME_MASK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>|=</operator> <name><name>np</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>saved_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* str_name_mask_opt - mask to string */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_name_mask_opt</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>NAME_MASK</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"name_mask"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>NAME_MASK</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>my_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>delim</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_COMMA</name></expr> ?</condition><then> <expr><literal type="char">','</literal></expr> </then><else>:
			<expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_PIPE</name></expr> ?</condition><then> <expr><literal type="char">'|'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>my_buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>my_buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>my_buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>np</name> <operator>=</operator> <name>table</name></expr>;</init> <condition><expr><name>mask</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>np</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_FATAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown %s bit in mask: 0x%x"</literal></expr></argument>,
						<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_RETURN</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: unknown %s bit in mask: 0x%x"</literal></expr></argument>,
						<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NAME_MASK_NUMBER</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"0x%x%c"</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>np</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>np</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_truncate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

<comment type="block">/*
 * Stand-alone test program.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>NAME_MASK</name></type> <name><name>table</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"zero"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>,
		<expr><literal type="string">"one"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,
		<expr><literal type="string">"two"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>,
		<expr><literal type="string">"three"</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>--</operator><name>argc</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>argv</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>name_mask</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s -&gt; 0x%x -&gt; %s\n"</literal></expr></argument>,
				<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><call><name>str_name_mask</name><argument_list>(<argument><expr><literal type="string">"mask_test"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
