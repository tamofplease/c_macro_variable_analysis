<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_dict/src/unescape.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unescape.h"</cpp:file></cpp:include>

<comment type="block">/* unescape - process escape sequences */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>unescape</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>oval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHAR</name><parameter_list>(<parameter><type><name>cp</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((const unsigned char *) (cp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISOCTAL</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(ACL_ISDIGIT(ch) &amp;&amp; (ch) != '8' &amp;&amp; (ch) != '9')</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><call><name>UCHAR</name><argument_list>(<argument><expr><name>data</name><operator>++</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><call><name>UCHAR</name><argument_list>(<argument><expr><name>data</name><operator>++</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case>				<comment type="block">/* \a -&gt; audible bell */</comment>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'b'</literal></expr>:</case>				<comment type="block">/* \b -&gt; backspace */</comment>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>				<comment type="block">/* \f -&gt; formfeed */</comment>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'n'</literal></expr>:</case>				<comment type="block">/* \n -&gt; newline */</comment>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'r'</literal></expr>:</case>				<comment type="block">/* \r -&gt; carriagereturn */</comment>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case>				<comment type="block">/* \t -&gt; horizontal tab */</comment>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'v'</literal></expr>:</case>				<comment type="block">/* \v -&gt; vertical tab */</comment>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case>				<comment type="block">/* \nnn -&gt; ASCII value */</comment>
			<case>case <expr><literal type="char">'1'</literal></expr>:</case>
			<case>case <expr><literal type="char">'2'</literal></expr>:</case>
			<case>case <expr><literal type="char">'3'</literal></expr>:</case>
			<case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case>
			<case>case <expr><literal type="char">'6'</literal></expr>:</case>
			<case>case <expr><literal type="char">'7'</literal></expr>:</case>
				<for>for <control>(<init><expr><name>oval</name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
					<condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><call><name>UCHAR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ISOCTAL</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition>
					<incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>data</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name>oval</name> <operator>=</operator> <operator>(</operator><name>oval</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>oval</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>				<comment type="block">/* \any -&gt; any */</comment>
				<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* escape - reverse transformation */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>escape</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><call><name>UCHAR</name><argument_list>(<argument><expr><name>data</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_ISASCII</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ACL_ISPRINT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\a'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* \a -&gt; audible bell */</comment>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* \b -&gt; backspace */</comment>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\f'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* \f -&gt; formfeed */</comment>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* \n -&gt; newline */</comment>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* \r -&gt; carriagereturn */</comment>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* \t -&gt; horizontal tab */</comment>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\v'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* \v -&gt; vertical tab */</comment>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><call><name>UCHAR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\%03d"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\\%d"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;msg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vstring_vstream.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VSTRING</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VSTRING</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>un_escape</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>un_escape</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>msg_fatal</name><argument_list>(<argument><expr><literal type="string">"usage: %s [-e (escape)]"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>un_escape</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><call><name>vstring_fgets_nonl</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>VSTREAM_IN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>unescape</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>vstream_fwrite</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VSTRING_LEN</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<while>while <condition>(<expr><call><name>vstring_fgets</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>VSTREAM_IN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>escape</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VSTRING_LEN</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>vstream_fwrite</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VSTRING_LEN</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>vstream_fflush</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
