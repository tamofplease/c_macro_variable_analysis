<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_dict/src/dict_pool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_pool.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name></cpp:macro> <cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>POOL_PARTION</name> <block>{
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>db_cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>obj_cnt</name></decl>;</decl_stmt>
}</block></struct></type> <name>POOL_PARTION</name>;</typedef>

<struct>struct <name>DICT_POOL_DB</name> <block>{
	<decl_stmt><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>dpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict_read</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict_write</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>seqcnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>POOL_PARTION</name> <modifier>*</modifier></type><name>partion</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>DICT_POOL</name> <block>{
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>pool_size</name></decl>;</decl_stmt>
	<function_decl><type><name>unsigned</name></type> (<modifier>*</modifier><name>hash_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>int</name></type>   <name>dict_cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>dbpool</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>POOL_PARTION</name> <modifier>*</modifier></type><name>partions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>partions_size</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>dict_pool_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dict_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>dict_pool_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>partions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>partions_size</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_path</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pool_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_pool_new"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>(</operator><name>DICT_POOL</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DICT_POOL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>open_flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dict_flags</name> <init>= <comment type="block">/* DICT_FLAG_LOCK | */</comment> <expr><name>DICT_FLAG_DUP_REPLACE</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>two_db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>partions</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): partions null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>partions_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): partions_size(%d) &lt;= 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>partions_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_type</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>dict_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dict_type invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>dict_path</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dict_path invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>dict_name</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dict_name invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pool_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pool_size(%d) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>pool_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>dict_type</name></expr></argument>, <argument><expr><literal type="string">"cdb"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>two_db</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>dict_type</name></expr></argument>, <argument><expr><literal type="string">"btree"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>two_db</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>open_flags</name> <operator>=</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>dict_type</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>two_db</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>open_flags</name> <operator>=</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>dict_type</name></expr></argument>, <argument><expr><literal type="string">"tc"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>two_db</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>open_flags</name> <operator>=</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"unknown dict type from %s"</literal></expr></argument>, <argument><expr><name>dict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name></name> <operator>=</operator> <operator>(</operator><name>DICT_POOL_DB</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>pool_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DICT_POOL_DB</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name></name> <operator>=</operator> <operator>(</operator><name>POOL_PARTION</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>partions_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POOL_PARTION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>partions_size</name></name> <operator>=</operator> <name>partions_size</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>partions_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><name><name>partions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>db_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>obj_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pool_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>partions_size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name></expr></argument>, <argument><expr><literal type="string">"%s:%s/%s/%s_%d"</literal></expr></argument>,
			<argument><expr><name>dict_type</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dict_path</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>db_cnt</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>partion</name> <operator>=</operator> <operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>partions</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seqcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>two_db</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>open_flags</name> <operator>=</operator> <name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_TRUNC</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_write</name> <operator>=</operator> <call><name>dict_open</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_write</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open dict(%s) error"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>open_flags</name> <operator>=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name> <operator>=</operator> <call><name>dict_open</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open dict(%s) error"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>open_flags</name> <operator>=</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name> <operator>=</operator> <call><name>dict_open</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open dict(%s) error"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_write</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
			dict_register(STR(pool-&gt;dbpool[i].dpath), pool-&gt;dbpool[i].dict);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dict_name</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name> <operator>=</operator> <name>pool_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>hash_fn</name></name>   <operator>=</operator> <name>acl_hash_crc32</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>pool</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dict_pool_free</name><parameter_list>(<parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_pool_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dict_name invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		dict_unregister(STR(pool-&gt;dbpool[i].dpath));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_write</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>DICT_CLOSE</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>DICT_CLOSE</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_write</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>DICT_CLOSE</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>partions_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>partions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dict_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>  <name>dict_pool_set</name><parameter_list>(<parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name><name>pool</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_pool_db_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DICT_PUT</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>dict_write</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>partion</name><operator>-&gt;</operator><name>obj_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_pool_db_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>dict_pool_get</name><parameter_list>(<parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_pool_get"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name><name>pool</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_pool_db_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>DICT_GET</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>dict_read</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dict_errno</name> <operator>==</operator> <name>DICT_ERR_RETRY</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): soft error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>dict_pool_db_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>  <name>dict_pool_del</name><parameter_list>(<parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name><name>pool</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_pool_db_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DICT_DEL</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>dict_write</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>partion</name><operator>-&gt;</operator><name>obj_cnt</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>dict_pool_db_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dict_pool_seq_reset</name><parameter_list>(<parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>DICT_RESET</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dict_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seqcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dict_pool_seq_delcur</name><parameter_list>(<parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_pool_seq_delcur"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s): dict_cur(%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name> <operator>&gt;=</operator> <name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s): dict_cur(%d) &gt;= pool_size(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>dict_pool_db_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DICT_DELCUR</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name><operator>.</operator><name>dict_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_pool_db_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dict_pool_seq</name><parameter_list>(<parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>key_size</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>val_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name> <operator>&gt;=</operator> <name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>key_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>val_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>dict_pool_db_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name><operator>.</operator><name>seqcnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DICT_SEQ</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name><operator>.</operator><name>dict_read</name></expr></argument>,
				<argument><expr><name>DICT_SEQ_FUN_FIRST</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DICT_SEQ</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name><operator>.</operator><name>dict_read</name></expr></argument>,
				<argument><expr><name>DICT_SEQ_FUN_NEXT</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>dict_pool_db_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name><operator>.</operator><name>seqcnt</name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name></expr>]</index></name><operator>.</operator><name>seqcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/* ·µ»Ø·Ç0Öµ£¬ÓÐ¿ÉÄÜÊÇµ±Ç°µÄDB½áµãÒÑ¾­±éÀúÍê±Ï, xxx: Ó¦¸Ã½øÒ»²½ÅÐ¶Ï²ÅÊÇ */</comment>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dict_cur</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>dict_pool_db</name><parameter_list>(<parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name><name>pool</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>pool_size</name></name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>dbpool</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_pool_db_path</name><parameter_list>(<parameter><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dpath</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dict_pool_db_lock</name><parameter_list>(<parameter><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dict_pool_db_unlock</name><parameter_list>(<parameter><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>  <name>dict_pool_db_set</name><parameter_list>(<parameter><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DICT_PUT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict_write</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>partion</name><operator>-&gt;</operator><name>obj_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>dict_pool_db_get</name><parameter_list>(<parameter><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_pool_db_get"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>DICT_GET</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict_read</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dict_errno</name> <operator>==</operator> <name>DICT_ERR_RETRY</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): soft error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dict_pool_db_del</name><parameter_list>(<parameter><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DICT_DEL</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict_write</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>partion</name><operator>-&gt;</operator><name>obj_cnt</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dict_pool_db_seq_reset</name><parameter_list>(<parameter><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DICT_RESET</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dict_pool_db_seq</name><parameter_list>(<parameter><decl><type><name>DICT_POOL_DB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>key_size</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>val_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>seqcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DICT_SEQ</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict_read</name></name></expr></argument>, <argument><expr><name>DICT_SEQ_FUN_FIRST</name></expr></argument>,
			<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DICT_SEQ</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict_read</name></name></expr></argument>, <argument><expr><name>DICT_SEQ_FUN_NEXT</name></expr></argument>,
			<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>seqcnt</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
