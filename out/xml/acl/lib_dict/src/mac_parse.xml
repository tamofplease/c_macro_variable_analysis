<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_dict/src/mac_parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mac_parse.h"</cpp:file></cpp:include>

 <comment type="block">/*
  * Helper macro for consistency. Null-terminate the temporary buffer,
  * execute the action, and reset the temporary buffer for re-use.
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_PARSE_ACTION</name><parameter_list>(<parameter><type><name>status</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>context</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
	    ACL_VSTRING_TERMINATE(buf); \
	    status |= action((type), (buf), (context)); \
	    ACL_VSTRING_RESET(buf); \
	} while(0)</cpp:value></cpp:define>

<comment type="block">/* mac_parse - split string into literal text and macro references */</comment>

<function><type><name>int</name></type>     <name>mac_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>MAC_PARSE_FN</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mac_parse"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* result buffer */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>			<comment type="block">/* value pointer */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>			<comment type="block">/* open_paren pointer */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>			<comment type="block">/* string end pointer */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>open_paren</name><index>[]</index></name> <init>= <expr><literal type="string">"({"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>close_paren</name><index>[]</index></name> <init>= <expr><literal type="string">")}"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>for (var = start; *var &amp;&amp; (cond); var++);</cpp:value></cpp:define>

    <expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_MAC</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>vp</name> <operator>=</operator> <name>value</name></expr>;</init> <condition><expr><operator>*</operator><name>vp</name></expr>;</condition><incr/>)</control> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>vp</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>			<comment type="block">/* ordinary character */</comment>
	    <expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>vp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* $$ becomes $ */</comment>
	    <expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>vp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>				<comment type="block">/* found bare $ */</comment>
	    <if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>MAC_PARSE_ACTION</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>MAC_PARSE_LITERAL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>vp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>open_paren</name></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>vp</name> <operator>==</operator> <operator>*</operator><name>pp</name> <operator>||</operator> <operator>*</operator><name>vp</name> <operator>==</operator> <operator>*</operator><operator>++</operator><name>pp</name></expr>)</condition> <block>{<block_content>	<comment type="block">/* ${x} or $(x) */</comment>
		<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>vp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <name>vp</name></expr>;</init> <condition><expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"truncated macro reference: \"%s\""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>status</name> <operator>|=</operator> <name>MAC_PARSE_ERROR</name></expr>;</expr_stmt>
			<break>break;</break>
		    </block_content>}</block></if></if_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>==</operator> <operator>*</operator><name>pp</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>==</operator> <name><name>close_paren</name><index>[<expr><name>pp</name> <operator>-</operator> <name>open_paren</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;</operator> <name>MAC_PARSE_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strncat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ep</name> <operator>-</operator> <name>vp</name></expr> </then><else>: <expr><name>ep</name> <operator>-</operator> <name>vp</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
	    </block_content>}</block></if> <else>else <block>{<block_content>				<comment type="block">/* plain $x */</comment>
		<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><call><name>ACL_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>ep</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>ep</name> <operator>==</operator> <literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strncat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>status</name> <operator>|=</operator> <name>MAC_PARSE_ERROR</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"empty macro name: \"%s\""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	    </block_content>}</block></if></if_stmt>
	    <expr_stmt><expr><call><name>MAC_PARSE_ACTION</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>MAC_PARSE_EXPR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>&amp;</operator> <name>MAC_PARSE_ERROR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>MAC_PARSE_ACTION</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>MAC_PARSE_LITERAL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Cleanup.
     */</comment>
    <expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

 <comment type="block">/*
  * Proof-of-concept test program. Read strings from stdin, print parsed
  * result to stdout.
  */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vstring_vstream.h&gt;</cpp:file></cpp:include>

<comment type="block">/* mac_parse_print - print parse tree */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mac_parse_print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>unused_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>type_name</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MAC_PARSE_EXPR</name></expr>:</case>
	<expr_stmt><expr><name>type_name</name> <operator>=</operator> <literal type="string">"MAC_PARSE_EXPR"</literal></expr>;</expr_stmt>
	<break>break;</break>
    <case>case <expr><name>MAC_PARSE_LITERAL</name></expr>:</case>
	<expr_stmt><expr><name>type_name</name> <operator>=</operator> <literal type="string">"MAC_PARSE_LITERAL"</literal></expr>;</expr_stmt>
	<break>break;</break>
    <default>default:</default>
	<expr_stmt><expr><call><name>msg_panic</name><argument_list>(<argument><expr><literal type="string">"unknown token type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>vstream_printf</name><argument_list>(<argument><expr><literal type="string">"%s \"%s\"\n"</literal></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unused_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>unused_argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>vstring_fgets_nonl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>VSTREAM_IN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>mac_parse</name><argument_list>(<argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mac_parse_print</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vstream_fflush</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
