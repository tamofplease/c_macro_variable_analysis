<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_dict/src/dict_open.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_db.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_cdb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_tc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>

 <comment type="block">/*
  * lookup table for available map types.
  */</comment>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
	<function_decl><type><name><name>struct</name> <name>DICT</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>open</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>DICT_OPEN_INFO</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>DICT_OPEN_INFO</name></type> <name><name>dict_open_info</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_CDB</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_CDB</name></expr>, <expr><name>dict_cdb_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_TC</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_TC</name></expr>, <expr><name>dict_tc_open</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPSHOT</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_TCP</name></expr>, <expr><name>dict_tcp_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_SDBM</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_SDBM</name></expr>, <expr><name>dict_sdbm_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_DBM</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_DBM</name></expr>, <expr><name>dict_dbm_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_BDB</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_HASH</name></expr>, <expr><name>dict_hash_open</name></expr>, }</block></expr>,
	<expr><block>{ <expr><name>DICT_TYPE_BTREE</name></expr>, <expr><name>dict_btree_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_NIS</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_NIS</name></expr>, <expr><name>dict_nis_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_NISPLUS</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_NISPLUS</name></expr>, <expr><name>dict_nisplus_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_NETINFO</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_NETINFO</name></expr>, <expr><name>dict_ni_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_PCRE</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_PCRE</name></expr>, <expr><name>dict_pcre_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_POSIX_REGEXP</name></cpp:ifdef>
	<expr><block>{ <expr><name>DICT_TYPE_REGEXP</name></expr>, <expr><name>dict_regexp_open</name></expr>, }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>dict_open_hash</name></decl>;</decl_stmt>

<comment type="block">/* dict_open_init - one-off initialization */</comment>

<function><type><name>void</name></type> <name>dict_open_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_open_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_OPEN_INFO</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_open_hash</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: multiple initialization, return"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dict_open_hash</name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>dp</name> <operator>=</operator> <name>dict_open_info</name></expr>;</init> <condition><expr><name><name>dp</name><operator>-&gt;</operator><name>type</name></name></expr>;</condition> <incr><expr><name>dp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>dict_open_hash</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* dict_open - open dictionary */</comment>

<function><type><name>DICT</name>   <modifier>*</modifier></type><name>dict_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_spec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>open_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_dict_spec</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>dict_spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dict_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict_name</name> <operator>=</operator> <call><name>acl_split_at</name><argument_list>(<argument><expr><name>saved_dict_spec</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: open dictionary: expecting \"type:[path/]name\" form instead of \"%s\""</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>dict_open3</name><argument_list>(<argument><expr><name>saved_dict_spec</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>saved_dict_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>dict</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_open3 - open dictionary */</comment>

<function><type><name>DICT</name>   <modifier>*</modifier></type><name>dict_open3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>open_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_open3"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_OPEN_INFO</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dict_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>dict_name</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: open dictionary: expecting \"type:name\" form instead of \"%s:%s\""</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_type</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_open_hash</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: dict_open_init should be called first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>DICT_OPEN_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name>dict_open_hash</name></expr></argument>, <argument><expr><name>dict_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"unsupported dictionary type: %s"</literal></expr></argument>, <argument><expr><name>dict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict</name> <operator>=</operator> <call><name><name>dp</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"opening %s:%s %s"</literal></expr></argument>, <argument><expr><name>dict_type</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT_OPEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="string">"%s: %s:%s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_type</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>dict</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_open_register - register dictionary type */</comment>

<function><type><name>void</name></type>    <name>dict_open_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
		<parameter><function_decl><type><name>DICT</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>open_fn</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_open_register"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_OPEN_INFO</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_open_hash</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: dict_open_init should be called first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_htable_find</name><argument_list>(<argument><expr><name>dict_open_hash</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: dictionary type exists: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DICT_OPEN_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>open_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>dict_open_hash</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_sort_alpha_cpp - qsort() callback */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_sort_alpha_cpp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_mapnames - return an ARGV of available map_names */</comment>

<function><type><name>ACL_ARGV</name>   <modifier>*</modifier></type><name>dict_mapnames</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_mapnames"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_OPEN_INFO</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name>   <modifier>*</modifier></type><name>mapnames</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_open_hash</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: dict_open_init should be called first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>mapnames</name> <operator>=</operator> <call><name>acl_argv_alloc</name><argument_list>(<argument><expr><call><name>acl_htable_used</name><argument_list>(<argument><expr><name>dict_open_hash</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ht_info</name> <operator>=</operator> <name>ht</name> <operator>=</operator> <call><name>acl_htable_list</name><argument_list>(<argument><expr><name>dict_open_hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>ht</name></expr>;</condition> <incr><expr><name>ht</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DICT_OPEN_INFO</name> <operator>*</operator><operator>)</operator> <name><name>ht</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>mapnames</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>ACL_ARGV_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>mapnames</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name><name>mapnames</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mapnames</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><name>dict_sort_alpha_cpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ht_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_argv_terminate</name><argument_list>(<argument><expr><name>mapnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>mapnames</name></expr>;</return>
</block_content>}</block></function>
</unit>
