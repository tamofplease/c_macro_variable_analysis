<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_dict/src/dict_db.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>

<comment type="block">/*
 * You can override the default dict_db_cache_size setting before calling
 * dict_hash_open() or dict_btree_open(). This is done in mkmap_db_open() to
 * set a larger memory pool for database (re)builds.
 * 
 * XXX This should be specified via the DICT interface so that it becomes an
 * object property, instead of being specified by poking a global variable
 * so that it becomes a class property.
 */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>dict_db_cache_size</name> <init>= <expr><operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>	<comment type="block">/* default memory pool */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>dict_db_page_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* default same as the system pagesize */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_BDB</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_var.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"db.h"</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>getcwd</name></cpp:macro> <cpp:value>_getcwd</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"db.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* System library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DB_185_H_</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_FCNTL_LOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Error: this system must not use the db 1.85 compatibility interface"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DB_VERSION_MAJOR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_VERSION_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_GET</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>db-&gt;get(db, key, val, flag)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_PUT</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>db-&gt;put(db, key, val, flag)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_DEL</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>db-&gt;del(db, key, flag)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_SYNC</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>db-&gt;sync(db, flag)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_CLOSE</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>db-&gt;close(db)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_CLOBBER</name></cpp:macro>			<cpp:value>R_NOOVERWRITE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_GET</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>sanitize(db-&gt;get(db, 0, key, val, flag))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_PUT</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>tid</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>sanitize(db-&gt;put(db, tid, key, val, flag))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_DEL</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>sanitize(db-&gt;del(db, 0, key, flag))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_SYNC</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((errno = db-&gt;sync(db, flag)) ? -1 : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_CLOSE</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((errno = db-&gt;close(db, 0)) ? -1 : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_CLOBBER</name></cpp:macro>			<cpp:value>DB_NOOVERWRITE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DB_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>DB_VERSION_MINOR</name> <operator>&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_CURSOR</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>curs</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(db)-&gt;cursor((db), NULL, (curs))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_CURSOR</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>curs</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(db)-&gt;cursor((db), NULL, (curs), 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DB_FCNTL_LOCKING</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_FCNTL_LOCKING</name></cpp:macro>		<cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_db.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>DICT</name></type>    <name>dict</name></decl>;</decl_stmt>               <comment type="block">/* generic members */</comment>
	<decl_stmt><decl><type><name>DB</name>     <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                 <comment type="block">/* open db file */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>DBC</name>    <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>             <comment type="block">/* dict_db_sequence() */</comment>
	<decl_stmt><decl><type><name>DB_ENV</name> <modifier>*</modifier></type><name>dbenv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>quit</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>DICT_DB</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DB_NELM</name></cpp:macro>		<cpp:value>(1024 * 1024 * 10)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>__thread</name> <name>char</name></type>    <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compare_key</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier><name>dbp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>dict_db_cmpkey_fn</name>)<parameter_list>(<parameter><decl><type><name>DB</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DBT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DBT</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>compare_key</name></expr></init>;</function_decl>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dict_mem_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dict_mem_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>acl_myrealloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_mem_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

<comment type="block">/* sanitize - sanitize db_get/put/del result */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sanitize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * XXX This is unclean but avoids a lot of clutter elsewhere. Categorize
	 * results into non-fatal errors (i.e., errors that we can deal with),
	 * success, or fatal error (i.e., all other errors).
	 */</comment>
	<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>DB_NOTFOUND</name></expr>:</case>       <comment type="block">/* get, del */</comment>
		<case>case <expr><name>DB_KEYEXIST</name></expr>:</case>       <comment type="block">/* put */</comment>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>         <comment type="block">/* non-fatal */</comment>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>         <comment type="block">/* success */</comment>

		<case>case <expr><name>DB_KEYEMPTY</name></expr>:</case>       <comment type="block">/* get, others? */</comment>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<default>default:</default>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>    <comment type="block">/* fatal */</comment>
	</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* dict_db_lookup - find database entry */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_db_lookup</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DB</name>     <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>dict_db</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DBT</name></type>     <name>db_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DBT</name></type>     <name>db_value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity check.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"dict_db_lookup: no DICT_FLAG_TRY1NULL | DICT_FLAG_TRY0NULL flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dict_db_lookup: value null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dict_errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_value</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Optionally fold the key.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_lowercase</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Acquire a shared lock.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_SHARED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: lock dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * See if this DB file was written with one null byte appended to key and
	 * value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_GET</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"error reading %s: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
				<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY0NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>db_value</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>db_value</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * See if this DB file was written with no null byte appended to key and
	 * value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_GET</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"error reading %s: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
				<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY1NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>db_value</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>db_value</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Release the shared lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
	    <operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unlock dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_db_update - add or update database entry */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_db_update</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_db_update"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DB</name>     <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>dict_db</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DBT</name></type>     <name>db_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DBT</name></type>     <name>db_value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DB_TXN</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity check.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dict_db_update: no DICT_FLAG_TRY1NULL | DICT_FLAG_TRY0NULL flag"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Avoid deadlock
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>c_close</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Optionally fold the key.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_lowercase</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_value</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_value</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If undecided about appending a null byte to key and value, choose a
	 * default depending on the platform.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DB_NO_TRAILING_NULL</name></cpp:ifdef>
		<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY1NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY0NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Optionally append a null byte to key and value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db_value</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Acquire an exclusive lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_EXCLUSIVE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s lock dictionary error %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Do the update.
	 */</comment>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Begin the transaction. */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>=</operator> <call><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name><operator>-&gt;</operator><name>txn_begin</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"txn_begin: %s"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_PUT</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_value</name></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_DUP_REPLACE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>DONT_CLOBBER</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): (%u) writing %s: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>DB_LOCK_DEADLOCK</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>=</operator> <call><name><name>tid</name><operator>-&gt;</operator><name>abort</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): DB_TXN-&gt;abort error(%s)"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_DUP_IGNORE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* void */</comment> <empty_stmt>;</empty_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_DUP_WARN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s: duplicate entry: \"%s\""</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s: duplicate entry: \"%s\", %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_SYNC_UPDATE</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_SYNC</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s: flush dictionary: %s"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>DB_LOCK_DEADLOCK</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<break>break;</break></block_content></block></else></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>=</operator> <call><name><name>tid</name><operator>-&gt;</operator><name>commit</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): commit error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Release the exclusive lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s: unlock dictionary: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* delete one entry from the dictionary */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_db_delete</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DB</name>     <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>dict_db</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DBT</name></type>     <name>db_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>status</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity check.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"dict_db_delete: no DICT_FLAG_TRY1NULL | DICT_FLAG_TRY0NULL flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Avoid deadlock
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>c_close</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Optionally fold the key.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_lowercase</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Acquire an exclusive lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_EXCLUSIVE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: lock dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * See if this DB file was written with one null byte appended to key and
	 * value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY1NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_DEL</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"deleting from %s: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
					<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY0NULL</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * See if this DB file was written with no null byte appended to key and
	 * value.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>name_len</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_DEL</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"deleting from %s: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
					<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DICT_FLAG_TRY1NULL</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_SYNC_UPDATE</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_SYNC</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: flush dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
					<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<break>break;</break></block_content></block></else></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Release the exclusive lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unlock dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_db_sequence_reset */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_db_sequence_reset</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>c_close</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_db_sequence_delcur</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><call><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>c_del</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_db_sequence - traverse the dictionary */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_db_sequence</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>function</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>key_size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>value_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_db_sequence"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DB</name>     <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>dict_db</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DBT</name></type>     <name>db_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DBT</name></type>     <name>db_value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>db_function</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>key_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>key_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>value_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>value_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

	<comment type="block">/*
	 * Initialize.
	 */</comment>

	<expr_stmt><expr><name>dict_errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_key</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_value</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Determine the function.
	 */</comment>
	<switch>switch <condition>(<expr><name>function</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>DICT_SEQ_FUN_FIRST</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>DICT_DB_CURSOR</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>db_function</name> <operator>=</operator> <name>DB_FIRST</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DICT_SEQ_FUN_NEXT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* If the cursor is not yet initialized,
				 * DB_NEXT is identical to DB_FIRST--see BDB help
				 */</comment>
				<expr_stmt><expr><call><name>DICT_DB_CURSOR</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* acl_msg_panic("%s: no cursor", myname); */</comment>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>db_function</name> <operator>=</operator> <name>DB_NEXT</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: invalid function %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Acquire a shared lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_SHARED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: lock dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Database lookup.
	 */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>c_get</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_value</name></expr></argument>, <argument><expr><name>db_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>DB_NOTFOUND</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"error [%d] seeking %s: %s"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Release the shared lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unlock dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Copy the result so it is guaranteed null terminated.
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>db_key</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>key_size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>key_size</name> <operator>=</operator> <name><name>db_key</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>db_value</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>value_size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>value_size</name> <operator>=</operator> <name><name>db_value</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/*
		 * Avoid deadlock in update and delete functions
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>c_close</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<comment type="block">/*
	 * determine the function
	 */</comment>
	<switch>switch <condition>(<expr><name>function</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>DICT_SEQ_FUN_FIRST</name></expr>:</case>
			<expr_stmt><expr><name>db_function</name> <operator>=</operator> <name>R_FIRST</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DICT_SEQ_FUN_NEXT</name></expr>:</case>
			<expr_stmt><expr><name>db_function</name> <operator>=</operator> <name>R_NEXT</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: invalid function %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Acquire a shared lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_SHARED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: lock dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>seq</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_value</name></expr></argument>, <argument><expr><name>db_function</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"error seeking %s: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Release the shared lock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dict</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <call><name>myflock</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unlock dictionary: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Copy the result so that it is guaranteed null terminated.
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>db_key</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>key_size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>key_size</name> <operator>=</operator> <name><name>db_key</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>db_value</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>value_size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>value_size</name> <operator>=</operator> <name><name>db_value</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>status</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* dict_db_close - close data base */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_db_close</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>c_close</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_SYNC</name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"flush database %s: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>DICT_DB_CLOSE</name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"close database %s: %s"</literal></expr></argument>, <argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>name</name></name></expr></argument>,
			<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>dict_db</name><operator>-&gt;</operator><name>quit</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"begin to sync db..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name><operator>-&gt;</operator><name>memp_sync</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"sync db ok."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"begin to close db..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"close db ok."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>fold_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>dict_free</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* check_lock_thread - check deadlock for multi-threads */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>check_lock_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><name><name>dict_db</name><operator>-&gt;</operator><name>quit</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name><operator>-&gt;</operator><name>lock_detect</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DB_LOCK_YOUNGEST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* memp_trickle_thread - put data from mem to disk */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memp_trickle_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>wrote</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><name><name>dict_db</name><operator>-&gt;</operator><name>quit</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name><operator>-&gt;</operator><name>memp_trickle</name></name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* create_backend_threads - open two backend threads */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_backend_threads</name><parameter_list>(<parameter><decl><type><name>DICT_DB</name><modifier>*</modifier></type> <name>dict_db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>check_lock_thread</name></expr></argument>, <argument><expr><name>dict_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>memp_trickle_thread</name></expr></argument>, <argument><expr><name>dict_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_db_open - open data base */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_key</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier><name>dbp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,  <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DICT</name> <modifier>*</modifier></type><name>dict_db_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>open_flags</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>tweak</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_db_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DB</name>     <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_path</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* [path/]dict_name */</comment>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>db_root</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>db_home</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>db_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>db_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type> <name>lock_fd</name> <init>= <expr><name>ACL_FILE_INVALID</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>dbfd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type>     <name>db_flags</name></decl>, <decl><type ref="prev"/><name>env_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>DB_ENV</name> <modifier>*</modifier></type><name>dbenv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Mismatches between #include file and library are a common cause for
	 * trouble.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type>     <name>major_version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>minor_version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>patch_version</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>db_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name>major_version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor_version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>major_version</name> <operator>!=</operator> <name>DB_VERSION_MAJOR</name> <operator>||</operator> <name>minor_version</name> <operator>!=</operator> <name>DB_VERSION_MINOR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): incorrect version of Berkeley DB: "</literal>
			<literal type="string">"compiled against %d.%d.%d, run-time linked against %d.%d.%d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>DB_VERSION_MAJOR</name></expr></argument>, <argument><expr><name>DB_VERSION_MINOR</name></expr></argument>, <argument><expr><name>DB_VERSION_PATCH</name></expr></argument>,
			<argument><expr><name>major_version</name></expr></argument>, <argument><expr><name>minor_version</name></expr></argument>, <argument><expr><name>patch_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_do_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT_DB</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Compiled against Berkeley DB: %d.%d.%d\n"</literal></expr></argument>,
			<argument><expr><name>DB_VERSION_MAJOR</name></expr></argument>, <argument><expr><name>DB_VERSION_MINOR</name></expr></argument>, <argument><expr><name>DB_VERSION_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Run-time linked against Berkeley DB: %d.%d.%d\n"</literal></expr></argument>,
			<argument><expr><name>major_version</name></expr></argument>, <argument><expr><name>minor_version</name></expr></argument>, <argument><expr><name>patch_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT_DB</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"Compiled against Berkeley DB version 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* saved_path: [path/]db_name */</comment>

	<expr_stmt><expr><name>db_name</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>saved_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>db_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>db_root</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>db_home</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>db_root</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>saved_path</name></expr></argument>, <argument><expr><literal type="string">".d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>db_name</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>saved_path</name></expr></argument>, <argument><expr><literal type="string">".db"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>db_path</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>db_home</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>db_name</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>db_root</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>saved_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>db_home</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>db_root</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><literal type="string">".d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>db_name</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>, <argument><expr><literal type="string">".db"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>db_path</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>db_home</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_make_dirs</name><argument_list>(<argument><expr><name>db_home</name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Note: DICT_FLAG_LOCK is used only by programs that do fine-grained (in
	 * the time domain) locking while accessing individual database records.
	 * 
	 * Programs such as postmap/postalias use their own large-grained (in the
	 * time domain) locks while rewriting the entire file.
	 * 
	 * XXX DB version 4.1 will not open a zero-length file. This means we must
	 * open an existing file without O_CREAT|O_TRUNC, and that we must let
	 * db_open() create a non-existent file for us.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_OPEN_FLAGS</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f) &amp; ~(O_CREAT|O_TRUNC))</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lock_fd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>db_path</name></expr></argument>, <argument><expr><call><name>LOCK_OPEN_FLAGS</name><argument_list>(<argument><expr><name>open_flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open file %s: %s(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name>db_path</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_myflock</name><argument_list>(<argument><expr><name>lock_fd</name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_SHARED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): shared-lock database %s for open: %s"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Use the DB 1.x programming interface. This is the default interface
	 * with 4.4BSD systems. It is also available via the db_185 compatibility
	 * interface, but that interface does not have the undocumented feature
	 * that we need to make file locking safe with POSIX fcntl() locking.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <call><name>dbopen</name><argument_list>(<argument><expr><name>db_path</name></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>tweak</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open database %s: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>dbfd</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>fd</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Use the DB 2.x programming interface. Jump a couple extra hoops.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
	<expr_stmt><expr><name>db_flags</name> <operator>=</operator> <name>DB_FCNTL_LOCKING</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>open_flags</name> <operator>==</operator> <name>O_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_flags</name> <operator>|=</operator> <name>DB_RDONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>open_flags</name> <operator>&amp;</operator> <name>O_CREAT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_flags</name> <operator>|=</operator> <name>DB_CREATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>open_flags</name> <operator>&amp;</operator> <name>O_TRUNC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_flags</name> <operator>|=</operator> <name>DB_TRUNCATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name>db_open</name><argument_list>(<argument><expr><name>db_path</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>db_flags</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tweak</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open database %s: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"db_open null result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>fd</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbfd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get database file descriptor: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Use the DB 3.x programming interface. Jump even more hoops.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name>db_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbenv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): db_env_create error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>dbenv</name><operator>-&gt;</operator><name>set_errfile</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dbenv</name><operator>-&gt;</operator><name>set_errpfx</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dbenv</name><operator>-&gt;</operator><name>set_alloc</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>dict_mem_malloc</name></expr></argument>, <argument><expr><name>dict_mem_realloc</name></expr></argument>, <argument><expr><name>dict_mem_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>dbenv</name><operator>-&gt;</operator><name>set_cachesize</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dict_db_cache_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set DB_ENV cache size %d: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dict_db_cache_size</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>dbenv</name><operator>-&gt;</operator><name>set_mp_mmapsize</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set DB_ENV mmapsize size %d: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if ((errno = dbenv-&gt;set_flags(dbenv, DB_CDB_ALLDB | DB_REGION_INIT, 1)) != 0) {
	 	acl_msg_fatal("set_flags error(%s)", db_strerror(errno));
	}
	if ((errno = dbenv-&gt;set_encrypt(dbenv, "zsxxsz", DB_ENCRYPT_AES)) != 0) {
		acl_msg_fatal("set_encrypt error(%s), errno(%d)", db_strerror(errno), errno);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>env_flags</name> <operator>=</operator> <name>DB_CREATE</name>
		<comment type="block">/* | DB_INIT_LOCK */</comment>
		<operator>|</operator> <name>DB_INIT_LOG</name>
		<operator>|</operator> <name>DB_PRIVATE</name>
		<operator>|</operator> <name>DB_INIT_MPOOL</name>
		<operator>|</operator> <name>DB_INIT_TXN</name>
		<operator>|</operator> <name>DB_THREAD</name></expr>
		<comment type="block">/* | DB_USE_ENVIRON */</comment>;</expr_stmt>
	<comment type="block">/*
	if ((errno = dbenv-&gt;set_data_dir(dbenv, db_home)) != 0) {
		acl_msg_fatal("%s(%d): set_data_dir(%s) error(%s)",
			myname, __LINE__, db_root, db_strerror(errno));
	}
	*/</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>dbenv</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>db_home</name></expr></argument>, <argument><expr><name>env_flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>curpath</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>curpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getcwd</name><argument_list>(<argument><expr><name>curpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curpath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open db_home=%s, %s, current path=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_home</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>curpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>curpath</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>curpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getcwd</name><argument_list>(<argument><expr><name>curpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curpath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): current path=%s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>curpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>db_flags</name> <operator>=</operator> <comment type="block">/* DB_FCNTL_LOCKING |*/</comment> <name>DB_CREATE</name> <operator>|</operator> <name>DB_THREAD</name></expr> <comment type="block">/* | DB_AUTO_COMMIT */</comment>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>open_flags</name> <operator>==</operator> <name>O_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_flags</name> <operator>|=</operator> <name>DB_RDONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>open_flags</name> <operator>&amp;</operator> <name>O_CREAT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_flags</name> <operator>|=</operator> <name>DB_CREATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>open_flags</name> <operator>&amp;</operator> <name>O_TRUNC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_flags</name> <operator>|=</operator> <name>DB_TRUNCATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name>db_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>dbenv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): create DB database: %s, %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"db_create null result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_db_page_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>set_pagesize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dict_db_page_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"set pagesize error %s"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>get_pagesize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"open database: pagesize %d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>db</name><operator>-&gt;</operator><name>set_errfile</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>db</name><operator>-&gt;</operator><name>set_errpfx</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>set_bt_compare</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dict_db_cmpkey_fn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set_bt_compare error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>DB_HASH</name> <operator>&amp;&amp;</operator> <call><name><name>db</name><operator>-&gt;</operator><name>set_h_nelem</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DICT_DB_NELM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set DB hash element count %d: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>DICT_DB_NELM</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>DB_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>DB_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>DB_VERSION_MINOR</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>db_flags</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>curpath</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>curpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>getcwd</name><argument_list>(<argument><expr><name>curpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curpath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open database %s: %s, %s, current path=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>curpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>DB_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>DB_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>db_flags</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open database %s: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported Berkeley DB version"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>fd</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbfd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get database file descriptor: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>lock_fd</name> <operator>!=</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_myflock</name><argument_list>(<argument><expr><name>lock_fd</name></expr></argument>, <argument><expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unlock database %s for open: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>,
				<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_file_close</name><argument_list>(<argument><expr><name>lock_fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): close database %s: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>,
				<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dict_db</name> <operator>=</operator> <operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <call><name>dict_alloc</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dict_db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>lookup</name></name> <operator>=</operator> <name>dict_db_lookup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>update</name></name> <operator>=</operator> <name>dict_db_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>delete_it</name></name> <operator>=</operator> <name>dict_db_delete</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>sequence</name></name> <operator>=</operator> <name>dict_db_sequence</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>sequence_reset</name></name> <operator>=</operator> <name>dict_db_sequence_reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>sequence_delcur</name></name> <operator>=</operator> <name>dict_db_sequence_delcur</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dict_db_close</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>lock_fd</name></name> <operator>=</operator> <operator>(</operator><name>ACL_FILE_HANDLE</name><operator>)</operator> <call><name>FILE_HANDLE</name><argument_list>(<argument><expr><name>dbfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>stat_fd</name></name> <operator>=</operator> <operator>(</operator><name>ACL_FILE_HANDLE</name><operator>)</operator> <call><name>FILE_HANDLE</name><argument_list>(<argument><expr><name>dbfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name></name> <operator>=</operator> <name>dbenv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>quit</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>db_path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>db_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>db_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>db_path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dict_db_open: fstat(%s): %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>mtime</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Warn if the source file is newer than the indexed file, except when
	 * the source file changed only seconds ago.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_LOCK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <call><name>acl_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>mtime</name></name>
			<operator>&amp;&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;</operator> <call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"database %s is older than source file %s"</literal></expr></argument>, <argument><expr><name>db_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>lock_fd</name></name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>stat_fd</name></name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>dict_flags</name> <operator>|</operator> <name>DICT_FLAG_FIXED</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dict_flags</name> <operator>&amp;</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>DICT_FLAG_TRY1NULL</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_flags</name> <operator>&amp;</operator> <name>DICT_FLAG_FOLD_FIX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>fold_buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
	<expr_stmt><expr><name><name>dict_db</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>db_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>db_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>db_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>saved_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_db</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>create_backend_threads</name><argument_list>(<argument><expr><name>dict_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>DICT_DEBUG</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict_db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_hash_open - create association with data base */</comment>

<function><type><name>DICT</name>   <modifier>*</modifier></type><name>dict_hash_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>open_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>HASHINFO</name></type> <name>tweak</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tweak</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tweak</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tweak</name><operator>.</operator><name>nelem</name></name> <operator>=</operator> <name>DICT_DB_NELM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tweak</name><operator>.</operator><name>cachesize</name></name> <operator>=</operator> <name>dict_db_cache_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>DB_INFO</name></type> <name>tweak</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tweak</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tweak</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tweak</name><operator>.</operator><name>h_nelem</name></name> <operator>=</operator> <name>DICT_DB_NELM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tweak</name><operator>.</operator><name>db_cachesize</name></name> <operator>=</operator> <name>dict_db_cache_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>tweak</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tweak</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><call><name>dict_db_open</name><argument_list>(<argument><expr><name>DICT_TYPE_HASH</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><name>DB_HASH</name></expr></argument>,
		<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tweak</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_btree_open - create association with data base */</comment>

<function><type><name>DICT</name>   <modifier>*</modifier></type><name>dict_btree_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>open_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>BTREEINFO</name></type> <name>tweak</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tweak</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tweak</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tweak</name><operator>.</operator><name>cachesize</name></name> <operator>=</operator> <name>dict_db_cache_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>DB_INFO</name></type> <name>tweak</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tweak</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tweak</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tweak</name><operator>.</operator><name>db_cachesize</name></name> <operator>=</operator> <name>dict_db_cache_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DB_VERSION_MAJOR</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>tweak</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tweak</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><operator>(</operator><call><name>dict_db_open</name><argument_list>(<argument><expr><name>DICT_TYPE_BTREE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><name>DB_BTREE</name></expr></argument>,
		<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tweak</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>DB_ENV</name> <modifier>*</modifier></type><name>dict_db_env</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DB</name> <modifier>*</modifier></type><name>dict_db</name> <init>= <expr><operator>(</operator><name>DICT_DB</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name><name>dict_db</name><operator>-&gt;</operator><name>dbenv</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* HAS_BDB */</comment>
</unit>
