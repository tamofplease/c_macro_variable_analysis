<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_dict/src/mac_expand.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mac_parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mac_expand.h"</cpp:file></cpp:include>

 <comment type="block">/*
  * Little helper structure.
  */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>		<comment type="block">/* result buffer */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>flags</name></decl>;</decl_stmt>			<comment type="block">/* features */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>			<comment type="block">/* character filter */</comment>
    <decl_stmt><decl><type><name>MAC_EXP_LOOKUP_FN</name></type> <name>lookup</name></decl>;</decl_stmt>		<comment type="block">/* lookup routine */</comment>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>			<comment type="block">/* caller context */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>			<comment type="block">/* findings */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>level</name></decl>;</decl_stmt>			<comment type="block">/* nesting level */</comment>
}</block></struct></type> <name>MAC_EXP</name>;</typedef>

<comment type="block">/* mac_expand_callback - callback for mac_parse */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mac_expand_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MAC_EXP</name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><operator>(</operator><name>MAC_EXP</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>lookup_mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>size</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Sanity check.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>level</name></name><operator>++</operator> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"unreasonable macro call nesting: \"%s\""</literal></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>MAC_PARSE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>MAC_PARSE_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><name><name>mc</name><operator>-&gt;</operator><name>status</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * $Name etc. reference.
     * 
     * In order to support expansion of lookup results, we must save the lookup
     * result. We use the input buffer since it will not be needed anymore.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>MAC_PARSE_EXPR</name></expr>)</condition> <block>{<block_content>

	<comment type="block">/*
	 * Look for the ? or : delimiter. In case of a syntax error, return
	 * without doing damage, and issue a warning instead.
	 */</comment>
	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</init> <comment type="block">/* void */</comment> <condition>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lookup_mode</name> <operator>=</operator> <name>MAC_EXP_MODE_USE</name></expr>;</expr_stmt>
		<break>break;</break>
	    </block_content>}</block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>lookup_mode</name> <operator>=</operator> <name>MAC_EXP_MODE_TEST</name></expr>;</expr_stmt>
		<break>break;</break>
	    </block_content>}</block></if></if_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ACL_ISALNUM</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"macro name syntax error: \"%s\""</literal></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>MAC_PARSE_ERROR</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name><name>mc</name><operator>-&gt;</operator><name>status</name></name><operator>)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Look up the named parameter.
	 */</comment>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>mc</name><operator>-&gt;</operator><name>lookup</name></name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lookup_mode</name></expr></argument>, <argument><expr><name><name>mc</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Perform the requested substitution.
	 */</comment>
	<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="char">'?'</literal></expr>:</case>
	    <if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>text</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mac_parse</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>mac_expand_callback</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <break>break;</break>
	<case>case <expr><literal type="char">':'</literal></expr>:</case>
	    <if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>text</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mac_parse</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>mac_expand_callback</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    <break>break;</break>
	<default>default:</default>
	    <if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>MAC_PARSE_UNDEF</name></expr>;</expr_stmt>
	    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>text</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		 <comment type="block">/* void */</comment> <empty_stmt>;</empty_stmt>
	    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAC_EXP_FLAG_RECURSE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mac_parse</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mac_expand_callback</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
		    <while>while <condition>(<expr><operator>*</operator><operator>(</operator><name>cp</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>mc</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></while>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	    <break>break;</break>
	</block_content>}</block></switch>
    </block_content>}</block></if>

    <comment type="block">/*
     * Literal text.
     */</comment>
    <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><name><name>mc</name><operator>-&gt;</operator><name>status</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* mac_expand - expand $name instances */</comment>

<function><type><name>int</name></type>     <name>mac_expand</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
		           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
		           <parameter><decl><type><name>MAC_EXP_LOOKUP_FN</name></type> <name>lookup</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MAC_EXP</name></type> <name>mc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Bundle up the request and do the substitutions.
     */</comment>
    <expr_stmt><expr><name><name>mc</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>.</operator><name>lookup</name></name> <operator>=</operator> <name>lookup</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>mac_parse</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>mac_expand_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

 <comment type="block">/*
  * This code certainly deserves a stand-alone test program.
  */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stringops.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;htable.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vstream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vstring_vstream.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_mode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><operator>(</operator><name>HTABLE</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>(</operator><call><name>htable_find</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unused_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>unused_argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>vstring_alloc</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VSTRING</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>vstring_alloc</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HTABLE</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>stat</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>!</operator><call><name>vstream_feof</name><argument_list>(<argument><expr><name>VSTREAM_IN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>htable_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Read a block of definitions, terminated with an empty line.
	 */</comment>
	<while>while <condition>(<expr><call><name>vstring_get_nonl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>VSTREAM_IN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>vstream_printf</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt; %s\n"</literal></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>vstream_fflush</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="string">" \t\r\n="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="string">" \t\r\n="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>htable_enter</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><call><name>mystrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Read a block of patterns, terminated with an empty line or EOF.
	 */</comment>
	<while>while <condition>(<expr><call><name>vstring_get_nonl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>VSTREAM_IN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>vstream_printf</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt; %s\n"</literal></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>vstream_fflush</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>VSTRING_RESET</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>mac_expand</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAC_EXP_FLAG_NONE</name></expr></argument>,
			      <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>lookup</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>vstream_printf</name><argument_list>(<argument><expr><literal type="string">"stat=%d result=%s\n"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><call><name>vstring_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>vstream_fflush</name><argument_list>(<argument><expr><name>VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>htable_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>myfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vstream_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/*
     * Clean up.
     */</comment>
    <expr_stmt><expr><call><name>vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vstring_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
