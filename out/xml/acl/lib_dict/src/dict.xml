<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_dict/src/dict.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mac_expand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"name_mask.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_ht.h"</cpp:file></cpp:include>

<comment type="block">/*
 * By default, use a sane default for an unknown name.
 */</comment>
<decl_stmt><decl><type><name>int</name></type>     <name>dict_unknown_allowed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__thread</name> <name>int</name></type>     <name>dict_errno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>dict_table</name></decl>;</decl_stmt>

<comment type="block">/*
 * Each (name, dictionary) instance has a reference count. The count is part
 * of the name, not the dictionary. The same dictionary may be registered
 * under multiple names. The structure below keeps track of instances and
 * reference counts.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>refcount</name></decl>;</decl_stmt>
}</block></struct></type> <name>DICT_NODE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dict_node</name><parameter_list>(<parameter><type><name>dict</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(dict_table ? (DICT_NODE *) acl_htable_find(dict_table, dict) : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>acl_vstring_str(x)</cpp:value></cpp:define>

<function><type><name>void</name></type>    <name>dict_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_init"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: multiple initialization, return"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>dict_open_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dict_table</name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_register - make association with dictionary */</comment>

<function><type><name>void</name></type>    <name>dict_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_register"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>DICT_NODE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <name>dict_info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>dict_table</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dict_info</name> <operator>!=</operator> <name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: dictionary name exists: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: %s %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_handle - locate generic dictionary handle */</comment>

<function><type><name>DICT</name>   <modifier>*</modifier></type><name>dict_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_node_free - dict_unregister() callback */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_node_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>DICT_NODE</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>dict</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_unregister - break association with named dictionary */</comment>

<function><type><name>void</name></type>    <name>dict_unregister</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_unregister"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"non-existing dictionary: %s"</literal></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="string">"%s: %s %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>--</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>refcount</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name>dict_table</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>dict_node_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_update - replace or add dictionary entry */</comment>

<function><type><name>void</name></type>    <name>dict_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_update"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dict_unknown_allowed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown dictionary: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>dict_ht_open</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>,
				<argument><expr><call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dict_register</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="string">"%s: %s = %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dict</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_lookup - look up dictionary entry */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
			<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_lookup"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dict_unknown_allowed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown dictionary: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dict</name><operator>-&gt;</operator><name>lookup</name></name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dict_unknown_allowed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dictionary %s: unknown member: %s"</literal></expr></argument>,
				<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="string">"%s: %s = %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
		<argument><expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="string">"(not found)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_delete - delete dictionary entry */</comment>

<function><type><name>int</name></type>     <name>dict_delete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_delete"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dict_unknown_allowed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown dictionary: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>dict_ht_open</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>,
				<argument><expr><call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dict_register</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="string">"%s: delete %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name><name>dict</name><operator>-&gt;</operator><name>delete_it</name></name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <name>dict_unknown_allowed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: dictionary %s: unknown member: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_sequence_reset - close the sequence cursor */</comment>

<function><type><name>void</name></type> <name>dict_sequence_reset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_sequence_reset"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dict_unknown_allowed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown dictionary: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>dict_ht_open</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dict_register</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>sequence_reset</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>dict</name><operator>-&gt;</operator><name>sequence_reset</name></name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_sequence_delcur - delete the data refered by the cursor */</comment>

<function><type><name>int</name></type> <name>dict_sequence_delcur</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_sequence_delcur"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dict_unknown_allowed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown dictionary: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>dict_ht_open</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dict_register</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>sequence_delcur</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>dict</name><operator>-&gt;</operator><name>sequence_delcur</name></name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_sequence - traverse dictionary */</comment>

<function><type><name>int</name></type>     <name>dict_sequence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>func</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>key_size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>value_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_sequence"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>node</name> <operator>=</operator> <call><name>dict_node</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dict_unknown_allowed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown dictionary: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>dict_ht_open</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dict_register</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="string">"%s: sequence func %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name><name>dict</name><operator>-&gt;</operator><name>sequence</name></name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_load_file - read entries from text file */</comment>

<function><type><name>void</name></type>    <name>dict_load_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name>  <name>acl_stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>  <name>before</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>  <name>after</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Read the file again if it is hot. This may result in reading a
	 * partial parameter name when a file changes in the middle of a read.
	 */</comment>
	<for>for <control>(<init><expr><name>before</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <comment type="block">/* see below */</comment> <condition>;</condition> <incr><expr><name>before</name> <operator>=</operator> <name>after</name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"open %s: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>dict_load_fp</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"fstat %s: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>after</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;</operator> <name>before</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name>after</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="string">"pausing to let %s cool down"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_doze</name><argument_list>(<argument><expr><literal type="number">300000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* dict_load_fp - read entries from open stream */</comment>

<function><type><name>void</name></type>    <name>dict_load_fp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>lineno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lineno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>acl_readlline</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>acl_split_nameval</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, line %d: %s: \"%s\""</literal></expr></argument>,
				<argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>dict_update</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_eval_lookup - macro parser call-back routine */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_eval_lookup</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * XXX how would one recover?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>dict_lookup</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dict_errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dictionary %s: lookup %s: temporary error"</literal></expr></argument>,
			<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>*</operator><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_vstring_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_eval - expand embedded dictionary references */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_eval</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dict_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_eval"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>status</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Initialize.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>free_vstring_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Expand macros, possibly recursively.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_FILTER</name></cpp:macro> <cpp:value>(char *) 0</cpp:value></cpp:define>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>mac_expand</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>recursive</name></expr> ?</condition><then> <expr><name>MAC_EXP_FLAG_RECURSE</name></expr> </then><else>: <expr><name>MAC_EXP_FLAG_NONE</name></expr></else></ternary></expr></argument>,
			<argument><expr><name>DONT_FILTER</name></expr></argument>, <argument><expr><name>dict_eval_lookup</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;</operator> <name>MAC_PARSE_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dictionary %s: macro processing error"</literal></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_do_debug</name><argument_list>(<argument><expr><name>DEBUG_DICT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: expand %s -&gt; %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: const  %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_walk - iterate over all dictionaries in arbitrary order */</comment>

<function><type><name>void</name></type>    <name>dict_walk</name><parameter_list>(<parameter><decl><type><name>DICT_WALK_ACTION</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_walk"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_info_list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ht_info_list</name> <operator>=</operator> <call><name>acl_htable_list</name><argument_list>(<argument><expr><name>dict_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name>ht_info_list</name></expr>;</init> <condition><expr><operator>(</operator><name>h</name> <operator>=</operator> <operator>*</operator><name>ht</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ht</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>action</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>DICT</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ht_info_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_changed_name - see if any dictionary has changed */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_changed_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dict_changed_name"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht_info_list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dict_table</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): call dict_init first"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ht_info_list</name> <operator>=</operator> <call><name>acl_htable_list</name><argument_list>(<argument><expr><name>dict_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ht</name> <operator>=</operator> <name>ht_info_list</name></expr>;</init> <condition><expr><name>status</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>h</name> <operator>=</operator> <operator>*</operator><name>ht</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ht</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>dict</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>DICT_NODE</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>-&gt;</operator><name>dict</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>stat_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* not file-based */</comment>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>-&gt;</operator><name>mtime</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* not bloody likely */</comment>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: table %s: null time stamp"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>db_path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: fstat: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name><name>dict</name><operator>-&gt;</operator><name>mtime</name></name> <operator>||</operator> <name><name>st</name><operator>.</operator><name>st_nlink</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ht_info_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_changed - backwards compatibility */</comment>

<function><type><name>int</name></type>     <name>dict_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>dict_changed_name</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Mapping between flag names and flag values.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>NAME_MASK</name></type> <name><name>dict_mask</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"warn_dup"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>, }</block></expr>,          <comment type="block">/* if file, warn about dups */</comment>
	<expr><block>{ <expr><literal type="string">"ignore_dup"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>, }</block></expr>,        <comment type="block">/* if file, ignore dups */</comment>
	<expr><block>{ <expr><literal type="string">"try0null"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>, }</block></expr>,          <comment type="block">/* do not append 0 to key/value */</comment>
	<expr><block>{ <expr><literal type="string">"try1null"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>, }</block></expr>,          <comment type="block">/* append 0 to key/value */</comment>
	<expr><block>{ <expr><literal type="string">"fixed"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>, }</block></expr>,             <comment type="block">/* fixed key map */</comment>
	<expr><block>{ <expr><literal type="string">"pattern"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>, }</block></expr>,           <comment type="block">/* keys are patterns */</comment>
	<expr><block>{ <expr><literal type="string">"lock"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>, }</block></expr>,              <comment type="block">/* lock before access */</comment>
	<expr><block>{ <expr><literal type="string">"replace"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>, }</block></expr>,           <comment type="block">/* if file, replace dups */</comment>
	<expr><block>{ <expr><literal type="string">"sync_update"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>, }</block></expr>,       <comment type="block">/* if file, sync updates */</comment>
	<expr><block>{ <expr><literal type="string">"debug"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>, }</block></expr>,             <comment type="block">/* log access */</comment>
	<expr><block>{ <expr><literal type="string">"no_regsub"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>, }</block></expr>,        <comment type="block">/* disallow regexp substitution */</comment>
	<expr><block>{ <expr><literal type="string">"no_proxy"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>, }</block></expr>,         <comment type="block">/* disallow proxy mapping */</comment>
	<expr><block>{ <expr><literal type="string">"no_unauth"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr>, }</block></expr>,        <comment type="block">/* disallow unauthenticated data */</comment>
	<expr><block>{ <expr><literal type="string">"fold_fix"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>, }</block></expr>,         <comment type="block">/* case-fold with fixed-case key map */</comment>
	<expr><block>{ <expr><literal type="string">"fold_mul"</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>, }</block></expr>,         <comment type="block">/* case-fold with multi-case key map */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* dict_flags_str - convert mask to string for debugging purposes */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_flags_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dict_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>free_vstring_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>str_name_mask_opt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"dictionary flags"</literal></expr></argument>, <argument><expr><name>dict_mask</name></expr></argument>,
			<argument><expr><name>dict_flags</name></expr></argument>, <argument><expr><name>NAME_MASK_RETURN</name> <operator>|</operator> <name>NAME_MASK_PIPE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
