<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_dict/src/dict_debug.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>DICT</name></type>    <name>dict</name></decl>;</decl_stmt>			<comment type="block">/* the proxy service */</comment>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>real_dict</name></decl>;</decl_stmt>		<comment type="block">/* encapsulated object */</comment>
}</block></struct></type> <name>DICT_DEBUG</name>;</typedef>

<comment type="block">/* dict_debug_lookup - log lookup operation */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dict_debug_lookup</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
			<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DEBUG</name> <modifier>*</modifier></type><name>dict_debug</name> <init>= <expr><operator>(</operator><name>DICT_DEBUG</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DICT_GET</name><argument_list>(<argument><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>real_dict</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s:%s lookup: \"%s\" = \"%s\""</literal></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><ternary><condition><expr><name>dict_errno</name></expr> ?</condition><then> <expr><literal type="string">"try again"</literal></expr> </then><else>: <expr><literal type="string">"not_found"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_debug_update - log update operation */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_debug_update</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DEBUG</name> <modifier>*</modifier></type><name>dict_debug</name> <init>= <expr><operator>(</operator><name>DICT_DEBUG</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s:%s update: \"%s\" = \"%s\""</literal></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
			<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DICT_PUT</name><argument_list>(<argument><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>real_dict</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_debug_delete - log delete operation */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_debug_delete</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DEBUG</name> <modifier>*</modifier></type><name>dict_debug</name> <init>= <expr><operator>(</operator><name>DICT_DEBUG</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DICT_DEL</name><argument_list>(<argument><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>real_dict</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s:%s delete: \"%s\" = \"%s\""</literal></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><literal type="string">"failed"</literal></expr> </then><else>: <expr><literal type="string">"success"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_debug_sequence - log sequence operation */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_debug_sequence</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>function</name></decl></parameter>,
		<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>key_size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>value_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DEBUG</name> <modifier>*</modifier></type><name>dict_debug</name> <init>= <expr><operator>(</operator><name>DICT_DEBUG</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DICT_SEQ</name><argument_list>(<argument><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>real_dict</name></name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s:%s sequence: \"%s\" = \"%s\""</literal></expr></argument>,
				<argument><expr><name><name>dict</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>*</operator><name>key</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s:%s sequence: found EOF"</literal></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>dict</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* dict_debug_close - log operation */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_debug_close</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DEBUG</name> <modifier>*</modifier></type><name>dict_debug</name> <init>= <expr><operator>(</operator><name>DICT_DEBUG</name> <operator>*</operator><operator>)</operator> <name>dict</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>DICT_CLOSE</name><argument_list>(<argument><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>real_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_free</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* dict_debug_main - encapsulate dictionary object and install proxies */</comment>

<function><type><name>DICT</name>   <modifier>*</modifier></type><name>dict_debug_main</name><parameter_list>(<parameter><decl><type><name>DICT</name> <modifier>*</modifier></type><name>real_dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_DEBUG</name> <modifier>*</modifier></type><name>dict_debug</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dict_debug</name> <operator>=</operator> <operator>(</operator><name>DICT_DEBUG</name> <operator>*</operator><operator>)</operator> <call><name>dict_alloc</name><argument_list>(<argument><expr><name><name>real_dict</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
			<argument><expr><name><name>real_dict</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dict_debug</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>real_dict</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>	<comment type="block">/* XXX not synchronized */</comment>
	<expr_stmt><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>lookup</name></name> <operator>=</operator> <name>dict_debug_lookup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>update</name></name> <operator>=</operator> <name>dict_debug_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>delete_it</name></name> <operator>=</operator> <name>dict_debug_delete</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>sequence</name></name> <operator>=</operator> <name>dict_debug_sequence</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>dict</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dict_debug_close</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dict_debug</name><operator>-&gt;</operator><name>real_dict</name></name> <operator>=</operator> <name>real_dict</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>dict_debug</name><operator>-&gt;</operator><name>dict</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
