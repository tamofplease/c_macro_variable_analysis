<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/os.c"><comment type="block">/*
 * Symisc unQLite: An Embeddable NoSQL (Post Modern) Database Engine.
 * Copyright (C) 2012-2013, Symisc Systems http://unqlite.org/
 * Version 1.1.6
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://unqlite.org/licensing.html
 */</comment>
 <comment type="block">/* $SymiscID: os.c v1.0 FreeBSD 2012-11-12 21:27 devel &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unqliteInt.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* OS interfaces abstraction layers: Mostly SQLite3 source tree */</comment>
<comment type="block">/*
** The following routines are convenience wrappers around methods
** of the unqlite_file object.  This is mostly just syntactic sugar. All
** of this would be completely automatic if UnQLite were coded using
** C++ instead of plain old C.
*/</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsRead</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>unqlite_int64</name></type> <name>amt</name></decl></parameter>, <parameter><decl><type><name>unqlite_int64</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>amt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsWrite</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>unqlite_int64</name></type> <name>amt</name></decl></parameter>, <parameter><decl><type><name>unqlite_int64</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>amt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsTruncate</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>unqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xTruncate</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsSync</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsFileSize</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>unqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsLock</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsUnlock</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnlock</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xCheckReservedLock</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsSectorSize</name><parameter_list>(<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSectorSize</name></name></expr> )</condition><block>{<block_content>
	  <return>return <expr><call><name><name>id</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return  <expr><name>UNQLITE_DEFAULT_SECTOR_SIZE</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
** The next group of routines are convenience wrappers around the
** VFS methods.
*/</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsOpen</name><parameter_list>(
  <parameter><decl><type><name>unqlite_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><name>SyMemBackend</name> <modifier>*</modifier></type><name>pAlloc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>, 
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>pFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zPath</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* May happen if dealing with an in-memory database */</comment>
		<return>return <expr><name>SXERR_EMPTY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new instance */</comment>
	<expr_stmt><expr><name>pFile</name> <operator>=</operator> <operator>(</operator><name>unqlite_file</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unqlite_file</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name><name>pVfs</name><operator>-&gt;</operator><name>szOsFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFile</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unqlite_file</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name><name>pVfs</name><operator>-&gt;</operator><name>szOsFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Invoke the xOpen method of the underlying VFS */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pFile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>pFile</name></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsCloseFree</name><parameter_list>(<parameter><decl><type><name>SyMemBackend</name> <modifier>*</modifier></type><name>pAlloc</name></decl></parameter>,<parameter><decl><type><name>unqlite_file</name> <modifier>*</modifier></type><name>pId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pId</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pId</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name>pId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><name>pId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsDelete</name><parameter_list>(<parameter><decl><type><name>unqlite_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteOsAccess</name><parameter_list>(
  <parameter><decl><type><name>unqlite_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xAccess</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
