<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/jx9_vfs.c"><comment type="block">/*
 * Symisc JX9: A Highly Efficient Embeddable Scripting Engine Based on JSON.
 * Copyright (C) 2012-2013, Symisc Systems http://jx9.symisc.net/
 * Version 1.7.2
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://jx9.symisc.net/
 */</comment>
 <comment type="block">/* $SymiscID: vfs.c v2.1 Ubuntu 2012-12-13 00:013 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jx9Int.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * This file implement a virtual file systems (VFS) for the JX9 engine.
 */</comment>
<comment type="block">/*
 * Given a string containing the path of a file or directory, this function 
 * return the parent directory's path.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>jx9ExtractDirName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name> <init>= <expr><operator>&amp;</operator><name><name>zPath</name><index>[<expr><name>nByte</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<while>while<condition>( <expr><name>zEnd</name> <operator>&gt;</operator> <name>zPath</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>d</name> <operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zEnd</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zPath</name><operator>)</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pLen</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>zPath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Normalize path on windows */</comment>
		<return>return <expr><literal type="string">"\\"</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name>zEnd</name> <operator>==</operator> <name>zPath</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>d</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* No separator, return "." as the current directory */</comment>
		<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<return>return <expr><literal type="string">"."</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pLen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
		<return>return <expr><literal type="string">"\\"</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><literal type="string">"/"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>zPath</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Omit the vfs layer implementation from the built if the JX9_DISABLE_BUILTIN_FUNC directive is defined.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
<comment type="block">/*
 * bool chdir(string $directory)
 *  Change the current directory.
 * Parameters
 *  $directory
 *   The new current directory
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_chdir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xChdir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xChdir</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool chroot(string $directory)
 *  Change the root directory.
 * Parameters
 *  $directory
 *   The path to change the root directory to
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_chroot</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xChroot</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xChroot</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string getcwd(void)
 *  Gets the current working directory.
 * Parameters
 *  None
 * Return
 *  Returns the current working directory on success, or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_getcwd</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xGetcwd</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xGetcwd</name></name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Error, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool rmdir(string $directory)
 *  Removes directory.
 * Parameters
 *  $directory
 *   The path to the directory
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_rmdir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xRmdir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xRmdir</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool is_dir(string $filename)
 *  Tells whether the given filename is a directory.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_is_dir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xIsdir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xIsdir</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool mkdir(string $pathname[, int $mode = 0777])
 *  Make a directory.
 * Parameters
 *  $pathname
 *   The directory path.
 * $mode
 *  The mode is 0777 by default, which means the widest possible access.
 *  Note:
 *   mode is ignored on Windows.
 *   Note that you probably want to specify the mode as an octal number, which means
 *   it should have a leading zero. The mode is also modified by the current umask
 *   which you can change using umask().
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_mkdir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>iRecursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iMode</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xMkdir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><name>iMode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* Assume UNIX */</comment>
	<expr_stmt><expr><name>iMode</name> <operator>=</operator> <literal type="number">0777</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iMode</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iRecursive</name> <operator>=</operator> <call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xMkdir</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>iMode</name></expr></argument>, <argument><expr><name>iRecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool rename(string $oldname, string $newname)
 *  Attempts to rename oldname to newname.
 * Parameters
 *  $oldname
 *   Old name.
 *  $newname
 *   New name.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_rename</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOld</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xRename</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>zOld</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zNew</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xRename</name></name><argument_list>(<argument><expr><name>zOld</name></expr></argument>, <argument><expr><name>zNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string realpath(string $path)
 *  Returns canonicalized absolute pathname.
 * Parameters
 *  $path
 *   Target path.
 * Return
 *  Canonicalized absolute pathname on success. or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_realpath</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xRealpath</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Set an empty string untnil the underlying OS interface change that */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xRealpath</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
	 <expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int sleep(int $seconds)
 *  Delays the program execution for the given number of seconds.
 * Parameters
 *  $seconds
 *   Halt time in seconds.
 * Return
 *  Zero on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_sleep</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>nSleep</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xSleep</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Amount to sleep */</comment>
	<expr_stmt><expr><name>nSleep</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nSleep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid value, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation (Microseconds) */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xSleep</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>nSleep</name> <operator>*</operator> <name>SX_USEC_PER_SEC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return zero */</comment>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * void usleep(int $micro_seconds)
 *  Delays program execution for the given number of micro seconds.
 * Parameters
 *  $micro_seconds
 *   Halt time in micro seconds. A micro second is one millionth of a second.
 * Return
 *  None.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_usleep</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nSleep</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return immediately */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xSleep</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Amount to sleep */</comment>
	<expr_stmt><expr><name>nSleep</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nSleep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid value, return immediately */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation (Microseconds) */</comment>
	<expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xSleep</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>nSleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool unlink (string $filename)
 *  Delete a file.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_unlink</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xUnlink</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xUnlink</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool chmod(string $filename, int $mode)
 *  Attempts to change the mode of the specified file to that given in mode.
 * Parameters
 *  $filename
 *   Path to the file.
 * $mode
 *   Mode (Must be an integer)
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_chmod</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xChmod</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the mode */</comment>
	<expr_stmt><expr><name>iMode</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xChmod</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>iMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool chown(string $filename, string $user)
 *  Attempts to change the owner of the file filename to user user.
 * Parameters
 *  $filename
 *   Path to the file.
 * $user
 *   Username.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_chown</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zUser</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xChown</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the user */</comment>
	<expr_stmt><expr><name>zUser</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xChown</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>zUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool chgrp(string $filename, string $group)
 *  Attempts to change the group of the file filename to group.
 * Parameters
 *  $filename
 *   Path to the file.
 * $group
 *   groupname.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_chgrp</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zGroup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xChgrp</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the user */</comment>
	<expr_stmt><expr><name>zGroup</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xChgrp</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>zGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 disk_free_space(string $directory)
 *  Returns available space on filesystem or disk partition.
 * Parameters
 *  $directory
 *   A directory of the filesystem or disk partition.
 * Return
 *  Returns the number of available bytes as a 64-bit integer or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_disk_free_space</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>iSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xFreeSpace</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>iSize</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xFreeSpace</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 disk_total_space(string $directory)
 *  Returns the total size of a filesystem or disk partition.
 * Parameters
 *  $directory
 *   A directory of the filesystem or disk partition.
 * Return
 *  Returns the number of available bytes as a 64-bit integer or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_disk_total_space</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>iSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xTotalSpace</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>iSize</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xTotalSpace</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool file_exists(string $filename)
 *  Checks whether a file or directory exists.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_file_exists</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xFileExists</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xFileExists</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 file_size(string $filename)
 *  Gets the size for the given file.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  File size on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_file_size</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>iSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xFileSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>iSize</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 fileatime(string $filename)
 *  Gets the last access time of the given file.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  File atime on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_file_atime</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>iTime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xFileAtime</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xFileAtime</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 filemtime(string $filename)
 *  Gets file modification time.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  File mtime on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_file_mtime</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>iTime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xFileMtime</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xFileMtime</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 filectime(string $filename)
 *  Gets inode change time of file.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  File ctime on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_file_ctime</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>iTime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xFileCtime</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xFileCtime</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool is_file(string $filename)
 *  Tells whether the filename is a regular file.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_is_file</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xIsfile</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xIsfile</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool is_link(string $filename)
 *  Tells whether the filename is a symbolic link.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_is_link</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xIslink</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xIslink</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool is_readable(string $filename)
 *  Tells whether a file exists and is readable.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_is_readable</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xReadable</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xReadable</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool is_writable(string $filename)
 *  Tells whether the filename is writable.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_is_writable</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xWritable</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xWritable</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool is_executable(string $filename)
 *  Tells whether the filename is executable.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_is_executable</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xExecutable</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xExecutable</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string filetype(string $filename)
 *  Gets file type.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  The type of the file. Possible values are fifo, char, dir, block, link
 *  file, socket and unknown.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_filetype</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return 'unknown' */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xFiletype</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the desired directory */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the empty string as the default return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xFiletype</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * array stat(string $filename)
 *  Gives information about a file.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  An associative array on success holding the following entries on success
 *  0   dev     device number
 * 1    ino     inode number (zero on windows)
 * 2    mode    inode protection mode
 * 3    nlink   number of links
 * 4    uid     userid of owner (zero on windows)
 * 5    gid     groupid of owner (zero on windows)
 * 6    rdev    device type, if inode device
 * 7    size    size in bytes
 * 8    atime   time of last access (Unix timestamp)
 * 9    mtime   time of last modification (Unix timestamp)
 * 10   ctime   time of last inode change (Unix timestamp)
 * 11   blksize blocksize of filesystem IO (zero on windows)
 * 12   blocks  number of 512-byte blocks allocated.
 * Note:
 *  FALSE is returned on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_stat</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xStat</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create the array and the working value */</comment>
	<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xStat</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO error, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return the associative array */</comment>
		<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Don't worry about freeing memory here, everything will be released
	 * automatically as soon we return from this function. */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * array lstat(string $filename)
 *  Gives information about a file or symbolic link.
 * Parameters
 *  $filename
 *   Path to the file.
 * Return
 *  An associative array on success holding the following entries on success
 *  0   dev     device number
 * 1    ino     inode number (zero on windows)
 * 2    mode    inode protection mode
 * 3    nlink   number of links
 * 4    uid     userid of owner (zero on windows)
 * 5    gid     groupid of owner (zero on windows)
 * 6    rdev    device type, if inode device
 * 7    size    size in bytes
 * 8    atime   time of last access (Unix timestamp)
 * 9    mtime   time of last modification (Unix timestamp)
 * 10   ctime   time of last inode change (Unix timestamp)
 * 11   blksize blocksize of filesystem IO (zero on windows)
 * 12   blocks  number of 512-byte blocks allocated.
 * Note:
 *  FALSE is returned on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_lstat</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xlStat</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create the array and the working value */</comment>
	<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xlStat</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO error, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return the associative array */</comment>
		<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Don't worry about freeing memory here, everything will be released
	 * automatically as soon we return from this function. */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string getenv(string $varname)
 *  Gets the value of an environment variable.
 * Parameters
 *  $varname
 *   The variable name.
 * Return
 *  Returns the value of the environment variable varname, or FALSE if the environment
 * variable varname does not exist. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_getenv</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xGetenv</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the environment variable */</comment>
	<expr_stmt><expr><name>zEnv</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set a boolean FALSE as the default return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xGetenv</name></name><argument_list>(<argument><expr><name>zEnv</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool putenv(string $settings)
 *  Set the value of an environment variable.
 * Parameters
 *  $setting
 *   The setting, like "FOO=BAR"
 * Return
 *  TRUE on success or FALSE on failure.  
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_putenv</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSettings</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iLen</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the setting variable */</comment>
	<expr_stmt><expr><name>zSettings</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Parse the setting */</comment>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zSettings</name><index>[<expr><name>iLen</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>zValue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <name>zSettings</name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>zSettings</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>zSettings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Null terminate the name */</comment>
			<expr_stmt><expr><name><name>zSettings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>zValue</name> <operator>=</operator> <operator>&amp;</operator><name><name>zSettings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zSettings</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/* Install the environment variable in the $_Env array */</comment>
	<if_stmt><if>if<condition>( <expr><name>zValue</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>zName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>zValue</name> <operator>&gt;=</operator> <name>zEnd</name> <operator>||</operator> <name>zName</name> <operator>&gt;=</operator> <name>zValue</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid settings, retun FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zSettings</name>  <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>zSettings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_VM_CONFIG_ENV_ATTR</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zValue</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zValue</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xSetenv</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zSettings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xSetenv</name></name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zSettings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool touch(string $filename[, int64 $time = time()[, int64 $atime]])
 *  Sets access and modification time of file.
 * Note: On windows
 *   If the file does not exists, it will not be created.
 * Parameters
 *  $filename
 *   The name of the file being touched.
 *  $time
 *   The touch time. If time is not supplied, the current system time is used.
 * $atime
 *   If present, the access time of the given filename is set to the value of atime.
 *   Otherwise, it is set to the value passed to the time parameter. If neither are 
 *   present, the current system time is used.
 * Return
 *  TRUE on success or FALSE on failure.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_touch</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nTime</name></decl>, <decl><type ref="prev"/><name>nAccess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xTouch</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>nTime</name> <operator>=</operator> <name>nAccess</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>nTime</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>nAccess</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>nAccess</name> <operator>=</operator> <name>nTime</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xTouch</name></name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>nAccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Path processing functions that do not need access to the VFS layer
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<comment type="block">/*
 * string dirname(string $path)
 *  Returns parent directory's path.
 * Parameters
 * $path
 *  Target path.
 *  On Windows, both slash (/) and backslash (\) are used as directory separator character.
 *  In other environments, it is the forward slash (/).
 * Return
 *  The path of the parent directory. If there are no slashes in path, a dot ('.') 
 *  is returned, indicating the current directory.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_dirname</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zDir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iLen</name></decl>, <decl><type ref="prev"/><name>iDirlen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return the empty string */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target path */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Reuturn "." */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>zDir</name> <operator>=</operator> <call><name>jx9ExtractDirName</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>iLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDirlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return directory name */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zDir</name></expr></argument>, <argument><expr><name>iDirlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string basename(string $path[, string $suffix ])
 *  Returns trailing name component of path.
 * Parameters
 * $path
 *  Target path.
 *  On Windows, both slash (/) and backslash (\) are used as directory separator character.
 *  In other environments, it is the forward slash (/).
 * $suffix
 *  If the name component ends in suffix this will also be cut off.
 * Return
 *  The base name of the given path. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_basename</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zBase</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>iLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return the empty string */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Point to the target path */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zPath</name><index>[<expr><name>iLen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Ignore trailing '/' */</comment>
	<while>while<condition>( <expr><name>zEnd</name> <operator>&gt;</operator> <name>zPath</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>c</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>d</name> <operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zEnd</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>iLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>zEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>zPath</name><operator>)</operator></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>zEnd</name> <operator>&gt;</operator> <name>zPath</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>d</name> <operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zEnd</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>zBase</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zEnd</name> <operator>&gt;</operator> <name>zPath</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>zEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>zPath</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zPath</name><index>[<expr><name>iLen</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSuffix</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nSuffix</name></decl>;</decl_stmt>
		<comment type="block">/* Strip suffix */</comment>
		<expr_stmt><expr><name>zSuffix</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nSuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nSuffix</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nSuffix</name> <operator>&lt;</operator> <name>iLen</name> <operator>&amp;&amp;</operator> <call><name>SyMemcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zEnd</name><index>[<expr><operator>-</operator><name>nSuffix</name></expr>]</index></name></expr></argument>, <argument><expr><name>zSuffix</name></expr></argument>, <argument><expr><name>nSuffix</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zEnd</name> <operator>-=</operator> <name>nSuffix</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Store the basename */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zBase</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zBase</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * value pathinfo(string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ])
 *  Returns information about a file path.
 * Parameter
 *  $path
 *   The path to be parsed.
 *  $options
 *    If present, specifies a specific element to be returned; one of
 *      PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION or PATHINFO_FILENAME.
 * Return
 *  If the options parameter is not passed, an associative array containing the following
 *  elements is returned: dirname, basename, extension (if any), and filename. 
 *  If options is present, returns a string containing the requested element. 
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>path_info</name></name></type> <name>path_info</name>;</typedef>
<struct>struct <name>path_info</name>
<block>{
	<decl_stmt><decl><type><name>SyString</name></type> <name>sDir</name></decl>;</decl_stmt> <comment type="block">/* Directory [i.e: /var/www] */</comment>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sBasename</name></decl>;</decl_stmt> <comment type="block">/* Basename [i.e httpd.conf] */</comment>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sExtension</name></decl>;</decl_stmt> <comment type="block">/* File extension [i.e xml, pdf..] */</comment>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sFilename</name></decl>;</decl_stmt>  <comment type="block">/* Filename */</comment>
}</block>;</struct>
<comment type="block">/*
 * Extract path fields.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>ExtractPathInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>path_info</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPtr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name> <init>= <expr><operator>&amp;</operator><name><name>zPath</name><index>[<expr><name>nByte</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Handle special case */</comment>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zPath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>c</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zPath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>d</name> <operator>)</operator></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sDir</name></name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sDir</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the basename */</comment>
	<while>while<condition>( <expr><name>zEnd</name> <operator>&gt;</operator> <name>zPath</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>d</name> <operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zEnd</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zEnd</name> <operator>&gt;</operator> <name>zPath</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>zEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>zPath</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zPath</name><index>[<expr><name>nByte</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* dirname */</comment>
	<expr_stmt><expr><name>pCur</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sDir</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>zPtr</name><operator>-</operator><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyStringTrimTrailingChar</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
		<expr_stmt><expr><call><name>SyStringTrimTrailingChar</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>zPath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>c</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zPath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>d</name></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sDir</name></name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sDir</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* basename/filename */</comment>
	<expr_stmt><expr><name>pCur</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sBasename</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>zPtr</name></expr></argument>, <argument><expr><name>zEnd</name><operator>-</operator><name>zPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringTrimLeadingChar</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>SyStringTrimLeadingChar</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>SyStringDupPtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sFilename</name></name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* extension */</comment>
		<expr_stmt><expr><name>zEnd</name><operator>--</operator></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>zEnd</name> <operator>&gt;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>zString</name></name> <comment type="block">/*basename*/</comment> <operator>&amp;&amp;</operator> <name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zEnd</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>zEnd</name> <operator>&gt;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>zString</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zEnd</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump leading dot */</comment>
			<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sExtension</name></name></expr></argument>, <argument><expr><name>zEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zPath</name><index>[<expr><name>nByte</name></expr>]</index></name><operator>-</operator><name>zEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Fix filename */</comment>
			<expr_stmt><expr><name>pCur</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sFilename</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sExtension</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>nByte</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sExtension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * value pathinfo(string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ])
 *  See block comment above.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_pathinfo</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>path_info</name></type> <name>sInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pComp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid argument, return the empty string */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target path */</comment>
	<expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract path info */</comment>
	<expr_stmt><expr><call><name>ExtractPathInfo</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>iLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>jx9_value_is_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Return path component */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>nComp</name> <init>= <expr><call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name>nComp</name></expr>)</condition><block>{<block_content>
		<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* PATHINFO_DIRNAME */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>sDir</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Expand the empty string */</comment>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/*PATHINFO_BASENAME*/</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>sBasename</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Expand the empty string */</comment>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/*PATHINFO_EXTENSION*/</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>sExtension</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Expand the empty string */</comment>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="block">/*PATHINFO_FILENAME*/</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>sFilename</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Expand the empty string */</comment>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* Expand the empty string */</comment>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return an associative array */</comment>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Out of mem, return NULL */</comment>
			<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>JX9_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* dirname */</comment>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>sDir</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Perform the insertion */</comment>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"dirname"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* basername */</comment>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>sBasename</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Perform the insertion */</comment>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"basename"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* extension */</comment>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>sExtension</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Perform the insertion */</comment>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"extension"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* filename */</comment>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>sFilename</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Perform the insertion */</comment>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Return the created array */</comment>
		<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Don't worry about freeing memory, everything will be released
		 * automatically as soon we return from this foreign function.
		 */</comment>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Globbing implementation extracted from the sqlite3 source tree.
 * Original author: D. Richard Hipp (http://www.sqlite.org)
 * Status: Public Domain
 */</comment>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<comment type="block">/* An array to map all upper-case characters into their corresponding
** lower-case character. 
**
** SQLite only considers US-ASCII (or EBCDIC) characters.  We do not
** handle case conversions for the UTF character set since the tables
** involved are nearly as big or bigger than SQLite itself.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sqlite3UpperToLower</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, 
     <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, 
     <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, 
     <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">103</literal></expr>, 
    <expr><literal type="number">104</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">121</literal></expr>, 
    <expr><literal type="number">122</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">107</literal></expr>, 
    <expr><literal type="number">108</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">125</literal></expr>, 
    <expr><literal type="number">126</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">143</literal></expr>, 
    <expr><literal type="number">144</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">161</literal></expr>, 
    <expr><literal type="number">162</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">179</literal></expr>, 
    <expr><literal type="number">180</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">197</literal></expr>, 
    <expr><literal type="number">198</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">201</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">215</literal></expr>, 
    <expr><literal type="number">216</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">222</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">226</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">228</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">231</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">233</literal></expr>, 
    <expr><literal type="number">234</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">237</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">249</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">251</literal></expr>, 
    <expr><literal type="number">252</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">255</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GlogUpperToLower</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>if( A&lt;0x80 ){ A = sqlite3UpperToLower[A]; }</cpp:value></cpp:define>
<comment type="block">/*
** Assuming zIn points to the first byte of a UTF-8 character, 
** advance zIn to point to the first byte of the next UTF-8 character.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_SKIP_UTF8</name><parameter_list>(<parameter><type><name>zIn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{                        \
  if( (*(zIn++))&gt;=0xc0 ){                              \
    while( (*zIn &amp; 0xc0)==0x80 ){ zIn++; }             \
  }                                                    \
}</cpp:value></cpp:define>
<comment type="block">/*
** Compare two UTF-8 strings for equality where the first string can
** potentially be a "glob" expression.  Return true (1) if they
** are the same and false (0) if they are different.
**
** Globbing rules:
**
**      '*'       Matches any sequence of zero or more characters.
**
**      '?'       Matches exactly one character.
**
**     [...]      Matches one character from the enclosed list of
**                characters.
**
**     [^...]     Matches one character not in the enclosed list.
**
** With the [...] and [^...] matching, a ']' character can be included
** in the list by making it the first character after '[' or '^'.  A
** range of characters can be specified using '-'.  Example:
** "[a-z]" matches any single lower-case letter.  To match a '-', make
** it the last character in the list.
**
** This routine is usually quick, but can be N**2 in the worst case.
**
** Hints: to match '*' or '?', put them in "[]".  Like this:
**
**         abc[*]xyz        Matches "abc*xyz" only
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>patternCompare</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,              <comment type="block">/* The glob pattern */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>,               <comment type="block">/* The string to compare against the glob */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>esc</name></decl></parameter>,                    <comment type="block">/* The escape character */</comment>
  <parameter><decl><type><name>int</name></type> <name>noCase</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>invert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>seen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name>matchOne</name> <init>= <expr><literal type="char">'?'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name>matchAll</name> <init>= <expr><literal type="char">'*'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name>matchSet</name> <init>= <expr><literal type="char">'['</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>prevEscape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* True if the previous character was 'escape' */</comment>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zPattern</name> <operator>||</operator> <operator>!</operator><name>zString</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPattern</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>prevEscape</name> <operator>&amp;&amp;</operator> <name>c</name><operator>==</operator><name>matchAll</name></expr> )</condition><block>{<block_content>
      <while>while<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>matchAll</name>
               <operator>||</operator> <name>c</name> <operator>==</operator> <name>matchOne</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><name>matchOne</name> <operator>&amp;&amp;</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zString</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zString</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><name>esc</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><name>matchSet</name></expr> )</condition><block>{<block_content>
	  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>esc</name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>matchSet</name><operator>&lt;</operator><literal type="number">0x80</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  <while>while<condition>( <expr><operator>*</operator><name>zString</name> <operator>&amp;&amp;</operator> <call><name>patternCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zPattern</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><name>esc</name></expr></argument>, <argument><expr><name>noCase</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>SQLITE_SKIP_UTF8</name><argument_list>(<argument><expr><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><operator>*</operator><name>zString</name><operator>!=</operator><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <while>while<condition>( <expr><operator>(</operator><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zString</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zString</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>noCase</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>GlogUpperToLower</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>GlogUpperToLower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <while>while<condition>( <expr><name>c2</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>!=</operator> <name>c</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zString</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GlogUpperToLower</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></while>
        </block_content>}</block></if><else>else<block>{<block_content>
          <while>while<condition>( <expr><name>c2</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>!=</operator> <name>c</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zString</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>c2</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><call><name>patternCompare</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><name>esc</name></expr></argument>, <argument><expr><name>noCase</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></while>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>!</operator><name>prevEscape</name> <operator>&amp;&amp;</operator> <name>c</name><operator>==</operator><name>matchOne</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zString</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zString</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><name>matchSet</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>prior_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>esc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zString</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>c2</name><operator>==</operator><literal type="char">'^'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>c2</name><operator>==</operator><literal type="char">']'</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">']'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <while>while<condition>( <expr><name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name><operator>!=</operator><literal type="char">']'</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>c2</name><operator>==</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>zPattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name><name>zPattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prior_c</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><name>prior_c</name> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><name>c2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>prior_c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><name>c2</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>prior_c</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if<condition>( <expr><name>c2</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>seen</name> <operator>^</operator> <name>invert</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>esc</name><operator>==</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>prevEscape</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>prevEscape</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zString</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>noCase</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>GlogUpperToLower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GlogUpperToLower</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>c</name><operator>!=</operator><name>c2</name></expr> )</condition><block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>prevEscape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>*</operator><name>zString</name><operator>==</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Wrapper around patternCompare() defined above.
 * See block comment above for more information.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>Glob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iEsc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>CaseCompare</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>iEsc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iEsc</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>patternCompare</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><name>iEsc</name></expr></argument>, <argument><expr><name>CaseCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool fnmatch(string $pattern, string $string[, int $flags = 0 ])
 *  Match filename against a pattern.
 * Parameters
 *  $pattern
 *   The shell wildcard pattern.
 * $string
 *  The tested string.
 * $flags
 *   A list of possible flags:
 *    FNM_NOESCAPE 	Disable backslash escaping.
 *    FNM_PATHNAME 	Slash in string only matches slash in the given pattern.
 *    FNM_PERIOD 	Leading period in string must be exactly matched by period in the given pattern.
 *    FNM_CASEFOLD 	Caseless match.
 * Return
 *  TRUE if there is a match, FALSE otherwise. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fnmatch</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zPattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iEsc</name> <init>= <expr><literal type="char">'\\'</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>noCase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the pattern and the string */</comment>
	<expr_stmt><expr><name>zPattern</name>  <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zString</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the flags if avaialble */</comment>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>jx9_value_is_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> <comment type="block">/*FNM_NOESCAPE*/</comment>)</condition><block>{<block_content>
			<expr_stmt><expr><name>iEsc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr> <comment type="block">/*FNM_CASEFOLD*/</comment>)</condition><block>{<block_content>
			<expr_stmt><expr><name>noCase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Go globbing */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Glob</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zPattern</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zString</name></expr></argument>, <argument><expr><name>iEsc</name></expr></argument>, <argument><expr><name>noCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Globbing result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool strglob(string $pattern, string $string)
 *  Match string against a pattern.
 * Parameters
 *  $pattern
 *   The shell wildcard pattern.
 * $string
 *  The tested string.
 * Return
 *  TRUE if there is a match, FALSE otherwise. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_strglob</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zPattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iEsc</name> <init>= <expr><literal type="char">'\\'</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the pattern and the string */</comment>
	<expr_stmt><expr><name>zPattern</name>  <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zString</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Go globbing */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Glob</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zPattern</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zString</name></expr></argument>, <argument><expr><name>iEsc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Globbing result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool link(string $target, string $link)
 *  Create a hard link.
 * Parameters
 *  $target
 *   Target of the link.
 *  $link
 *   The link name.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_link</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zLink</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xLink</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the given arguments */</comment>
	<expr_stmt><expr><name>zTarget</name>  <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zLink</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xLink</name></name><argument_list>(<argument><expr><name>zTarget</name></expr></argument>, <argument><expr><name>zLink</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument><comment type="block">/*Not a symbolic link */</comment>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool symlink(string $target, string $link)
 *  Creates a symbolic link.
 * Parameters
 *  $target
 *   Target of the link.
 *  $link
 *   The link name.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_symlink</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zLink</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xLink</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the given arguments */</comment>
	<expr_stmt><expr><name>zTarget</name>  <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zLink</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xLink</name></name><argument_list>(<argument><expr><name>zTarget</name></expr></argument>, <argument><expr><name>zLink</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument><comment type="block">/*A symbolic link */</comment>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int umask([ int $mask ])
 *  Changes the current umask.
 * Parameters
 *  $mask
 *   The new umask.
 * Return
 *  umask() without arguments simply returns the current umask.
 *  Otherwise the old umask is returned.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_umask</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>iOld</name></decl>, <decl><type ref="prev"/><name>iNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xUmask</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO routine not implemented, return -1 */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>iNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iNew</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>iOld</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xUmask</name></name><argument_list>(<argument><expr><name>iNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Old mask */</comment>
	<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string sys_get_temp_dir()
 *  Returns directory path used for temporary files.
 * Parameters
 *  None
 * Return
 *  Returns the path of the temporary directory.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_sys_get_temp_dir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<comment type="block">/* Set the empty string as the default return value */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xTempDir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* IO routine not implemented, return "" */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>		
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xTempDir</name></name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string get_current_user()
 *  Returns the name of the current working user.
 * Parameters
 *  None
 * Return
 *  Returns the name of the current working user.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_get_current_user</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xUsername</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* IO routine not implemented */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>		
		<comment type="block">/* Set a dummy username */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xUsername</name></name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 getmypid()
 *  Gets process ID.
 * Parameters
 *  None
 * Return
 *  Returns the process ID.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_getmypid</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nProcessId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xProcessId</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* IO routine not implemented, return -1 */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>nProcessId</name> <operator>=</operator> <operator>(</operator><name>jx9_int64</name><operator>)</operator><call><name><name>pVfs</name><operator>-&gt;</operator><name>xProcessId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the result */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nProcessId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int getmyuid()
 *  Get user ID.
 * Parameters
 *  None
 * Return
 *  Returns the user ID.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_getmyuid</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nUid</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xUid</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* IO routine not implemented, return -1 */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>nUid</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xUid</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the result */</comment>
	<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int getmygid()
 *  Get group ID.
 * Parameters
 *  None
 * Return
 *  Returns the group ID.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_getmygid</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nGid</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the underlying vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>jx9_vfs</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xGid</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* IO routine not implemented, return -1 */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying VFS"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>nGid</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xGid</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the result */</comment>
	<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nGid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * string uname([ string $mode = "a" ])
 *  Returns information about the host operating system.
 * Parameters
 *  $mode
 *   mode is a single character that defines what information is returned:
 *    'a': This is the default. Contains all modes in the sequence "s n r v m".
 *    's': Operating system name. eg. FreeBSD.
 *    'n': Host name. eg. localhost.example.com.
 *    'r': Release name. eg. 5.1.2-RELEASE.
 *    'v': Version information. Varies a lot between operating systems.
 *    'm': Machine type. eg. i386.
 * Return
 *  OS description as a string.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Vfs_uname</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINNT__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><literal type="string">"Microsoft Windows"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSVERSIONINFOW</name></type> <name>sVer</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>sName</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMode</name> <init>= <expr><literal type="string">"a"</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Extract the desired mode */</comment>
		<expr_stmt><expr><name>zMode</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINNT__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>sVer</name><operator>.</operator><name>dwOSVersionInfoSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sVer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>TRUE</name> <operator>!=</operator> <call><name>GetVersionExW</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sVer</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sVer</name><operator>.</operator><name>dwPlatformId</name></name> <operator>==</operator> <name>VER_PLATFORM_WIN32_NT</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>sVer</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"Microsoft Windows NT"</literal></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>sVer</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <literal type="number">5</literal></expr> )</condition><block>{<block_content>
			<switch>switch<condition>(<expr><name><name>sVer</name><operator>.</operator><name>dwMinorVersion</name></name></expr>)</condition><block>{<block_content>
				<case>case <expr><literal type="number">0</literal></expr>:</case>	<expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"Microsoft Windows 2000"</literal></expr>;</expr_stmt> <break>break;</break>
				<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"Microsoft Windows XP"</literal></expr>;</expr_stmt>   <break>break;</break>
				<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"Microsoft Windows Server 2003"</literal></expr>;</expr_stmt> <break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>sVer</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block>{<block_content>
				<switch>switch<condition>(<expr><name><name>sVer</name><operator>.</operator><name>dwMinorVersion</name></name></expr>)</condition><block>{<block_content>
					<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"Microsoft Windows Vista"</literal></expr>;</expr_stmt> <break>break;</break>
					<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"Microsoft Windows 7"</literal></expr>;</expr_stmt> <break>break;</break>
					<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"Microsoft Windows 8"</literal></expr>;</expr_stmt> <break>break;</break>
					<default>default:</default> <break>break;</break>
				</block_content>}</block></switch>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<switch>switch<condition>(<expr><name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
	<case>case <expr><literal type="char">'s'</literal></expr>:</case>
		<comment type="block">/* Operating system name */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/* Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="char">'n'</literal></expr>:</case>
		<comment type="block">/* Host name */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="char">'r'</literal></expr>:</case>
	<case>case <expr><literal type="char">'v'</literal></expr>:</case>
		<comment type="block">/* Version information. */</comment>
		<expr_stmt><expr><call><name>jx9_result_string_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"%u.%u build %u"</literal></expr></argument>, 
			<argument><expr><name><name>sVer</name><operator>.</operator><name>dwMajorVersion</name></name></expr></argument>, <argument><expr><name><name>sVer</name><operator>.</operator><name>dwMinorVersion</name></name></expr></argument>, <argument><expr><name><name>sVer</name><operator>.</operator><name>dwBuildNumber</name></name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="char">'m'</literal></expr>:</case>
		<comment type="block">/* Machine name */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"x86"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>jx9_result_string_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"%s localhost %u.%u build %u x86"</literal></expr></argument>, 
			<argument><expr><name>zName</name></expr></argument>, 
			<argument><expr><name><name>sVer</name><operator>.</operator><name>dwMajorVersion</name></name></expr></argument>, <argument><expr><name><name>sVer</name><operator>.</operator><name>dwMinorVersion</name></name></expr></argument>, <argument><expr><name><name>sVer</name><operator>.</operator><name>dwBuildNumber</name></name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if<condition>( <expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"Unix"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Unix"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch<condition>(<expr><name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
	<case>case <expr><literal type="char">'s'</literal></expr>:</case>
		<comment type="block">/* Operating system name */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>sName</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/* Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="char">'n'</literal></expr>:</case>
		<comment type="block">/* Host name */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>sName</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/* Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="char">'r'</literal></expr>:</case>
		<comment type="block">/* Release information */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>sName</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/* Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="char">'v'</literal></expr>:</case>
		<comment type="block">/* Version information. */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>sName</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/* Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="char">'m'</literal></expr>:</case>
		<comment type="block">/* Machine name */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>sName</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/* Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>jx9_result_string_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, 
			<argument><expr><literal type="string">"%s %s %s %s %s"</literal></expr></argument>, 
			<argument><expr><name><name>sName</name><operator>.</operator><name>sysname</name></name></expr></argument>, 
			<argument><expr><name><name>sName</name><operator>.</operator><name>release</name></name></expr></argument>, 
			<argument><expr><name><name>sName</name><operator>.</operator><name>version</name></name></expr></argument>, 
			<argument><expr><name><name>sName</name><operator>.</operator><name>nodename</name></name></expr></argument>, 
			<argument><expr><name><name>sName</name><operator>.</operator><name>machine</name></name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"Host Operating System/localhost"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Host Operating System/localhost"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *    IO stream implementation.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>io_private</name></name></type> <name>io_private</name>;</typedef>
<struct>struct <name>io_private</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt> <comment type="block">/* Underlying IO device */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt> <comment type="block">/* IO handle */</comment>
	<comment type="block">/* Unbuffered IO */</comment>
	<decl_stmt><decl><type><name>SyBlob</name></type> <name>sBuffer</name></decl>;</decl_stmt> <comment type="block">/* Working buffer */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nOfft</name></decl>;</decl_stmt>    <comment type="block">/* Current read offset */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>iMagic</name></decl>;</decl_stmt>   <comment type="block">/* Sanity check to avoid misuse */</comment>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_PRIVATE_MAGIC</name></cpp:macro> <cpp:value>0xFEAC14</cpp:value></cpp:define>
<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_PRIVATE_INVALID</name><parameter_list>(<parameter><type><name>IO</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( IO == 0 || IO-&gt;iMagic != IO_PRIVATE_MAGIC )</cpp:value></cpp:define> 
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResetIOPrivate</name><parameter_list>(<parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * bool ftruncate(resource $handle, int64 $size)
 *  Truncates a file to a given length.
 * Parameters
 *  $handle
 *   The file pointer.
 *   Note:
 *    The handle must be open for writing.
 * $size
 *   The size to truncate to.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_ftruncate</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xTrunc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xTrunc</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Discard buffered data */</comment>
		<expr_stmt><expr><call><name>ResetIOPrivate</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * int fseek(resource $handle, int $offset[, int $whence = SEEK_SET ])
 *  Seeks on a file pointer.
 * Parameters
 *  $handle
 *   A file system pointer resource that is typically created using fopen().
 * $offset
 *   The offset.
 *   To move to a position before the end-of-file, you need to pass a negative
 *   value in offset and set whence to SEEK_END.
 *   whence
 *   whence values are:
 *    SEEK_SET - Set position equal to offset bytes.
 *    SEEK_CUR - Set position to current location plus offset.
 *    SEEK_END - Set position to end-of-file plus offset.
 * Return
 *  0 on success, -1 on failure
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fseek</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>iOfft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>whence</name></decl>;</decl_stmt>  
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xSeek</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the offset */</comment>
	<expr_stmt><expr><name>iOfft</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>whence</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><comment type="block">/* SEEK_SET */</comment>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>jx9_value_is_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>whence</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xSeek</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>iOfft</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Ignore buffered data */</comment>
		<expr_stmt><expr><call><name>ResetIOPrivate</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * int64 ftell(resource $handle)
 *  Returns the current position of the file read/write pointer.
 * Parameters
 *  $handle
 *   The file pointer.
 * Return
 *  Returns the position of the file pointer referenced by handle
 *  as an integer; i.e., its offset into the file stream.
 *  FALSE is returned on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_ftell</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>iOfft</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xTell</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>iOfft</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xTell</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iOfft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * bool rewind(resource $handle)
 *  Rewind the position of a file pointer.
 * Parameters
 *  $handle
 *   The file pointer.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_rewind</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xSeek</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xSeek</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument><comment type="block">/*SEEK_SET*/</comment>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Ignore buffered data */</comment>
		<expr_stmt><expr><call><name>ResetIOPrivate</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * bool fflush(resource $handle)
 *  Flushes the output to a file.
 * Parameters
 *  $handle
 *   The file pointer.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fflush</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xSync</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * bool feof(resource $handle)
 *  Tests for end-of-file on a file pointer.
 * Parameters
 *  $handle
 *   The file pointer.
 * Return
 *  Returns TRUE if the file pointer is at EOF.FALSE otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_feof</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_EOF</name></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Data is available */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>;</decl_stmt>
		<comment type="block">/* Perform a buffered read */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Copy buffered data */</comment>
			<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_OK</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* EOF or not */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>SXERR_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * Read n bytes from the underlying IO stream device.
 * Return total numbers of bytes readen on success. A number &lt; 1 on failure 
 * [i.e: IO error ] or EOF.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>StreamRead</name><parameter_list>(<parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name> <init>= <expr><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pBuf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nRead</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <name>nLen</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>nLen</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Copy the buffered data */</comment>
		<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><call><name>SyBlobDataAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>, <argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Update the read offset */</comment>
		<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>+=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>&gt;=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<comment type="block">/* Reset the working buffer so that we avoid excessive memory allocation */</comment>
			<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nLen</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* All done */</comment>
			<return>return <expr><name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Advance the cursor */</comment>
		<expr_stmt><expr><name>zBuf</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Read without buffering */</comment>
	<expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* EOF or IO error */</comment>
		<return>return <expr><name>nRead</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Extract a single line from the buffered input.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GetLine</name><parameter_list>(<parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzLine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zPtr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>zIn</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobDataAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>, <argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call><operator>-</operator><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Line found */</comment>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Include the line ending as requested by the JX9 specification */</comment>
			<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <operator>(</operator><name>jx9_int64</name><operator>)</operator><operator>(</operator><name>zIn</name><operator>-</operator><name>zPtr</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>pzLine</name> <operator>=</operator> <name>zPtr</name></expr>;</expr_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/* No line were found */</comment>
	<return>return <expr><name>SXERR_NOTFOUND</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Read a single line from the underlying IO stream device.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>StreamReadLine</name><parameter_list>(<parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzData</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nMaxLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name> <init>= <expr><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>&gt;=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Reset the working buffer so that we avoid excessive memory allocation */</comment>
		<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Check if there is a line */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetLine</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>pzData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Got line, update the cursor  */</comment>
			<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>+=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
			<return>return <expr><name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the read operation until a new line is extracted or length
	 * limit is reached.
	 */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nMaxLen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nMaxLen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><name>nMaxLen</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* EOF or IO error */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Append the data just read */</comment>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Try to extract a line */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetLine</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>pzData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Got one, return immediately */</comment>
			<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>+=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
			<return>return <expr><name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>nMaxLen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>&gt;=</operator> <name>nMaxLen</name><operator>)</operator></expr> )</condition><block>{<block_content>
			<comment type="block">/* Read limit reached, return the available data */</comment>
			<expr_stmt><expr><operator>*</operator><name>pzData</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobDataAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>, <argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name></expr>;</expr_stmt>
			<comment type="block">/* Reset the working buffer */</comment>
			<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Read limit reached, return the available data */</comment>
		<expr_stmt><expr><operator>*</operator><name>pzData</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobDataAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>, <argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name></expr>;</expr_stmt>
		<comment type="block">/* Reset the working buffer */</comment>
		<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Open an IO stream handle.
 * Notes on stream:
 * According to the JX9 reference manual.
 * In its simplest definition, a stream is a resource object which exhibits streamable behavior.
 * That is, it can be read from or written to in a linear fashion, and may be able to fseek() 
 * to an arbitrary locations within the stream.
 * A wrapper is additional code which tells the stream how to handle specific protocols/encodings.
 * For example, the http wrapper knows how to translate a URL into an HTTP/1.0 request for a file
 * on a remote server.
 * A stream is referenced as: scheme://target
 *   scheme(string) - The name of the wrapper to be used. Examples include: file, http...
 *   If no wrapper is specified, the function default is used (typically file://).
 *   target - Depends on the wrapper used. For filesystem related streams this is typically a path
 *  and filename of the desired file. For network related streams this is typically a hostname, often
 *  with a path appended. 
 *
 * Note that JX9 IO streams looks like JX9 streams but their implementation differ greately.
 * Please refer to the official documentation for a full discussion.
 * This function return a handle on success. Otherwise null.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9StreamOpenHandle</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>, 
	<parameter><decl><type><name>int</name></type> <name>iFlags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_include</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResource</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bPushInclude</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* No such stream device */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFile</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>use_include</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>(	<expr><name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
			<operator>(</operator><name><name>sFile</name><operator>.</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>)</operator> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<operator>(</operator><name><name>sFile</name><operator>.</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name><name>sFile</name><operator>.</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>sFile</name><operator>.</operator><name>zString</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
				<comment type="block">/*  Open the file directly */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>, <argument><expr><name>pResource</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pPath</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>SyBlob</name></type> <name>sWorker</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
			<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><literal type="char">'\\'</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><literal type="char">'/'</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* Init the path builder working buffer */</comment>
			<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Build a path from the set of include path */</comment>
			<expr_stmt><expr><call><name>SySetResetCursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aPaths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_IO</name></expr>;</expr_stmt>
			<while>while<condition>( <expr><name>SXRET_OK</name> <operator>==</operator> <call><name>SySetGetNextEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aPaths</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pPath</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<comment type="block">/* Build full path */</comment>
				<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>, <argument><expr><literal type="string">"%z%c%z"</literal></expr></argument>, <argument><expr><name>pPath</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Append null terminator */</comment>
				<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>SyBlobNullAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Try to open the file */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>, <argument><expr><name>pResource</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
					<if_stmt><if>if<condition>( <expr><name>bPushInclude</name></expr> )</condition><block>{<block_content>
						<comment type="block">/* Mark as included */</comment>
						<expr_stmt><expr><call><name>jx9VmPushFilePath</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Reset the working buffer */</comment>
				<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Check the next path */</comment>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name>bPushInclude</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Mark as included */</comment>
				<expr_stmt><expr><call><name>jx9VmPushFilePath</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name><name>sFile</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>sFile</name><operator>.</operator><name>nByte</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Open the URI direcly */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>, <argument><expr><name>pResource</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO error */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return the file handle */</comment>
	<return>return <expr><name>pHandle</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Read the whole contents of an open IO stream handle [i.e local file/URL..]
 * Store the read data in the given BLOB (last argument).
 * The read operation is stopped when he hit the EOF or an IO error occurs.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9StreamReadWholeFile</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>, <parameter><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nRead</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* 8K */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nRead</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* EOF or IO error */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Append contents */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><ternary><condition><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>SXRET_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Close an open IO stream handle [i.e local file/URI..].
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name></type> <name>jx9StreamCloseHandle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>xClose</name></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name><name>pStream</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * string fgetc(resource $handle)
 *  Gets a character from the given file pointer.
 * Parameters
 *  $handle
 *   The file pointer.
 * Return
 *  Returns a string containing a single character read from the file
 *  pointed to by handle. Returns FALSE on EOF. 
 * WARNING
 *  This operation is extremely slow.Avoid using it.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fgetc</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>StreamRead</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO result */</comment>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* EOF or error, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return the string holding the character */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * string fgets(resource $handle[, int64 $length ])
 *  Gets line from file pointer.
 * Parameters
 *  $handle
 *   The file pointer.
 * $length
 *  Reading ends when length - 1 bytes have been read, on a newline
 *  (which is included in the return value), or on EOF (whichever comes first).
 *  If no length is specified, it will keep reading from the stream until it reaches
 *  the end of the line. 
 * Return
 *  Returns a string of up to length - 1 bytes read from the file pointed to by handle.
 *  If there is no more data to read in the file pointer, then FALSE is returned.
 *  If an error occurs, FALSE is returned.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fgets</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Maximum data to read */</comment>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>StreamReadLine</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zLine</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* EOF or IO error, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return the freshly extracted line */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * string fread(resource $handle, int64 $length)
 *  Binary-safe file read.
 * Parameters
 *  $handle
 *   The file pointer.
 * $length
 *  Up to length number of bytes read.
 * Return
 *  The data readen on success or FALSE on failure. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fread</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nRead</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nLen</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
 	  <expr_stmt><expr><name>nLen</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid length, set a default length */</comment>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate enough buffer */</comment>
	<expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name>jx9_context_alloc_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>nLen</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pBuf</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name>StreamRead</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nRead</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing read, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Make a copy of the data just read */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Release the buffer */</comment>
	<expr_stmt><expr><call><name>jx9_context_free_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * array fgetcsv(resource $handle [, int $length = 0 
 *         [, string $delimiter = ', '[, string $enclosure = '"'[, string $escape='\\']]]])
 * Gets line from file pointer and parse for CSV fields.
 * Parameters
 * $handle
 *   The file pointer.
 * $length
 *  Reading ends when length - 1 bytes have been read, on a newline
 *  (which is included in the return value), or on EOF (whichever comes first).
 *  If no length is specified, it will keep reading from the stream until it reaches
 *  the end of the line. 
 * $delimiter
 *   Set the field delimiter (one character only).
 * $enclosure
 *   Set the field enclosure character (one character only).
 * $escape
 *   Set the escape character (one character only). Defaults as a backslash (\)
 * Return
 *  Returns a string of up to length - 1 bytes read from the file pointed to by handle.
 *  If there is no more data to read in the file pointer, then FALSE is returned.
 *  If an error occurs, FALSE is returned.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fgetcsv</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Maximum data to read */</comment>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>StreamReadLine</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zLine</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* EOF or IO error, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>delim</name>  <init>= <expr><literal type="char">','</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Delimiter */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>encl</name>   <init>= <expr><literal type="char">'"'</literal></expr></init></decl> ;</decl_stmt>  <comment type="block">/* Enclosure */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>escape</name> <init>= <expr><literal type="char">'\\'</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* Escape character */</comment>
		<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPtr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<comment type="block">/* Extract the delimiter */</comment>
				<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>delim</name> <operator>=</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
					<comment type="block">/* Extract the enclosure */</comment>
					<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>encl</name> <operator>=</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> )</condition><block>{<block_content>
					<if_stmt><if>if<condition>( <expr><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
						<comment type="block">/* Extract the escape character */</comment>
						<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name>escape</name> <operator>=</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Create our array */</comment>
		<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>JX9_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Parse the raw input */</comment>
		<expr_stmt><expr><call><name>jx9ProcessCsv</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name>encl</name></expr></argument>, <argument><expr><name>escape</name></expr></argument>, <argument><expr><name>jx9CsvConsumer</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return the freshly created array  */</comment>
		<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * string fgetss(resource $handle [, int $length [, string $allowable_tags ]])
 *  Gets line from file pointer and strip HTML tags.
 * Parameters
 * $handle
 *   The file pointer.
 * $length
 *  Reading ends when length - 1 bytes have been read, on a newline
 *  (which is included in the return value), or on EOF (whichever comes first).
 *  If no length is specified, it will keep reading from the stream until it reaches
 *  the end of the line. 
 * $allowable_tags
 *  You can use the optional second parameter to specify tags which should not be stripped. 
 * Return
 *  Returns a string of up to length - 1 bytes read from the file pointed to by 
 *  handle, with all HTML and JX9 code stripped. If an error occurs, returns FALSE. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fgetss</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Maximum data to read */</comment>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>StreamReadLine</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zLine</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* EOF or IO error, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTaglist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nTaglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<comment type="block">/* Allowed tag */</comment>
			<expr_stmt><expr><name>zTaglist</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTaglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Process data just read */</comment>
		<expr_stmt><expr><call><name>jx9StripTagsFromString</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>zTaglist</name></expr></argument>, <argument><expr><name>nTaglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * string readdir(resource $dir_handle)
 *   Read entry from directory handle.
 * Parameter
 *  $dir_handle
 *   The directory handle resource previously opened with opendir().
 * Return
 *  Returns the filename on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_readdir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xReadDir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xReadDir</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * void rewinddir(resource $dir_handle)
 *   Rewind directory handle.
 * Parameter
 *  $dir_handle
 *   The directory handle resource previously opened with opendir().
 * Return
 *  FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_rewinddir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xRewindDir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><call><name><name>pStream</name><operator>-&gt;</operator><name>xRewindDir</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
 </block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitIOPrivate</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>, <parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseIOPrivate</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * void closedir(resource $dir_handle)
 *   Close directory handle.
 * Parameter
 *  $dir_handle
 *   The directory handle resource previously opened with opendir().
 * Return
 *  FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_closedir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xCloseDir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><call><name><name>pStream</name><operator>-&gt;</operator><name>xCloseDir</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the private stucture */</comment>
	<expr_stmt><expr><call><name>ReleaseIOPrivate</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
 </block_content>}</block></function>
<comment type="block">/*
 * resource opendir(string $path[, resource $context])
 *  Open directory handle.
 * Parameters
 * $path
 *   The directory path that is to be opened.
 * $context
 *   A context stream resource.
 * Return
 *  A directory handle resource on success, or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_opendir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iLen</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a directory path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the target path */</comment>
	<expr_stmt><expr><name>zPath</name>  <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Try to extract a stream */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPath</name></expr></argument>, <argument><expr><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"No stream device is associated with the given path(%s)"</literal></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>xOpenDir</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new IO private instance */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_alloc_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io_private</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pDev</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the structure */</comment>
	<expr_stmt><expr><call><name>InitIOPrivate</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Open the target directory */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xOpenDir</name></name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO error, return FALSE */</comment>
		<expr_stmt><expr><call><name>ReleaseIOPrivate</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return the handle as a resource */</comment>
		<expr_stmt><expr><call><name>jx9_result_resource</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int readfile(string $filename[, bool $use_include_path = false [, resource $context ]])
 *  Reads a file and writes it to the output buffer.
 * Parameters
 *  $filename
 *   The filename being read.
 *  $use_include_path
 *   You can use the optional second parameter and set it to
 *   TRUE, if you want to search for the file in the include_path, too.
 *  $context
 *   A context stream resource.
 * Return
 *  The number of bytes read from the file on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_readfile</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>use_include</name>  <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nRead</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>use_include</name> <operator>=</operator> <call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, 
		<argument><expr><name>use_include</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>nRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* EOF or IO error, break immediately */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Output data */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_context_output</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_ABORT</name></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Increment counter */</comment>
		<expr_stmt><expr><name>nRead</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Close the stream */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Total number of bytes readen */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string file_get_contents(string $filename[, bool $use_include_path = false 
 *         [, resource $context [, int $offset = -1 [, int $maxlen ]]]])
 *  Reads entire file into a string.
 * Parameters
 *  $filename
 *   The filename being read.
 *  $use_include_path
 *   You can use the optional second parameter and set it to
 *   TRUE, if you want to search for the file in the include_path, too.
 *  $context
 *   A context stream resource.
 *  $offset
 *   The offset where the reading starts on the original stream.
 *  $maxlen
 *    Maximum length of data read. The default is to read until end of file 
 *    is reached. Note that this parameter is applied to the stream processed by the filters.
 * Return
 *   The function returns the read data or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_file_get_contents</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nRead</name></decl>, <decl><type ref="prev"/><name>nMaxlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>use_include</name>  <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>nMaxlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>use_include</name> <operator>=</operator> <call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, <argument><expr><name>use_include</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Extract the offset */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>xSeek</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Seek to the desired offset */</comment>
				<expr_stmt><expr><call><name><name>pStream</name><operator>-&gt;</operator><name>xSeek</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument><comment type="block">/*SEEK_SET*/</comment>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Maximum data to read */</comment>
			<expr_stmt><expr><name>nMaxlen</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>nRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, 
			<argument><expr><ternary><condition><expr><operator>(</operator><name>nMaxlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nMaxlen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>nMaxlen</name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* EOF or IO error, break immediately */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Append data */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Increment read counter */</comment>
		<expr_stmt><expr><name>nRead</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nMaxlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nRead</name> <operator>&gt;=</operator> <name>nMaxlen</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Read limit reached */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Close the stream */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Check if we have read something */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>jx9_context_result_buf_length</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing read, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int file_put_contents(string $filename, mixed $data[, int $flags = 0[, resource $context]])
 *  Write a string to a file.
 * Parameters
 *  $filename
 *  Path to the file where to write the data.
 * $data
 *  The data to write(Must be a string).
 * $flags
 *  The value of flags can be any combination of the following
 * flags, joined with the binary OR (|) operator.
 *   FILE_USE_INCLUDE_PATH 	Search for filename in the include directory. See include_path for more information.
 *   FILE_APPEND 	        If file filename already exists, append the data to the file instead of overwriting it.
 *   LOCK_EX 	            Acquire an exclusive lock on the file while proceeding to the writing.
 * context
 *  A context stream resource.
 * Return
 *  The function returns the number of bytes that were written to the file, or FALSE on failure. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_file_put_contents</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>use_include</name>  <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iOpenFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Data to write */</comment>
	<expr_stmt><expr><name>zData</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing to write, return immediately */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the file in read-write mode */</comment>
	<expr_stmt><expr><name>iOpenFlags</name> <operator>=</operator> <name>JX9_IO_OPEN_CREATE</name><operator>|</operator><name>JX9_IO_OPEN_RDWR</name><operator>|</operator><name>JX9_IO_OPEN_TRUNC</name></expr>;</expr_stmt>
	<comment type="block">/* Extract the flags */</comment>
	<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> <comment type="block">/*FILE_USE_INCLUDE_PATH*/</comment>)</condition><block>{<block_content>
			<expr_stmt><expr><name>use_include</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr> <comment type="block">/* FILE_APPEND */</comment>)</condition><block>{<block_content>
			<comment type="block">/* If the file already exists, append the data to the file
			 * instead of overwriting it.
			 */</comment>
			<expr_stmt><expr><name>iOpenFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_IO_OPEN_TRUNC</name></expr>;</expr_stmt>
			<comment type="block">/* Append mode */</comment>
			<expr_stmt><expr><name>iOpenFlags</name> <operator>|=</operator> <name>JX9_IO_OPEN_APPEND</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>iOpenFlags</name></expr></argument>, <argument><expr><name>use_include</name></expr></argument>, 
		<argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>apArg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x01</literal><comment type="block">/* LOCK_EX */</comment><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xLock</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Try to acquire an exclusive lock */</comment>
			<expr_stmt><expr><call><name><name>pStream</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument><comment type="block">/* LOCK_EX */</comment>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Perform the write operation */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zData</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* IO error, return FALSE */</comment>
			<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Total number of bytes written */</comment>
			<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Read-only stream */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, 
			<argument><expr><literal type="string">"Read-only stream(%s): Cannot perform write operation"</literal></expr></argument>, 
			<argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Close the handle */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * array file(string $filename[, int $flags = 0[, resource $context]])
 *  Reads entire file into an array.
 * Parameters
 *  $filename
 *   The filename being read.
 *  $flags
 *   The optional parameter flags can be one, or more, of the following constants:
 *   FILE_USE_INCLUDE_PATH
 *       Search for the file in the include_path. 
 *   FILE_IGNORE_NEW_LINES
 *       Do not add newline at the end of each array element 
 *   FILE_SKIP_EMPTY_LINES
 *       Skip empty lines 
 *  $context
 *   A context stream resource.
 * Return
 *   The function returns the read data or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_file</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zPtr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zBuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>use_include</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new IO private instance */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_alloc_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io_private</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pDev</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the structure */</comment>
	<expr_stmt><expr><call><name>InitIOPrivate</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> <comment type="block">/*FILE_USE_INCLUDE_PATH*/</comment> )</condition><block>{<block_content>
		<expr_stmt><expr><name>use_include</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create the array and the working value */</comment>
	<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pLine</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pLine</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the file in read-only mode */</comment>
	<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, <argument><expr><name>use_include</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Don't worry about freeing memory, everything will be released automatically
		 * as soon we return from this function.
		 */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<comment type="block">/* Try to extract a line */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>StreamReadLine</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zBuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* EOF or IO error */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Remove line ending if requested by the caller */</comment>
		<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr> <comment type="block">/* FILE_IGNORE_NEW_LINES */</comment> )</condition><block>{<block_content>
			<comment type="block">/* Ignore trailig lines */</comment>
			<while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zEnd</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
				<operator>||</operator> <name><name>zEnd</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<operator>)</operator></expr>)</condition><block>{<block_content>
					<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>zEnd</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr> <comment type="block">/* FILE_SKIP_EMPTY_LINES */</comment> )</condition><block>{<block_content>
			<comment type="block">/* Ignore empty lines */</comment>
			<while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Empty line */</comment>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pLine</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zBuf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Insert line */</comment>
		<expr_stmt><expr><call><name>jx9_array_add_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument><comment type="block">/* Automatic index assign*/</comment>, <argument><expr><name>pLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Close the stream */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the io_private instance */</comment>
	<expr_stmt><expr><call><name>ReleaseIOPrivate</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return the created array */</comment>
	<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool copy(string $source, string $dest[, resource $context ] )
 *  Makes a copy of the file source to dest.
 * Parameters
 *  $source
 *   Path to the source file.
 *  $dest
 *   The destination path. If dest is a URL, the copy operation 
 *   may fail if the wrapper does not support overwriting of existing files. 
 *  $context
 *   A context stream resource.
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_copy</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pSin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pSout</name></decl>;</decl_stmt>	
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pOut</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a source and a destination path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the source name */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pSin</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pSin</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the source file in a read-only mode */</comment>
	<expr_stmt><expr><name>pIn</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pSin</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pIn</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening source: '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the destination name */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pSout</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pSout</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pSin</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pSout</name><operator>-&gt;</operator><name>xWrite</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSin</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pSin</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the destination file in a read-write mode */</comment>
	<expr_stmt><expr><name>pOut</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pSout</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, 
		<argument><expr><name>JX9_IO_OPEN_CREATE</name><operator>|</operator><name>JX9_IO_OPEN_TRUNC</name><operator>|</operator><name>JX9_IO_OPEN_RDWR</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pOut</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening destination: '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pSin</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<comment type="block">/* Read from source */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pSin</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* EOF or IO error, break immediately */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Write to dest */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pSout</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* IO error, break immediately */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Close the streams */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pSin</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pSout</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return TRUE */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * array fstat(resource $handle)
 *  Gets information about a file using an open file pointer.
 * Parameters
 *  $handle
 *   The file pointer.
 * Return
 *  Returns an array with the statistics of the file or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fstat</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xStat</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create the array and the working value */</comment>
	<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><call><name><name>pStream</name><operator>-&gt;</operator><name>xStat</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return the freshly created array */</comment>
	<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Don't worry about freeing memory here, everything will be
	 * released automatically as soon we return from this function.
	 */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int fwrite(resource $handle, string $string[, int $length])
 *  Writes the contents of string to the file stream pointed to by handle.
 * Parameters
 *  $handle
 *   The file pointer.
 *  $string
 *   The string that is to be written.
 *  $length
 *   If the length argument is given, writing will stop after length bytes have been written
 *   or the end of string is reached, whichever comes first. 
 * Return
 *  Returns the number of bytes written, or FALSE on error.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fwrite</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the data to write */</comment>
	<expr_stmt><expr><name>zString</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Maximum data length to write */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name>nLen</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>nLen</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing to write */</comment>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zString</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator>  <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO error, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* #Bytes written */</comment>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool flock(resource $handle, int $operation)
 *  Portable advisory file locking.
 * Parameters
 *  $handle
 *   The file pointer.
 *  $operation
 *   operation is one of the following:
 *      LOCK_SH to acquire a shared lock (reader).
 *      LOCK_EX to acquire an exclusive lock (writer).
 *      LOCK_UN to release a lock (shared or exclusive).
 * Return
 *  Returns TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_flock</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xLock</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Requested lock operation */</comment>
	<expr_stmt><expr><name>nLock</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Lock operation */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>nLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* IO result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int fpassthru(resource $handle)
 *  Output all remaining data on a file pointer.
 * Parameters
 *  $handle
 *   The file pointer. 
 * Return
 *  Total number of characters read from handle and passed through
 *  to the output on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fpassthru</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nRead</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>nRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>StreamRead</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error or EOF */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Increment the read counter */</comment>
		<expr_stmt><expr><name>nRead</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<comment type="block">/* Output data */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_context_output</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nRead</name></expr></argument> <comment type="block">/* FIXME: 64-bit issues */</comment>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Consumer callback request an operation abort */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Total number of bytes readen */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* CSV reader/writer private data */</comment>
<struct>struct <name>csv_data</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>delimiter</name></decl>;</decl_stmt>    <comment type="block">/* Delimiter. Default ', ' */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>enclosure</name></decl>;</decl_stmt>    <comment type="block">/* Enclosure. Default '"'*/</comment>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt> <comment type="block">/* Open stream handle */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>iCount</name></decl>;</decl_stmt>       <comment type="block">/* Counter */</comment>
}</block>;</struct>
<comment type="block">/* 
 * The following callback is used by the fputcsv() function inorder to iterate
 * throw array entries and output CSV data based on the current key and it's
 * associated data.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>csv_write_callback</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>csv_data</name></name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>(</operator>struct <name>csv_data</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the raw data */</comment>
	<expr_stmt><expr><name>zData</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing to write */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>iCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Write the delimiter */</comment>
		<expr_stmt><expr><call><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyByteFind</name><argument_list>(<argument><expr><name>zData</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>SXRET_OK</name> <operator>||</operator> 
		<call><name>SyByteFind</name><argument_list>(<argument><expr><name>zData</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>enclosure</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Write the enclosure */</comment>
			<expr_stmt><expr><call><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>enclosure</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>c2</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>enclosure</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Write the data */</comment>
	<if_stmt><if>if<condition>( <expr><call><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zData</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<return>return <expr><name>JX9_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>c2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Write the enclosure */</comment>
		<expr_stmt><expr><call><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>enclosure</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>c2</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>enclosure</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>iCount</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int fputcsv(resource $handle, array $fields[, string $delimiter = ', '[, string $enclosure = '"' ]])
 *  Format line as CSV and write to file pointer.
 * Parameters
 *  $handle
 *   Open file handle.
 * $fields
 *   An array of values.
 * $delimiter
 *   The optional delimiter parameter sets the field delimiter (one character only).
 * $enclosure
 *  The optional enclosure parameter sets the field enclosure (one character only).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fputcsv</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>csv_data</name></name></type> <name>sCsv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zEol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>eolen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_json_array</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Missing/Invalid arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Set default csv separator */</comment>
	<expr_stmt><expr><name><name>sCsv</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sCsv</name><operator>.</operator><name>enclosure</name></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sCsv</name><operator>.</operator><name>pDev</name></name> <operator>=</operator> <name>pDev</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sCsv</name><operator>.</operator><name>iCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* User delimiter */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>sCsv</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>sCsv</name><operator>.</operator><name>enclosure</name></name> <operator>=</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Iterate throw array entries and write csv data */</comment>
	<expr_stmt><expr><call><name>jx9_array_walk</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>csv_write_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCsv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Write a line ending */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><name>zEol</name> <operator>=</operator> <literal type="string">"\r\n"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>eolen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* Assume UNIX LF */</comment>
	<expr_stmt><expr><name>zEol</name> <operator>=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>eolen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zEol</name></expr></argument>, <argument><expr><name>eolen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * fprintf, vfprintf private data.
 * An instance of the following structure is passed to the formatted
 * input consumer callback defined below.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>fprintf_data</name></name></type> <name>fprintf_data</name>;</typedef>
<struct>struct <name>fprintf_data</name>
<block>{
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pIO</name></decl>;</decl_stmt>        <comment type="block">/* IO stream */</comment>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nCount</name></decl>;</decl_stmt>       <comment type="block">/* Total number of bytes written */</comment>
}</block>;</struct>
<comment type="block">/*
 * Callback [i.e: Formatted input consumer] for the fprintf function.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fprintfConsumer</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zInput</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fprintf_data</name> <modifier>*</modifier></type><name>pFdata</name> <init>= <expr><operator>(</operator><name>fprintf_data</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>;</decl_stmt>
	<comment type="block">/* Write the formatted data */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pFdata</name><operator>-&gt;</operator><name>pIO</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pFdata</name><operator>-&gt;</operator><name>pIO</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zInput</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<comment type="block">/* IO error, abort immediately */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Increment counter */</comment>
	<expr_stmt><expr><name><name>pFdata</name><operator>-&gt;</operator><name>nCount</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int fprintf(resource $handle, string $format[, mixed $args [, mixed $... ]])
 *  Write a formatted string to a stream.
 * Parameters
 *  $handle
 *   The file pointer.
 *  $format
 *   String format (see sprintf()).
 * Return
 *  The length of the written string.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fprintf</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fprintf_data</name></type> <name>sFdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return zero */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr> ?</condition><then> <expr><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the string format */</comment>
	<expr_stmt><expr><name>zFormat</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, return zero */</comment>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Prepare our private data */</comment>
	<expr_stmt><expr><name><name>sFdata</name><operator>.</operator><name>nCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sFdata</name><operator>.</operator><name>pIO</name></name> <operator>=</operator> <name>pDev</name></expr>;</expr_stmt>
	<comment type="block">/* Format the string */</comment>
	<expr_stmt><expr><call><name>jx9InputFormat</name><argument_list>(<argument><expr><name>fprintfConsumer</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>, <argument><expr><name>nArg</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sFdata</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return total number of bytes written */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>sFdata</name><operator>.</operator><name>nCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int vfprintf(resource $handle, string $format, array $args)
 *  Write a formatted string to a stream.
 * Parameters
 *  $handle
 *   The file pointer.
 *  $format
 *   String format (see sprintf()).
 * $args
 *   User arguments.
 * Return
 *  The length of the written string.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_vfprintf</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fprintf_data</name></type> <name>sFdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SySet</name></type> <name>sArg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>  <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_json_array</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return zero */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>xWrite</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr> ?</condition><then> <expr><name><name>pDev</name><operator>-&gt;</operator><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the string format */</comment>
	<expr_stmt><expr><name>zFormat</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, return zero */</comment>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to hashmap */</comment>
	<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
	<comment type="block">/* Extract arguments from the hashmap */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>jx9HashmapValuesToSet</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Prepare our private data */</comment>
	<expr_stmt><expr><name><name>sFdata</name><operator>.</operator><name>nCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sFdata</name><operator>.</operator><name>pIO</name></name> <operator>=</operator> <name>pDev</name></expr>;</expr_stmt>
	<comment type="block">/* Format the string */</comment>
	<expr_stmt><expr><call><name>jx9InputFormat</name><argument_list>(<argument><expr><name>fprintfConsumer</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sArg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sFdata</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return total number of bytes written*/</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>sFdata</name><operator>.</operator><name>nCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Convert open modes (string passed to the fopen() function) [i.e: 'r', 'w+', 'a', ...] into JX9 flags.
 * According to the JX9 reference manual:
 *  The mode parameter specifies the type of access you require to the stream. It may be any of the following
 *   'r' 	Open for reading only; place the file pointer at the beginning of the file.
 *   'r+' 	Open for reading and writing; place the file pointer at the beginning of the file.
 *   'w' 	Open for writing only; place the file pointer at the beginning of the file and truncate the file
 *          to zero length. If the file does not exist, attempt to create it.
 *   'w+' 	Open for reading and writing; place the file pointer at the beginning of the file and truncate
 *              the file to zero length. If the file does not exist, attempt to create it.
 *   'a' 	Open for writing only; place the file pointer at the end of the file. If the file does not 
 *         exist, attempt to create it.
 *   'a+' 	Open for reading and writing; place the file pointer at the end of the file. If the file does 
 *          not exist, attempt to create it.
 *   'x' 	Create and open for writing only; place the file pointer at the beginning of the file. If the file
 *         already exists, 
 *         the fopen() call will fail by returning FALSE and generating an error of level E_WARNING. If the file
 *         does not exist attempt to create it. This is equivalent to specifying O_EXCL|O_CREAT flags for
 *         the underlying open(2) system call.
 *   'x+' 	Create and open for reading and writing; otherwise it has the same behavior as 'x'.
 *   'c' 	Open the file for writing only. If the file does not exist, it is created. If it exists, it is neither truncated
 *          (as opposed to 'w'), nor the call to this function fails (as is the case with 'x'). The file pointer
 *          is positioned on the beginning of the file.
 *          This may be useful if it's desired to get an advisory lock (see flock()) before attempting to modify the file
 *          as using 'w' could truncate the file before the lock was obtained (if truncation is desired, ftruncate() can
 *          be used after the lock is requested).
 *   'c+' 	Open the file for reading and writing; otherwise it has the same behavior as 'c'. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>StrModeToFlags</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name> <init>= <expr><operator>&amp;</operator><name><name>zMode</name><index>[<expr><name>nLen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Open in a read-only mode */</comment>
		<return>return <expr><name>JX9_IO_OPEN_RDONLY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Read-only access */</comment>
		<expr_stmt><expr><name>iFlag</name> <operator>=</operator> <name>JX9_IO_OPEN_RDONLY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zMode</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Advance */</comment>
		<if_stmt><if>if<condition>( <expr><name>zMode</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'W'</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Read+Write access */</comment>
				<expr_stmt><expr><name>iFlag</name> <operator>=</operator> <name>JX9_IO_OPEN_RDWR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'W'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Overwrite mode.
		 * If the file does not exists, try to create it
		 */</comment>
		<expr_stmt><expr><name>iFlag</name> <operator>=</operator> <name>JX9_IO_OPEN_WRONLY</name><operator>|</operator><name>JX9_IO_OPEN_TRUNC</name><operator>|</operator><name>JX9_IO_OPEN_CREATE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zMode</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Advance */</comment>
		<if_stmt><if>if<condition>( <expr><name>zMode</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Read+Write access */</comment>
				<expr_stmt><expr><name>iFlag</name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_IO_OPEN_WRONLY</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>iFlag</name> <operator>|=</operator> <name>JX9_IO_OPEN_RDWR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'A'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Append mode (place the file pointer at the end of the file).
		 * Create the file if it does not exists.
		 */</comment>
		<expr_stmt><expr><name>iFlag</name> <operator>=</operator> <name>JX9_IO_OPEN_WRONLY</name><operator>|</operator><name>JX9_IO_OPEN_APPEND</name><operator>|</operator><name>JX9_IO_OPEN_CREATE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zMode</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Advance */</comment>
		<if_stmt><if>if<condition>( <expr><name>zMode</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Read-Write access */</comment>
				<expr_stmt><expr><name>iFlag</name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_IO_OPEN_WRONLY</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>iFlag</name> <operator>|=</operator> <name>JX9_IO_OPEN_RDWR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'X'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Exclusive access.
		 * If the file already exists, return immediately with a failure code.
		 * Otherwise create a new file.
		 */</comment>
		<expr_stmt><expr><name>iFlag</name> <operator>=</operator> <name>JX9_IO_OPEN_WRONLY</name><operator>|</operator><name>JX9_IO_OPEN_EXCL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zMode</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Advance */</comment>
		<if_stmt><if>if<condition>( <expr><name>zMode</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Read-Write access */</comment>
				<expr_stmt><expr><name>iFlag</name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_IO_OPEN_WRONLY</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>iFlag</name> <operator>|=</operator> <name>JX9_IO_OPEN_RDWR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'C'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Overwrite mode.Create the file if it does not exists.*/</comment>
		<expr_stmt><expr><name>iFlag</name> <operator>=</operator> <name>JX9_IO_OPEN_WRONLY</name><operator>|</operator><name>JX9_IO_OPEN_CREATE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zMode</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Advance */</comment>
		<if_stmt><if>if<condition>( <expr><name>zMode</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Read-Write access */</comment>
				<expr_stmt><expr><name>iFlag</name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_IO_OPEN_WRONLY</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>iFlag</name> <operator>|=</operator> <name>JX9_IO_OPEN_RDWR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Invalid mode. Assume a read only open */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Invalid open mode, JX9 is assuming a Read-Only open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iFlag</name> <operator>=</operator> <name>JX9_IO_OPEN_RDONLY</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<while>while<condition>( <expr><name>zMode</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zMode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'B'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iFlag</name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_IO_OPEN_TEXT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iFlag</name> <operator>|=</operator> <name>JX9_IO_OPEN_BINARY</name></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'T'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iFlag</name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_IO_OPEN_BINARY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iFlag</name> <operator>|=</operator> <name>JX9_IO_OPEN_TEXT</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zMode</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>iFlag</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Initialize the IO private structure.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>InitIOPrivate</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>, <parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>pStream</name></name> <operator>=</operator> <name>pStream</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Set the magic number */</comment>
	<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>iMagic</name></name> <operator>=</operator> <name>IO_PRIVATE_MAGIC</name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Release the IO private structure.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseIOPrivate</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>iMagic</name></name> <operator>=</operator> <literal type="number">0x2126</literal></expr>;</expr_stmt> <comment type="block">/* Invalid magic number so we can detetct misuse */</comment>
	<comment type="block">/* Release the whole structure */</comment>
	<expr_stmt><expr><call><name>jx9_context_free_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Reset the IO private structure.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ResetIOPrivate</name><parameter_list>(<parameter><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDev</name><operator>-&gt;</operator><name>sBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>nOfft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_jx9_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * resource fopen(string $filename, string $mode [, bool $use_include_path = false[, resource $context ]])
 *  Open a file, a URL or any other IO stream.
 * Parameters
 *  $filename
 *   If filename is of the form "scheme://...", it is assumed to be a URL and JX9 will search
 *   for a protocol handler (also known as a wrapper) for that scheme. If no scheme is given
 *   then a regular file is assumed.
 *  $mode
 *   The mode parameter specifies the type of access you require to the stream
 *   See the block comment associated with the StrModeToFlags() for the supported 
 *   modes.
 *  $use_include_path
 *   You can use the optional second parameter and set it to
 *   TRUE, if you want to search for the file in the include_path, too.
 *  $context
 *   A context stream resource.
 * Return
 *  File handle on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fopen</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUri</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zMode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResource</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iLen</name></decl>, <decl><type ref="prev"/><name>imLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iOpenFlags</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path or URL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the URI and the desired access mode */</comment>
	<expr_stmt><expr><name>zUri</name>  <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zMode</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Set a default read-only mode */</comment>
		<expr_stmt><expr><name>zMode</name> <operator>=</operator> <literal type="string">"r"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>imLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Try to extract a stream */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zUri</name></expr></argument>, <argument><expr><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"No stream device is associated with the given URI(%s)"</literal></expr></argument>, <argument><expr><name>zUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new IO private instance */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_alloc_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io_private</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pDev</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pResource</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pResource</name> <operator>=</operator> <name><name>apArg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>is_jx9_stream</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* TICKET 1433-80: The jx9:// stream need a jx9_value to access the underlying
		 * virtual machine.
		 */</comment>
		<expr_stmt><expr><name>pResource</name> <operator>=</operator> <name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the structure */</comment>
	<expr_stmt><expr><call><name>InitIOPrivate</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Convert open mode to JX9 flags */</comment>
	<expr_stmt><expr><name>iOpenFlags</name> <operator>=</operator> <call><name>StrModeToFlags</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zMode</name></expr></argument>, <argument><expr><name>imLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Try to get a handle */</comment>
	<expr_stmt><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zUri</name></expr></argument>, <argument><expr><name>iOpenFlags</name></expr></argument>, 
		<argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name>pResource</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_context_free_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* All done, return the io_private instance as a resource */</comment>
	<expr_stmt><expr><call><name>jx9_result_resource</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool fclose(resource $handle)
 *  Closes an open file pointer
 * Parameters
 *  $handle
 *   The file pointer. 
 * Return
 *  TRUE on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_fclose</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pDev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract our private data */</comment>
	<expr_stmt><expr><name>pDev</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid io_private instance */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>IO_PRIVATE_INVALID</name><argument_list>(<argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/*Expecting an IO handle */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting an IO handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>pDev</name><operator>-&gt;</operator><name>pStream</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"IO routine(%s) not implemented in the underlying stream(%s) device, JX9 is returning FALSE"</literal></expr></argument>, 
			<argument><expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>pStream</name></expr> ?</condition><then> <expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"null_stream"</literal></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the VM that own this context */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<comment type="block">/* TICKET 1433-62: Keep the STDIN/STDOUT/STDERR handles open */</comment>
	<if_stmt><if>if<condition>( <expr><name>pDev</name> <operator>!=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pStdin</name></name> <operator>&amp;&amp;</operator> <name>pDev</name> <operator>!=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pStdout</name></name> <operator>&amp;&amp;</operator> <name>pDev</name> <operator>!=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pStderr</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Perform the requested operation */</comment>
		<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name><name>pDev</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Release the IO private structure */</comment>
		<expr_stmt><expr><call><name>ReleaseIOPrivate</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Invalidate the resource handle */</comment>
		<expr_stmt><expr><call><name>jx9_value_release</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return TRUE */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JX9_DISABLE_HASH_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * MD5/SHA1 digest consumer.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfsHashConsumer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Append hex chunk verbatim */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_context</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string md5_file(string $uri[, bool $raw_output = false ])
 *  Calculates the md5 hash of a given file.
 * Parameters
 *  $uri
 *   Target URI (file(/path/to/something) or URL(http://www.symisc.net/))
 *  $raw_output
 *   When TRUE, returns the digest in raw binary format with a length of 16.
 * Return
 *  Return the MD5 digest on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_md5_file</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zDigest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>raw_output</name>  <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MD5Context</name></type> <name>sCtx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>raw_output</name> <operator>=</operator> <call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Init the MD5 context */</comment>
	<expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment> 
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* EOF or IO error, break immediately */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>MD5Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Close the stream */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the digest */</comment>
	<expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>zDigest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>raw_output</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Output raw digest */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zDigest</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zDigest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Perform a binary to hex conversion */</comment>
		<expr_stmt><expr><call><name>SyBinToHexConsumer</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zDigest</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zDigest</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vfsHashConsumer</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string sha1_file(string $uri[, bool $raw_output = false ])
 *  Calculates the SHA1 hash of a given file.
 * Parameters
 *  $uri
 *   Target URI (file(/path/to/something) or URL(http://www.symisc.net/))
 *  $raw_output
 *   When TRUE, returns the digest in raw binary format with a length of 20.
 * Return
 *  Return the SHA1 digest on success or FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_sha1_file</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zDigest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>raw_output</name>  <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SHA1Context</name></type> <name>sCtx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>raw_output</name> <operator>=</operator> <call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Init the SHA1 context */</comment>
	<expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment> 
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* EOF or IO error, break immediately */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Close the stream */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the digest */</comment>
	<expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><name>zDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>raw_output</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Output raw digest */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zDigest</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zDigest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Perform a binary to hex conversion */</comment>
		<expr_stmt><expr><call><name>SyBinToHexConsumer</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zDigest</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zDigest</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vfsHashConsumer</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_HASH_FUNC */</comment>
<comment type="block">/*
 * array parse_ini_file(string $filename[, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )
 *  Parse a configuration file.
 * Parameters
 * $filename
 *  The filename of the ini file being parsed.
 * $process_sections
 *  By setting the process_sections parameter to TRUE, you get a multidimensional array
 *  with the section names and settings included.
 *  The default for process_sections is FALSE.
 * $scanner_mode
 *  Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW.
 *  If INI_SCANNER_RAW is supplied, then option values will not be parsed.
 * Return
 *  The settings are returned as an associative array on success.
 *  Otherwise is returned.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_parse_ini_file</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyBlob</name></type> <name>sContents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Read the whole file */</comment>
	<expr_stmt><expr><call><name>jx9StreamReadWholeFile</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty buffer, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Process the raw INI buffer */</comment>
		<expr_stmt><expr><call><name>jx9ParseIniString</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call></expr></argument>, 
			<argument><expr><ternary><condition><expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Close the stream */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the working buffer */</comment>
	<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *    ZIP archive processing.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>zip_raw_data</name></name></type> <name>zip_raw_data</name>;</typedef>
<struct>struct <name>zip_raw_data</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>iType</name></decl>;</decl_stmt>         <comment type="block">/* Where the raw data is stored */</comment>
	<union>union <name>raw_data</name><block>{
		<struct>struct <name>mmap_data</name><block>{
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>          <comment type="block">/* Memory mapped data */</comment>
			<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nSize</name></decl>;</decl_stmt>     <comment type="block">/* Map size */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt> <comment type="block">/* Underlying vfs */</comment>
		}</block><decl><name>mmap</name></decl>;</struct>
		<decl_stmt><decl><type><name>SyBlob</name></type> <name>sBlob</name></decl>;</decl_stmt>  <comment type="block">/* Memory buffer */</comment>
	}</block><decl><name>raw</name></decl>;</union>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_RAW_DATA_MMAPED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* Memory mapped ZIP raw data */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_RAW_DATA_MEMBUF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* ZIP raw data stored in a dynamically
                               * allocated memory chunk.
							   */</comment>
 <comment type="block">/*
  * mixed zip_open(string $filename)
  *  Opens a new zip archive for reading.
  * Parameters
  *  $filename
  *   The file name of the ZIP archive to open.
  * Return
  *  A resource handle for later use with zip_read() and zip_close() or FALSE on failure.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_open</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyArchive</name> <modifier>*</modifier></type><name>pArchive</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zip_raw_data</name> <modifier>*</modifier></type><name>pRaw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pContents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Expecting a file path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the file path */</comment>
	<expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the target IO stream device */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFile</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No such stream device, JX9 is returning FALSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create an in-memory archive */</comment>
	<expr_stmt><expr><name>pArchive</name> <operator>=</operator> <operator>(</operator><name>SyArchive</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_alloc_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyArchive</name></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>zip_raw_data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pArchive</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pRaw</name> <operator>=</operator> <operator>(</operator><name>zip_raw_data</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pArchive</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Initialize the archive */</comment>
	<expr_stmt><expr><call><name>SyArchiveInit</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the default stream */</comment>
	<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>pDefStream</name></name></expr> <comment type="block">/* file:// stream*/</comment>)</condition><block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
		<comment type="block">/* Try to get a memory view of the whole file since ZIP files
		 * tends to be very big this days, this is a huge performance win.
		 */</comment>
		<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <call><name>jx9ExportBuiltinVfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>&amp;&amp;</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xMmap</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xMmap</name></name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>pMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>nSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Nice, Extract the whole archive */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyZipExtractFromBuf</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>pMap</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>nSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
					<if_stmt><if>if<condition>( <expr><name><name>pVfs</name><operator>-&gt;</operator><name>xUnmap</name></name></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xUnmap</name></name><argument_list>(<argument><expr><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>pMap</name></name></expr></argument>, <argument><expr><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>nSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* Release the allocated chunk */</comment>
					<expr_stmt><expr><call><name>jx9_context_free_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Something goes wrong with this ZIP archive, return FALSE */</comment>
					<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>JX9_OK</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Archive successfully opened */</comment>
				<expr_stmt><expr><name><name>pRaw</name><operator>-&gt;</operator><name>iType</name></name> <operator>=</operator> <name>ZIP_RAW_DATA_MMAPED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>pVfs</name></name> <operator>=</operator> <name>pVfs</name></expr>;</expr_stmt>
				<goto>goto <name>success</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* FALL THROUGH */</comment>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"IO error while opening '%s'"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pContents</name> <operator>=</operator> <operator>&amp;</operator><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>sBlob</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><name>pContents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Read the whole file */</comment>
	<expr_stmt><expr><call><name>jx9StreamReadWholeFile</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Assume an invalid ZIP file */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_INVALID</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pContents</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Extract archive entries */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyZipExtractFromBuf</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><name>pContents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pContents</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pRaw</name><operator>-&gt;</operator><name>iType</name></name> <operator>=</operator> <name>ZIP_RAW_DATA_MEMBUF</name></expr>;</expr_stmt>
	<comment type="block">/* Close the stream */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Release the working buffer */</comment>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><name>pContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Release the allocated chunk */</comment>
		<expr_stmt><expr><call><name>jx9_context_free_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Something goes wrong with this ZIP archive, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<label><name>success</name>:</label>
	<comment type="block">/* Reset the loop cursor */</comment>
	<expr_stmt><expr><call><name>SyArchiveResetLoopCursor</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return the in-memory archive as a resource handle */</comment>
	<expr_stmt><expr><call><name>jx9_result_resource</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * void zip_close(resource $zip)
  *  Close an in-memory ZIP archive.
  * Parameters
  *  $zip
  *   A ZIP file previously opened with zip_open().
  * Return
  *  null.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_close</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchive</name> <modifier>*</modifier></type><name>pArchive</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zip_raw_data</name> <modifier>*</modifier></type><name>pRaw</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the in-memory archive */</comment>
	<expr_stmt><expr><name>pArchive</name> <operator>=</operator> <operator>(</operator><name>SyArchive</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_INVALID</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Release the archive */</comment>
	<expr_stmt><expr><call><name>SyArchiveRelease</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pRaw</name> <operator>=</operator> <operator>(</operator><name>zip_raw_data</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pArchive</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pRaw</name><operator>-&gt;</operator><name>iType</name></name> <operator>==</operator> <name>ZIP_RAW_DATA_MEMBUF</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>pVfs</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pVfs</name><operator>-&gt;</operator><name>xUnmap</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Unmap the memory view */</comment>
			<expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xUnmap</name></name><argument_list>(<argument><expr><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>pMap</name></name></expr></argument>, <argument><expr><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>nSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Release the memory chunk */</comment>
	<expr_stmt><expr><call><name>jx9_context_free_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * mixed zip_read(resource $zip)
  *  Reads the next entry from an in-memory ZIP archive.
  * Parameters
  *  $zip
  *   A ZIP file previously opened with zip_open().
  * Return
  *  A directory entry resource for later use with the zip_entry_... functions
  *  or FALSE if there are no more entries to read, or an error code if an error occurred.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_read</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pNext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
	<decl_stmt><decl><type><name>SyArchive</name> <modifier>*</modifier></type><name>pArchive</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the in-memory archive */</comment>
	<expr_stmt><expr><name>pArchive</name> <operator>=</operator> <operator>(</operator><name>SyArchive</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_INVALID</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the next entry */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyArchiveGetNextEntry</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* No more entries in the central directory, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return as a resource handle */</comment>
		<expr_stmt><expr><call><name>jx9_result_resource</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Point to the ZIP raw data */</comment>
		<expr_stmt><expr><name><name>pNext</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pArchive</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * bool zip_entry_open(resource $zip, resource $zip_entry[, string $mode ])
  *  Open a directory entry for reading
  * Parameters
  *  $zip
  *   A ZIP file previously opened with zip_open().
  *  $zip_entry
  *   A directory entry returned by zip_read().
  * $mode
  *   Not used
  * Return
  *  A directory entry resource for later use with the zip_entry_... functions
  *  or FALSE if there are no more entries to read, or an error code if an error occurred.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_entry_open</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyArchive</name> <modifier>*</modifier></type><name>pArchive</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the in-memory archive */</comment>
	<expr_stmt><expr><name>pArchive</name> <operator>=</operator> <operator>(</operator><name>SyArchive</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_INVALID</name><argument_list>(<argument><expr><name>pArchive</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive entry */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SyArchiveEntry</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_ENTRY_INVALID</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* All done. Actually this function is a no-op, return TRUE */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * bool zip_entry_close(resource $zip_entry)
  *  Close a directory entry.
  * Parameters
  *  $zip_entry
  *   A directory entry returned by zip_read().
  * Return
  *  Returns TRUE on success or FALSE on failure.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_entry_close</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive entry */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SyArchiveEntry</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_ENTRY_INVALID</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reset the read cursor */</comment>
	<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>nReadCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/*All done. Actually this function is a no-op, return TRUE */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * string zip_entry_name(resource $zip_entry)
  *  Retrieve the name of a directory entry.
  * Parameters
  *  $zip_entry
  *   A directory entry returned by zip_read().
  * Return
  *  The name of the directory entry.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_entry_name</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive entry */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SyArchiveEntry</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_ENTRY_INVALID</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return entry name */</comment>
	<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>sFileName</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * int64 zip_entry_filesize(resource $zip_entry)
  *  Retrieve the actual file size of a directory entry.
  * Parameters
  *  $zip_entry
  *   A directory entry returned by zip_read().
  * Return
  *  The size of the directory entry.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_entry_filesize</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive entry */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SyArchiveEntry</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_ENTRY_INVALID</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return entry size */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * int64 zip_entry_compressedsize(resource $zip_entry)
  *  Retrieve the compressed size of a directory entry.
  * Parameters
  *  $zip_entry
  *   A directory entry returned by zip_read().
  * Return
  *  The compressed size.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_entry_compressedsize</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive entry */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SyArchiveEntry</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_ENTRY_INVALID</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return entry compressed size */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>nByteCompr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * string zip_entry_read(resource $zip_entry[, int $length])
  *  Reads from an open directory entry.
  * Parameters
  *  $zip_entry
  *   A directory entry returned by zip_read().
  *  $length
  *   The number of bytes to return. If not specified, this function
  *   will attempt to read 1024 bytes.
  * Return
  *  Returns the data read, or FALSE if the end of the file is reached.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_entry_read</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zip_raw_data</name> <modifier>*</modifier></type><name>pRaw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iLength</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive entry */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SyArchiveEntry</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_ENTRY_INVALID</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pEntry</name><operator>-&gt;</operator><name>nReadCount</name></name> <operator>&gt;=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nByteCompr</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* No more data to read, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Set a default read length */</comment>
	<expr_stmt><expr><name>iLength</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iLength</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iLength</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iLength</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>iLength</name> <operator>&gt;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nByteCompr</name></name> <operator>-</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nReadCount</name></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iLength</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>nByteCompr</name></name> <operator>-</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nReadCount</name></name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return the entry contents */</comment>
	<expr_stmt><expr><name>pRaw</name> <operator>=</operator> <operator>(</operator><name>zip_raw_data</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pRaw</name><operator>-&gt;</operator><name>iType</name></name> <operator>==</operator> <name>ZIP_RAW_DATA_MEMBUF</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zData</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobDataAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>nOfft</name></name><operator>+</operator><name><name>pEntry</name><operator>-&gt;</operator><name>nReadCount</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMap</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pRaw</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>mmap</name><operator>.</operator><name>pMap</name></name></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Memory mmaped chunk */</comment>
		<expr_stmt><expr><name>zData</name> <operator>=</operator> <operator>&amp;</operator><name><name>zMap</name><index>[<expr><name><name>pEntry</name><operator>-&gt;</operator><name>nOfft</name></name><operator>+</operator><name><name>pEntry</name><operator>-&gt;</operator><name>nReadCount</name></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Increment the read counter */</comment>
	<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>nReadCount</name></name> <operator>+=</operator> <name>iLength</name></expr>;</expr_stmt>
	<comment type="block">/* Return the raw data */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><name>iLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * bool zip_entry_reset_cursor(resource $zip_entry)
  *  Reset the read cursor of an open directory entry.
  * Parameters
  *  $zip_entry
  *   A directory entry returned by zip_read().
  * Return
  *  TRUE on success, FALSE on failure.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_entry_reset_cursor</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive entry */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SyArchiveEntry</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_ENTRY_INVALID</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reset the cursor */</comment>
	<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>nReadCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Return TRUE */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
  * string zip_entry_compressionmethod(resource $zip_entry)
  *  Retrieve the compression method of a directory entry.
  * Parameters
  *  $zip_entry
  *   A directory entry returned by zip_read().
  * Return
  *  The compression method on success or FALSE on failure.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jx9Builtin_zip_entry_compressionmethod</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyArchiveEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid ZIP archive entry */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SyArchiveEntry</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SXARCH_ENTRY_INVALID</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Expecting a ZIP archive entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch<condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>nComprMeth</name></name></expr>)</condition><block>{<block_content>
	<case>case <expr><literal type="number">0</literal></expr>:</case>
		<comment type="block">/* No compression;entry is stored */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"stored"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"stored"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">8</literal></expr>:</case>
		<comment type="block">/* Entry is deflated (Default compression algorithm)  */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"deflate"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"deflate"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
		<comment type="block">/* Exotic compression algorithms */</comment> 
	<case>case <expr><literal type="number">1</literal></expr>:</case>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"shrunk"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"shrunk"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">2</literal></expr>:</case>
	<case>case <expr><literal type="number">3</literal></expr>:</case>
	<case>case <expr><literal type="number">4</literal></expr>:</case>
	<case>case <expr><literal type="number">5</literal></expr>:</case>
		<comment type="block">/* Entry is reduced */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"reduced"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"reduced"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">6</literal></expr>:</case>
		<comment type="block">/* Entry is imploded */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"implode"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"implode"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* #ifndef JX9_DISABLE_BUILTIN_FUNC*/</comment>
<comment type="block">/* NULL VFS [i.e: a no-op VFS]*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_vfs</name></type> <name>null_vfs</name> <init>= <expr><block>{
	<expr><literal type="string">"null_vfs"</literal></expr>, 
	<expr><name>JX9_VFS_VERSION</name></expr>, 
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xChdir)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xChroot)(const char *); */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xGetcwd)(jx9_context *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xMkdir)(const char *, int, int) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xRmdir)(const char *) */</comment> 
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xIsdir)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xRename)(const char *, const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/*int (*xRealpath)(const char *, jx9_context *)*/</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xSleep)(unsigned int) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xUnlink)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xFileExists)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/*int (*xChmod)(const char *, int)*/</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/*int (*xChown)(const char *, const char *)*/</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/*int (*xChgrp)(const char *, const char *)*/</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* jx9_int64 (*xFreeSpace)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* jx9_int64 (*xTotalSpace)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* jx9_int64 (*xFileSize)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* jx9_int64 (*xFileAtime)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* jx9_int64 (*xFileMtime)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* jx9_int64 (*xFileCtime)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xStat)(const char *, jx9_value *, jx9_value *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xlStat)(const char *, jx9_value *, jx9_value *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xIsfile)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xIslink)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xReadable)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xWritable)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xExecutable)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xFiletype)(const char *, jx9_context *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xGetenv)(const char *, jx9_context *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xSetenv)(const char *, const char *) */</comment> 
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xTouch)(const char *, jx9_int64, jx9_int64) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xMmap)(const char *, void **, jx9_int64 *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* void (*xUnmap)(void *, jx9_int64);  */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xLink)(const char *, const char *, int) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xUmask)(int) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* void (*xTempDir)(jx9_context *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* unsigned int (*xProcessId)(void) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xUid)(void) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xGid)(void) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* void (*xUsername)(jx9_context *) */</comment>
	<expr><literal type="number">0</literal></expr>  <comment type="block">/* int (*xExec)(const char *, jx9_context *) */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_DISK_IO</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
<comment type="block">/*
 * Windows VFS implementation for the JX9 engine.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<comment type="block">/* What follows here is code that is specific to windows systems. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<comment type="block">/*
** Convert a UTF-8 string to microsoft unicode (UTF-16?).
**
** Space to hold the returned string is obtained from HeapAlloc().
** Taken from the sqlite3 source tree
** status: Public Domain
*/</comment>
<function><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>jx9utf8ToUnicode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nChar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>zWideFilename</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nChar</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zWideFilename</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>HeapAlloc</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nChar</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>zWideFilename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zWideFilename</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
 	<return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt> 
  <expr_stmt><expr><name>nChar</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zWideFilename</name></expr></argument>, <argument><expr><name>nChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nChar</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zWideFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zWideFilename</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
** Convert a UTF-8 filename into whatever form the underlying
** operating system wants filenames in.Space to hold the result
** is obtained from HeapAlloc() and must be freed by the calling
** function.
** Taken from the sqlite3 source tree
** status: Public Domain
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>jx9convertUtf8Filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>zConverted</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>zConverted</name> <operator>=</operator> <call><name>jx9utf8ToUnicode</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zConverted</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
** Convert microsoft unicode to UTF-8.  Space to hold the returned string is
** obtained from HeapAlloc().
** Taken from the sqlite3 source tree
** status: Public Domain
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>jx9unicodeToUtf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>zWideFilename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zWideFilename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zFilename</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>HeapAlloc</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zFilename</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
  	<return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zWideFilename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zFilename</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xchdir)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_chdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SetCurrentDirectoryW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xGetcwd)(jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_getcwd</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>zDir</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Get the current directory */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetCurrentDirectoryW</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zDir</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zConverted</name> <operator>=</operator> <call><name>jx9unicodeToUtf8</name><argument_list>(<argument><expr><name>zDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zConverted</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/*Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xMkdir)(const char *, int, int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>mode</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* MSVC warning */</comment>
	<expr_stmt><expr><name>recursive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>CreateDirectoryW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xRmdir)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>RemoveDirectoryW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xIsdir)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_isdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dwAttr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwAttr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>dwAttr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xRename)(const char *, const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOld</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pOld</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>pOld</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pOld</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pNew</name></expr>  )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>MoveFileW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pOld</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xRealpath)(const char *, jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Realpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>zTemp</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zReal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pPath</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pPath</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GetFullPathNameW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zTemp</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zTemp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>GetFullPathNameW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pPath</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zTemp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>n</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zReal</name> <operator>=</operator> <call><name>jx9unicodeToUtf8</name><argument_list>(<argument><expr><name>zTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zReal</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zReal</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zReal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xSleep)(unsigned int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Sleep</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uSec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>uSec</name><operator>/</operator><literal type="number">1000</literal></expr></argument><comment type="block">/*uSec per Millisec */</comment>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xUnlink)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DeleteFileW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFreeSpace)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinVfs_DiskFreeSpace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WCE</name></cpp:ifdef>
	<comment type="block">/* GetDiskFreeSpace is not supported under WINCE */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSectPerClust</name></decl>, <decl><type ref="prev"/><name>dwBytesPerSect</name></decl>, <decl><type ref="prev"/><name>dwFreeClusters</name></decl>, <decl><type ref="prev"/><name>dwTotalClusters</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><name>pConverted</name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition><expr><operator>*</operator><name>p</name></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetDiskFreeSpaceW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwSectPerClust</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwBytesPerSect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwFreeClusters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwTotalClusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>dwFreeClusters</name> <operator>*</operator> <name>dwSectPerClust</name> <operator>*</operator> <name>dwBytesPerSect</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xTotalSpace)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinVfs_DiskTotalSpace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WCE</name></cpp:ifdef>
	<comment type="block">/* GetDiskFreeSpace is not supported under WINCE */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSectPerClust</name></decl>, <decl><type ref="prev"/><name>dwBytesPerSect</name></decl>, <decl><type ref="prev"/><name>dwFreeClusters</name></decl>, <decl><type ref="prev"/><name>dwTotalClusters</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><name>pConverted</name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition><expr><operator>*</operator><name>p</name></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetDiskFreeSpaceW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwSectPerClust</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwBytesPerSect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwFreeClusters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwTotalClusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>dwTotalClusters</name> <operator>*</operator> <name>dwSectPerClust</name> <operator>*</operator> <name>dwBytesPerSect</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/* int (*xFileExists)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_FileExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dwAttr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwAttr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Open a file in a read-only mode */</comment>
<function><type><specifier>static</specifier> <name>HANDLE</name></type> <name>OpenReadOnly</name><parameter_list>(<parameter><decl><type><name>LPCWSTR</name></type> <name>pPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwType</name> <init>= <expr><name>FILE_ATTRIBUTE_NORMAL</name> <operator>|</operator> <name>FILE_FLAG_RANDOM_ACCESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwShare</name> <init>= <expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAccess</name> <init>= <expr><name>GENERIC_READ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCreate</name> <init>= <expr><name>OPEN_EXISTING</name></expr></init></decl>;</decl_stmt>	
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>pPath</name></expr></argument>, <argument><expr><name>dwAccess</name></expr></argument>, <argument><expr><name>dwShare</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dwCreate</name></expr></argument>, <argument><expr><name>dwType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>pHandle</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFileSize)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinVfs_FileSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwLow</name></decl>, <decl><type ref="prev"/><name>dwHigh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>OpenReadOnly</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>dwLow</name> <operator>=</operator> <call><name>GetFileSize</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nSize</name> <operator>=</operator> <name>dwHigh</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nSize</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nSize</name> <operator>+=</operator> <name>dwLow</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>nSize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>nSize</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TICKS_PER_SECOND</name></cpp:macro> <cpp:value>10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOCH_DIFFERENCE</name></cpp:macro> <cpp:value>11644473600LL</cpp:value></cpp:define>
<comment type="block">/* Convert Windows timestamp to UNIX timestamp */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>convertWindowsTimeToUnixTime</name><parameter_list>(<parameter><decl><type><name>LPFILETIME</name></type> <name>pTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>jx9_int64</name></type> <name>input</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>input</name> <operator>=</operator> <name><name>pTime</name><operator>-&gt;</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>input</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>input</name> <operator>+=</operator> <name><name>pTime</name><operator>-&gt;</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>input</name> <operator>/</operator> <name>TICKS_PER_SECOND</name></expr>;</expr_stmt> <comment type="block">/*convert from 100ns intervals to seconds*/</comment>
    <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name> <operator>-</operator> <name>EPOCH_DIFFERENCE</name></expr>;</expr_stmt>  <comment type="block">/*subtract number of seconds between epochs*/</comment>
    <return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Convert UNIX timestamp to Windows timestamp */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>convertUnixTimeToWindowsTime</name><parameter_list>(<parameter><decl><type><name>jx9_int64</name></type> <name>nUnixtime</name></decl></parameter>, <parameter><decl><type><name>LPFILETIME</name></type> <name>pOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>jx9_int64</name></type> <name>result</name> <init>= <expr><name>EPOCH_DIFFERENCE</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>result</name> <operator>+=</operator> <name>nUnixtime</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>*=</operator> <literal type="number">10000000LL</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dwHighDateTime</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>nUnixtime</name><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dwLowDateTime</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>nUnixtime</name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* int (*xTouch)(const char *, jx9_int64, jx9_int64) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Touch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>touch_time</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>access_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILETIME</name></type> <name>sTouch</name></decl>, <decl><type ref="prev"/><name>sAccess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>OpenReadOnly</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>touch_time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sTouch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><call><name>convertUnixTimeToWindowsTime</name><argument_list>(<argument><expr><name>touch_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sTouch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>access_time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Use the touch time */</comment>
			<expr_stmt><expr><name>sAccess</name> <operator>=</operator> <name>sTouch</name></expr>;</expr_stmt> <comment type="block">/* Structure assignment */</comment>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><call><name>convertUnixTimeToWindowsTime</name><argument_list>(<argument><expr><name>access_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sAccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SetFileTime</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sTouch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sAccess</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Close the handle */</comment>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFileAtime)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinVfs_FileAtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>sInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>atime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>OpenReadOnly</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>atime</name> <operator>=</operator> <call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>atime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>atime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>atime</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFileMtime)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinVfs_FileMtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>sInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>mtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>OpenReadOnly</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>mtime</name> <operator>=</operator> <call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>mtime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>mtime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>mtime</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFileCtime)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinVfs_FileCtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>sInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>ctime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>OpenReadOnly</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>ctime</name> <operator>=</operator> <call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>ctime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>ctime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ctime</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xStat)(const char *, jx9_value *, jx9_value *) */</comment>
<comment type="block">/* int (*xlStat)(const char *, jx9_value *, jx9_value *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>sInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Open the file in read-only mode */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>OpenReadOnly</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* dev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>sInfo</name><operator>.</operator><name>dwVolumeSerialNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"dev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ino */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>sInfo</name><operator>.</operator><name>nFileIndexHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>sInfo</name><operator>.</operator><name>nFileIndexLow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ino"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mode */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* nlink */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sInfo</name><operator>.</operator><name>nNumberOfLinks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"nlink"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* uid, gid, rdev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"rdev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* size */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>sInfo</name><operator>.</operator><name>nFileSizeHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>sInfo</name><operator>.</operator><name>nFileSizeLow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* atime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"atime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mtime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ctime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* blksize, blocks */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blksize"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blocks"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xIsfile)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_isfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dwAttr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwAttr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>dwAttr</name> <operator>&amp;</operator> <operator>(</operator><name>FILE_ATTRIBUTE_NORMAL</name><operator>|</operator><name>FILE_ATTRIBUTE_ARCHIVE</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xIslink)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_islink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dwAttr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwAttr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>dwAttr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>)</operator></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xWritable)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_iswritable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dwAttr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwAttr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name>dwAttr</name> <operator>&amp;</operator> <operator>(</operator><name>FILE_ATTRIBUTE_ARCHIVE</name><operator>|</operator><name>FILE_ATTRIBUTE_NORMAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Not a regular file */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwAttr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Read-only file */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* File is writable */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xExecutable)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_isexecutable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dwAttr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwAttr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name>dwAttr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_NORMAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Not a regular file */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* File is executable */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xFiletype)(const char *, jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Filetype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAttr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expand 'unknown' */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dwAttr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwAttr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expand 'unknown' */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>dwAttr</name> <operator>&amp;</operator> <operator>(</operator><name>FILE_ATTRIBUTE_HIDDEN</name><operator>|</operator><name>FILE_ATTRIBUTE_NORMAL</name><operator>|</operator><name>FILE_ATTRIBUTE_ARCHIVE</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>dwAttr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"dir"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>dwAttr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>dwAttr</name> <operator>&amp;</operator> <operator>(</operator><name>FILE_ATTRIBUTE_DEVICE</name><operator>)</operator></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"block"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xGetenv)(const char *, jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVar</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zValue</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name></decl>;</decl_stmt>
	<comment type="block">/*
	 * According to MSDN
	 * If lpBuffer is not large enough to hold the data, the return 
	 * value is the buffer size, in characters, required to hold the 
	 * string and its terminating null character and the contents 
	 * of lpBuffer are undefined.
	 */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zValue</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>, <argument><expr><name>zValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the environment value */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GetEnvironmentVariableA</name><argument_list>(<argument><expr><name>zVar</name></expr></argument>, <argument><expr><name>zValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>n</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* No such variable*/</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zValue</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xSetenv)(const char *, const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Setenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SetEnvironmentVariableA</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xMmap)(const char *, void **, jx9_int64 *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinVfs_Mmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppMap</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwSizeLow</name></decl>, <decl><type ref="prev"/><name>dwSizeHigh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name></decl>, <decl><type ref="prev"/><name>pMapHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pConverted</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pView</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>OpenReadOnly</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Get the file size */</comment>
	<expr_stmt><expr><name>dwSizeLow</name> <operator>=</operator> <call><name>GetFileSize</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwSizeHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Create the mapping */</comment>
	<expr_stmt><expr><name>pMapHandle</name> <operator>=</operator> <call><name>CreateFileMappingW</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PAGE_READONLY</name></expr></argument>, <argument><expr><name>dwSizeHigh</name></expr></argument>, <argument><expr><name>dwSizeLow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pMapHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>dwSizeHigh</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>dwSizeLow</name></expr>;</expr_stmt>
	<comment type="block">/* Obtain the view */</comment>
	<expr_stmt><expr><name>pView</name> <operator>=</operator> <call><name>MapViewOfFile</name><argument_list>(<argument><expr><name>pMapHandle</name></expr></argument>, <argument><expr><name>FILE_MAP_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>SIZE_T</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pSize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pView</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Let the upper layer point to the view */</comment>
		<expr_stmt><expr><operator>*</operator><name>ppMap</name> <operator>=</operator> <name>pView</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Close the handle
	 * According to MSDN it's OK the close the HANDLES.
	 */</comment>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pMapHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>pView</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* void (*xUnmap)(void *, jx9_int64)  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WinVfs_Unmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>nSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Compiler warning */</comment>
	<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* void (*xTempDir)(jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WinVfs_TempDir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CHAR</name></type> <name><name>zTemp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GetTempPathA</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zTemp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Assume the default windows temp directory */</comment>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"C:\\Windows\\Temp"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/*Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zTemp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/* unsigned int (*xProcessId)(void) */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>WinVfs_ProcessId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>nID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__MINGW32__</name></cpp:ifndef>
	<expr_stmt><expr><name>nID</name> <operator>=</operator> <call><name>GetProcessId</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MINGW32__ */</comment>
	<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>nID</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Export the windows vfs */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_vfs</name></type> <name>sWinVfs</name> <init>= <expr><block>{
	<expr><literal type="string">"Windows_vfs"</literal></expr>, 
	<expr><name>JX9_VFS_VERSION</name></expr>, 
	<expr><name>WinVfs_chdir</name></expr>,    <comment type="block">/* int (*xChdir)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>,               <comment type="block">/* int (*xChroot)(const char *); */</comment>
	<expr><name>WinVfs_getcwd</name></expr>,   <comment type="block">/* int (*xGetcwd)(jx9_context *) */</comment>
	<expr><name>WinVfs_mkdir</name></expr>,    <comment type="block">/* int (*xMkdir)(const char *, int, int) */</comment>
	<expr><name>WinVfs_rmdir</name></expr>,    <comment type="block">/* int (*xRmdir)(const char *) */</comment> 
	<expr><name>WinVfs_isdir</name></expr>,    <comment type="block">/* int (*xIsdir)(const char *) */</comment>
	<expr><name>WinVfs_Rename</name></expr>,   <comment type="block">/* int (*xRename)(const char *, const char *) */</comment>
	<expr><name>WinVfs_Realpath</name></expr>, <comment type="block">/*int (*xRealpath)(const char *, jx9_context *)*/</comment>
	<expr><name>WinVfs_Sleep</name></expr>,               <comment type="block">/* int (*xSleep)(unsigned int) */</comment>
	<expr><name>WinVfs_unlink</name></expr>,   <comment type="block">/* int (*xUnlink)(const char *) */</comment>
	<expr><name>WinVfs_FileExists</name></expr>, <comment type="block">/* int (*xFileExists)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/*int (*xChmod)(const char *, int)*/</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/*int (*xChown)(const char *, const char *)*/</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/*int (*xChgrp)(const char *, const char *)*/</comment>
	<expr><name>WinVfs_DiskFreeSpace</name></expr>, <comment type="block">/* jx9_int64 (*xFreeSpace)(const char *) */</comment>
	<expr><name>WinVfs_DiskTotalSpace</name></expr>, <comment type="block">/* jx9_int64 (*xTotalSpace)(const char *) */</comment>
	<expr><name>WinVfs_FileSize</name></expr>, <comment type="block">/* jx9_int64 (*xFileSize)(const char *) */</comment>
	<expr><name>WinVfs_FileAtime</name></expr>, <comment type="block">/* jx9_int64 (*xFileAtime)(const char *) */</comment>
	<expr><name>WinVfs_FileMtime</name></expr>, <comment type="block">/* jx9_int64 (*xFileMtime)(const char *) */</comment>
	<expr><name>WinVfs_FileCtime</name></expr>, <comment type="block">/* jx9_int64 (*xFileCtime)(const char *) */</comment>
	<expr><name>WinVfs_Stat</name></expr>, <comment type="block">/* int (*xStat)(const char *, jx9_value *, jx9_value *) */</comment>
	<expr><name>WinVfs_Stat</name></expr>, <comment type="block">/* int (*xlStat)(const char *, jx9_value *, jx9_value *) */</comment>
	<expr><name>WinVfs_isfile</name></expr>,     <comment type="block">/* int (*xIsfile)(const char *) */</comment>
	<expr><name>WinVfs_islink</name></expr>,     <comment type="block">/* int (*xIslink)(const char *) */</comment>
	<expr><name>WinVfs_isfile</name></expr>,     <comment type="block">/* int (*xReadable)(const char *) */</comment>
	<expr><name>WinVfs_iswritable</name></expr>, <comment type="block">/* int (*xWritable)(const char *) */</comment>
	<expr><name>WinVfs_isexecutable</name></expr>, <comment type="block">/* int (*xExecutable)(const char *) */</comment>
	<expr><name>WinVfs_Filetype</name></expr>,   <comment type="block">/* int (*xFiletype)(const char *, jx9_context *) */</comment>
	<expr><name>WinVfs_Getenv</name></expr>,     <comment type="block">/* int (*xGetenv)(const char *, jx9_context *) */</comment>
	<expr><name>WinVfs_Setenv</name></expr>,     <comment type="block">/* int (*xSetenv)(const char *, const char *) */</comment> 
	<expr><name>WinVfs_Touch</name></expr>,      <comment type="block">/* int (*xTouch)(const char *, jx9_int64, jx9_int64) */</comment>
	<expr><name>WinVfs_Mmap</name></expr>,       <comment type="block">/* int (*xMmap)(const char *, void **, jx9_int64 *) */</comment>
	<expr><name>WinVfs_Unmap</name></expr>,      <comment type="block">/* void (*xUnmap)(void *, jx9_int64);  */</comment>
	<expr><literal type="number">0</literal></expr>,                 <comment type="block">/* int (*xLink)(const char *, const char *, int) */</comment>
	<expr><literal type="number">0</literal></expr>,                 <comment type="block">/* int (*xUmask)(int) */</comment>
	<expr><name>WinVfs_TempDir</name></expr>,    <comment type="block">/* void (*xTempDir)(jx9_context *) */</comment>
	<expr><name>WinVfs_ProcessId</name></expr>,  <comment type="block">/* unsigned int (*xProcessId)(void) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xUid)(void) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* int (*xGid)(void) */</comment>
	<expr><literal type="number">0</literal></expr>, <comment type="block">/* void (*xUsername)(jx9_context *) */</comment>
	<expr><literal type="number">0</literal></expr>  <comment type="block">/* int (*xExec)(const char *, jx9_context *) */</comment>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* Windows file IO */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INVALID_SET_FILE_POINTER</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SET_FILE_POINTER</name></cpp:macro> <cpp:value>((DWORD)-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* int (*xOpen)(const char *, int, jx9_value *, void **) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinFile_Open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iOpenMode</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResource</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwType</name> <init>= <expr><name>FILE_ATTRIBUTE_NORMAL</name> <operator>|</operator> <name>FILE_FLAG_RANDOM_ACCESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwAccess</name> <init>= <expr><name>GENERIC_READ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwShare</name></decl>, <decl><type ref="prev"/><name>dwCreate</name></decl>;</decl_stmt>	
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Set the desired flags according to the open mode */</comment>
	<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_CREATE</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Open existing file, or create if it doesn't exist */</comment>
		<expr_stmt><expr><name>dwCreate</name> <operator>=</operator> <name>OPEN_ALWAYS</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_TRUNC</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* If the specified file exists and is writable, the function overwrites the file */</comment>
			<expr_stmt><expr><name>dwCreate</name> <operator>=</operator> <name>CREATE_ALWAYS</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_EXCL</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Creates a new file, only if it does not already exist.
		* If the file exists, it fails.
		*/</comment>
		<expr_stmt><expr><name>dwCreate</name> <operator>=</operator> <name>CREATE_NEW</name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_TRUNC</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Opens a file and truncates it so that its size is zero bytes
		 * The file must exist.
		 */</comment>
		<expr_stmt><expr><name>dwCreate</name> <operator>=</operator> <name>TRUNCATE_EXISTING</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Opens a file, only if it exists. */</comment>
		<expr_stmt><expr><name>dwCreate</name> <operator>=</operator> <name>OPEN_EXISTING</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_RDWR</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Read+Write access */</comment>
		<expr_stmt><expr><name>dwAccess</name> <operator>|=</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_WRONLY</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Write only access */</comment>
		<expr_stmt><expr><name>dwAccess</name> <operator>=</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_APPEND</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Append mode */</comment>
		<expr_stmt><expr><name>dwAccess</name> <operator>=</operator> <name>FILE_APPEND_DATA</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_TEMP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* File is temporary */</comment>
		<expr_stmt><expr><name>dwType</name> <operator>=</operator> <name>FILE_ATTRIBUTE_TEMPORARY</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dwShare</name> <operator>=</operator> <name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>, <argument><expr><name>dwAccess</name></expr></argument>, <argument><expr><name>dwShare</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dwCreate</name></expr></argument>, <argument><expr><name>dwType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* MSVC warning */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make the handle accessible to the upper layer */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppHandle</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pHandle</name></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* An instance of the following structure is used to record state information 
 * while iterating throw directory entries.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>WinDir_Info</name></name></type> <name>WinDir_Info</name>;</typedef>
<struct>struct <name>WinDir_Info</name>
<block>{
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pDirHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>sInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
}</block>;</struct>
<comment type="block">/* int (*xOpenDir)(const char *, jx9_value *, void **) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinDir_Open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResource</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WinDir_Info</name> <modifier>*</modifier></type><name>pDirInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pConverted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPrep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<comment type="block">/* Prepare the path */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zPrep</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>HeapAlloc</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\\*"</literal></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zPrep</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zPath</name></expr></argument>, <argument><expr><name>zPrep</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zPrep</name><index>[<expr><name>n</name></expr>]</index></name>   <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zPrep</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>  <literal type="char">'*'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zPrep</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pConverted</name> <operator>=</operator> <call><name>jx9convertUtf8Filename</name><argument_list>(<argument><expr><name>zPrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zPrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConverted</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new instance */</comment>
	<expr_stmt><expr><name>pDirInfo</name> <operator>=</operator> <operator>(</operator><name>WinDir_Info</name> <operator>*</operator><operator>)</operator><call><name>HeapAlloc</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WinDir_Info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pDirInfo</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pResource</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Compiler warning */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>pConverted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDirInfo</name><operator>-&gt;</operator><name>sInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Cannot open directory */</comment>
		<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pDirInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Save the path */</comment>
	<expr_stmt><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pPath</name></name> <operator>=</operator> <name>pConverted</name></expr>;</expr_stmt>
	<comment type="block">/* Save our structure */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppHandle</name> <operator>=</operator> <name>pDirInfo</name></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* void (*xCloseDir)(void *) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WinDir_Close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WinDir_Info</name> <modifier>*</modifier></type><name>pDirInfo</name> <init>= <expr><operator>(</operator><name>WinDir_Info</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pDirInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* void (*xClose)(void *); */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WinFile_Close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* int (*xReadDir)(void *, jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinDir_Read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WinDir_Info</name> <modifier>*</modifier></type><name>pDirInfo</name> <init>= <expr><operator>(</operator><name>WinDir_Info</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPWIN32_FIND_DATAW</name></type> <name>pData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* No more entry to process */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pData</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDirInfo</name><operator>-&gt;</operator><name>sInfo</name></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9unicodeToUtf8</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>cFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zName</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Out of memory */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Ignore '.' &amp;&amp; '..' */</comment>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>zName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>(</operator> <name>n</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>zName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FindNextFileW</name><argument_list>(<argument><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDirInfo</name><operator>-&gt;</operator><name>sInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Return the current file name */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the next entry */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FindNextFileW</name><argument_list>(<argument><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDirInfo</name><operator>-&gt;</operator><name>sInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SXERR_EOF</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* void (*xRewindDir)(void *) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WinDir_RewindDir</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WinDir_Info</name> <modifier>*</modifier></type><name>pDirInfo</name> <init>= <expr><operator>(</operator><name>WinDir_Info</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name><name>pDirInfo</name><operator>-&gt;</operator><name>pPath</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDirInfo</name><operator>-&gt;</operator><name>sInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>pDirHandle</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SXERR_EOF</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name><name>pDirInfo</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xRead)(void *, void *, jx9_int64); */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinFile_Read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pOS</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nDatatoRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pOS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>nRd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ReadFile</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nDatatoRead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* EOF or IO error */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>nRd</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xWrite)(void *, const void *, jx9_int64); */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinFile_Write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pOS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nWrite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pBuffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pOS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>nWr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nWr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>nWrite</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WriteFile</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nWrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nWr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* IO error */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nWrite</name> <operator>-=</operator> <name>nWr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nCount</name> <operator>+=</operator> <name>nWr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zData</name> <operator>+=</operator> <name>nWr</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>( <expr><name>nWrite</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>nCount</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xSeek)(void *, jx9_int64, int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinFile_Seek</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>iOfft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwMove</name></decl>, <decl><type ref="prev"/><name>dwNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LONG</name></type> <name>nHighOfft</name></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>whence</name></expr>)</condition><block>{<block_content>
	<case>case <expr><literal type="number">1</literal></expr>:</case><comment type="block">/*SEEK_CUR*/</comment>
		<expr_stmt><expr><name>dwMove</name> <operator>=</operator> <name>FILE_CURRENT</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* SEEK_END */</comment>
		<expr_stmt><expr><name>dwMove</name> <operator>=</operator> <name>FILE_END</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* SEEK_SET */</comment>
	<default>default:</default>
		<expr_stmt><expr><name>dwMove</name> <operator>=</operator> <name>FILE_BEGIN</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>nHighOfft</name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><name>iOfft</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>dwNew</name> <operator>=</operator> <call><name>SetFilePointer</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG</name><operator>)</operator><name>iOfft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nHighOfft</name></expr></argument>, <argument><expr><name>dwMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwNew</name> <operator>==</operator> <name>INVALID_SET_FILE_POINTER</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xLock)(void *, int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinFile_Lock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>dwLo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dwHi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* xx: MT-SAFE */</comment>
	<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>sDummy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDummy</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sDummy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Get the file size */</comment>
	<if_stmt><if>if<condition>( <expr><name>lock_type</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Unlock the file */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>UnlockFileEx</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dwLo</name></expr></argument>, <argument><expr><name>dwHi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name> <init>= <expr><name>LOCKFILE_FAIL_IMMEDIATELY</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Shared non-blocking lock by default*/</comment>
		<comment type="block">/* Lock the file */</comment>
		<if_stmt><if>if<condition>( <expr><name>lock_type</name> <operator>==</operator> <literal type="number">1</literal></expr> <comment type="block">/* LOCK_EXCL */</comment> )</condition><block>{<block_content>
			<expr_stmt><expr><name>dwFlags</name> <operator>|=</operator> <name>LOCKFILE_EXCLUSIVE_LOCK</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>dwLo</name> <operator>=</operator> <call><name>GetFileSize</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>LockFileEx</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>dwFlags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dwLo</name></expr></argument>, <argument><expr><name>dwHi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> <comment type="block">/* Lock error */</comment>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xTell)(void *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>WinFile_Tell</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNew</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>dwNew</name> <operator>=</operator> <call><name>SetFilePointer</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FILE_CURRENT</name></expr></argument><comment type="block">/* SEEK_CUR */</comment>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwNew</name> <operator>==</operator> <name>INVALID_SET_FILE_POINTER</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>dwNew</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xTrunc)(void *, jx9_int64) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinFile_Trunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nOfft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LONG</name></type> <name>HighOfft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>HighOfft</name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><name>nOfft</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>dwNew</name> <operator>=</operator> <call><name>SetFilePointer</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG</name><operator>)</operator><name>nOfft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>HighOfft</name></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>dwNew</name> <operator>==</operator> <name>INVALID_SET_FILE_POINTER</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SetEndOfFile</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xSync)(void *); */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinFile_Sync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xStat)(void *, jx9_value *, jx9_value *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>WinFile_Stat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>sInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>pHandle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* dev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>sInfo</name><operator>.</operator><name>dwVolumeSerialNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"dev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ino */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>sInfo</name><operator>.</operator><name>nFileIndexHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>sInfo</name><operator>.</operator><name>nFileIndexLow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ino"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mode */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* nlink */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sInfo</name><operator>.</operator><name>nNumberOfLinks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"nlink"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* uid, gid, rdev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"rdev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* size */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>sInfo</name><operator>.</operator><name>nFileSizeHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>sInfo</name><operator>.</operator><name>nFileSizeLow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* atime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"atime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mtime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ctime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><call><name>convertWindowsTimeToUnixTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sInfo</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* blksize, blocks */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blksize"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blocks"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Export the file:// stream */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_io_stream</name></type> <name>sWinFileStream</name> <init>= <expr><block>{
	<expr><literal type="string">"file"</literal></expr>, <comment type="block">/* Stream name */</comment>
	<expr><name>JX9_IO_STREAM_VERSION</name></expr>, 
	<expr><name>WinFile_Open</name></expr>,  <comment type="block">/* xOpen */</comment>
	<expr><name>WinDir_Open</name></expr>,   <comment type="block">/* xOpenDir */</comment>
	<expr><name>WinFile_Close</name></expr>, <comment type="block">/* xClose */</comment>
	<expr><name>WinDir_Close</name></expr>,  <comment type="block">/* xCloseDir */</comment>
	<expr><name>WinFile_Read</name></expr>,  <comment type="block">/* xRead */</comment>
	<expr><name>WinDir_Read</name></expr>,   <comment type="block">/* xReadDir */</comment>
	<expr><name>WinFile_Write</name></expr>, <comment type="block">/* xWrite */</comment>
	<expr><name>WinFile_Seek</name></expr>,  <comment type="block">/* xSeek */</comment>
	<expr><name>WinFile_Lock</name></expr>,  <comment type="block">/* xLock */</comment>
	<expr><name>WinDir_RewindDir</name></expr>, <comment type="block">/* xRewindDir */</comment>
	<expr><name>WinFile_Tell</name></expr>,  <comment type="block">/* xTell */</comment>
	<expr><name>WinFile_Trunc</name></expr>, <comment type="block">/* xTrunc */</comment>
	<expr><name>WinFile_Sync</name></expr>,  <comment type="block">/* xSeek */</comment>
	<expr><name>WinFile_Stat</name></expr>   <comment type="block">/* xStat */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<comment type="block">/*
 * UNIX VFS implementation for the JX9 engine.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utime.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<comment type="block">/* int (*xchdir)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_chdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xGetcwd)(jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_getcwd</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDir</name></decl>;</decl_stmt>
	<comment type="block">/* Get the current directory */</comment>
	<expr_stmt><expr><name>zDir</name> <operator>=</operator> <call><name>getcwd</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zDir</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
	  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zDir</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/*Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xMkdir)(const char *, int, int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mkdir</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>recursive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xRmdir)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rmdir</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xIsdir)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_isdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xRename)(const char *, const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOld</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rename</name><argument_list>(<argument><expr><name>zOld</name></expr></argument>, <argument><expr><name>zNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xRealpath)(const char *, jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Realpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_UNIX_OLD_LIBC</name></cpp:ifndef>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zReal</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>zReal</name> <operator>=</operator> <call><name>realpath</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zReal</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
	  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zReal</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/*Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Release the allocated buffer */</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zReal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>zPath</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
    <expr_stmt><expr><name>pCtx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/* int (*xSleep)(unsigned int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Sleep</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uSec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name>uSec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xUnlink)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xFileExists)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_FileExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>access</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFileSize)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>UnixVfs_FileSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> 
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xTouch)(const char *, jx9_int64, jx9_int64) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Touch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>touch_time</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>access_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>utimbuf</name></name></type> <name>ut</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ut</name><operator>.</operator><name>actime</name></name>  <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>access_time</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ut</name><operator>.</operator><name>modtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>touch_time</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>utime</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFileAtime)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>UnixVfs_FileAtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> 
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_atime</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFileMtime)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>UnixVfs_FileMtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> 
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xFileCtime)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>UnixVfs_FileCtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> 
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ctime</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xStat)(const char *, jx9_value *, jx9_value *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> 
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* dev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"dev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ino */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ino"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mode */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* nlink */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"nlink"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* uid, gid, rdev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"rdev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* size */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* atime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"atime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mtime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ctime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* blksize, blocks */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blksize"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blocks"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xlStat)(const char *, jx9_value *, jx9_value *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_lStat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lstat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> 
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* dev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"dev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ino */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ino"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mode */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* nlink */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"nlink"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* uid, gid, rdev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"rdev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* size */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* atime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"atime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mtime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ctime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* blksize, blocks */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blksize"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blocks"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xChmod)(const char *, int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Chmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>chmod</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xChown)(const char *, const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Chown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_UNIX_STATIC_BUILD</name></cpp:ifndef>
  <decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pwd</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name>zUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* Try getting UID for username */</comment>
  <if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pwd</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>chown</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>zUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_UNIX_STATIC_BUILD */</comment>
</block_content>}</block></function>
<comment type="block">/* int (*xChgrp)(const char *, const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Chgrp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zGroup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_UNIX_STATIC_BUILD</name></cpp:ifndef>
  <decl_stmt><decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name>zGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>gr_gid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>chown</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>zGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_UNIX_STATIC_BUILD */</comment>
</block_content>}</block></function>
<comment type="block">/* int (*xIsfile)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_isfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xIslink)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_islink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xReadable)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_isreadable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>access</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xWritable)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_iswritable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>access</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>W_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xExecutable)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_isexecutable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>access</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>X_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xFiletype)(const char *, jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Filetype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
	  <comment type="block">/* Expand 'unknown' */</comment>
	  <expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"dir"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"block"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>S_ISFIFO</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
       <expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"fifo"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"fifo"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xGetenv)(const char *, jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVar</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zEnv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>zEnv</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>zVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zEnv</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
	  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zEnv</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/*Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xSetenv)(const char *, const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Setenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>setenv</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xMmap)(const char *, void **, jx9_int64 *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Mmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppMap</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Open the file in a read-only mode */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* stat the handle */</comment>
	<expr_stmt><expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Obtain a memory view of the whole file */</comment>
	<expr_stmt><expr><name>pMap</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name><operator>|</operator><name>MAP_FILE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_OK</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pMap</name> <operator>==</operator> <name>MAP_FAILED</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Point to the memory view */</comment>
		<expr_stmt><expr><operator>*</operator><name>ppMap</name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* void (*xUnmap)(void *, jx9_int64)  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UnixVfs_Unmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* void (*xTempDir)(jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UnixVfs_TempDir</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azDirs</name><index>[]</index></name> <init>= <expr><block>{
     <expr><literal type="string">"/var/tmp"</literal></expr>, 
     <expr><literal type="string">"/usr/tmp"</literal></expr>, 
	 <expr><literal type="string">"/usr/local/tmp"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDir</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>zDir</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TMPDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zDir</name> <operator>&amp;&amp;</operator> <name><name>zDir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>access</name><argument_list>(<argument><expr><name>zDir</name></expr></argument>, <argument><expr><literal type="number">07</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
	  <expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zDir</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>azDirs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>azDirs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
	<expr_stmt><expr><name>zDir</name><operator>=</operator><name><name>azDirs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zDir</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>stat</name><argument_list>(<argument><expr><name>zDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>access</name><argument_list>(<argument><expr><name>zDir</name></expr></argument>, <argument><expr><literal type="number">07</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <comment type="block">/* Got one */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zDir</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
  </block_content>}</block></for>
  <comment type="block">/* Default temp dir */</comment>
  <expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"/tmp"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* unsigned int (*xProcessId)(void) */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>UnixVfs_ProcessId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xUid)(void) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_uid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getuid</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xGid)(void) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_gid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getgid</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xUmask)(int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_Umask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>new_mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>old_mask</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>old_mask</name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><name>new_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>old_mask</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* void (*xUsername)(jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UnixVfs_Username</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_UNIX_STATIC_BUILD</name></cpp:ifndef>
  <decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pwd</name> <operator>=</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* Try getting UID for username */</comment>
  <if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Return the username */</comment>
  <expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_UNIX_STATIC_BUILD */</comment>
  <return>return;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xLink)(const char *, const char *, int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_link</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>is_sym</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Symbolic link */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>symlink</name><argument_list>(<argument><expr><name>zSrc</name></expr></argument>, <argument><expr><name>zTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Hard link */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>link</name><argument_list>(<argument><expr><name>zSrc</name></expr></argument>, <argument><expr><name>zTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xChroot)(const char *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixVfs_chroot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRootDir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>chroot</name><argument_list>(<argument><expr><name>zRootDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Export the UNIX vfs */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_vfs</name></type> <name>sUnixVfs</name> <init>= <expr><block>{
	<expr><literal type="string">"Unix_vfs"</literal></expr>, 
	<expr><name>JX9_VFS_VERSION</name></expr>, 
	<expr><name>UnixVfs_chdir</name></expr>,    <comment type="block">/* int (*xChdir)(const char *) */</comment>
	<expr><name>UnixVfs_chroot</name></expr>,   <comment type="block">/* int (*xChroot)(const char *); */</comment>
	<expr><name>UnixVfs_getcwd</name></expr>,   <comment type="block">/* int (*xGetcwd)(jx9_context *) */</comment>
	<expr><name>UnixVfs_mkdir</name></expr>,    <comment type="block">/* int (*xMkdir)(const char *, int, int) */</comment>
	<expr><name>UnixVfs_rmdir</name></expr>,    <comment type="block">/* int (*xRmdir)(const char *) */</comment> 
	<expr><name>UnixVfs_isdir</name></expr>,    <comment type="block">/* int (*xIsdir)(const char *) */</comment>
	<expr><name>UnixVfs_Rename</name></expr>,   <comment type="block">/* int (*xRename)(const char *, const char *) */</comment>
	<expr><name>UnixVfs_Realpath</name></expr>, <comment type="block">/*int (*xRealpath)(const char *, jx9_context *)*/</comment>
	<expr><name>UnixVfs_Sleep</name></expr>,    <comment type="block">/* int (*xSleep)(unsigned int) */</comment>
	<expr><name>UnixVfs_unlink</name></expr>,   <comment type="block">/* int (*xUnlink)(const char *) */</comment>
	<expr><name>UnixVfs_FileExists</name></expr>, <comment type="block">/* int (*xFileExists)(const char *) */</comment>
	<expr><name>UnixVfs_Chmod</name></expr>, <comment type="block">/*int (*xChmod)(const char *, int)*/</comment>
	<expr><name>UnixVfs_Chown</name></expr>, <comment type="block">/*int (*xChown)(const char *, const char *)*/</comment>
	<expr><name>UnixVfs_Chgrp</name></expr>, <comment type="block">/*int (*xChgrp)(const char *, const char *)*/</comment>
	<expr><literal type="number">0</literal></expr>,             <comment type="block">/* jx9_int64 (*xFreeSpace)(const char *) */</comment>
	<expr><literal type="number">0</literal></expr>,             <comment type="block">/* jx9_int64 (*xTotalSpace)(const char *) */</comment>
	<expr><name>UnixVfs_FileSize</name></expr>, <comment type="block">/* jx9_int64 (*xFileSize)(const char *) */</comment>
	<expr><name>UnixVfs_FileAtime</name></expr>, <comment type="block">/* jx9_int64 (*xFileAtime)(const char *) */</comment>
	<expr><name>UnixVfs_FileMtime</name></expr>, <comment type="block">/* jx9_int64 (*xFileMtime)(const char *) */</comment>
	<expr><name>UnixVfs_FileCtime</name></expr>, <comment type="block">/* jx9_int64 (*xFileCtime)(const char *) */</comment>
	<expr><name>UnixVfs_Stat</name></expr>,  <comment type="block">/* int (*xStat)(const char *, jx9_value *, jx9_value *) */</comment>
	<expr><name>UnixVfs_lStat</name></expr>, <comment type="block">/* int (*xlStat)(const char *, jx9_value *, jx9_value *) */</comment>
	<expr><name>UnixVfs_isfile</name></expr>,     <comment type="block">/* int (*xIsfile)(const char *) */</comment>
	<expr><name>UnixVfs_islink</name></expr>,     <comment type="block">/* int (*xIslink)(const char *) */</comment>
	<expr><name>UnixVfs_isreadable</name></expr>, <comment type="block">/* int (*xReadable)(const char *) */</comment>
	<expr><name>UnixVfs_iswritable</name></expr>, <comment type="block">/* int (*xWritable)(const char *) */</comment>
	<expr><name>UnixVfs_isexecutable</name></expr>, <comment type="block">/* int (*xExecutable)(const char *) */</comment>
	<expr><name>UnixVfs_Filetype</name></expr>,   <comment type="block">/* int (*xFiletype)(const char *, jx9_context *) */</comment>
	<expr><name>UnixVfs_Getenv</name></expr>,     <comment type="block">/* int (*xGetenv)(const char *, jx9_context *) */</comment>
	<expr><name>UnixVfs_Setenv</name></expr>,     <comment type="block">/* int (*xSetenv)(const char *, const char *) */</comment> 
	<expr><name>UnixVfs_Touch</name></expr>,      <comment type="block">/* int (*xTouch)(const char *, jx9_int64, jx9_int64) */</comment>
	<expr><name>UnixVfs_Mmap</name></expr>,       <comment type="block">/* int (*xMmap)(const char *, void **, jx9_int64 *) */</comment>
	<expr><name>UnixVfs_Unmap</name></expr>,      <comment type="block">/* void (*xUnmap)(void *, jx9_int64);  */</comment>
	<expr><name>UnixVfs_link</name></expr>,       <comment type="block">/* int (*xLink)(const char *, const char *, int) */</comment>
	<expr><name>UnixVfs_Umask</name></expr>,      <comment type="block">/* int (*xUmask)(int) */</comment>
	<expr><name>UnixVfs_TempDir</name></expr>,    <comment type="block">/* void (*xTempDir)(jx9_context *) */</comment>
	<expr><name>UnixVfs_ProcessId</name></expr>,  <comment type="block">/* unsigned int (*xProcessId)(void) */</comment>
	<expr><name>UnixVfs_uid</name></expr>, <comment type="block">/* int (*xUid)(void) */</comment>
	<expr><name>UnixVfs_gid</name></expr>, <comment type="block">/* int (*xGid)(void) */</comment>
	<expr><name>UnixVfs_Username</name></expr>,    <comment type="block">/* void (*xUsername)(jx9_context *) */</comment>
	<expr><literal type="number">0</literal></expr> <comment type="block">/* int (*xExec)(const char *, jx9_context *) */</comment>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* UNIX File IO */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_UNIX_OPEN_MODE</name></cpp:macro>	<cpp:value>0640</cpp:value></cpp:define> <comment type="block">/* Default open mode */</comment>
<comment type="block">/* int (*xOpen)(const char *, int, jx9_value *, void **) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixFile_Open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iOpenMode</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResource</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>iOpen</name> <init>= <expr><name>O_RDONLY</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<comment type="block">/* Set the desired flags according to the open mode */</comment>
	<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_CREATE</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Open existing file, or create if it doesn't exist */</comment>
		<expr_stmt><expr><name>iOpen</name> <operator>=</operator> <name>O_CREAT</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_TRUNC</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* If the specified file exists and is writable, the function overwrites the file */</comment>
			<expr_stmt><expr><name>iOpen</name> <operator>|=</operator> <name>O_TRUNC</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_EXCL</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Creates a new file, only if it does not already exist.
		* If the file exists, it fails.
		*/</comment>
		<expr_stmt><expr><name>iOpen</name> <operator>=</operator> <name>O_CREAT</name><operator>|</operator><name>O_EXCL</name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_TRUNC</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Opens a file and truncates it so that its size is zero bytes
		 * The file must exist.
		 */</comment>
		<expr_stmt><expr><name>iOpen</name> <operator>=</operator> <name>O_RDWR</name><operator>|</operator><name>O_TRUNC</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_RDWR</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Read+Write access */</comment>
		<expr_stmt><expr><name>iOpen</name> <operator>&amp;=</operator> <operator>~</operator><name>O_RDONLY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>iOpen</name> <operator>|=</operator> <name>O_RDWR</name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_WRONLY</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Write only access */</comment>
		<expr_stmt><expr><name>iOpen</name> <operator>&amp;=</operator> <operator>~</operator><name>O_RDONLY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>iOpen</name> <operator>|=</operator> <name>O_WRONLY</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_APPEND</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Append mode */</comment>
		<expr_stmt><expr><name>iOpen</name> <operator>|=</operator> <name>O_APPEND</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>O_TEMP</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>iOpenMode</name> <operator>&amp;</operator> <name>JX9_IO_OPEN_TEMP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* File is temporary */</comment>
		<expr_stmt><expr><name>iOpen</name> <operator>|=</operator> <name>O_TEMP</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Open the file now */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>iOpen</name></expr></argument>, <argument><expr><name>JX9_UNIX_OPEN_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* IO error */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Save the handle */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppHandle</name> <operator>=</operator> <call><name>SX_INT_TO_PTR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xOpenDir)(const char *, jx9_value *, void **) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixDir_Open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResource</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>pDir</name></decl>;</decl_stmt>
	<comment type="block">/* Open the target directory */</comment>
	<expr_stmt><expr><name>pDir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pDir</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pResource</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Compiler warning */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Save our structure */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppHandle</name> <operator>=</operator> <name>pDir</name></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* void (*xCloseDir)(void *) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UnixDir_Close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><operator>(</operator><name>DIR</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* void (*xClose)(void *); */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UnixFile_Close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* int (*xReadDir)(void *, jx9_context *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixDir_Read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>pDir</name> <init>= <expr><operator>(</operator><name>DIR</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* No more entries to process */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zName</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>d_name</name></name></expr>;</expr_stmt> 
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Ignore '.' &amp;&amp; '..' */</comment>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>zName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>(</operator> <name>n</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>zName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Next entry */</comment>
	</block_content>}</block></for>
	<comment type="block">/* Return the current file name */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* void (*xRewindDir)(void *) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>UnixDir_Rewind</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>rewinddir</name><argument_list>(<argument><expr><operator>(</operator><name>DIR</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xRead)(void *, void *, jx9_int64); */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>UnixFile_Read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nDatatoRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>nRd</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nRd</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nDatatoRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nRd</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* EOF or IO error */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>nRd</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xWrite)(void *, const void *, jx9_int64); */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>UnixFile_Write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nWrite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pBuffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>nWr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>nWrite</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nWr</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nWr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* IO error */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nWrite</name> <operator>-=</operator> <name>nWr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nCount</name> <operator>+=</operator> <name>nWr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zData</name> <operator>+=</operator> <name>nWr</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>( <expr><name>nWrite</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>nCount</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xSeek)(void *, jx9_int64, int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixFile_Seek</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>iOfft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>off_t</name></type> <name>iNew</name></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>whence</name></expr>)</condition><block>{<block_content>
	<case>case <expr><literal type="number">1</literal></expr>:</case><comment type="block">/*SEEK_CUR*/</comment>
		<expr_stmt><expr><name>whence</name> <operator>=</operator> <name>SEEK_CUR</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* SEEK_END */</comment>
		<expr_stmt><expr><name>whence</name> <operator>=</operator> <name>SEEK_END</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* SEEK_SET */</comment>
	<default>default:</default>
		<expr_stmt><expr><name>whence</name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>iNew</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>iOfft</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iNew</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xLock)(void *, int) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixFile_Lock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>JX9_OK</name></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
	<if_stmt><if>if<condition>( <expr><name>lock_type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Unlock the file */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>LOCK_UN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>lock_type</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Exculsive lock */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>LOCK_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Shared lock */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>LOCK_SH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><ternary><condition><expr><operator>!</operator><name>rc</name></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xTell)(void *) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>UnixFile_Tell</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>off_t</name></type> <name>iNew</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>iNew</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>iNew</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xTrunc)(void *, jx9_int64) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixFile_Trunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nOfft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ftruncate</name><argument_list>(<argument><expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>nOfft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xSync)(void *); */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixFile_Sync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>	
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fsync</name><argument_list>(<argument><expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_OK</name></expr> </then><else>: <expr><operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* int (*xStat)(void *, jx9_value *, jx9_value *) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>UnixFile_Stat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> 
	 <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* dev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"dev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ino */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ino"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mode */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* nlink */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"nlink"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* uid, gid, rdev */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"rdev"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* size */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* atime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"atime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* mtime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* ctime */</comment>
	<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<comment type="block">/* blksize, blocks */</comment>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blksize"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"blocks"</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Export the file:// stream */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_io_stream</name></type> <name>sUnixFileStream</name> <init>= <expr><block>{
	<expr><literal type="string">"file"</literal></expr>, <comment type="block">/* Stream name */</comment>
	<expr><name>JX9_IO_STREAM_VERSION</name></expr>, 
	<expr><name>UnixFile_Open</name></expr>,  <comment type="block">/* xOpen */</comment>
	<expr><name>UnixDir_Open</name></expr>,   <comment type="block">/* xOpenDir */</comment>
	<expr><name>UnixFile_Close</name></expr>, <comment type="block">/* xClose */</comment>
	<expr><name>UnixDir_Close</name></expr>,  <comment type="block">/* xCloseDir */</comment>
	<expr><name>UnixFile_Read</name></expr>,  <comment type="block">/* xRead */</comment>
	<expr><name>UnixDir_Read</name></expr>,   <comment type="block">/* xReadDir */</comment>
	<expr><name>UnixFile_Write</name></expr>, <comment type="block">/* xWrite */</comment>
	<expr><name>UnixFile_Seek</name></expr>,  <comment type="block">/* xSeek */</comment>
	<expr><name>UnixFile_Lock</name></expr>,  <comment type="block">/* xLock */</comment>
	<expr><name>UnixDir_Rewind</name></expr>, <comment type="block">/* xRewindDir */</comment>
	<expr><name>UnixFile_Tell</name></expr>,  <comment type="block">/* xTell */</comment>
	<expr><name>UnixFile_Trunc</name></expr>, <comment type="block">/* xTrunc */</comment>
	<expr><name>UnixFile_Sync</name></expr>,  <comment type="block">/* xSeek */</comment>
	<expr><name>UnixFile_Stat</name></expr>   <comment type="block">/* xStat */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __WINNT__/__UNIXES__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_DISK_IO */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_BUILTIN_FUNC */</comment>
<comment type="block">/* 
 * Export the builtin vfs.
 * Return a pointer to the builtin vfs if available.
 * Otherwise return the null_vfs [i.e: a no-op vfs] instead.
 * Note:
 *  The built-in vfs is always available for Windows/UNIX systems.
 * Note:
 *  If the engine is compiled with the JX9_DISABLE_DISK_IO/JX9_DISABLE_BUILTIN_FUNC
 *  directives defined then this function return the null_vfs instead.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type> <name>jx9ExportBuiltinVfs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JX9_DISABLE_DISK_IO</name></cpp:ifdef>
	<return>return <expr><operator>&amp;</operator><name>null_vfs</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<return>return <expr><operator>&amp;</operator><name>sWinVfs</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><operator>&amp;</operator><name>sUnixVfs</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>&amp;</operator><name>null_vfs</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __WINNT__/__UNIXES__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*JX9_DISABLE_DISK_IO*/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>&amp;</operator><name>null_vfs</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_BUILTIN_FUNC */</comment>
</block_content>}</block></function>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_DISK_IO</name></cpp:ifndef>
<comment type="block">/*
 * The following defines are mostly used by the UNIX built and have
 * no particular meaning on windows.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDIN_FILENO</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDIN_FILENO</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDOUT_FILENO</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDOUT_FILENO</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDERR_FILENO</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDERR_FILENO</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * jx9:// Accessing various I/O streams
 * According to the JX9 langage reference manual
 * JX9 provides a number of miscellaneous I/O streams that allow access to JX9's own input
 * and output streams, the standard input, output and error file descriptors.
 * jx9://stdin, jx9://stdout and jx9://stderr:
 *  Allow direct access to the corresponding input or output stream of the JX9 process.
 *  The stream references a duplicate file descriptor, so if you open jx9://stdin and later
 *  close it, you close only your copy of the descriptor-the actual stream referenced by STDIN is unaffected.
 *  jx9://stdin is read-only, whereas jx9://stdout and jx9://stderr are write-only.
 * jx9://output
 *  jx9://output is a write-only stream that allows you to write to the output buffer 
 *  mechanism in the same way as print and print. 
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>jx9_stream_data</name></name></type> <name>jx9_stream_data</name>;</typedef>
<comment type="block">/* Supported IO streams */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_IO_STREAM_STDIN</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* jx9://stdin */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_IO_STREAM_STDOUT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* jx9://stdout */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_IO_STREAM_STDERR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> <comment type="block">/* jx9://stderr */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_IO_STREAM_OUTPUT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> <comment type="block">/* jx9://output */</comment>
 <comment type="block">/* The following structure is the private data associated with the jx9:// stream */</comment>
<struct>struct <name>jx9_stream_data</name>
<block>{
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt> <comment type="block">/* VM that own this instance */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>iType</name></decl>;</decl_stmt>   <comment type="block">/* Stream type */</comment>
	<union>union<block>{
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt> <comment type="block">/* Stream handle */</comment>
		<decl_stmt><decl><type><name>jx9_output_consumer</name></type> <name>sConsumer</name></decl>;</decl_stmt> <comment type="block">/* VM output consumer */</comment>
	}</block><decl><name>x</name></decl>;</union>
}</block>;</struct>
<comment type="block">/*
 * Allocate a new instance of the jx9_stream_data structure.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_stream_data</name> <modifier>*</modifier></type> <name>JX9StreamDataInit</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_stream_data</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVm</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new instance */</comment>
	<expr_stmt><expr><name>pData</name> <operator>=</operator> <operator>(</operator><name>jx9_stream_data</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_stream_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pData</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_stream_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize fields */</comment>
	<expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>iType</name></name> <operator>=</operator> <name>iType</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iType</name> <operator>==</operator> <name>JX9_IO_STREAM_OUTPUT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Point to the default VM consumer routine. */</comment>
		<expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>sConsumer</name></name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name></name></expr>;</expr_stmt> 
	</block_content>}</block></if><else>else<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>nChannel</name></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name>iType</name></expr>)</condition><block>{<block_content>
		<case>case <expr><name>JX9_IO_STREAM_STDOUT</name></expr>:</case>	<expr_stmt><expr><name>nChannel</name> <operator>=</operator> <name>STD_OUTPUT_HANDLE</name></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name>JX9_IO_STREAM_STDERR</name></expr>:</case>  <expr_stmt><expr><name>nChannel</name> <operator>=</operator> <name>STD_ERROR_HANDLE</name></expr>;</expr_stmt> <break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>nChannel</name> <operator>=</operator> <name>STD_INPUT_HANDLE</name></expr>;</expr_stmt> 
			<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pHandle</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>nChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* Assume an UNIX system */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>ifd</name> <init>= <expr><name>STDIN_FILENO</name></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name>iType</name></expr>)</condition><block>{<block_content>
		<case>case <expr><name>JX9_IO_STREAM_STDOUT</name></expr>:</case>  <expr_stmt><expr><name>ifd</name> <operator>=</operator> <name>STDOUT_FILENO</name></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><name>JX9_IO_STREAM_STDERR</name></expr>:</case>  <expr_stmt><expr><name>ifd</name> <operator>=</operator> <name>STDERR_FILENO</name></expr>;</expr_stmt> <break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pHandle</name></name> <operator>=</operator> <call><name>SX_INT_TO_PTR</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pVm</name></name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<return>return <expr><name>pData</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* 
 * Implementation of the jx9:// IO streams routines
 * Authors:
 *  Symisc Systems, devel@symisc.net.
 *  Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *   Stable.
 */</comment>
<comment type="block">/* int (*xOpen)(const char *, int, jx9_value *, void **) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>JX9StreamData_Open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iMode</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResource</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type> <name>ppHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_stream_data</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sStream</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sStream</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Trim leading and trailing white spaces */</comment>
	<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Stream to open */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>sStream</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"stdin"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"stdin"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iMode</name> <operator>=</operator> <name>JX9_IO_STREAM_STDIN</name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>sStream</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iMode</name> <operator>=</operator> <name>JX9_IO_STREAM_OUTPUT</name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>sStream</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iMode</name> <operator>=</operator> <name>JX9_IO_STREAM_STDOUT</name></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>sStream</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"stderr"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"stderr"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iMode</name> <operator>=</operator> <name>JX9_IO_STREAM_STDERR</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* unknown stream name */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Create our handle */</comment>
	<expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>JX9StreamDataInit</name><argument_list>(<argument><expr><ternary><condition><expr><name>pResource</name></expr>?</condition><then><expr><name><name>pResource</name><operator>-&gt;</operator><name>pVm</name></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>iMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pData</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make the handle public */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppHandle</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xRead)(void *, void *, jx9_int64) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>JX9StreamData_Read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nDatatoRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_stream_data</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>(</operator><name>jx9_stream_data</name> <operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pData</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>iType</name></name> <operator>!=</operator> <name>JX9_IO_STREAM_STDIN</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Forbidden */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>nRd</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ReadFile</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nDatatoRead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* IO error */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>nRd</name></expr>;</return>
	</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>nRd</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nRd</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nDatatoRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nRd</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>nRd</name></expr>;</return>
	</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/* jx9_int64 (*xWrite)(void *, const void *, jx9_int64) */</comment>
<function><type><specifier>static</specifier> <name>jx9_int64</name></type> <name>JX9StreamData_Write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>nWrite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_stream_data</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>(</operator><name>jx9_stream_data</name> <operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pData</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>iType</name></name> <operator>==</operator> <name>JX9_IO_STREAM_STDIN</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Forbidden */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>iType</name></name> <operator>==</operator> <name>JX9_IO_STREAM_OUTPUT</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_output_consumer</name> <modifier>*</modifier></type><name>pCons</name> <init>= <expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>sConsumer</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
		<comment type="block">/* Call the vm output consumer */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCons</name><operator>-&gt;</operator><name>xConsumer</name></name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>nWrite</name></expr></argument>, <argument><expr><name><name>pCons</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>nWrite</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>nWr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WriteFile</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nWrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nWr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* IO error */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>nWr</name></expr>;</return>
	</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>nWr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nWr</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nWr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>nWr</name></expr>;</return>
	</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/* void (*xClose)(void *) */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>JX9StreamData_Close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_stream_data</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>(</operator><name>jx9_stream_data</name> <operator>*</operator><operator>)</operator><name>pHandle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pData</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<comment type="block">/* Free the instance */</comment>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* Export the jx9:// stream */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_io_stream</name></type> <name>sjx9Stream</name> <init>= <expr><block>{
	<expr><literal type="string">"jx9"</literal></expr>, 
	<expr><name>JX9_IO_STREAM_VERSION</name></expr>, 
	<expr><name>JX9StreamData_Open</name></expr>,  <comment type="block">/* xOpen */</comment>
	<expr><literal type="number">0</literal></expr>,   <comment type="block">/* xOpenDir */</comment>
	<expr><name>JX9StreamData_Close</name></expr>, <comment type="block">/* xClose */</comment>
	<expr><literal type="number">0</literal></expr>,  <comment type="block">/* xCloseDir */</comment>
	<expr><name>JX9StreamData_Read</name></expr>,  <comment type="block">/* xRead */</comment>
	<expr><literal type="number">0</literal></expr>,  <comment type="block">/* xReadDir */</comment>
	<expr><name>JX9StreamData_Write</name></expr>, <comment type="block">/* xWrite */</comment>
	<expr><literal type="number">0</literal></expr>,  <comment type="block">/* xSeek */</comment>
	<expr><literal type="number">0</literal></expr>,  <comment type="block">/* xLock */</comment>
	<expr><literal type="number">0</literal></expr>,  <comment type="block">/* xRewindDir */</comment>
	<expr><literal type="number">0</literal></expr>,  <comment type="block">/* xTell */</comment>
	<expr><literal type="number">0</literal></expr>,  <comment type="block">/* xTrunc */</comment>
	<expr><literal type="number">0</literal></expr>,  <comment type="block">/* xSeek */</comment>
	<expr><literal type="number">0</literal></expr>   <comment type="block">/* xStat */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_DISK_IO */</comment>
<comment type="block">/*
 * Return TRUE if we are dealing with the jx9:// stream.
 * FALSE otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_jx9_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_DISK_IO</name></cpp:ifndef>
	<return>return <expr><name>pStream</name> <operator>==</operator> <operator>&amp;</operator><name>sjx9Stream</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_DISK_IO */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_BUILTIN_FUNC */</comment>
<comment type="block">/*
 * Export the IO routines defined above and the built-in IO streams
 * [i.e: file://, jx9://].
 * Note:
 *  If the engine is compiled with the JX9_DISABLE_BUILTIN_FUNC directive
 *  defined then this function is a no-op.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9RegisterIORoutine</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
	      <comment type="block">/* VFS functions */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_builtin_func</name></type> <name><name>aVfsFunc</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"chdir"</literal></expr>,   <expr><name>jx9Vfs_chdir</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"chroot"</literal></expr>,  <expr><name>jx9Vfs_chroot</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"getcwd"</literal></expr>,  <expr><name>jx9Vfs_getcwd</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"rmdir"</literal></expr>,   <expr><name>jx9Vfs_rmdir</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"is_dir"</literal></expr>,  <expr><name>jx9Vfs_is_dir</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"mkdir"</literal></expr>,   <expr><name>jx9Vfs_mkdir</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"rename"</literal></expr>,  <expr><name>jx9Vfs_rename</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"realpath"</literal></expr>, <expr><name>jx9Vfs_realpath</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"sleep"</literal></expr>,   <expr><name>jx9Vfs_sleep</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"usleep"</literal></expr>,  <expr><name>jx9Vfs_usleep</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"unlink"</literal></expr>,  <expr><name>jx9Vfs_unlink</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"delete"</literal></expr>,  <expr><name>jx9Vfs_unlink</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"chmod"</literal></expr>,   <expr><name>jx9Vfs_chmod</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"chown"</literal></expr>,   <expr><name>jx9Vfs_chown</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"chgrp"</literal></expr>,   <expr><name>jx9Vfs_chgrp</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"disk_free_space"</literal></expr>, <expr><name>jx9Vfs_disk_free_space</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"disk_total_space"</literal></expr>, <expr><name>jx9Vfs_disk_total_space</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"file_exists"</literal></expr>, <expr><name>jx9Vfs_file_exists</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"filesize"</literal></expr>,    <expr><name>jx9Vfs_file_size</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fileatime"</literal></expr>,   <expr><name>jx9Vfs_file_atime</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"filemtime"</literal></expr>,   <expr><name>jx9Vfs_file_mtime</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"filectime"</literal></expr>,   <expr><name>jx9Vfs_file_ctime</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"is_file"</literal></expr>,     <expr><name>jx9Vfs_is_file</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"is_link"</literal></expr>,     <expr><name>jx9Vfs_is_link</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"is_readable"</literal></expr>, <expr><name>jx9Vfs_is_readable</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"is_writable"</literal></expr>, <expr><name>jx9Vfs_is_writable</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"is_executable"</literal></expr>, <expr><name>jx9Vfs_is_executable</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"filetype"</literal></expr>,    <expr><name>jx9Vfs_filetype</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"stat"</literal></expr>,        <expr><name>jx9Vfs_stat</name></expr>     }</block></expr>, 
		<expr><block>{<expr><literal type="string">"lstat"</literal></expr>,       <expr><name>jx9Vfs_lstat</name></expr>    }</block></expr>, 
		<expr><block>{<expr><literal type="string">"getenv"</literal></expr>,      <expr><name>jx9Vfs_getenv</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"setenv"</literal></expr>,      <expr><name>jx9Vfs_putenv</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"putenv"</literal></expr>,      <expr><name>jx9Vfs_putenv</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"touch"</literal></expr>,       <expr><name>jx9Vfs_touch</name></expr>    }</block></expr>, 
		<expr><block>{<expr><literal type="string">"link"</literal></expr>,        <expr><name>jx9Vfs_link</name></expr>     }</block></expr>, 
		<expr><block>{<expr><literal type="string">"symlink"</literal></expr>,     <expr><name>jx9Vfs_symlink</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"umask"</literal></expr>,       <expr><name>jx9Vfs_umask</name></expr>    }</block></expr>, 
		<expr><block>{<expr><literal type="string">"sys_get_temp_dir"</literal></expr>, <expr><name>jx9Vfs_sys_get_temp_dir</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"get_current_user"</literal></expr>, <expr><name>jx9Vfs_get_current_user</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"getpid"</literal></expr>,      <expr><name>jx9Vfs_getmypid</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"getuid"</literal></expr>,      <expr><name>jx9Vfs_getmyuid</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"getgid"</literal></expr>,      <expr><name>jx9Vfs_getmygid</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"uname"</literal></expr>,       <expr><name>jx9Vfs_uname</name></expr>}</block></expr>, 
		     <comment type="block">/* Path processing */</comment> 
		<expr><block>{<expr><literal type="string">"dirname"</literal></expr>,     <expr><name>jx9Builtin_dirname</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"basename"</literal></expr>,    <expr><name>jx9Builtin_basename</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"pathinfo"</literal></expr>,    <expr><name>jx9Builtin_pathinfo</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"strglob"</literal></expr>,     <expr><name>jx9Builtin_strglob</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fnmatch"</literal></expr>,     <expr><name>jx9Builtin_fnmatch</name></expr>  }</block></expr>, 
		     <comment type="block">/* ZIP processing */</comment>
		<expr><block>{<expr><literal type="string">"zip_open"</literal></expr>,    <expr><name>jx9Builtin_zip_open</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_close"</literal></expr>,   <expr><name>jx9Builtin_zip_close</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_read"</literal></expr>,    <expr><name>jx9Builtin_zip_read</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_entry_open"</literal></expr>, <expr><name>jx9Builtin_zip_entry_open</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_entry_close"</literal></expr>, <expr><name>jx9Builtin_zip_entry_close</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_entry_name"</literal></expr>, <expr><name>jx9Builtin_zip_entry_name</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_entry_filesize"</literal></expr>,      <expr><name>jx9Builtin_zip_entry_filesize</name></expr>       }</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_entry_compressedsize"</literal></expr>, <expr><name>jx9Builtin_zip_entry_compressedsize</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_entry_read"</literal></expr>, <expr><name>jx9Builtin_zip_entry_read</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_entry_reset_cursor"</literal></expr>, <expr><name>jx9Builtin_zip_entry_reset_cursor</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"zip_entry_compressionmethod"</literal></expr>, <expr><name>jx9Builtin_zip_entry_compressionmethod</name></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>
	    <comment type="block">/* IO stream functions */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_builtin_func</name></type> <name><name>aIOFunc</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"ftruncate"</literal></expr>, <expr><name>jx9Builtin_ftruncate</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fseek"</literal></expr>,     <expr><name>jx9Builtin_fseek</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"ftell"</literal></expr>,     <expr><name>jx9Builtin_ftell</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"rewind"</literal></expr>,    <expr><name>jx9Builtin_rewind</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fflush"</literal></expr>,    <expr><name>jx9Builtin_fflush</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"feof"</literal></expr>,      <expr><name>jx9Builtin_feof</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fgetc"</literal></expr>,     <expr><name>jx9Builtin_fgetc</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fgets"</literal></expr>,     <expr><name>jx9Builtin_fgets</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fread"</literal></expr>,     <expr><name>jx9Builtin_fread</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fgetcsv"</literal></expr>,   <expr><name>jx9Builtin_fgetcsv</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"fgetss"</literal></expr>,    <expr><name>jx9Builtin_fgetss</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"readdir"</literal></expr>,   <expr><name>jx9Builtin_readdir</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"rewinddir"</literal></expr>, <expr><name>jx9Builtin_rewinddir</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"closedir"</literal></expr>,  <expr><name>jx9Builtin_closedir</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"opendir"</literal></expr>,   <expr><name>jx9Builtin_opendir</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"readfile"</literal></expr>,  <expr><name>jx9Builtin_readfile</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"file_get_contents"</literal></expr>, <expr><name>jx9Builtin_file_get_contents</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"file_put_contents"</literal></expr>, <expr><name>jx9Builtin_file_put_contents</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"file"</literal></expr>,      <expr><name>jx9Builtin_file</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"copy"</literal></expr>,      <expr><name>jx9Builtin_copy</name></expr>   }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fstat"</literal></expr>,     <expr><name>jx9Builtin_fstat</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fwrite"</literal></expr>,    <expr><name>jx9Builtin_fwrite</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fputs"</literal></expr>,     <expr><name>jx9Builtin_fwrite</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"flock"</literal></expr>,     <expr><name>jx9Builtin_flock</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fclose"</literal></expr>,    <expr><name>jx9Builtin_fclose</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fopen"</literal></expr>,     <expr><name>jx9Builtin_fopen</name></expr>  }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fpassthru"</literal></expr>, <expr><name>jx9Builtin_fpassthru</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fputcsv"</literal></expr>,   <expr><name>jx9Builtin_fputcsv</name></expr> }</block></expr>, 
		<expr><block>{<expr><literal type="string">"fprintf"</literal></expr>,   <expr><name>jx9Builtin_fprintf</name></expr> }</block></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JX9_DISABLE_HASH_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr><block>{<expr><literal type="string">"md5_file"</literal></expr>,  <expr><name>jx9Builtin_md5_file</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"sha1_file"</literal></expr>, <expr><name>jx9Builtin_sha1_file</name></expr>}</block></expr>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_HASH_FUNC */</comment>
		<expr><block>{<expr><literal type="string">"parse_ini_file"</literal></expr>, <expr><name>jx9Builtin_parse_ini_file</name></expr>}</block></expr>, 
		<expr><block>{<expr><literal type="string">"vfprintf"</literal></expr>,  <expr><name>jx9Builtin_vfprintf</name></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pFileStream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Register the functions defined above */</comment>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SX_ARRAYSIZE</name><argument_list>(<argument><expr><name>aVfsFunc</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_create_function</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name><name>aVfsFunc</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><name><name>aVfsFunc</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>xFunc</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pVm</name><operator>-&gt;</operator><name>pEngine</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SX_ARRAYSIZE</name><argument_list>(<argument><expr><name>aIOFunc</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_create_function</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name><name>aIOFunc</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><name><name>aIOFunc</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>xFunc</name></expr></argument>, <argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_DISK_IO</name></cpp:ifndef>
	<comment type="block">/* Register the file stream if available */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><name>pFileStream</name> <operator>=</operator> <operator>&amp;</operator><name>sWinFileStream</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>pFileStream</name> <operator>=</operator> <operator>&amp;</operator><name>sUnixFileStream</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Install the jx9:// stream */</comment>
	<expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>JX9_VM_CONFIG_IO_STREAM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sjx9Stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_DISK_IO */</comment>
	<if_stmt><if>if<condition>( <expr><name>pFileStream</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Install the file:// stream */</comment>
		<expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>JX9_VM_CONFIG_IO_STREAM</name></expr></argument>, <argument><expr><name>pFileStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
   <expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_BUILTIN_FUNC */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Export the STDIN handle.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9ExportStdin</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_DISK_IO</name></cpp:ifndef>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>pStdin</name></name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pIn</name></decl>;</decl_stmt>
		<comment type="block">/* Allocate an IO private instance */</comment>
		<expr_stmt><expr><name>pIn</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io_private</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pIn</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>InitIOPrivate</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sjx9Stream</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Initialize the handle */</comment>
		<expr_stmt><expr><name><name>pIn</name><operator>-&gt;</operator><name>pHandle</name></name> <operator>=</operator> <call><name>JX9StreamDataInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>JX9_IO_STREAM_STDIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Install the STDIN stream */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pStdin</name></name> <operator>=</operator> <name>pIn</name></expr>;</expr_stmt>
		<return>return <expr><name>pIn</name></expr>;</return>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* NULL or STDIN */</comment>
		<return>return <expr><name><name>pVm</name><operator>-&gt;</operator><name>pStdin</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/*
 * Export the STDOUT handle.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9ExportStdout</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_DISK_IO</name></cpp:ifndef>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>pStdout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pOut</name></decl>;</decl_stmt>
		<comment type="block">/* Allocate an IO private instance */</comment>
		<expr_stmt><expr><name>pOut</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io_private</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pOut</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>InitIOPrivate</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sjx9Stream</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Initialize the handle */</comment>
		<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>pHandle</name></name> <operator>=</operator> <call><name>JX9StreamDataInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>JX9_IO_STREAM_STDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Install the STDOUT stream */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pStdout</name></name> <operator>=</operator> <name>pOut</name></expr>;</expr_stmt>
		<return>return <expr><name>pOut</name></expr>;</return>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* NULL or STDOUT */</comment>
		<return>return <expr><name><name>pVm</name><operator>-&gt;</operator><name>pStdout</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/*
 * Export the STDERR handle.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9ExportStderr</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_DISK_IO</name></cpp:ifndef>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>pStderr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>io_private</name> <modifier>*</modifier></type><name>pErr</name></decl>;</decl_stmt>
		<comment type="block">/* Allocate an IO private instance */</comment>
		<expr_stmt><expr><name>pErr</name> <operator>=</operator> <operator>(</operator><name>io_private</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io_private</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pErr</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>InitIOPrivate</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sjx9Stream</name></expr></argument>, <argument><expr><name>pErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Initialize the handle */</comment>
		<expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>pHandle</name></name> <operator>=</operator> <call><name>JX9StreamDataInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>JX9_IO_STREAM_STDERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Install the STDERR stream */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pStderr</name></name> <operator>=</operator> <name>pErr</name></expr>;</expr_stmt>
		<return>return <expr><name>pErr</name></expr>;</return>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* NULL or STDERR */</comment>
		<return>return <expr><name><name>pVm</name><operator>-&gt;</operator><name>pStderr</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
