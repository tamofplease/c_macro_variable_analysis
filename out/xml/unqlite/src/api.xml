<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/api.c"><comment type="block">/*
 * Symisc unQLite: An Embeddable NoSQL (Post Modern) Database Engine.
 * Copyright (C) 2012-2013, Symisc Systems http://unqlite.org/
 * Version 1.1.6
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://unqlite.org/licensing.html
 */</comment>
 <comment type="block">/* $SymiscID: api.c v2.0 FreeBSD 2012-11-08 23:07 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unqliteInt.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* This file implement the public interfaces presented to host-applications.
 * Routines in other files are for internal use by UnQLite and should not be
 * accessed by users of the library.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_DB_MISUSE</name><parameter_list>(<parameter><type><name>DB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DB == 0 || DB-&gt;nMagic != UNQLITE_DB_MAGIC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_VM_MISUSE</name><parameter_list>(<parameter><type><name>VM</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VM == 0 || VM-&gt;nMagic == JX9_VM_STALE)</cpp:value></cpp:define>
<comment type="block">/* If another thread have released a working instance, the following macros
 * evaluates to true. These macros are only used when the library
 * is built with threading support enabled.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_THRD_DB_RELEASE</name><parameter_list>(<parameter><type><name>DB</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DB-&gt;nMagic != UNQLITE_DB_MAGIC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_THRD_VM_RELEASE</name><parameter_list>(<parameter><type><name>VM</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VM-&gt;nMagic == JX9_VM_STALE)</cpp:value></cpp:define>
<comment type="block">/* IMPLEMENTATION: unqlite@embedded@symisc 118-09-4785 */</comment>
<comment type="block">/*
 * All global variables are collected in the structure named "sUnqlMPGlobal".
 * That way it is clear in the code when we are using static variable because
 * its name start with sUnqlMPGlobal.
 */</comment>
<struct><specifier>static</specifier> struct <name>unqlGlobal_Data</name>
<block>{
	<decl_stmt><decl><type><name>SyMemBackend</name></type> <name>sAllocator</name></decl>;</decl_stmt>                <comment type="block">/* Global low level memory allocator */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SyMutexMethods</name> <modifier>*</modifier></type><name>pMutexMethods</name></decl>;</decl_stmt>   <comment type="block">/* Mutex methods */</comment>
	<decl_stmt><decl><type><name>SyMutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>                       <comment type="block">/* Global mutex */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nThreadingLevel</name></decl>;</decl_stmt>                 <comment type="block">/* Threading level: 0 == Single threaded/1 == Multi-Threaded 
										    * The threading level can be set using the [unqlite_lib_config()]
											* interface with a configuration verb set to
											* UNQLITE_LIB_CONFIG_THREAD_LEVEL_SINGLE or 
											* UNQLITE_LIB_CONFIG_THREAD_LEVEL_MULTI
											*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>SySet</name></type> <name>kv_storage</name></decl>;</decl_stmt>                      <comment type="block">/* Installed KV storage engines */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>iPageSize</name></decl>;</decl_stmt>                         <comment type="block">/* Default Page size */</comment>
	<decl_stmt><decl><type><name>unqlite_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>                     <comment type="block">/* Underlying virtual file system (Vfs) */</comment>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nDB</name></decl>;</decl_stmt>                             <comment type="block">/* Total number of active DB handles */</comment>
	<decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDB</name></decl>;</decl_stmt>                          <comment type="block">/* List of active DB handles */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nMagic</name></decl>;</decl_stmt>                          <comment type="block">/* Sanity check against library misuse */</comment>
}</block><decl><name>sUnqlMPGlobal</name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><name>UNQLITE_DEFAULT_PAGE_SIZE</name></expr>,
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_LIB_MAGIC</name></cpp:macro>  <cpp:value>0xEA1495BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_LIB_MISUSE</name></cpp:macro> <cpp:value>(sUnqlMPGlobal.nMagic != UNQLITE_LIB_MAGIC)</cpp:value></cpp:define>
<comment type="block">/*
 * Supported threading level.
 * These options have meaning only when the library is compiled with multi-threading
 * support. That is, the UNQLITE_ENABLE_THREADS compile time directive must be defined
 * when UnQLite is built.
 * UNQLITE_THREAD_LEVEL_SINGLE:
 *  In this mode, mutexing is disabled and the library can only be used by a single thread.
 * UNQLITE_THREAD_LEVEL_MULTI
 *  In this mode, all mutexes including the recursive mutexes on [unqlite] objects
 *  are enabled so that the application is free to share the same database handle
 *  between different threads at the same time.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_THREAD_LEVEL_SINGLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_THREAD_LEVEL_MULTI</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>
<comment type="block">/*
 * Find a Key Value storage engine from the set of installed engines.
 * Return a pointer to the storage engine methods on success. NULL on failure.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>unqlite_kv_methods</name> <modifier>*</modifier></type> <name>unqliteFindKVStore</name><parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <comment type="block">/* Storage engine name [i.e. Hash, B+tree, LSM, etc.] */</comment>
	<parameter><decl><type><name>sxu32</name></type> <name>nByte</name></decl></parameter> <comment type="block">/* zName length */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_methods</name> <modifier>*</modifier><modifier>*</modifier></type><name>apStore</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>nMax</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the set of installed engines */</comment>
	<expr_stmt><expr><name>apStore</name> <operator>=</operator> <operator>(</operator><name>unqlite_kv_methods</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>kv_storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nMax</name> <operator>=</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>kv_storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nMax</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>apStore</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>==</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Storage engine found */</comment>
			<return>return <expr><name>pEntry</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* No such entry, return NULL */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Configure the UnQLite library.
 * Return UNQLITE_OK on success. Any other return value indicates failure.
 * Refer to [unqlite_lib_config()].
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>unqliteCoreConfigure</name><parameter_list>(<parameter><decl><type><name>sxi32</name></type> <name>nOp</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>nOp</name></expr>)</condition><block>{<block_content>
	    <case>case <expr><name>UNQLITE_LIB_CONFIG_PAGE_SIZE</name></expr>:</case> <block>{<block_content>
			<comment type="block">/* Default page size: Must be a power of two */</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>iPage</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>iPage</name> <operator>&gt;=</operator> <name>UNQLITE_MIN_PAGE_SIZE</name> <operator>&amp;&amp;</operator> <name>iPage</name> <operator>&lt;=</operator> <name>UNQLITE_MAX_PAGE_SIZE</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>iPage</name> <operator>&amp;</operator> <operator>(</operator><name>iPage</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>iPageSize</name></name> <operator>=</operator> <name>iPage</name></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<comment type="block">/* Invalid page size */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_INVALID</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Invalid page size */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_INVALID</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
										   </block_content>}</block>
	    <case>case <expr><name>UNQLITE_LIB_CONFIG_STORAGE_ENGINE</name></expr>:</case> <block>{<block_content>
			<comment type="block">/* Install a key value storage engine */</comment>
			<decl_stmt><decl><type><name>unqlite_kv_methods</name> <modifier>*</modifier></type><name>pMethods</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>unqlite_kv_methods</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Make sure we are delaing with a valid methods */</comment>
			<if_stmt><if>if<condition>( <expr><name>pMethods</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>SX_EMPTY_STR</name><argument_list>(<argument><expr><name><name>pMethods</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xSeek</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xData</name></name> <operator>==</operator> <literal type="number">0</literal>
				<operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xKey</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xDataLength</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xKeyLength</name></name> <operator>==</operator> <literal type="number">0</literal> 
				<operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>szKv</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>unqlite_kv_engine</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_INVALID</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Install it */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>kv_storage</name></name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
												</block_content>}</block>
	    <case>case <expr><name>UNQLITE_LIB_CONFIG_VFS</name></expr>:</case><block>{<block_content>
			<comment type="block">/* Install a virtual file system */</comment>
			<decl_stmt><decl><type><name>unqlite_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>unqlite_vfs</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>pVfs</name></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pVfs</name></name> <operator>=</operator> <name>pVfs</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
								</block_content>}</block>
		<case>case <expr><name>UNQLITE_LIB_CONFIG_USER_MALLOC</name></expr>:</case> <block>{<block_content>
			<comment type="block">/* Use an alternative low-level memory allocation routines */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>SyMemMethods</name> <modifier>*</modifier></type><name>pMethods</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SyMemMethods</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Save the memory failure callback (if available) */</comment>
			<decl_stmt><decl><type><name>ProcMemError</name></type> <name>xMemErr</name> <init>= <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>xMemError</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pMemErr</name> <init>= <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>pUserData</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>pMethods</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Use the built-in memory allocation subsystem */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyMemBackendInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>xMemErr</name></expr></argument>, <argument><expr><name>pMemErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyMemBackendInitFromOthers</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pMethods</name></expr></argument>, <argument><expr><name>xMemErr</name></expr></argument>, <argument><expr><name>pMemErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
										  </block_content>}</block>
		<case>case <expr><name>UNQLITE_LIB_CONFIG_MEM_ERR_CALLBACK</name></expr>:</case> <block>{<block_content>
			<comment type="block">/* Memory failure callback */</comment>
			<decl_stmt><decl><type><name>ProcMemError</name></type> <name>xMemErr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ProcMemError</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>xMemError</name></name> <operator>=</operator> <name>xMemErr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
			<break>break;</break>
												 </block_content>}</block>	  
		<case>case <expr><name>UNQLITE_LIB_CONFIG_USER_MUTEX</name></expr>:</case> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Use an alternative low-level mutex subsystem */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>SyMutexMethods</name> <modifier>*</modifier></type><name>pMethods</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SyMutexMethods</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>UNTRUST</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<if_stmt><if>if<condition>( <expr><name>pMethods</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_CORRUPT</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* Sanity check */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pMethods</name><operator>-&gt;</operator><name>xEnter</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xLeave</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xNew</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
				<comment type="block">/* At least three criticial callbacks xEnter(), xLeave() and xNew() must be supplied */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_CORRUPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Overwrite the previous mutex subsystem */</comment>
				<expr_stmt><expr><call><name>SyMutexRelease</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Initialize and install the new mutex subsystem */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pMethods</name><operator>-&gt;</operator><name>xGlobalInit</name></name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xGlobalInit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Create the global mutex */</comment>
			<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xNew</name></name><argument_list>(<argument><expr><name>SXMUTEX_TYPE_FAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/*
				 * If the supplied mutex subsystem is so sick that we are unable to
				 * create a single mutex, there is no much we can do here.
				 */</comment>
				<if_stmt><if>if<condition>( <expr><name><name>pMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name><name>pMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_CORRUPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name> <operator>=</operator> <name>pMethods</name></expr>;</expr_stmt>			
			<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Set a default threading level */</comment>
				<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>=</operator> <name>UNQLITE_THREAD_LEVEL_MULTI</name></expr>;</expr_stmt> 
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
										   </block_content>}</block>
		<case>case <expr><name>UNQLITE_LIB_CONFIG_THREAD_LEVEL_SINGLE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Single thread mode (Only one thread is allowed to play with the library) */</comment>
			<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>=</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_lib_config</name><argument_list>(<argument><expr><name>JX9_LIB_CONFIG_THREAD_LEVEL_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<case>case <expr><name>UNQLITE_LIB_CONFIG_THREAD_LEVEL_MULTI</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Multi-threading mode (library is thread safe and database handles and virtual machines
			 * may be shared between multiple threads).
			 */</comment>
			<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>=</operator> <name>UNQLITE_THREAD_LEVEL_MULTI</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_lib_config</name><argument_list>(<argument><expr><name>JX9_LIB_CONFIG_THREAD_LEVEL_MULTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* Unknown configuration option */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_lib_config()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_lib_config</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nConfigOp</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>==</operator> <name>UNQLITE_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Library is already initialized, this operation is forbidden */</comment>
		<return>return <expr><name>UNQLITE_LOCKED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>nConfigOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCoreConfigure</name><argument_list>(<argument><expr><name>nConfigOp</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Global library initialization
 * Refer to [unqlite_lib_init()]
 * This routine must be called to initialize the memory allocation subsystem, the mutex 
 * subsystem prior to doing any serious work with the library. The first thread to call
 * this routine does the initialization process and set the magic number so no body later
 * can re-initialize the library. If subsequent threads call this  routine before the first
 * thread have finished the initialization process, then the subsequent threads must block 
 * until the initialization process is done.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>unqliteCoreInitialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unqlite_kv_methods</name> <modifier>*</modifier></type><name>pMethods</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unqlite_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt> <comment type="block">/* Built-in vfs */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SyMutexMethods</name> <modifier>*</modifier></type><name>pMutexMethods</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyMutex</name> <modifier>*</modifier></type><name>pMaster</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/*
	 * If the library is already initialized, then a call to this routine
	 * is a no-op.
	 */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>==</operator> <name>UNQLITE_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_OK</name></expr>;</return> <comment type="block">/* Already initialized */</comment>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pVfs</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>  <comment type="block">/* Allow setting your own vfs */</comment>
		<comment type="block">/* Point to the built-in vfs */</comment>
		<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <call><name>unqliteExportBuiltinVfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Install it */</comment>
		<expr_stmt><expr><call><name>unqlite_lib_config</name><argument_list>(<argument><expr><name>UNQLITE_LIB_CONFIG_VFS</name></expr></argument>, <argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>!=</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pMutexMethods</name> <operator>=</operator> <name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pMutexMethods</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Use the built-in mutex subsystem */</comment>
			<expr_stmt><expr><name>pMutexMethods</name> <operator>=</operator> <call><name>SyMutexExportMethods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pMutexMethods</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return> <comment type="block">/* Can't happen */</comment>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Install the mutex subsystem */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_lib_config</name><argument_list>(<argument><expr><name>UNQLITE_LIB_CONFIG_USER_MUTEX</name></expr></argument>, <argument><expr><name>pMutexMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>rc</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Obtain a static mutex so we can initialize the library without calling malloc() */</comment>
		<expr_stmt><expr><name>pMaster</name> <operator>=</operator> <call><name>SyMutexNew</name><argument_list>(<argument><expr><name>pMutexMethods</name></expr></argument>, <argument><expr><name>SXMUTEX_TYPE_STATIC_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pMaster</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return> <comment type="block">/* Can't happen */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Lock the master mutex */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name>pMutexMethods</name></expr></argument>, <argument><expr><name>pMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel == UNQLITE_THREAD_LEVEL_SINGLE */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>!=</operator> <name>UNQLITE_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>pMethods</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Install a memory subsystem */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_lib_config</name><argument_list>(<argument><expr><name>UNQLITE_LIB_CONFIG_USER_MALLOC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* zero mean use the built-in memory backend */</comment>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* If we are unable to initialize the memory backend, there is no much we can do here.*/</comment>
				<goto>goto <name>End</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Protect the memory allocation subsystem */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyMemBackendMakeThreadSafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
				<goto>goto <name>End</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>kv_storage</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unqlite_kv_methods</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Install the built-in Key Value storage engines */</comment>
		<expr_stmt><expr><name>pMethods</name> <operator>=</operator> <call><name>unqliteExportMemKvStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* In-memory storage */</comment>
		<expr_stmt><expr><call><name>unqlite_lib_config</name><argument_list>(<argument><expr><name>UNQLITE_LIB_CONFIG_STORAGE_ENGINE</name></expr></argument>,<argument><expr><name>pMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Default disk key/value storage engine */</comment>
		<expr_stmt><expr><name>pMethods</name> <operator>=</operator> <call><name>unqliteExportDiskKvStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Disk storage */</comment>
		<expr_stmt><expr><call><name>unqlite_lib_config</name><argument_list>(<argument><expr><name>UNQLITE_LIB_CONFIG_STORAGE_ENGINE</name></expr></argument>,<argument><expr><name>pMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Default page size */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>iPageSize</name></name> <operator>&lt;</operator> <name>UNQLITE_MIN_PAGE_SIZE</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>unqlite_lib_config</name><argument_list>(<argument><expr><name>UNQLITE_LIB_CONFIG_PAGE_SIZE</name></expr></argument>,<argument><expr><name>UNQLITE_DEFAULT_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Our library is initialized, set the magic number */</comment>
		<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>=</operator> <name>UNQLITE_LIB_MAGIC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_OK</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	</block_content>}</block></if></if_stmt> <comment type="block">/* sUnqlMPGlobal.nMagic != UNQLITE_LIB_MAGIC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>End</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Unlock the master mutex */</comment>
	<expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name>pMutexMethods</name></expr></argument>, <argument><expr><name>pMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel == UNQLITE_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>unqliteVmRelease</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Release a single instance of an unqlite database handle.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteDbRelease</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_db</name> <modifier>*</modifier></type><name>pStore</name> <init>= <expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pDb</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>UNQLITE_FL_DISABLE_AUTO_COMMIT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Commit any outstanding transaction */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerCommit</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Rollback the transaction */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerRollback</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Rollback any outstanding transaction */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerRollback</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Close the pager */</comment>
	<expr_stmt><expr><call><name>unqlitePagerClose</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release any active VM's */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pVms</name></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>iVm</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unqliteVmRelease</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>iVm</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Release the Jx9 handle */</comment>
	<expr_stmt><expr><call><name>jx9_release</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pJx9</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set a dummy magic number */</comment>
	<expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <literal type="number">0x7250</literal></expr>;</expr_stmt>
	<comment type="block">/* Release the whole memory subsystem */</comment>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Commit or rollback result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release all resources consumed by the library.
 * Note: This call is not thread safe. Refer to [unqlite_lib_shutdown()].
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>unqliteCoreShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
	<comment type="block">/* Release all active databases handles */</comment>
	<expr_stmt><expr><name>pDb</name> <operator>=</operator> <name><name>sUnqlMPGlobal</name><operator>.</operator><name>pDB</name></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nDB</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unqliteDbRelease</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name>pDb</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nDB</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Release the storage methods container */</comment>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>kv_storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Release the mutex subsystem */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SyMutexRelease</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Release the memory backend */</comment>
		<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>=</operator> <literal type="number">0x1764</literal></expr>;</expr_stmt>
	<comment type="block">/* Finally, shutdown the Jx9 library */</comment>
	<expr_stmt><expr><call><name>jx9_lib_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_lib_init()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_lib_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCoreInitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_lib_shutdown()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_lib_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>!=</operator> <name>UNQLITE_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Already shut */</comment>
		<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>unqliteCoreShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_lib_is_threadsafe()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_lib_is_threadsafe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>!=</operator> <name>UNQLITE_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Muli-threading support is enabled */</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Single-threading */</comment>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/*
 *
 * [CAPIREF: unqlite_lib_version()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>unqlite_lib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>UNQLITE_VERSION</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 *
 * [CAPIREF: unqlite_lib_signature()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>unqlite_lib_signature</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>UNQLITE_SIG</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 *
 * [CAPIREF: unqlite_lib_ident()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>unqlite_lib_ident</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>UNQLITE_IDENT</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 *
 * [CAPIREF: unqlite_lib_copyright()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>unqlite_lib_copyright</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>UNQLITE_COPYRIGHT</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Remove harmfull and/or stale flags passed to the [unqlite_open()] interface.
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>unqliteSanityzeFlag</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>iFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>UNQLITE_OPEN_EXCLUSIVE</name></expr>;</expr_stmt> <comment type="block">/* Reserved flag */</comment>
	<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>UNQLITE_OPEN_TEMP_DB</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Omit journaling for temporary database */</comment>
		<expr_stmt><expr><name>iFlags</name> <operator>|=</operator> <name>UNQLITE_OPEN_OMIT_JOURNALING</name><operator>|</operator><name>UNQLITE_OPEN_CREATE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name>iFlags</name> <operator>&amp;</operator> <operator>(</operator><name>UNQLITE_OPEN_READONLY</name><operator>|</operator><name>UNQLITE_OPEN_READWRITE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Auto-append the R+W flag */</comment>
		<expr_stmt><expr><name>iFlags</name> <operator>|=</operator> <name>UNQLITE_OPEN_READWRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>UNQLITE_OPEN_CREATE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iFlags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>UNQLITE_OPEN_MMAP</name><operator>|</operator><name>UNQLITE_OPEN_READONLY</name><operator>)</operator></expr>;</expr_stmt>
		<comment type="block">/* Auto-append the R+W flag */</comment>
		<expr_stmt><expr><name>iFlags</name> <operator>|=</operator> <name>UNQLITE_OPEN_READWRITE</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>UNQLITE_OPEN_READONLY</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>UNQLITE_OPEN_READWRITE</name></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>UNQLITE_OPEN_READWRITE</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>UNQLITE_OPEN_MMAP</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>iFlags</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * This routine does the work of initializing a database handle on behalf
 * of [unqlite_open()].
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteInitDatabase</name><parameter_list>(
	<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDB</name></decl></parameter>,            <comment type="block">/* Database handle */</comment>
	<parameter><decl><type><name>SyMemBackend</name> <modifier>*</modifier></type><name>pParent</name></decl></parameter>,   <comment type="block">/* Master memory backend */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>,   <comment type="block">/* Target database */</comment>
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iFlags</name></decl></parameter>      <comment type="block">/* Open flags */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_db</name> <modifier>*</modifier></type><name>pStorage</name> <init>= <expr><operator>&amp;</operator><name><name>pDB</name><operator>-&gt;</operator><name>sDB</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Initialiaze the memory subsystem */</comment>
	<expr_stmt><expr><call><name>SyMemBackendInitFromParent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDB</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>,<argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//#if defined(UNQLITE_ENABLE_THREADS)</comment>
<comment type="line">//	/* No need for internal mutexes */</comment>
<comment type="line">//	SyMemBackendDisbaleMutexing(&amp;pDB-&gt;sMem);</comment>
<comment type="line">//#endif</comment>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDB</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pDB</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Sanityze flags */</comment>
	<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <call><name>unqliteSanityzeFlag</name><argument_list>(<argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Init the pager and the transaction manager */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerOpen</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pVfs</name></name></expr></argument>,<argument><expr><name>pDB</name></expr></argument>,<argument><expr><name>zFilename</name></expr></argument>,<argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new Jx9 engine handle */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStorage</name><operator>-&gt;</operator><name>pJx9</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Allocate and initialize a new UnQLite Virtual Mahcine and attach it
 * to the compiled Jx9 script.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteInitVm</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pJx9Vm</name></decl></parameter>,<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Allocate a new VM instance */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unqlite_vm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVm</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unqlite_vm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize */</comment>
	<expr_stmt><expr><call><name>SyMemBackendInitFromParent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Allocate a new collection table */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>apCol</name></name> <operator>=</operator> <operator>(</operator><name>unqlite_col</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>,<argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unqlite_col</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>apCol</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<goto>goto <name>fail</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>iColSize</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <comment type="block">/* Must be a power of two */</comment>
	<comment type="block">/* Zero the table */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pVm</name><operator>-&gt;</operator><name>apCol</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>iColSize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unqlite_col</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Associate a recursive mutex with this instance */</comment>
		 <expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>=</operator> <call><name>SyMutexNew</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name>SXMUTEX_TYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <goto>goto <name>fail</name>;</goto>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Link the VM to the list of active virtual machines */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name> <operator>=</operator> <name>pJx9Vm</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pDb</name></name> <operator>=</operator> <name>pDb</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MACRO_LD_PUSH</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pVms</name></name></expr></argument>,<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>iVm</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Register Jx9 functions */</comment>
	<expr_stmt><expr><call><name>unqliteRegisterJx9Functions</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the magic number */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>JX9_VM_INIT</name></expr>;</expr_stmt> <comment type="block">/* Same magic number as Jx9 */</comment>
	<comment type="block">/* All done */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
<label><name>fail</name>:</label>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>,<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release an active VM.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteVmRelease</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Release the Jx9 VM */</comment>
	<expr_stmt><expr><call><name>jx9_vm_release</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the private memory backend */</comment>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Upper layer will discard this VM from the list
	 * of active VM.
	 */</comment>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return the default page size.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteGetPageSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>iSize</name> <init>=  <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>iPageSize</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>iSize</name> <argument_list type="generic">&lt; <argument><expr><name>UNQLITE_MIN_PAGE_SIZE</name> <operator>||</operator> <name>iSize</name></expr></argument> &gt;</argument_list></name> <name>UNQLITE_MAX_PAGE_SIZE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>iSize</name> <operator>=</operator> <name>UNQLITE_DEFAULT_PAGE_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>iSize</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Generate an error message.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteGenError</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Append the error message */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zErr</name></expr></argument>,<argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Append a new line */</comment>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Generate an error message (Printf like).
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteGenErrorFormat</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>,<argument><expr><name>zFmt</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Append a new line */</comment>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Generate an error message (Out of memory).
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteGenOutofMem</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"unQLite is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Configure a working UnQLite database handle.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteConfigure</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nOp</name></decl></parameter>,<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>nOp</name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>UNQLITE_CONFIG_JX9_ERR_LOG</name></expr>:</case>
		<comment type="block">/* Jx9 compile-time error log */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9EngineConfig</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pJx9</name></name></expr></argument>,<argument><expr><name>JX9_CONFIG_ERR_LOG</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>UNQLITE_CONFIG_MAX_PAGE_CACHE</name></expr>:</case> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>max_page</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Maximum number of page to cache (Simple hint). */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerSetCachesize</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>,<argument><expr><name>max_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
										</block_content>}</block>
	<case>case <expr><name>UNQLITE_CONFIG_ERR_LOG</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Database error log if any */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzPtr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pLen</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>pzPtr</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* NULL terminate the error-log buffer */</comment>
		<expr_stmt><expr><call><name>SyBlobNullAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Point to the error-log buffer */</comment>
		<expr_stmt><expr><operator>*</operator><name>pzPtr</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pLen</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> <comment type="block">/* NULL '\0' terminator */</comment> )</condition><block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
								 </block_content>}</block>
	<case>case <expr><name>UNQLITE_CONFIG_DISABLE_AUTO_COMMIT</name></expr>:</case><block>{<block_content>
		<comment type="block">/* Disable auto-commit */</comment>
		<expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>|=</operator> <name>UNQLITE_FL_DISABLE_AUTO_COMMIT</name></expr>;</expr_stmt>
		<break>break;</break>
											</block_content>}</block>
	<case>case <expr><name>UNQLITE_CONFIG_GET_KV_NAME</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Name of the underlying KV storage engine */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzPtr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>pzPtr</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Point to the name */</comment>
			<expr_stmt><expr><operator>*</operator><name>pzPtr</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
									 </block_content>}</block>
	<default>default:</default>
		<comment type="block">/* Unknown configuration option */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_UNKNOWN</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Export the global (master) memory allocator to submodules.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <specifier>const</specifier> <name>SyMemBackend</name> <modifier>*</modifier></type> <name>unqliteExportMemBackend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_open()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_open</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDB</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNTRUST</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if<condition>( <expr><name>ppDB</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><operator>*</operator><name>ppDB</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* One-time automatic library initialization */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCoreInitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new database handle */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <operator>(</operator><name>unqlite</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unqlite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unqlite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iMode</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Assume a read-only database */</comment>
		<expr_stmt><expr><name>iMode</name> <operator>=</operator> <name>UNQLITE_OPEN_READONLY</name><operator>|</operator><name>UNQLITE_OPEN_MMAP</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Init the database */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteInitDatabase</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>,<argument><expr><name>zFilename</name></expr></argument>,<argument><expr><name>iMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Release</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>iMode</name> <operator>&amp;</operator> <name>UNQLITE_OPEN_NOMUTEX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name><operator>)</operator></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Associate a recursive mutex with this instance */</comment>
		 <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>=</operator> <call><name>SyMutexNew</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name>SXMUTEX_TYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name><name>pHandle</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOMEM</name></expr>;</expr_stmt>
			 <goto>goto <name>Release</name>;</goto>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Link to the list of active DB handles */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Enter the global mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel == UNQLITE_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <expr_stmt><expr><call><name>MACRO_LD_PUSH</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pDB</name></name></expr></argument>,<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nDB</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Leave the global mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel == UNQLITE_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Set the magic number to identify a valid DB handle */</comment>
	 <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>UNQLITE_DB_MAGIC</name></expr>;</expr_stmt>
	<comment type="block">/* Make the handle available to the caller */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppDB</name> <operator>=</operator> <name>pHandle</name></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
<label><name>Release</name>:</label>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>,<argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_config()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_config</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nConfigOp</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>nConfigOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteConfigure</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pDb</name><operator>)</operator></expr></argument>,<argument><expr><name>nConfigOp</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_close()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_close</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Release the database handle */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteDbRelease</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <comment type="block">/* Release DB mutex */</comment>
	 <macro><name>SyMutexRelease</name><argument_list>(<argument>sUnqlMPGlobal.pMutexMethods</argument>, <argument>pDb-&gt;pMutex</argument>)</argument_list></macro> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Enter the global mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel == UNQLITE_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Unlink from the list of active database handles */</comment>
	 <expr_stmt><expr><call><name>MACRO_LD_REMOVE</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pDB</name></name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nDB</name></name><operator>--</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Leave the global mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel == UNQLITE_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Release the memory chunk allocated to this handle */</comment>
	<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUnqlMPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>,<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_compile()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_compile</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zJx9</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>,<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ppOut</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Compile the Jx9 script first */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_compile</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pJx9</name></name></expr></argument>,<argument><expr><name>zJx9</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Allocate a new unqlite VM instance */</comment>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteInitVm</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><name>pVm</name></expr></argument>,<argument><expr><name>ppOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Release the Jx9 VM */</comment>
			 <expr_stmt><expr><call><name>jx9_vm_release</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_compile_file()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_compile_file</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>,<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ppOut</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Compile the Jx9 script first */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_compile_file</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pJx9</name></name></expr></argument>,<argument><expr><name>zPath</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Allocate a new unqlite VM instance */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteInitVm</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><name>pVm</name></expr></argument>,<argument><expr><name>ppOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Release the Jx9 VM */</comment>
			<expr_stmt><expr><call><name>jx9_vm_release</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Configure an unqlite virtual machine (Mostly Jx9 VM) instance.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteVmConfig</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iOp</name></decl></parameter>,<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmConfigure</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><name>iOp</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_config()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_vm_config</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iOp</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>iOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteVmConfig</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><name>iOp</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_exec()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_vm_exec</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Execute the Jx9 bytecode program */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmByteCodeExec</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_release()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_vm_release</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Release the VM */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteVmRelease</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <comment type="block">/* Release VM mutex */</comment>
	 <macro><name>SyMutexRelease</name><argument_list>(<argument>sUnqlMPGlobal.pMutexMethods</argument>,<argument>pVm-&gt;pMutex</argument>)</argument_list></macro> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		 <decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>pVm</name><operator>-&gt;</operator><name>pDb</name></name></expr></init></decl>;</decl_stmt>
		 <comment type="block">/* Unlink from the list of active VM's */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Acquire DB mutex */</comment>
			<expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
				<call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
					<return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>MACRO_LD_REMOVE</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pVms</name></name></expr></argument>, <argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>iVm</name></name><operator>--</operator></expr>;</expr_stmt>
		<comment type="block">/* Release the memory chunk allocated to this instance */</comment>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>,<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Leave DB mutex */</comment>
			<expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 </block_content>}</block></if></if_stmt>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_reset()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_vm_reset</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Reset the Jx9 VM */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmReset</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_dump()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_vm_dump</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xConsumer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Dump the Jx9 VM */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmDump</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><name>xConsumer</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_extract_variable()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unqlite_value</name> <modifier>*</modifier></type> <name>unqlite_vm_extract_variable</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVarname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sVariable</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Extract the target variable */</comment>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sVariable</name></expr></argument>,<argument><expr><name>zVarname</name></expr></argument>,<argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zVarname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9VmExtractVariable</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sVariable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>pValue</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_create_function()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_create_function</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xFunc</name>)<parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Remove leading and trailing white spaces */</comment>
	<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Ticket 1433-003: NULL values are not allowed */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>sName</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>xFunc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Install the foreign function */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmInstallForeignFunction</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>xFunc</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_delete_function()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_delete_function</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Unlink the foreign function */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9DeleteFunction</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_create_constant()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_create_constant</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xExpand</name>)<parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Remove leading and trailing white spaces */</comment>
	<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sName</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty constant name */</comment>
		<return>return <expr><name>UNQLITE_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* TICKET 1433-003: NULL pointer is harmless operation */</comment>
	<if_stmt><if>if<condition>( <expr><name>xExpand</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Install the foreign constant */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmRegisterConstant</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>xExpand</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_delete_constant()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_delete_constant</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Unlink the foreign constant */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Jx9DeleteConstant</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_int()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_int</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>,<argument><expr><name>iValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_int64()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_int64</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name></type> <name>iValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>,<argument><expr><name>iValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_bool()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_bool</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iBool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_bool</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>,<argument><expr><name>iBool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_null()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_null</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_null</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_double()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_double</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_double</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>,<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_string</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>,<argument><expr><name>zString</name></expr></argument>,<argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_string_format()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_string_format</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>MEMOBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_reset_string_cursor()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_reset_string_cursor</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_resource()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_resource</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_resource</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_release()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_release</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_release</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_to_int()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_to_int</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_to_bool()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_to_bool</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_to_int64()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unqlite_int64</name></type> <name>unqlite_value_to_int64</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_to_double()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>double</name></type> <name>unqlite_value_to_double</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_to_double</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_to_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>unqlite_value_to_string</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>,<argument><expr><name>pLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_to_resource()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type> <name>unqlite_value_to_resource</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_to_resource</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_compare()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_compare</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pLeft</name></decl></parameter>, <parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pRight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bStrict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_compare</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>,<argument><expr><name>pRight</name></expr></argument>,<argument><expr><name>bStrict</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_int()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_int</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>iValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_int64()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_int64</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>unqlite_int64</name></type> <name>iValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>iValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_bool()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_bool</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iBool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>iBool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_double()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_double</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_result_double</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_null()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_null</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_string</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>zString</name></expr></argument>,<argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_string_format()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_string_format</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>MEMOBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Format the given string */</comment>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_value()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_value</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_result_resource()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_result_resource</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_result_resource</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_int()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_int</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_int</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_float()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_float</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_float</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_bool()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_bool</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_bool</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_string</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_null()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_null</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_null</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_numeric()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_numeric</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_numeric</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_callable()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_callable</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_callable</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_scalar()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_scalar</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_scalar</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_json_array()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_json_array</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_json_array</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_json_object()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_json_object</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_json_object</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_resource()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_resource</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_value_is_empty()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_value_is_empty</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_is_empty</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_array_fetch()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unqlite_value</name> <modifier>*</modifier></type> <name>unqlite_array_fetch</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_array_fetch</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>,<argument><expr><name>zKey</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_array_walk()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_array_walk</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xWalk</name>)<parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_array_walk</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>,<argument><expr><name>xWalk</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_array_add_elem()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_array_add_elem</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_array_add_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_array_add_strkey_elem()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_array_add_strkey_elem</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>,<argument><expr><name>zKey</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_array_count()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_array_count</name><parameter_list>(<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>jx9_array_count</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_new_scalar()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unqlite_value</name> <modifier>*</modifier></type> <name>unqlite_vm_new_scalar</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_new_scalar</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>pValue</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_new_array()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unqlite_value</name> <modifier>*</modifier></type> <name>unqlite_vm_new_array</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_new_array</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>pValue</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_vm_release_value()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_vm_release_value</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_release_value</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_output()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_context_output</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_output</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>zString</name></expr></argument>,<argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_output_format()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_context_output_format</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmOutputConsumeAp</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_throw_error()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_context_throw_error</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>iErr</name></expr></argument>,<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_throw_error_format()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_context_throw_error_format</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>zFormat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmThrowErrorAp</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>, <argument><expr><name>iErr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_random_num()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>unqlite_context_random_num</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_random_num</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_random_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_context_random_string</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_random_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><name>nBuflen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_user_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type> <name>unqlite_context_user_data</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_push_aux_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_context_push_aux_data</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_push_aux_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_peek_aux_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type> <name>unqlite_context_peek_aux_data</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_peek_aux_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_pop_aux_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type> <name>unqlite_context_pop_aux_data</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_pop_aux_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_result_buf_length()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>unqlite_context_result_buf_length</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_result_buf_length</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_function_name()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>unqlite_function_name</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_function_name</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_new_scalar()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unqlite_value</name> <modifier>*</modifier></type> <name>unqlite_context_new_scalar</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_new_array()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>unqlite_value</name> <modifier>*</modifier></type> <name>unqlite_context_new_array</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_release_value()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>void</name></type> <name>unqlite_context_release_value</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>unqlite_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>jx9_context_release_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_alloc_chunk()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type> <name>unqlite_context_alloc_chunk</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nByte</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ZeroChunk</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>AutoRelease</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_alloc_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>,<argument><expr><name>ZeroChunk</name></expr></argument>,<argument><expr><name>AutoRelease</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_realloc_chunk()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type> <name>unqlite_context_realloc_chunk</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_context_realloc_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pChunk</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_context_free_chunk()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>void</name></type> <name>unqlite_context_free_chunk</name><parameter_list>(<parameter><decl><type><name>unqlite_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>jx9_context_free_chunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_store()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_store</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name></type> <name>nDataLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Point to the underlying storage engine */</comment>
	 <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xReplace</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Storage engine does not implement such method */</comment>
		 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"xReplace() method not implemented in the underlying storage engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>nKeyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Assume a null terminated string and compute it's length */</comment>
			 <expr_stmt><expr><name>nKeyLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <if_stmt><if>if<condition>( <expr><operator>!</operator><name>nKeyLen</name></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"Empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_EMPTY</name></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <comment type="block">/* Perform the requested operation */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xReplace</name></name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,<argument><expr><name>pData</name></expr></argument>,<argument><expr><name>nDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></else></if_stmt>
	 </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_store_fmt()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_store_fmt</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Point to the underlying storage engine */</comment>
	 <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xReplace</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Storage engine does not implement such method */</comment>
		 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"xReplace() method not implemented in the underlying storage engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>nKeyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Assume a null terminated string and compute it's length */</comment>
			 <expr_stmt><expr><name>nKeyLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <if_stmt><if>if<condition>( <expr><operator>!</operator><name>nKeyLen</name></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"Empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_EMPTY</name></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <decl_stmt><decl><type><name>SyBlob</name></type> <name>sWorker</name></decl>;</decl_stmt> <comment type="block">/* Working buffer */</comment>
			 <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
			 <expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Format the data */</comment>
			 <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>,<argument><expr><name>zFormat</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Perform the requested operation */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xReplace</name></name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,<argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Clean up */</comment>
			 <expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></else></if_stmt>
	 </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_append()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_append</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name></type> <name>nDataLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Point to the underlying storage engine */</comment>
	 <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xAppend</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Storage engine does not implement such method */</comment>
		 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"xAppend() method not implemented in the underlying storage engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>nKeyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Assume a null terminated string and compute it's length */</comment>
			 <expr_stmt><expr><name>nKeyLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <if_stmt><if>if<condition>( <expr><operator>!</operator><name>nKeyLen</name></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"Empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_EMPTY</name></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <comment type="block">/* Perform the requested operation */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xAppend</name></name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,<argument><expr><name>pData</name></expr></argument>,<argument><expr><name>nDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></else></if_stmt>
	 </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_append_fmt()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_append_fmt</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Point to the underlying storage engine */</comment>
	 <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xAppend</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Storage engine does not implement such method */</comment>
		 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"xAppend() method not implemented in the underlying storage engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>nKeyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Assume a null terminated string and compute it's length */</comment>
			 <expr_stmt><expr><name>nKeyLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <if_stmt><if>if<condition>( <expr><operator>!</operator><name>nKeyLen</name></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"Empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_EMPTY</name></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <decl_stmt><decl><type><name>SyBlob</name></type> <name>sWorker</name></decl>;</decl_stmt> <comment type="block">/* Working buffer */</comment>
			 <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
			 <expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>sMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Format the data */</comment>
			 <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>,<argument><expr><name>zFormat</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Perform the requested operation */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xAppend</name></name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,<argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Clean up */</comment>
			 <expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></else></if_stmt>
	 </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_fetch()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_fetch</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name> <modifier>*</modifier></type><name>pBufLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_methods</name> <modifier>*</modifier></type><name>pMethods</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Point to the underlying storage engine */</comment>
	 <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><name>pMethods</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><name>pCur</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pCursor</name></name></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>nKeyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Assume a null terminated string and compute it's length */</comment>
		 <expr_stmt><expr><name>nKeyLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <if_stmt><if>if<condition>( <expr><operator>!</operator><name>nKeyLen</name></expr> )</condition><block>{<block_content>
		  <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"Empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_EMPTY</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		  <comment type="block">/* Seek to the record position */</comment>
		  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xSeek</name></name><argument_list>(<argument><expr><name>pCur</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,<argument><expr><name>UNQLITE_CURSOR_MATCH_EXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></else></if_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>pBuf</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Data length only */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xDataLength</name></name><argument_list>(<argument><expr><name>pCur</name></expr></argument>,<argument><expr><name>pBufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <decl_stmt><decl><type><name>SyBlob</name></type> <name>sBlob</name></decl>;</decl_stmt>
			 <comment type="block">/* Initialize the data consumer */</comment>
			 <expr_stmt><expr><call><name>SyBlobInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>,<argument><expr><name>pBuf</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>*</operator><name>pBufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Consume the data */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xData</name></name><argument_list>(<argument><expr><name>pCur</name></expr></argument>,<argument><expr><name>unqliteDataConsumer</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Data length */</comment>
			 <expr_stmt><expr><operator>*</operator><name>pBufLen</name> <operator>=</operator> <operator>(</operator><name>unqlite_int64</name><operator>)</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Cleanup */</comment>
			 <expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></else></if_stmt>
	 </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_fetch_callback()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_fetch_callback</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xConsumer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_methods</name> <modifier>*</modifier></type><name>pMethods</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Point to the underlying storage engine */</comment>
	 <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><name>pMethods</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><name>pCur</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pCursor</name></name></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>nKeyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Assume a null terminated string and compute it's length */</comment>
		 <expr_stmt><expr><name>nKeyLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <if_stmt><if>if<condition>( <expr><operator>!</operator><name>nKeyLen</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"Empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_EMPTY</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <comment type="block">/* Seek to the record position */</comment>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xSeek</name></name><argument_list>(<argument><expr><name>pCur</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,<argument><expr><name>UNQLITE_CURSOR_MATCH_EXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></else></if_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name> <operator>&amp;&amp;</operator> <name>xConsumer</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Consume the data directly */</comment>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xData</name></name><argument_list>(<argument><expr><name>pCur</name></expr></argument>,<argument><expr><name>xConsumer</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	 
	 </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_delete()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_delete</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_methods</name> <modifier>*</modifier></type><name>pMethods</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Point to the underlying storage engine */</comment>
	 <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><name>pMethods</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><name>pCur</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pCursor</name></name></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pMethods</name><operator>-&gt;</operator><name>xDelete</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Storage engine does not implement such method */</comment>
		 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"xDelete() method not implemented in the underlying storage engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>nKeyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Assume a null terminated string and compute it's length */</comment>
			 <expr_stmt><expr><name>nKeyLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <if_stmt><if>if<condition>( <expr><operator>!</operator><name>nKeyLen</name></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"Empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_EMPTY</name></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <comment type="block">/* Seek to the record position */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xSeek</name></name><argument_list>(<argument><expr><name>pCur</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,<argument><expr><name>UNQLITE_CURSOR_MATCH_EXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></else></if_stmt>
		 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Exact match found, delete the entry */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_config()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_config</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iOp</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Point to the underlying storage engine */</comment>
	 <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>unqlitePagerGetKvEngine</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xConfig</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Storage engine does not implements such method */</comment>
		 <expr_stmt><expr><call><name>unqliteGenError</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="string">"xConfig() method not implemented in the underlying storage engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
		 <comment type="block">/* Configure the storage engine */</comment>
		 <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>iOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xConfig</name></name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>iOp</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_init()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_init</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ppOut</name> <operator>==</operator> <literal type="number">0</literal></expr> <comment type="block">/* Noop */</comment>)</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Allocate a new cursor */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteInitCursor</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><name>ppOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_release()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_release</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>pCur</name> <operator>==</operator> <literal type="number">0</literal></expr> <comment type="block">/* Noop */</comment>)</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Release the cursor */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteReleaseCursor</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_first_entry()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_first_entry</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Check if the requested method is implemented by the underlying storage engine */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFirst</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Seek to the first entry */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFirst</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_last_entry()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_last_entry</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Check if the requested method is implemented by the underlying storage engine */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLast</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Seek to the last entry */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLast</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_valid_entry()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_valid_entry</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Check if the requested method is implemented by the underlying storage engine */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xValid</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xValid</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_next_entry()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_next_entry</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Check if the requested method is implemented by the underlying storage engine */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xNext</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Seek to the next entry */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xNext</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_prev_entry()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_prev_entry</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Check if the requested method is implemented by the underlying storage engine */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xPrev</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Seek to the previous entry */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xPrev</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_delete_entry()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_delete_entry</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Check if the requested method is implemented by the underlying storage engine */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xDelete</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Delete the entry */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_reset()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_reset</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Check if the requested method is implemented by the underlying storage engine */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xReset</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Reset */</comment>
		<expr_stmt><expr><call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xReset</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_seek()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_seek</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iPos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name>nKeyLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Assume a null terminated string and compute it's length */</comment>
		<expr_stmt><expr><name>nKeyLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>nKeyLen</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_EMPTY</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Seek to the desired location */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSeek</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,<argument><expr><name>iPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Default data consumer callback. That is, all retrieved is redirected to this
 * routine which store the output in an internal blob.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteDataConsumer</name><parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>,   <comment type="block">/* Data to consume */</comment>
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nLen</name></decl></parameter>,  <comment type="block">/* Data length */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>     <comment type="block">/* User private data */</comment>
	)</parameter_list>
<block>{<block_content>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	 <comment type="block">/* Store the output in an internal BLOB */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>(</operator><name>SyBlob</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_data_callback()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_key_callback</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xConsumer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Consume the key directly */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xKey</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>,<argument><expr><name>xConsumer</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_key()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_key</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnByte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name>pBuf</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Key length only */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xKeyLength</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>,<argument><expr><name>pnByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>SyBlob</name></type> <name>sBlob</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pnByte</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Initialize the data consumer */</comment>
		<expr_stmt><expr><call><name>SyBlobInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>,<argument><expr><name>pBuf</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pnByte</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Consume the key */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xKey</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>,<argument><expr><name>unqliteDataConsumer</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <comment type="block">/* Key length */</comment>
		<expr_stmt><expr><operator>*</operator><name>pnByte</name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Cleanup */</comment>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_data_callback()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_data_callback</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xConsumer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Consume the data directly */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xData</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>,<argument><expr><name>xConsumer</name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_kv_cursor_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_kv_cursor_data</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name> <modifier>*</modifier></type><name>pnByte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pCursor</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name>pBuf</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Data length only */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xDataLength</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>,<argument><expr><name>pnByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>SyBlob</name></type> <name>sBlob</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pnByte</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Initialize the data consumer */</comment>
		<expr_stmt><expr><call><name>SyBlobInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>,<argument><expr><name>pBuf</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pnByte</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Consume the data */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xData</name></name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>,<argument><expr><name>unqliteDataConsumer</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Data length */</comment>
		<expr_stmt><expr><operator>*</operator><name>pnByte</name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Cleanup */</comment>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_begin()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_begin</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Begin the write transaction */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerBegin</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_commit()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_commit</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Commit the transaction */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerCommit</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_rollback()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>int</name></type> <name>unqlite_rollback</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Rollback the transaction */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerRollback</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_util_load_mmaped_file()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>UNQLITE_APIEXPORT</name> <name>int</name></type> <name>unqlite_util_load_mmaped_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppMap</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name> <modifier>*</modifier></type><name>pFileSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SX_EMPTY_STR</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ppMap</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pFileSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<comment type="block">/* Sanity check */</comment>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>ppMap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Extract the Jx9 Vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <call><name>jx9ExportBuiltinVfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Check if the underlying vfs implement the memory map routines
	 * [i.e: mmap() under UNIX/MapViewOfFile() under windows].
	 */</comment>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xMmap</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content> 
		 <comment type="block">/* Try to get a read-only memory view of the whole file */</comment>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xMmap</name></name><argument_list>(<argument><expr><name>zFile</name></expr></argument>,<argument><expr><name>ppMap</name></expr></argument>,<argument><expr><name>pFileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_util_release_mmaped_file()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>UNQLITE_APIEXPORT</name> <name>int</name></type> <name>unqlite_util_release_mmaped_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pMap</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name></type> <name>iFileSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pMap</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the Jx9 Vfs */</comment>
	<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <call><name>jx9ExportBuiltinVfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xUnmap</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOTIMPLEMENTED</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content> 
		 <expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xUnmap</name></name><argument_list>(<argument><expr><name>pMap</name></expr></argument>,<argument><expr><name>iFileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_util_random_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>UNQLITE_APIEXPORT</name> <name>int</name></type> <name>unqlite_util_random_string</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>zBuf</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>buf_size</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Buffer must be long enough to hold three bytes */</comment>
		<return>return <expr><name>UNQLITE_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>UNQLITE_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Generate the random string */</comment>
	 <expr_stmt><expr><call><name>unqlitePagerRandomString</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>,<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: unqlite_util_random_num()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>UNQLITE_APIEXPORT</name> <name>unsigned</name> <name>int</name></type> <name>unqlite_util_random_num</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>iNum</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>UNQLITE_DB_MISUSE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>UNQLITE_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>UNQLITE_THRD_DB_RELEASE</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/* Generate the random number */</comment>
	 <expr_stmt><expr><name>iNum</name> <operator>=</operator> <call><name>unqlitePagerRandomNum</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNQLITE_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave DB mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sUnqlMPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>,<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sUnqlMPGlobal.nThreadingLevel != UNQLITE_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <return>return <expr><name>iNum</name></expr>;</return>
</block_content>}</block></function>
</unit>
