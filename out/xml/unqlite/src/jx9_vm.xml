<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/jx9_vm.c"><comment type="block">/*
 * Symisc JX9: A Highly Efficient Embeddable Scripting Engine Based on JSON.
 * Copyright (C) 2012-2013, Symisc Systems http://jx9.symisc.net/
 * Version 1.7.2
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://jx9.symisc.net/
 */</comment>
 <comment type="block">/* $SymiscID: jx9_vm.c v1.0 FreeBSD 2012-12-09 00:19 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jx9Int.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * The code in this file implements execution method of the JX9 Virtual Machine.
 * The JX9 compiler (implemented in 'compiler.c' and 'parse.c') generates a bytecode program
 * which is then executed by the virtual machine implemented here to do the work of the JX9
 * statements.
 * JX9 bytecode programs are similar in form to assembly language. The program consists
 * of a linear sequence of operations .Each operation has an opcode and 3 operands.
 * Operands P1 and P2 are integers where the first is signed while the second is unsigned.
 * Operand P3 is an arbitrary pointer specific to each instruction. The P2 operand is usually
 * the jump destination used by the OP_JMP, OP_JZ, OP_JNZ, ... instructions.
 * Opcodes will typically ignore one or more operands. Many opcodes ignore all three operands.
 * Computation results are stored on a stack. Each entry on the stack is of type jx9_value.
 * JX9 uses the jx9_value object to represent all values that can be stored in a JX9 variable.
 * Since JX9 uses dynamic typing for the values it stores. Values stored in jx9_value objects
 * can be integers, floating point values, strings, arrays, object instances (object in the JX9 jargon)
 * and so on.
 * Internally, the JX9 virtual machine manipulates nearly all values as jx9_values structures.
 * Each jx9_value may cache multiple representations(string, integer etc.) of the same value.
 * An implicit conversion from one type to the other occurs as necessary.
 * Most of the code in this file is taken up by the [VmByteCodeExec()] function which does
 * the work of interpreting a JX9 bytecode program. But other routines are also provided
 * to help in building up a program instruction by instruction.
 */</comment>
<comment type="block">/*
 * Each active virtual machine frame is represented by an instance 
 * of the following structure.
 * VM Frame hold local variables and other stuff related to function call.
 */</comment>
<struct>struct <name>VmFrame</name>
<block>{
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pParent</name></decl>;</decl_stmt> <comment type="block">/* Parent frame or NULL if global scope */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl>;</decl_stmt>  <comment type="block">/* Upper layer private data associated with this frame */</comment>
	<decl_stmt><decl><type><name>SySet</name></type> <name>sLocal</name></decl>;</decl_stmt>     <comment type="block">/* Local variables container (VmSlot instance) */</comment>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>      <comment type="block">/* VM that own this frame */</comment>
	<decl_stmt><decl><type><name>SyHash</name></type> <name>hVar</name></decl>;</decl_stmt>      <comment type="block">/* Variable hashtable for fast lookup */</comment>
	<decl_stmt><decl><type><name>SySet</name></type> <name>sArg</name></decl>;</decl_stmt>       <comment type="block">/* Function arguments container */</comment>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iFlags</name></decl>;</decl_stmt>     <comment type="block">/* Frame configuration flags (See below)*/</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>iExceptionJump</name></decl>;</decl_stmt> <comment type="block">/* Exception jump destination */</comment>
}</block>;</struct>
<comment type="block">/*
 * When a user defined variable is  garbage collected, memory object index
 * is stored in an instance of the following structure and put in the free object
 * table so that it can be reused again without allocating a new memory object.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>VmSlot</name></name></type> <name>VmSlot</name>;</typedef>
<struct>struct <name>VmSlot</name>
<block>{
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>      <comment type="block">/* Index in pVm-&gt;aMemObj[] */</comment> 
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl>;</decl_stmt> <comment type="block">/* Upper-layer private data */</comment>
}</block>;</struct>
<comment type="block">/*
 * Each parsed URI is recorded and stored in an instance of the following structure.
 * This structure and it's related routines are taken verbatim from the xHT project
 * [A modern embeddable HTTP engine implementing all the RFC2616 methods]
 * the xHT project is developed internally by Symisc Systems.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>SyhttpUri</name></name></type> <name>SyhttpUri</name>;</typedef>
<struct>struct <name>SyhttpUri</name> 
<block>{ 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sHost</name></decl>;</decl_stmt>     <comment type="block">/* Hostname or IP address */</comment> 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sPort</name></decl>;</decl_stmt>     <comment type="block">/* Port number */</comment> 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sPath</name></decl>;</decl_stmt>     <comment type="block">/* Mandatory resource path passed verbatim (Not decoded) */</comment> 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sQuery</name></decl>;</decl_stmt>    <comment type="block">/* Query part */</comment>	 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sFragment</name></decl>;</decl_stmt> <comment type="block">/* Fragment part */</comment> 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sScheme</name></decl>;</decl_stmt>   <comment type="block">/* Scheme */</comment> 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sUser</name></decl>;</decl_stmt>     <comment type="block">/* Username */</comment> 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sPass</name></decl>;</decl_stmt>     <comment type="block">/* Password */</comment>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sRaw</name></decl>;</decl_stmt>      <comment type="block">/* Raw URI */</comment>
}</block>;</struct>
<comment type="block">/* 
 * An instance of the following structure is used to record all MIME headers seen
 * during a HTTP interaction. 
 * This structure and it's related routines are taken verbatim from the xHT project
 * [A modern embeddable HTTP engine implementing all the RFC2616 methods]
 * the xHT project is developed internally by Symisc Systems.
 */</comment>  
<typedef>typedef <type><name><name>struct</name> <name>SyhttpHeader</name></name></type> <name>SyhttpHeader</name>;</typedef>
<struct>struct <name>SyhttpHeader</name> 
<block>{ 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>    <comment type="block">/* Header name [i.e:"Content-Type", "Host", "User-Agent"]. NOT NUL TERMINATED */</comment> 
	<decl_stmt><decl><type><name>SyString</name></type> <name>sValue</name></decl>;</decl_stmt>   <comment type="block">/* Header values [i.e: "text/html"]. NOT NUL TERMINATED */</comment> 
}</block>;</struct>
<comment type="block">/*
 * Supported HTTP methods.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_METHOD_GET</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* GET */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_METHOD_HEAD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* HEAD */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_METHOD_POST</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> <comment type="block">/* POST */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_METHOD_PUT</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define> <comment type="block">/* PUT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_METHOD_OTHR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> <comment type="block">/* Other HTTP methods [i.e: DELETE, TRACE, OPTIONS...]*/</comment>
<comment type="block">/*
 * Supported HTTP protocol version.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PROTO_10</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* HTTP/1.0 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PROTO_11</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* HTTP/1.1 */</comment>
<comment type="block">/*
 * Register a constant and it's associated expansion callback so that
 * it can be expanded from the target JX9 program.
 * The constant expansion mechanism under JX9 is extremely powerful yet
 * simple and work as follows:
 * Each registered constant have a C procedure associated with it.
 * This procedure known as the constant expansion callback is responsible
 * of expanding the invoked constant to the desired value, for example:
 * The C procedure associated with the "__PI__" constant expands to 3.14 (the value of PI).
 * The "__OS__" constant procedure expands to the name of the host Operating Systems
 * (Windows, Linux, ...) and so on.
 * Please refer to the official documentation for additional information.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmRegisterConstant</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,            <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>,  <comment type="block">/* Constant name */</comment>
	<parameter><decl><type><name>ProcConstant</name></type> <name>xExpand</name></decl></parameter>,   <comment type="block">/* Constant expansion callback */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>         <comment type="block">/* Last argument to xExpand() */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_constant</name> <modifier>*</modifier></type><name>pCons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDupName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hConstant</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Overwrite the old definition and return immediately */</comment>
		<expr_stmt><expr><name>pCons</name> <operator>=</operator> <operator>(</operator><name>jx9_constant</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pCons</name><operator>-&gt;</operator><name>xExpand</name></name> <operator>=</operator> <name>xExpand</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pCons</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new constant instance */</comment>
	<expr_stmt><expr><name>pCons</name> <operator>=</operator> <operator>(</operator><name>jx9_constant</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_constant</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCons</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Duplicate constant name */</comment>
	<expr_stmt><expr><name>zDupName</name> <operator>=</operator> <call><name>SyMemBackendStrDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zDupName</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Install the constant */</comment>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCons</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>, <argument><expr><name>zDupName</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pCons</name><operator>-&gt;</operator><name>xExpand</name></name> <operator>=</operator> <name>xExpand</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pCons</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hConstant</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zDupName</name></expr></argument>, <argument><expr><call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCons</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>zDupName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* All done, constant can be invoked from JX9 code */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Allocate a new foreign function instance.
 * This function return SXRET_OK on success. Any other
 * return value indicates failure.
 * Please refer to the official documentation for an introduction to
 * the foreign function mechanism.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9NewForeignFunction</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,              <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>,    <comment type="block">/* Foreign function name */</comment>
	<parameter><decl><type><name>ProcHostFunction</name></type> <name>xFunc</name></decl></parameter>,  <comment type="block">/* Foreign function implementation */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,          <comment type="block">/* Foreign function private data */</comment>
	<parameter><decl><type><name>jx9_user_func</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>     <comment type="block">/* OUT: VM image of the foreign function */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_user_func</name> <modifier>*</modifier></type><name>pFunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDup</name></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new user function */</comment>
	<expr_stmt><expr><name>pFunc</name> <operator>=</operator> <operator>(</operator><name>jx9_user_func</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_user_func</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFunc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_MEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Duplicate function name */</comment>
	<expr_stmt><expr><name>zDup</name> <operator>=</operator> <call><name>SyMemBackendStrDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zDup</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXERR_MEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_user_func</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize structure fields */</comment>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>, <argument><expr><name>zDup</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pVm</name></name>   <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>xFunc</name></name> <operator>=</operator> <name>xFunc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aAux</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_aux_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Write a pointer to the new function */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>pFunc</name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Install a foreign function and it's associated callback so that
 * it can be invoked from the target JX9 code.
 * This function return SXRET_OK on successful registration. Any other
 * return value indicates failure.
 * Please refer to the official documentation for an introduction to
 * the foreign function mechanism.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmInstallForeignFunction</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,              <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>,    <comment type="block">/* Foreign function name */</comment>
	<parameter><decl><type><name>ProcHostFunction</name></type> <name>xFunc</name></decl></parameter>,  <comment type="block">/* Foreign function implementation */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>           <comment type="block">/* Foreign function private data */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_user_func</name> <modifier>*</modifier></type><name>pFunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Overwrite any previously registered function with the same name */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hHostFunction</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pFunc</name> <operator>=</operator> <operator>(</operator><name>jx9_user_func</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>xFunc</name></name> <operator>=</operator> <name>xFunc</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SySetReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aAux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create a new user function */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9NewForeignFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pName</name><operator>)</operator></expr></argument>, <argument><expr><name>xFunc</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Install the function in the corresponding hashtable */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hHostFunction</name></name></expr></argument>, <argument><expr><call><name>SyStringData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>SyStringData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* User function successfully installed */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Initialize a VM function.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmInitFuncState</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,        <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>, <comment type="block">/* Target Fucntion */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,  <comment type="block">/* Function name */</comment>
	<parameter><decl><type><name>sxu32</name></type> <name>nByte</name></decl></parameter>,        <comment type="block">/* zName length */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>,       <comment type="block">/* Configuration flags */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>     <comment type="block">/* Function private data */</comment>
	)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm_func</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<comment type="block">/* Initialize structure fields */</comment>
	<comment type="block">/* Arguments container */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aArgs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm_func_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Static variable container */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aStatic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm_func_static_var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Bytecode container */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Preallocate some instruction slots */</comment>
	<expr_stmt><expr><call><name>SySetAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>iFlags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Install a user defined function in the corresponding VM container.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmInstallUserFunction</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,        <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>, <comment type="block">/* Target function */</comment>
	<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>     <comment type="block">/* Function name */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pName</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Use the built-in name */</comment>
		<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Check for duplicates (functions with the same name) first */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hFunction</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pLink</name> <init>= <expr><operator>(</operator><name>jx9_vm_func</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>pLink</name> <operator>!=</operator> <name>pFunc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Link */</comment>
			<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pNextName</name></name> <operator>=</operator> <name>pLink</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pFunc</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* First time seen */</comment>
	<expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pNextName</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hFunction</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Instruction builder interface.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmEmitInstr</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,  <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iOp</name></decl></parameter>,    <comment type="block">/* Operation to perform */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iP1</name></decl></parameter>,    <comment type="block">/* First operand */</comment>
	<parameter><decl><type><name>sxu32</name></type> <name>iP2</name></decl></parameter>,    <comment type="block">/* Second operand */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>,     <comment type="block">/* Third operand */</comment>
	<parameter><decl><type><name>sxu32</name> <modifier>*</modifier></type><name>pIndex</name></decl></parameter> <comment type="block">/* Instruction index. NULL otherwise */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmInstr</name></type> <name>sInstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Fill the VM instruction */</comment>
	<expr_stmt><expr><name><name>sInstr</name><operator>.</operator><name>iOp</name></name> <operator>=</operator> <operator>(</operator><name>sxu8</name><operator>)</operator><name>iOp</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name><name>sInstr</name><operator>.</operator><name>iP1</name></name> <operator>=</operator> <name>iP1</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name><name>sInstr</name><operator>.</operator><name>iP2</name></name> <operator>=</operator> <name>iP2</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name><name>sInstr</name><operator>.</operator><name>p3</name></name>  <operator>=</operator> <name>p3</name></expr>;</expr_stmt>  
	<if_stmt><if>if<condition>( <expr><name>pIndex</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Instruction index in the bytecode array */</comment>
		<expr_stmt><expr><operator>*</operator><name>pIndex</name> <operator>=</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Finally, record the instruction */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sInstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sCodeGen</name></name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Fatal, Cannot emit instruction due to a memory failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Fall throw */</comment>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Swap the current bytecode container with the given one.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmSetByteCodeContainer</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pContainer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name>pContainer</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Point to the default container */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aByteCode</name></name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Change container */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pContainer</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return the current bytecode container.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>SySet</name> <modifier>*</modifier></type> <name>jx9VmGetByteCodeContainer</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Extract the VM instruction rooted at nIndex.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>VmInstr</name> <modifier>*</modifier></type> <name>jx9VmGetInstr</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmInstr</name> <modifier>*</modifier></type><name>pInstr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <operator>(</operator><name>VmInstr</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>, <argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pInstr</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return the total number of VM instructions recorded so far.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxu32</name></type> <name>jx9VmInstrLength</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Pop the last VM instruction.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>VmInstr</name> <modifier>*</modifier></type> <name>jx9VmPopInstr</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>VmInstr</name> <operator>*</operator><operator>)</operator><call><name>SySetPop</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Peek the last VM instruction.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>VmInstr</name> <modifier>*</modifier></type> <name>jx9VmPeekInstr</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>VmInstr</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Allocate a new virtual machine frame.
 */</comment>
<function><type><specifier>static</specifier> <name>VmFrame</name> <modifier>*</modifier></type> <name>VmNewFrame</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,              <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>          <comment type="block">/* Upper-layer private data */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pFrame</name></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new vm frame */</comment>
	<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <operator>(</operator><name>VmFrame</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFrame</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pFrame</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize frame fields */</comment>
	<expr_stmt><expr><name><name>pFrame</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pFrame</name><operator>-&gt;</operator><name>pVm</name></name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyHashInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sLocal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pFrame</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Enter a VM frame.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmEnterFrame</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,               <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,           <comment type="block">/* Upper-layer private data */</comment>
	<parameter><decl><type><name>VmFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFrame</name></decl></parameter>          <comment type="block">/* OUT: Top most active frame */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pFrame</name></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new frame */</comment>
	<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <call><name>VmNewFrame</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFrame</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_MEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Link to the list of active VM frame */</comment>
	<expr_stmt><expr><name><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name> <operator>=</operator> <name>pFrame</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>ppFrame</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Write a pointer to the new VM frame */</comment>
		<expr_stmt><expr><operator>*</operator><name>ppFrame</name> <operator>=</operator> <name>pFrame</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Link a foreign variable with the TOP most active frame.
 * Refer to the JX9_OP_UPLINK instruction implementation for more
 * information.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmFrameLink</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pTarget</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pFrame</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the upper frame */</comment>
	<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pTarget</name> <operator>=</operator> <name>pFrame</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <name><name>pTarget</name><operator>-&gt;</operator><name>pParent</name></name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>pFrame</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Query the current frame */</comment>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Variable found */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>		
		<comment type="block">/* Point to the upper frame */</comment>
		<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <name><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Inexistant variable */</comment>
		<return>return <expr><name>SXERR_NOTFOUND</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Link to the current frame */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTarget</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>nKeyLen</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Leave the top-most active frame.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>VmLeaveFrame</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pFrame</name> <init>= <expr><name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFrame</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Unlink from the list of active VM frame */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name> <operator>=</operator> <name><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name></expr>  )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>VmSlot</name>  <modifier>*</modifier></type><name>aSlot</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
			<comment type="block">/* Restore local variable to the free pool so that they can be reused again */</comment>
			<expr_stmt><expr><name>aSlot</name> <operator>=</operator> <operator>(</operator><name>VmSlot</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sLocal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sLocal</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
				<comment type="block">/* Unset the local variable */</comment>
				<expr_stmt><expr><call><name>jx9VmUnsetMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name><name>aSlot</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Release internal containers */</comment>
		<expr_stmt><expr><call><name>SyHashRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sLocal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Release the whole structure */</comment>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Compare two functions signature and return the comparison result.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>VmOverloadCompare</name><parameter_list>(<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pFirst</name></decl></parameter>, <parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pSecond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSend</name> <init>= <expr><operator>&amp;</operator><name><name>pSecond</name><operator>-&gt;</operator><name>zString</name><index>[<expr><name><name>pSecond</name><operator>-&gt;</operator><name>nByte</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFend</name> <init>= <expr><operator>&amp;</operator><name><name>pFirst</name><operator>-&gt;</operator><name>zString</name><index>[<expr><name><name>pFirst</name><operator>-&gt;</operator><name>nByte</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSin</name> <init>= <expr><name><name>pSecond</name><operator>-&gt;</operator><name>zString</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFin</name> <init>= <expr><name><name>pFirst</name><operator>-&gt;</operator><name>zString</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPtr</name> <init>= <expr><name>zFin</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>zFin</name> <operator>&gt;=</operator> <name>zFend</name> <operator>||</operator> <name>zSin</name> <operator>&gt;=</operator> <name>zSend</name></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>zFin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>zSin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* mismatch */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zFin</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>zSin</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zFin</name><operator>-</operator><name>zPtr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Select the appropriate VM function for the current call context.
 * This is the implementation of the powerful 'function overloading' feature
 * introduced by the version 2 of the JX9 engine.
 * Refer to the official documentation for more information.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_vm_func</name> <modifier>*</modifier></type> <name>VmOverload</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,         <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>,  <comment type="block">/* Linked list of candidates for overloading */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>aArg</name></decl></parameter>,     <comment type="block">/* Array of passed arguments */</comment>
	<parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>             <comment type="block">/* Total number of passed arguments  */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>iTarget</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>iCur</name></decl>, <decl><type ref="prev"/><name>iMax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name><name>apSet</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* Maximum number of candidates */</comment>
	<decl_stmt><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pLink</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sArgSig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyBlob</name></type> <name>sSig</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pLink</name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Put functions expecting the same number of passed arguments */</comment>
	<while>while<condition>( <expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SX_ARRAYSIZE</name><argument_list>(<argument><expr><name>apSet</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>pLink</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLink</name><operator>-&gt;</operator><name>aArgs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nArg</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Candidate for overloading */</comment>
			<expr_stmt><expr><name><name>apSet</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pLink</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pLink</name> <operator>=</operator> <name><name>pLink</name><operator>-&gt;</operator><name>pNextName</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* No candidates, return the head of the list */</comment>
		<return>return <expr><name>pList</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Return the only candidate */</comment>
		<return>return <expr><name><name>apSet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Calculate function signature */</comment>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nArg</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="char">'n'</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* null */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>aArg</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Hashmap */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>aArg</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* bool */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>aArg</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* int */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>aArg</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* String */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>aArg</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Float */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sArgSig</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iTarget</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iMax</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="block">/* Select the appropriate function */</comment>
	<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
		<comment type="block">/* Compare the two signatures */</comment>
		<expr_stmt><expr><name>iCur</name> <operator>=</operator> <call><name>VmOverloadCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sArgSig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>apSet</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>sSignature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iCur</name> <operator>&gt;</operator> <name>iMax</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iMax</name> <operator>=</operator> <name>iCur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iTarget</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Appropriate function for the current call context */</comment>
	<return>return <expr><name><name>apSet</name><index>[<expr><name>iTarget</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* 
 * Dummy read-only buffer used for slot reservation.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zDummy</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block">/* Must be &gt;= sizeof(jx9_value) */</comment> 
<comment type="block">/*
 * Reserve a constant memory object.
 * Return a pointer to the raw jx9_value on success. NULL on failure.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_value</name> <modifier>*</modifier></type> <name>jx9VmReserveConstObj</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>sxu32</name> <modifier>*</modifier></type><name>pIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pIndex</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Object index in the object table */</comment>
		<expr_stmt><expr><operator>*</operator><name>pIndex</name> <operator>=</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aLitObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reserve a slot for the new object */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aLitObj</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* If the supplied memory subsystem is so sick that we are unable to allocate
		 * a tiny chunk of memory, there is no much we can do here.
		 */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aLitObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Reserve a memory object.
 * Return a pointer to the raw jx9_value on success. NULL on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_value</name> <modifier>*</modifier></type> <name>VmReserveMemObj</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>sxu32</name> <modifier>*</modifier></type><name>pIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pIndex</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Object index in the object table */</comment>
		<expr_stmt><expr><operator>*</operator><name>pIndex</name> <operator>=</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reserve a slot for the new object */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* If the supplied memory subsystem is so sick that we are unable to allocate
		 * a tiny chunk of memory, there is no much we can do here.
		 */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmEvalChunk</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iFlags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bTrueReturn</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Built-in functions that cannot be implemented directly as foreign functions.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_BUILTIN_LIB</name></cpp:macro> \
	<cpp:value>"function scandir(string $directory, int $sort_order = SCANDIR_SORT_ASCENDING)"\
    "{"\
	"  if( func_num_args() &lt; 1 ){ return FALSE; }"\
	"  $aDir = [];"\
	"  $pHandle = opendir($directory);"\
	"  if( $pHandle == FALSE ){ return FALSE; }"\
	"  while(FALSE !== ($pEntry = readdir($pHandle)) ){"\
	"      $aDir[] = $pEntry;"\
	"   }"\
	"  closedir($pHandle);"\
	"  if( $sort_order == SCANDIR_SORT_DESCENDING ){"\
	"      rsort($aDir);"\
	"  }else if( $sort_order == SCANDIR_SORT_ASCENDING ){"\
	"      sort($aDir);"\
	"  }"\
	"  return $aDir;"\
	"}"\
	"function glob(string $pattern, int $iFlags = 0){"\
	"/* Open the target directory */"\
	"$zDir = dirname($pattern);"\
	"if(!is_string($zDir) ){ $zDir = './'; }"\
	"$pHandle = opendir($zDir);"\
	"if( $pHandle == FALSE ){"\
	"   /* IO error while opening the current directory, return FALSE */"\
	"	return FALSE;"\
	"}"\
	"$pattern = basename($pattern);"\
	"$pArray = []; /* Empty array */"\
	"/* Loop throw available entries */"\
	"while( FALSE !== ($pEntry = readdir($pHandle)) ){"\
	" /* Use the built-in strglob function which is a Symisc eXtension for wildcard comparison*/"\
	"	$rc = strglob($pattern, $pEntry);"\
	"	if( $rc ){"\
	"	   if( is_dir($pEntry) ){"\
	"	      if( $iFlags &amp; GLOB_MARK ){"\
	"		     /* Adds a slash to each directory returned */"\
	"			 $pEntry .= DIRECTORY_SEPARATOR;"\
	"		  }"\
	"	   }else if( $iFlags &amp; GLOB_ONLYDIR ){"\
	"	     /* Not a directory, ignore */"\
	"		 continue;"\
	"	   }"\
	"	   /* Add the entry */"\
	"	   $pArray[] = $pEntry;"\
	"	}"\
	" }"\
	"/* Close the handle */"\
	"closedir($pHandle);"\
	"if( ($iFlags &amp; GLOB_NOSORT) == 0 ){"\
	"  /* Sort the array */"\
	"  sort($pArray);"\
	"}"\
	"if( ($iFlags &amp; GLOB_NOCHECK) &amp;&amp; sizeof($pArray) &lt; 1 ){"\
	"  /* Return the search pattern if no files matching were found */"\
	"  $pArray[] = $pattern;"\
	"}"\
	"/* Return the created array */"\
	"return $pArray;"\
   "}"\
   "/* Creates a temporary file */"\
   "function tmpfile(){"\
   "  /* Extract the temp directory */"\
   "  $zTempDir = sys_get_temp_dir();"\
   "  if( strlen($zTempDir) &lt; 1 ){"\
   "    /* Use the current dir */"\
   "    $zTempDir = '.';"\
   "  }"\
   "  /* Create the file */"\
   "  $pHandle = fopen($zTempDir.DIRECTORY_SEPARATOR.'JX9'.rand_str(12), 'w+');"\
   "  return $pHandle;"\
   "}"\
   "/* Creates a temporary filename */"\
   "function tempnam(string $zDir = sys_get_temp_dir() /* Symisc eXtension */, string $zPrefix = 'JX9')"\
   "{"\
   "   return $zDir.DIRECTORY_SEPARATOR.$zPrefix.rand_str(12);"\
   "}"\
	"function max(){"\
    "  $pArgs = func_get_args();"\
    " if( sizeof($pArgs) &lt; 1 ){"\
	"  return null;"\
    " }"\
    " if( sizeof($pArgs) &lt; 2 ){"\
    " $pArg = $pArgs[0];"\
	" if( !is_array($pArg) ){"\
	"   return $pArg; "\
	" }"\
	" if( sizeof($pArg) &lt; 1 ){"\
	"   return null;"\
	" }"\
	" $pArg = array_copy($pArgs[0]);"\
	" reset($pArg);"\
	" $max = current($pArg);"\
	" while( FALSE !== ($val = next($pArg)) ){"\
	"   if( $val &gt; $max ){"\
	"     $max = $val;"\
    " }"\
	" }"\
	" return $max;"\
    " }"\
    " $max = $pArgs[0];"\
    " for( $i = 1; $i &lt; sizeof($pArgs) ; ++$i ){"\
    " $val = $pArgs[$i];"\
	"if( $val &gt; $max ){"\
	" $max = $val;"\
	"}"\
    " }"\
	" return $max;"\
    "}"\
	"function min(){"\
    "  $pArgs = func_get_args();"\
    " if( sizeof($pArgs) &lt; 1 ){"\
	"  return null;"\
    " }"\
    " if( sizeof($pArgs) &lt; 2 ){"\
    " $pArg = $pArgs[0];"\
	" if( !is_array($pArg) ){"\
	"   return $pArg; "\
	" }"\
	" if( sizeof($pArg) &lt; 1 ){"\
	"   return null;"\
	" }"\
	" $pArg = array_copy($pArgs[0]);"\
	" reset($pArg);"\
	" $min = current($pArg);"\
	" while( FALSE !== ($val = next($pArg)) ){"\
	"   if( $val &lt; $min ){"\
	"     $min = $val;"\
    " }"\
	" }"\
	" return $min;"\
    " }"\
    " $min = $pArgs[0];"\
    " for( $i = 1; $i &lt; sizeof($pArgs) ; ++$i ){"\
    " $val = $pArgs[$i];"\
	"if( $val &lt; $min ){"\
	" $min = $val;"\
	" }"\
    " }"\
	" return $min;"\
	"}"</cpp:value></cpp:define>
<comment type="block">/*
 * Initialize a freshly allocated JX9 Virtual Machine so that we can
 * start compiling the target JX9 program.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmInit</name><parameter_list>(
	 <parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <comment type="block">/* Initialize this */</comment>
	 <parameter><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter> <comment type="block">/* Master engine */</comment>
	 )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sBuiltin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize VM fields */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pEngine</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pEngine</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemBackendInitFromParent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Instructions containers */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aByteCode</name></name></expr>;</expr_stmt>
	<comment type="block">/* Object containers */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Virtual machine internal containers */</comment>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sConsumer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sWorker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sArgv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aLitObj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aLitObj</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyHashInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hHostFunction</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyHashInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hFunction</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyHashInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hConstant</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyHashInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hSuper</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFreeObj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Configuration containers */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFiles</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aPaths</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aIncluded</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aIOstream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_io_stream</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Error callbacks containers */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAssertCallback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set a default recursion limit */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINNT__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMaxDepth</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMaxDepth</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Default assertion flags */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>iAssertFlags</name></name> <operator>=</operator> <name>JX9_ASSERT_WARNING</name></expr>;</expr_stmt> <comment type="block">/* Issue a warning for each failed assertion */</comment>
	<comment type="block">/* PRNG context */</comment>
	<expr_stmt><expr><call><name>SyRandomnessInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sPrng</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Install the null constant */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_MEM</name></expr>;</expr_stmt>
		<goto>goto <name>Err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Install the boolean TRUE constant */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_MEM</name></expr>;</expr_stmt>
		<goto>goto <name>Err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInitFromBool</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Install the boolean FALSE constant */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_MEM</name></expr>;</expr_stmt>
		<goto>goto <name>Err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInitFromBool</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Create the global frame */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmEnterFrame</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the code generator */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9InitCodeGenerator</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>xErr</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>pErrData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* VM correctly initialized, set the magic number */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>JX9_VM_INIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBuiltin</name></expr></argument>,<argument><expr><name>JX9_BUILTIN_LIB</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JX9_BUILTIN_LIB</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the built-in library */</comment>
	<expr_stmt><expr><call><name>VmEvalChunk</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sBuiltin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Reset the code generator */</comment>
	<expr_stmt><expr><call><name>jx9ResetCodeGenerator</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>xErr</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>pErrData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
<label><name>Err</name>:</label>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Default VM output consumer callback.That is, all VM output is redirected to this
 * routine which store the output in an internal blob.
 * The output can be extracted later after program execution [jx9_vm_exec()] via
 * the [jx9_vm_config()] interface with a configuration verb set to
 * jx9VM_CONFIG_EXTRACT_OUTPUT.
 * Refer to the official docurmentation for additional information.
 * Note that for performance reason it's preferable to install a VM output
 * consumer callback via (jx9VM_CONFIG_OUTPUT) rather than waiting for the VM
 * to finish executing and extracting the output.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmBlobConsumer</name><parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>,   <comment type="block">/* VM Generated output*/</comment>
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nLen</name></decl></parameter>,  <comment type="block">/* Generated output length */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>     <comment type="block">/* User private data */</comment>
	)</parameter_list>
<block>{<block_content>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	 <comment type="block">/* Store the output in an internal BLOB */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>(</operator><name>SyBlob</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_STACK_GUARD</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<comment type="block">/*
 * Allocate a new operand stack so that we can start executing
 * our compiled JX9 program.
 * Return a pointer to the operand stack (array of jx9_values)
 * on success. NULL (Fatal error) on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_value</name> <modifier>*</modifier></type> <name>VmNewOperandStack</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>sxu32</name></type> <name>nInstr</name></decl></parameter> <comment type="block">/* Total numer of generated bytecode instructions */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pStack</name></decl>;</decl_stmt>
  <comment type="block">/* No instruction ever pushes more than a single element onto the
  ** stack and the stack never grows on successive executions of the
  ** same loop. So the total number of instructions is an upper bound
  ** on the maximum stack depth required.
  **
  ** Allocation all the stack space we will ever need.
  */</comment>
	<expr_stmt><expr><name>nInstr</name> <operator>+=</operator> <name>VM_STACK_GUARD</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pStack</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>nInstr</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStack</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the operand stack */</comment>
	<while>while<condition>( <expr><name>nInstr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStack</name><index>[<expr><name>nInstr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>--</operator><name>nInstr</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/* Ready for bytecode execution */</comment>
	<return>return <expr><name>pStack</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmRegisterSpecialFunction</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Prepare the Virtual Machine for bytecode execution.
 * This routine gets called by the JX9 engine after
 * successful compilation of the target JX9 program.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmMakeReady</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter> <comment type="block">/* Target VM */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>!=</operator> <name>JX9_VM_INIT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Initialize your VM first */</comment>
		<return>return <expr><name>SXERR_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Mark the VM ready for bytecode execution */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>JX9_VM_RUN</name></expr>;</expr_stmt> 
	<comment type="block">/* Release the code generator now we have compiled our program */</comment>
	<expr_stmt><expr><call><name>jx9ResetCodeGenerator</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the DONE instruction */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_OP_DONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_MEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Script return value */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sExec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Assume a NULL return value */</comment>
	<comment type="block">/* Allocate a new operand stack */</comment>	
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>aOps</name></name> <operator>=</operator> <call><name>VmNewOperandStack</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><call><name>SySetUsed</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>aOps</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_MEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Set the default VM output consumer callback and it's 
	 * private data. */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name><operator>.</operator><name>xConsumer</name></name> <operator>=</operator> <name>jx9VmBlobConsumer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sConsumer</name></name></expr>;</expr_stmt>
	<comment type="block">/* Register special functions first [i.e: print, func_get_args(), die, etc.] */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmRegisterSpecialFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create superglobals [i.e: $GLOBALS, $_GET, $_POST...] */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapLoadBuiltin</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Register built-in constants [i.e: JX9_EOL, JX9_OS...] */</comment>
	<expr_stmt><expr><call><name>jx9RegisterBuiltInConstant</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Register built-in functions [i.e: is_null(), array_diff(), strlen(), etc.] */</comment>
	<expr_stmt><expr><call><name>jx9RegisterBuiltInFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* VM is ready for bytecode execution */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Reset a Virtual Machine to it's initial state.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmReset</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>!=</operator> <name>JX9_VM_RUN</name> <operator>&amp;&amp;</operator> <name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>!=</operator> <name>JX9_VM_EXEC</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* TICKET 1433-003: As of this version, the VM is automatically reset */</comment>
	<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sConsumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sExec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the ready flag */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>JX9_VM_RUN</name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release a Virtual Machine.
 * Every virtual machine must be destroyed in order to avoid memory leaks.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmRelease</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Set the stale magic number */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>JX9_VM_STALE</name></expr>;</expr_stmt>
	<comment type="block">/* Release the private memory subsystem */</comment>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Initialize a foreign function call context.
 * The context in which a foreign function executes is stored in a jx9_context object.
 * A pointer to a jx9_context object is always first parameter to application-defined foreign
 * functions.
 * The application-defined foreign function implementation will pass this pointer through into
 * calls to dozens of interfaces, these includes jx9_result_int(), jx9_result_string(), jx9_result_value(), 
 * jx9_context_new_scalar(), jx9_context_alloc_chunk(), jx9_context_output(), jx9_context_throw_error()
 * and many more. Refer to the C/C++ Interfaces documentation for additional information.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmInitCallContext</name><parameter_list>(
	<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>,    <comment type="block">/* Call Context */</comment>
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,          <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>jx9_user_func</name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>, <comment type="block">/* Foreign function to execute shortly */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pRet</name></decl></parameter>,      <comment type="block">/* Store return value here*/</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>          <comment type="block">/* Control flags */</comment>
	)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>pFunc</name></name> <operator>=</operator> <name>pFunc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>pVm</name></name>   <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_aux_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Assume a null return value */</comment>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><name>MEMOBJ_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>pRet</name></name> <operator>=</operator> <name>pRet</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>iFlags</name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release a foreign function call context and cleanup the mess
 * left behind.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>VmReleaseCallContext</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apObj</name> <init>= <expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>apObj</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Already released */</comment>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name><name>apObj</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>apObj</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_aux_data</name> <modifier>*</modifier></type><name>aAux</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pChunk</name></decl>;</decl_stmt>
		<comment type="block">/* Automatic release of dynamically allocated chunk 
		 * using [jx9_context_alloc_chunk()].
		 */</comment>
		<expr_stmt><expr><name>aAux</name> <operator>=</operator> <operator>(</operator><name>jx9_aux_data</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
			<expr_stmt><expr><name>pChunk</name> <operator>=</operator> <name><name>aAux</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>pAuxData</name></expr>;</expr_stmt>
			<comment type="block">/* Release the chunk */</comment>
			<if_stmt><if>if<condition>( <expr><name>pChunk</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Release a jx9_value allocated from the body of a foreign function.
 * Refer to [jx9_context_release_value()] for additional information.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name></type> <name>jx9VmReleaseContextValue</name><parameter_list>(
	<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <comment type="block">/* Call context */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>  <comment type="block">/* Release this value */</comment>
	)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* NULL value is a harmless operation */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apObj</name> <init>= <expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
		<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>apObj</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>pValue</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Mark as released */</comment>
				<expr_stmt><expr><name><name>apObj</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Pop and release as many memory object from the operand stack.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>VmPopOperand</name><parameter_list>(
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTos</name></decl></parameter>, <comment type="block">/* Operand stack */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>nPop</name></decl></parameter>         <comment type="block">/* Total number of memory objects to pop */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pTos</name> <init>= <expr><operator>*</operator><name>ppTos</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>( <expr><name>nPop</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pTos</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>nPop</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/* Top of the stack */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppTos</name> <operator>=</operator> <name>pTos</name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Reserve a memory object.
 * Return a pointer to the raw jx9_value on success. NULL on failure.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_value</name> <modifier>*</modifier></type> <name>jx9VmReserveMemObj</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><name>sxu32</name> <modifier>*</modifier></type><name>pIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmSlot</name> <modifier>*</modifier></type><name>pSlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
	<comment type="block">/* Check for a free slot */</comment>
	<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><name>pSlot</name> <operator>=</operator> <operator>(</operator><name>VmSlot</name> <operator>*</operator><operator>)</operator><call><name>SySetPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFreeObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pSlot</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pSlot</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <name><name>pSlot</name><operator>-&gt;</operator><name>nIdx</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Reserve a new memory object */</comment>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmReserveMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Set a null default value */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pIdx</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>pIdx</name> <operator>=</operator> <name>nIdx</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>nIdx</name></expr>;</expr_stmt>
	<return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Extract a variable value from the top active VM frame.
 * Return a pointer to the variable value on success. 
 * NULL otherwise (non-existent variable/Out-of-memory, ...).
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_value</name> <modifier>*</modifier></type> <name>VmExtractMemObj</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,           <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>, <comment type="block">/* Variable name */</comment>
	<parameter><decl><type><name>int</name></type> <name>bDup</name></decl></parameter>,              <comment type="block">/* True to duplicate variable name */</comment>
	<parameter><decl><type><name>int</name></type> <name>bCreate</name></decl></parameter>            <comment type="block">/* True to create the variable if non-existent */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bNullify</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pFrame</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the top active frame */</comment>
	<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name></expr>;</expr_stmt>
	<comment type="block">/* Perform the lookup */</comment>
	<if_stmt><if>if<condition>( <expr><name>pName</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SyString</name></type> <name>sAnnon</name> <init>= <expr><block>{ <expr><literal type="string">" "</literal></expr> , <expr>sizeof<operator>(</operator><name>char</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name>sAnnon</name></expr>;</expr_stmt>
		<comment type="block">/* Always nullify the object */</comment>
		<expr_stmt><expr><name>bNullify</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bDup</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Check the superglobals table first */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hSuper</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Query the top active frame */</comment>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>VmSlot</name></type> <name>sLocal</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><operator>!</operator><name>bCreate</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Do not create the variable, return NULL */</comment>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* No such variable, automatically create a new one and install
			 * it in the current frame.
			 */</comment>
			<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>bDup</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Duplicate name */</comment>
				<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>SyMemBackendStrDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>zName</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<return>return <expr><literal type="number">0</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Link to the top active VM frame */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><call><name>SX_INT_TO_PTR</name><argument_list>(<argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Return the slot to the free pool */</comment>
				<expr_stmt><expr><name><name>sLocal</name><operator>.</operator><name>nIdx</name></name> <operator>=</operator> <name>nIdx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sLocal</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFreeObj</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Local variable */</comment>
				<expr_stmt><expr><name><name>sLocal</name><operator>.</operator><name>nIdx</name></name> <operator>=</operator> <name>nIdx</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sLocal</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Extract variable contents */</comment>
			<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>bNullify</name> <operator>&amp;&amp;</operator> <name>pObj</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Superglobal */</comment>
		<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Extract a superglobal variable such as $_GET, $_POST, $_HEADERS, .... 
 * Return a pointer to the variable value on success.NULL otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_value</name> <modifier>*</modifier></type> <name>VmExtractSuper</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,       <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <comment type="block">/* Superglobal name: NOT NULL TERMINATED */</comment>
	<parameter><decl><type><name>sxu32</name></type> <name>nByte</name></decl></parameter>        <comment type="block">/* zName length */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
	<comment type="block">/* Query the superglobal table */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hSuper</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* No such entry */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the superglobal index in the global object pool */</comment>
	<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract the variable value  */</comment>
	<expr_stmt><expr><name>pValue</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pValue</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Perform a raw hashmap insertion.
 * Refer to the [jx9VmConfigure()] implementation for additional information.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHashmapInsert</name><parameter_list>(
	<parameter><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl></parameter>,  <comment type="block">/* Target hashmap  */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>,   <comment type="block">/* Entry key */</comment>
	<parameter><decl><type><name>int</name></type> <name>nKeylen</name></decl></parameter>,        <comment type="block">/* zKey length*/</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl></parameter>,  <comment type="block">/* Entry data */</comment>
	<parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>            <comment type="block">/* zData length */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name></type> <name>sKey</name></decl>,<decl><type ref="prev"/><name>sValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pKey</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name><name>pMap</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pMap</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zKey</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>nKeylen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>nKeylen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nKeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pKey</name> <operator>=</operator> <operator>&amp;</operator><name>sKey</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>zData</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Compute length automatically */</comment>
			<expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the insertion */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pMap</name><operator>)</operator></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpProcessRequest</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRequest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Configure a working virtual machine instance.
 *
 * This routine is used to configure a JX9 virtual machine obtained by a prior
 * successful call to one of the compile interface such as jx9_compile()
 * jx9_compile_v2() or jx9_compile_file().
 * The second argument to this function is an integer configuration option
 * that determines what property of the JX9 virtual machine is to be configured.
 * Subsequent arguments vary depending on the configuration option in the second
 * argument. There are many verbs but the most important are JX9_VM_CONFIG_OUTPUT, 
 * JX9_VM_CONFIG_HTTP_REQUEST and JX9_VM_CONFIG_ARGV_ENTRY.
 * Refer to the official documentation for the list of allowed verbs.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmConfigure</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>nOp</name></decl></parameter>,   <comment type="block">/* Configuration verb */</comment>
	<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>   <comment type="block">/* Subsequent option arguments */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>nOp</name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>JX9_VM_CONFIG_OUTPUT</name></expr>:</case> <block>{<block_content>
		<decl_stmt><decl><type><name>ProcConsumer</name></type> <name>xConsumer</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ProcConsumer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* VM output consumer callback */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><name>xConsumer</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/* Install the output consumer */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name><operator>.</operator><name>xConsumer</name></name> <operator>=</operator> <name>xConsumer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
		<break>break;</break>
							   </block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_IMPORT_PATH</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Import path */</comment>
		  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name>SyString</name></type> <name>sPath</name></decl>;</decl_stmt>
		  <expr_stmt><expr><name>zPath</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNTRUST</name></expr></argument>)</argument_list></call></expr></cpp:if>
		  <if_stmt><if>if<condition>( <expr><name>zPath</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_EMPTY</name></expr>;</expr_stmt>
			  <break>break;</break>
		  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sPath</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <comment type="block">/* Remove trailing slashes and backslashes */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
		  <expr_stmt><expr><call><name>SyStringTrimTrailingChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sPath</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  <expr_stmt><expr><call><name>SyStringTrimTrailingChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sPath</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <comment type="block">/* Remove leading and trailing white spaces */</comment>
		  <expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if<condition>( <expr><name><name>sPath</name><operator>.</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			  <comment type="block">/* Store the path in the corresponding conatiner */</comment>
			  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aPaths</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		  <break>break;</break>
									 </block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_ERR_REPORT</name></expr>:</case>
		<comment type="block">/* Run-Time Error report */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>bErrReport</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>JX9_VM_CONFIG_RECURSION_DEPTH</name></expr>:</case><block>{<block_content>
		<comment type="block">/* Recursion depth */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>nDepth</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>nDepth</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>nDepth</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMaxDepth</name></name> <operator>=</operator> <name>nDepth</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
									   </block_content>}</block>
	<case>case <expr><name>JX9_VM_OUTPUT_LENGTH</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* VM output length in bytes */</comment>
		<decl_stmt><decl><type><name>sxu32</name> <modifier>*</modifier></type><name>pOut</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>sxu32</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><name>pOut</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><operator>*</operator><name>pOut</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>nOutputLen</name></name></expr>;</expr_stmt>
		<break>break;</break>
							   </block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_CREATE_VAR</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Create a new superglobal/global variable */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jx9_value</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nByte</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt> 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><call><name>SX_EMPTY_STR</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Check if the superglobal is already installed */</comment>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hSuper</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Variable already installed */</comment>
			<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Extract contents */</comment>
			<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Overwrite old contents */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Install a new variable */</comment>
			<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_MEM</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Copy value */</comment>
			<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Install the superglobal */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hSuper</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><call><name>SX_INT_TO_PTR</name><argument_list>(<argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<break>break;</break>
									</block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr>:</case>
	<case>case <expr><name>JX9_VM_CONFIG_ENV_ATTR</name></expr>:</case>  <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name>   <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zValue</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nLen</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>nOp</name> <operator>==</operator> <name>JX9_VM_CONFIG_ENV_ATTR</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Extract the $_ENV superglobal */</comment>
			<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmExtractSuper</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"_ENV"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"_ENV"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Extract the $_SERVER superglobal */</comment>
			<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmExtractSuper</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"_SERVER"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"_SERVER"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>pValue</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pValue</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* No such entry */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_NOTFOUND</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the hashmap */</comment>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
		<comment type="block">/* Perform the insertion */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmHashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zValue</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
								   </block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_ARGV_ENTRY</name></expr>:</case><block>{<block_content>
		<comment type="block">/* Script arguments */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zValue</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
		<comment type="block">/* Extract the $argv array */</comment>
		<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmExtractSuper</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"argv"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"argv"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pValue</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pValue</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* No such entry */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_NOTFOUND</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the hashmap */</comment>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
		<comment type="block">/* Perform the insertion */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmHashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zValue</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name> <operator>&amp;&amp;</operator> <name>zValue</name> <operator>&amp;&amp;</operator> <name><name>zValue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pMap</name><operator>-&gt;</operator><name>nEntry</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Append space separator first */</comment>
				<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sArgv</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sArgv</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zValue</name></expr></argument>,<argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
								  </block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_EXEC_VALUE</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Script return value */</comment>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppValue</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jx9_value</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><name>ppValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><operator>*</operator><name>ppValue</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sExec</name></name></expr>;</expr_stmt>
		<break>break;</break>
								   </block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_IO_STREAM</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Register an IO stream device */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>jx9_io_stream</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Make sure we are dealing with a valid IO stream */</comment>
		<if_stmt><if>if<condition>( <expr><name>pStream</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<name><name>pStream</name><operator>-&gt;</operator><name>xOpen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>xRead</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Invalid stream */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_INVALID</name></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>pDefStream</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Make the 'file://' stream the defaut stream device */</comment>
			<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pDefStream</name></name> <operator>=</operator> <name>pStream</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Insert in the appropriate container */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aIOstream</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
								  </block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_EXTRACT_OUTPUT</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Point to the VM internal output consumer buffer */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pLen</name> <init>= <macro><name>va_arg</name><argument_list>(<argument>ap</argument>, <argument>unsigned int *</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><name>ppOut</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pLen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sConsumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>pLen</name>  <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sConsumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
									   </block_content>}</block>
	<case>case <expr><name>JX9_VM_CONFIG_HTTP_REQUEST</name></expr>:</case><block>{<block_content>
		<comment type="block">/* Raw HTTP request*/</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRequest</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><call><name>SX_EMPTY_STR</name><argument_list>(<argument><expr><name>zRequest</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_EMPTY</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Compute length automatically */</comment>
			<expr_stmt><expr><name>nByte</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Process the request */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmHttpProcessRequest</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>zRequest</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
									</block_content>}</block>
	<default>default:</default>
		<comment type="block">/* Unknown configuration option */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_UNKNOWN</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>VmInstrToString</name><parameter_list>(<parameter><decl><type><name>sxi32</name></type> <name>nOp</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * This routine is used to dump JX9 bytecode instructions to a human readable
 * format.
 * The dump is redirected to the given consumer callback which is responsible
 * of consuming the generated dump perhaps redirecting it to its standard output
 * (STDOUT).
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmByteCodeDump</name><parameter_list>(
	<parameter><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pByteCode</name></decl></parameter>,       <comment type="block">/* Bytecode container */</comment>
	<parameter><decl><type><name>ProcConsumer</name></type> <name>xConsumer</name></decl></parameter>, <comment type="block">/* Dump consumer callback */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>         <comment type="block">/* Last argument to xConsumer() */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zDump</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"====================================================\n"</literal>
		<literal type="string">"JX9 VM Dump   Copyright (C) 2012-2013 Symisc Systems\n"</literal>
		<literal type="string">"                              http://jx9.symisc.net/\n"</literal>
		<literal type="string">"====================================================\n"</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmInstr</name> <modifier>*</modifier></type><name>pInstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the JX9 instructions */</comment>
	<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <operator>(</operator><name>VmInstr</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><name>pByteCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pEnd</name>   <operator>=</operator> <operator>&amp;</operator><name><name>pInstr</name><index>[<expr><call><name>SySetUsed</name><argument_list>(<argument><expr><name>pByteCode</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xConsumer</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zDump</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zDump</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Dump instructions */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>pInstr</name> <operator>&gt;=</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* No more instructions */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Format and call the consumer callback */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyProcFormat</name><argument_list>(<argument><expr><name>xConsumer</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="string">"%s %8d %8u %#8x [%u]\n"</literal></expr></argument>, 
			<argument><expr><call><name>VmInstrToString</name><argument_list>(<argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr></argument>, 
			<argument><expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Consumer routine request an operation abort */</comment>
			<return>return <expr><name>rc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pInstr</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Next instruction in the stream */</comment>
	</block_content>}</block></for>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Consume a generated run-time error message by invoking the VM output
 * consumer callback.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmCallErrorHandler</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_output_consumer</name> <modifier>*</modifier></type><name>pCons</name> <init>= <expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Append a new line */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Invoke the output consumer callback */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCons</name><operator>-&gt;</operator><name>xConsumer</name></name><argument_list>(<argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pCons</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Increment output length */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nOutputLen</name></name> <operator>+=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Throw a run-time error and invoke the supplied VM output consumer callback.
 * Refer to the implementation of [jx9_context_throw_error()] for additional
 * information.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmThrowError</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,         <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pFuncName</name></decl></parameter>, <comment type="block">/* Function name. NULL otherwise */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iErr</name></decl></parameter>,          <comment type="block">/* Severity level: [i.e: Error, Warning or Notice]*/</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMessage</name></decl></parameter> <comment type="block">/* Null terminated error message */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pWorker</name> <init>= <expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sWorker</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pVm</name><operator>-&gt;</operator><name>bErrReport</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't bother reporting errors */</comment>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reset the working buffer */</comment>
	<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Peek the processed file if available */</comment>
	<expr_stmt><expr><name>pFile</name> <operator>=</operator> <operator>(</operator><name>SyString</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFile</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Append file name */</comment>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Error: "</literal></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name>iErr</name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>JX9_CTX_WARNING</name></expr>:</case> <expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Warning: "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_CTX_NOTICE</name></expr>:</case>  <expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Notice: "</literal></expr>;</expr_stmt>  <break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><name>iErr</name> <operator>=</operator> <name>JX9_CTX_ERR</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFuncName</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Append function name first */</comment>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="string">"(): "</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"(): "</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zMessage</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Consume the error message */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmCallErrorHandler</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Format and throw a run-time error and invoke the supplied VM output consumer callback.
 * Refer to the implementation of [jx9_context_throw_error_format()] for additional
 * information.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmThrowErrorAp</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,         <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pFuncName</name></decl></parameter>, <comment type="block">/* Function name. NULL otherwise */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iErr</name></decl></parameter>,          <comment type="block">/* Severity level: [i.e: Error, Warning or Notice] */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <comment type="block">/* Format message */</comment>
	<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>           <comment type="block">/* Variable list of arguments */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pWorker</name> <init>= <expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sWorker</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pVm</name><operator>-&gt;</operator><name>bErrReport</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't bother reporting errors */</comment>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reset the working buffer */</comment>
	<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Peek the processed file if available */</comment>
	<expr_stmt><expr><name>pFile</name> <operator>=</operator> <operator>(</operator><name>SyString</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFile</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Append file name */</comment>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Error: "</literal></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name>iErr</name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>JX9_CTX_WARNING</name></expr>:</case> <expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Warning: "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_CTX_NOTICE</name></expr>:</case>  <expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Notice: "</literal></expr>;</expr_stmt>  <break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><name>iErr</name> <operator>=</operator> <name>JX9_CTX_ERR</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFuncName</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Append function name first */</comment>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pFuncName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="string">"(): "</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"(): "</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Consume the error message */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmCallErrorHandler</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Format and throw a run-time error and invoke the supplied VM output consumer callback.
 * Refer to the implementation of [jx9_context_throw_error_format()] for additional
 * information.
 * ------------------------------------
 * Simple boring wrapper function.
 * ------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmErrorFormat</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmThrowErrorAp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iErr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Format and throw a run-time error and invoke the supplied VM output consumer callback.
 * Refer to the implementation of [jx9_context_throw_error_format()] for additional
 * information.
 * ------------------------------------
 * Simple boring wrapper function.
 * ------------------------------------
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmThrowErrorAp</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pFuncName</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmThrowErrorAp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pFuncName</name><operator>)</operator></expr></argument>, <argument><expr><name>iErr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmLocalExec</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pByteCode</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResult</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Execute as much of a JX9 bytecode program as we can then return.
 *
 * [jx9VmMakeReady()] must be called before this routine in order to
 * close the program with a final OP_DONE and to set up the default
 * consumer routines and other stuff. Refer to the implementation
 * of [jx9VmMakeReady()] for additional information.
 * If the installed VM output consumer callback ever returns JX9_ABORT
 * then the program execution is halted.
 * After this routine has finished, [jx9VmRelease()] or [jx9VmReset()]
 * should be used respectively to clean up the mess that was left behind
 * or to reset the VM to it's initial state.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmByteCodeExec</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,         <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>VmInstr</name> <modifier>*</modifier></type><name>aInstr</name></decl></parameter>,     <comment type="block">/* JX9 bytecode program */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pStack</name></decl></parameter>,   <comment type="block">/* Operand stack */</comment>
	<parameter><decl><type><name>int</name></type> <name>nTos</name></decl></parameter>,            <comment type="block">/* Top entry in the operand stack (usually -1) */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResult</name></decl></parameter>  <comment type="block">/* Store program return value here. NULL otherwise */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmInstr</name> <modifier>*</modifier></type><name>pInstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pTos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SySet</name></type> <name>aArg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>pc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Argument container */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nTos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pTos</name> <operator>=</operator> <operator>&amp;</operator><name><name>pStack</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>pTos</name> <operator>=</operator> <operator>&amp;</operator><name><name>pStack</name><index>[<expr><name>nTos</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>pc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Execute as much as we can */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<comment type="block">/* Fetch the instruction to execute */</comment>
		<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <operator>&amp;</operator><name><name>aInstr</name><index>[<expr><name>pc</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
<comment type="block">/*
 * What follows here is a massive switch statement where each case implements a
 * separate instruction in the virtual machine.  If we follow the usual
 * indentation convention each case should be indented by 6 spaces.  But
 * that is a lot of wasted space on the left margin.  So the code within
 * the switch statement will break with convention and be flush-left.
 */</comment>
		<switch>switch<condition>(<expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name></expr>)</condition><block>{<block_content>
<comment type="block">/*
 * DONE: P1 * * 
 *
 * Program execution completed: Clean up the mess left behind
 * and return immediately.
 */</comment>
<case>case <expr><name>JX9_OP_DONE</name></expr>:</case>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
			<goto>goto <name>Abort</name>;</goto>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if<condition>( <expr><name>pResult</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Execution result */</comment>
			<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>		
		<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<goto>goto <name>Done</name>;</goto>
<comment type="block">/*
 * HALT: P1 * *
 *
 * Program execution aborted: Clean up the mess left behind
 * and abort immediately.
 */</comment>
<case>case <expr><name>JX9_OP_HALT</name></expr>:</case>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
			<goto>goto <name>Abort</name>;</goto>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Output the exit message */</comment>
				<expr_stmt><expr><call><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name><operator>.</operator><name>xConsumer</name></name><argument_list>(<argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, 
					<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name><operator>.</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Increment output length */</comment>
					<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nOutputLen</name></name> <operator>+=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Record exit status */</comment>
			<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>iExitStatus</name></name> <operator>=</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<goto>goto <name>Abort</name>;</goto>
<comment type="block">/*
 * JMP: * P2 *
 *
 * Unconditional jump: The next instruction executed will be 
 * the one at index P2 from the beginning of the program.
 */</comment>
<case>case <expr><name>JX9_OP_JMP</name></expr>:</case>
	<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<break>break;</break>
<comment type="block">/*
 * JZ: P1 P2 *
 *
 * Take the jump if the top value is zero (FALSE jump).Pop the top most
 * entry in the stack if P1 is zero. 
 */</comment>
<case>case <expr><name>JX9_OP_JZ</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Get a boolean value */</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Take the jump */</comment>
		<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
<comment type="block">/*
 * JNZ: P1 P2 *
 *
 * Take the jump if the top value is not zero (TRUE jump).Pop the top most
 * entry in the stack if P1 is zero.
 */</comment>
<case>case <expr><name>JX9_OP_JNZ</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Get a boolean value */</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Take the jump */</comment>
		<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
<comment type="block">/*
 * NOOP: * * *
 *
 * Do nothing. This instruction is often useful as a jump
 * destination.
 */</comment>
<case>case <expr><name>JX9_OP_NOOP</name></expr>:</case>
	<break>break;</break>
<comment type="block">/*
 * POP: P1 * *
 *
 * Pop P1 elements from the operand stack.
 */</comment>
<case>case <expr><name>JX9_OP_POP</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>n</name> <init>= <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* TICKET 1433-51 Stack underflow must be handled at run-time */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><operator>(</operator><name>pTos</name> <operator>-</operator> <name>pStack</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/*
 * CVT_INT: * * *
 *
 * Force the top of the stack to be an integer.
 */</comment>
<case>case <expr><name>JX9_OP_CVT_INT</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Invalidate any prior representation */</comment>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
<comment type="block">/*
 * CVT_REAL: * * *
 *
 * Force the top of the stack to be a real.
 */</comment>
<case>case <expr><name>JX9_OP_CVT_REAL</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Invalidate any prior representation */</comment>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
<comment type="block">/*
 * CVT_STR: * * *
 *
 * Force the top of the stack to be a string.
 */</comment>
<case>case <expr><name>JX9_OP_CVT_STR</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
<comment type="block">/*
 * CVT_BOOL: * * *
 *
 * Force the top of the stack to be a boolean.
 */</comment>
<case>case <expr><name>JX9_OP_CVT_BOOL</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
<comment type="block">/*
 * CVT_NULL: * * *
 *
 * Nullify the top of the stack.
 */</comment>
<case>case <expr><name>JX9_OP_CVT_NULL</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
<comment type="block">/*
 * CVT_NUMC: * * *
 *
 * Force the top of the stack to be a numeric type (integer, real or both).
 */</comment>
<case>case <expr><name>JX9_OP_CVT_NUMC</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force a numeric cast */</comment>
	<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
<comment type="block">/*
 * CVT_ARRAY: * * *
 *
 * Force the top of the stack to be a hashmap aka 'array'.
 */</comment>
<case>case <expr><name>JX9_OP_CVT_ARRAY</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force a hashmap cast */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjToHashmap</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Not so fatal, emit a simple warning */</comment>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, 
			<argument><expr><literal type="string">"JX9 engine is running out of memory while performing an array cast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
<comment type="block">/*
 * LOADC P1 P2 *
 *
 * Load a constant [i.e: JX9_EOL, JX9_OS, __TIME__, ...] indexed at P2 in the constant pool.
 * If P1 is set, then this constant is candidate for expansion via user installable callbacks.
 */</comment>
<case>case <expr><name>JX9_OP_LOADC</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<comment type="block">/* Reserve a room */</comment>
	<expr_stmt><expr><name>pTos</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aLitObj</name></name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">64</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
			<comment type="block">/* Candidate for expansion via user defined callbacks */</comment>
			<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hConstant</name></name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
				<decl_stmt><decl><type><name>jx9_constant</name> <modifier>*</modifier></type><name>pCons</name> <init>= <expr><operator>(</operator><name>jx9_constant</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr></init></decl>;</decl_stmt>
				<comment type="block">/* Set a NULL default value */</comment>
				<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Invoke the callback and deal with the expanded value */</comment>
				<expr_stmt><expr><call><name><name>pCons</name><operator>-&gt;</operator><name>xExpand</name></name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name><name>pCons</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Mark as constant */</comment>
				<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjLoad</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Set a NULL value */</comment>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Mark as constant */</comment>
	<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt>
	<break>break;</break>
				  </block_content>}</block>
<comment type="block">/*
 * LOAD: P1 * P3
 *
 * Load a variable where it's name is taken from the top of the stack or
 * from the P3 operand.
 * If P1 is set, then perform a lookup only.In other words do not create
 * the variable if non existent and push the NULL constant instead.
 */</comment>
<case>case <expr><name>JX9_OP_LOAD</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Take the variable name from the top of the stack */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
			<goto>goto <name>Abort</name>;</goto>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/* Force a string cast */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Reserve a room for the target object */</comment>
		<expr_stmt><expr><name>pTos</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Extract the requested memory object */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Variable not found, load NULL */</comment>
			<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt> <comment type="block">/* Mark as constant */</comment>
			<break>break;</break>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Fatal error */</comment>
			<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Fatal, JX9 engine is running out of memory while loading variable '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>Abort</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Load variable contents */</comment>
	<expr_stmt><expr><call><name>jx9MemObjLoad</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>nIdx</name></name></expr>;</expr_stmt>
	<break>break;</break>
				   </block_content>}</block>
<comment type="block">/*
 * LOAD_MAP P1 * *
 *
 * Allocate a new empty hashmap (array in the JX9 jargon) and push it on the stack.
 * If the P1 operand is greater than zero then pop P1 elements from the
 * stack and insert them (key =&gt; value pair) in the new hashmap.
 */</comment>
<case>case <expr><name>JX9_OP_LOAD_MAP</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>is_json_object</name></decl>;</decl_stmt> <comment type="block">/* TRUE if we are dealing with a JSON object */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>iIncr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new hashmap instance */</comment>
	<expr_stmt><expr><name>pMap</name> <operator>=</operator> <call><name>jx9NewHashmap</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pMap</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, 
			<argument><expr><literal type="string">"Fatal, JX9 engine is running out of memory while loading JSON array/object at instruction #:%d"</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>is_json_object</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* JSON object, record that */</comment>
		<expr_stmt><expr><name><name>pMap</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>|=</operator> <name>HASHMAP_JSON_OBJECT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_json_object</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>iIncr</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="block">/* Point to the first entry */</comment>
		<comment type="block">/* Perform the insertion */</comment>
		<while>while<condition>( <expr><name>pEntry</name> <operator>&lt;=</operator> <name>pTos</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Standard insertion */</comment>
			<expr_stmt><expr><call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, 
				<argument><expr><ternary><condition><expr><name>is_json_object</name></expr> ?</condition><then> <expr><name>pEntry</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument> <comment type="block">/* Automatic index assign */</comment>,
				<argument><expr><ternary><condition><expr><name>is_json_object</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pEntry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>pEntry</name></expr></else></ternary></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>			
			<comment type="block">/* Next pair on the stack */</comment>
			<expr_stmt><expr><name>pEntry</name> <operator>+=</operator> <name>iIncr</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<comment type="block">/* Pop P1 elements */</comment>
		<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Push the hashmap */</comment>
	<expr_stmt><expr><name>pTos</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_HASHMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
					  </block_content>}</block>
<comment type="block">/*
 * LOAD_IDX: P1 P2 *
 *
 * Load a hasmap entry where it's index (either numeric or string) is taken
 * from the stack.
 * If the index does not refer to a valid element, then push the NULL constant
 * instead.
 */</comment>
<case>case <expr><name>JX9_OP_LOAD_IDX</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap_node</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr>)</condition><block>{<block_content>
			<comment type="block">/* No available index, load NULL */</comment>
			<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&gt;=</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* TICKET 1433-020: Empty stack */</comment>
				<expr_stmt><expr><name>pTos</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<comment type="block">/* Emit a notice */</comment>
			<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_NOTICE</name></expr></argument>, 
				<argument><expr><literal type="string">"JSON Array/Object: Attempt to access an undefined member, JX9 is loading NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>pIdx</name> <operator>=</operator> <name>pTos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pTos</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* String access */</comment>
		<if_stmt><if>if<condition>( <expr><name>pIdx</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>sxu32</name></type> <name>nOfft</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pIdx</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Force an int cast */</comment>
				<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>nOfft</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>nOfft</name> <operator>&gt;=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<comment type="block">/* Invalid offset, load null */</comment>
				<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>zData</name><index>[<expr><name>nOfft</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* No available index, load NULL */</comment>
			<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<break>break;</break>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>!=</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjToHashmap</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>jx9MemObjLoad</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_NOTFOUND</name></expr>;</expr_stmt> <comment type="block">/* Assume the index is invalid */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Point to the hashmap */</comment>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pIdx</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Load the desired entry */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapLookup</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name> <operator>&amp;&amp;</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Create a new empty entry */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Point to the last inserted entry */</comment>
				<expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pMap</name><operator>-&gt;</operator><name>pLast</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>pIdx</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Load entry contents */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pMap</name><operator>-&gt;</operator><name>iRef</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* TICKET 1433-42: Array will be deleted shortly, so we will make a copy
			 * of the entry value, rather than pointing to it.
			 */</comment>
			<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9HashmapExtractNodeValue</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>nValIdx</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9HashmapExtractNodeValue</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such entry, load NULL */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
					  </block_content>}</block>
<comment type="block">/*
 * STORE * P2 P3
 *
 * Perform a store (Assignment) operation.
 */</comment>
<case>case <expr><name>JX9_OP_STORE</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
		<comment type="block">/* Member store operation */</comment>
		<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nIdx</name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, 
				<argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute, JX9 is loading NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Point to the desired memory object */</comment>
			<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Perform the store operation */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<break>break;</break>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Take the variable name from the next on the stack */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Force a string cast */</comment>
			<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pTos</name><operator>--</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
		<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr>  )</condition><block>{<block_content>
			<goto>goto <name>Abort</name>;</goto>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Extract the desired variable and if not available dynamically create it */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, 
			<argument><expr><literal type="string">"Fatal, JX9 engine is running out of memory while loading variable '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the store operation */</comment>
	<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				   </block_content>}</block>
<comment type="block">/*
 * STORE_IDX:   P1 * P3
 *
 * Perfrom a store operation an a hashmap entry.
 */</comment>
<case>case <expr><name>JX9_OP_STORE_IDX</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc  warning */</comment>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Key is next on stack */</comment>
		<expr_stmt><expr><name>pKey</name> <operator>=</operator> <name>pTos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pTos</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>pKey</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Hashmap already loaded */</comment>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pMap</name><operator>-&gt;</operator><name>iRef</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* TICKET 1433-48: Prevent garbage collection */</comment>
			<expr_stmt><expr><name><name>pMap</name><operator>-&gt;</operator><name>iRef</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name>pKey</name></expr> )</condition><block>{<block_content>
			  <expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Phase#1: Load the array */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator></expr>  )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name><operator>&amp;</operator><name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Force a string cast */</comment>
				<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>pKey</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Append string */</comment>
				<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<decl_stmt><decl><type><name>sxu32</name></type> <name>nOfft</name></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pKey</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator></expr>)</condition><block>{<block_content>
					<comment type="block">/* Force an int cast */</comment>
					<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>nOfft</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name><name>pKey</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>nOfft</name> <argument_list type="generic">&lt; <argument><expr><name>SyBlobLength</name><operator>(</operator><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>SyBlobLength</name><operator>(</operator><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBlob</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zData</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name>zData</name><index>[<expr><name>nOfft</name></expr>]</index></name> <operator>=</operator> <name><name>zBlob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
						<comment type="block">/* Perform an append operation */</comment>
						<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>pKey</name></expr> )</condition><block>{<block_content>
			  <expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Force a hashmap cast  */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjToHashmap</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Fatal, JX9 engine is running out of memory while creating a new array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>Abort</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Phase#2: Perform the insertion */</comment>
	<expr_stmt><expr><call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<if_stmt><if>if<condition>( <expr><name>pKey</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
					   </block_content>}</block>
<comment type="block">/*
 * INCR: P1 * *
 *
 * Force a numeric cast and increment the top of the stack by 1.
 * If the P1 operand is set then perform a duplication of the top of
 * the stack and increment after that.
 */</comment>
<case>case <expr><name>JX9_OP_INCR</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_HASHMAP</name><operator>|</operator><name>MEMOBJ_RES</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>!=</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Force a numeric cast */</comment>
				<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name><operator>++</operator></expr>;</expr_stmt>
					<comment type="block">/* Try to get an integer representation */</comment>
					<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Pre-icrement */</comment>
					<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Force a numeric cast */</comment>
				<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Pre-increment */</comment>
				<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name><operator>++</operator></expr>;</expr_stmt>
					<comment type="block">/* Try to get an integer representation */</comment>
					<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
<comment type="block">/*
 * DECR: P1 * *
 *
 * Force a numeric cast and decrement the top of the stack by 1.
 * If the P1 operand is set then perform a duplication of the top of the stack 
 * and decrement after that.
 */</comment>
<case>case <expr><name>JX9_OP_DECR</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_HASHMAP</name><operator>|</operator><name>MEMOBJ_RES</name><operator>|</operator><name>MEMOBJ_NULL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Force a numeric cast */</comment>
		<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>!=</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Force a numeric cast */</comment>
				<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name><operator>--</operator></expr>;</expr_stmt>
					<comment type="block">/* Try to get an integer representation */</comment>
					<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Pre-icrement */</comment>
					<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Pre-increment */</comment>
				<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name><operator>--</operator></expr>;</expr_stmt>
					<comment type="block">/* Try to get an integer representation */</comment>
					<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
<comment type="block">/*
 * UMINUS: * * *
 *
 * Perform a unary minus operation.
 */</comment>
<case>case <expr><name>JX9_OP_UMINUS</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force a numeric (integer, real or both) cast */</comment>
	<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <operator>-</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <operator>-</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>				   
<comment type="block">/*
 * UPLUS: * * *
 *
 * Perform a unary plus operation.
 */</comment>
<case>case <expr><name>JX9_OP_UPLUS</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force a numeric (integer, real or both) cast */</comment>
	<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <operator>+</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <operator>+</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
<comment type="block">/*
 * OP_LNOT: * * *
 *
 * Interpret the top of the stack as a boolean value.  Replace it
 * with its complement.
 */</comment>
<case>case <expr><name>JX9_OP_LNOT</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force a boolean cast */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <operator>!</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<break>break;</break>
<comment type="block">/*
 * OP_BITNOT: * * *
 *
 * Interpret the top of the stack as an value.Replace it
 * with its ones-complement.
 */</comment>
<case>case <expr><name>JX9_OP_BITNOT</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force an integer cast */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <operator>~</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<break>break;</break>
<comment type="block">/* OP_MUL * * *
 * OP_MUL_STORE * * *
 *
 * Pop the top two elements from the stack, multiply them together, 
 * and push the result back onto the stack.
 */</comment>
<case>case <expr><name>JX9_OP_MUL</name></expr>:</case>
<case>case <expr><name>JX9_OP_MUL_STORE</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Force the operand to be numeric */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<if_stmt><if>if<condition>( <expr><name>MEMOBJ_REAL</name> <operator>&amp;</operator> <operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name><operator>|</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* Floating point arithemic */</comment>
		<decl_stmt><decl><type><name>jx9_real</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
		<comment type="block">/* Push the result */</comment>
		<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Try to get an integer representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Integer arithmetic */</comment>
		<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
		<comment type="block">/* Push the result */</comment>
		<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_MUL_STORE</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_ADD * * *
 *
 * Pop the top two elements from the stack, add them together, 
 * and push the result back onto the stack.
 */</comment>
<case>case <expr><name>JX9_OP_ADD</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Perform the addition */</comment>
	<expr_stmt><expr><call><name>jx9MemObjAdd</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/*
 * OP_ADD_STORE * * *
 *
 * Pop the top two elements from the stack, add them together, 
 * and push the result back onto the stack.
 */</comment>
<case>case <expr><name>JX9_OP_ADD_STORE</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Perform the addition */</comment>
	<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjAdd</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Peform the store operation */</comment>
	<if_stmt><if>if<condition>( <expr><name>nIdx</name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Ticket 1433-35: Perform a stack dup */</comment>
	<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/* OP_SUB * * *
 *
 * Pop the top two elements from the stack, subtract the
 * first (what was next on the stack) from the second (the
 * top of the stack) and push the result back onto the stack.
 */</comment>
<case>case <expr><name>JX9_OP_SUB</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name>MEMOBJ_REAL</name> <operator>&amp;</operator> <operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name><operator>|</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* Floating point arithemic */</comment>
		<decl_stmt><decl><type><name>jx9_real</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt> 
		<comment type="block">/* Push the result */</comment>
		<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Try to get an integer representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Integer arithmetic */</comment>
		<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>
		<comment type="block">/* Push the result */</comment>
		<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_SUB_STORE * * *
 *
 * Pop the top two elements from the stack, subtract the
 * first (what was next on the stack) from the second (the
 * top of the stack) and push the result back onto the stack.
 */</comment>
<case>case <expr><name>JX9_OP_SUB_STORE</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name>MEMOBJ_REAL</name> <operator>&amp;</operator> <operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name><operator>|</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* Floating point arithemic */</comment>
		<decl_stmt><decl><type><name>jx9_real</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt> 
		<comment type="block">/* Push the result */</comment>
		<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Try to get an integer representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Integer arithmetic */</comment>
		<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>
		<comment type="block">/* Push the result */</comment>
		<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>

<comment type="block">/*
 * OP_MOD * * *
 *
 * Pop the top two elements from the stack, divide the
 * first (what was next on the stack) from the second (the
 * top of the stack) and push the remainder after division 
 * onto the stack.
 * Note: Only integer arithemtic is allowed.
 */</comment>
<case>case <expr><name>JX9_OP_MOD</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force the operands to be integer */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Division by zero %qd%%0"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* goto Abort; */</comment>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Push the result */</comment>
	<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/*
 * OP_MOD_STORE * * *
 *
 * Pop the top two elements from the stack, divide the
 * first (what was next on the stack) from the second (the
 * top of the stack) and push the remainder after division 
 * onto the stack.
 * Note: Only integer arithemtic is allowed.
 */</comment>
<case>case <expr><name>JX9_OP_MOD_STORE</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force the operands to be integer */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Division by zero %qd%%0"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* goto Abort; */</comment>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Push the result */</comment>
	<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/*
 * OP_DIV * * *
 * 
 * Pop the top two elements from the stack, divide the
 * first (what was next on the stack) from the second (the
 * top of the stack) and push the result onto the stack.
 * Note: Only floating point arithemtic is allowed.
 */</comment>
<case>case <expr><name>JX9_OP_DIV</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_real</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force the operands to be real */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Division by zero */</comment>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Division by zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* goto Abort; */</comment>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>/</operator><name>b</name></expr>;</expr_stmt>
		<comment type="block">/* Push the result */</comment>
		<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Try to get an integer representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/*
 * OP_DIV_STORE * * *
 * 
 * Pop the top two elements from the stack, divide the
 * first (what was next on the stack) from the second (the
 * top of the stack) and push the result onto the stack.
 * Note: Only floating point arithemtic is allowed.
 */</comment>
<case>case <expr><name>JX9_OP_DIV_STORE</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_real</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force the operands to be real */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Division by zero */</comment>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Division by zero %qd/0"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* goto Abort; */</comment>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>/</operator><name>b</name></expr>;</expr_stmt>
		<comment type="block">/* Push the result */</comment>
		<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Try to get an integer representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/* OP_BAND * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the bit-wise AND of the
 * two elements.
*/</comment>
<comment type="block">/* OP_BOR * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the bit-wise OR of the
 * two elements.
 */</comment>
<comment type="block">/* OP_BXOR * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the bit-wise XOR of the
 * two elements.
 */</comment>
<case>case <expr><name>JX9_OP_BAND</name></expr>:</case>
<case>case <expr><name>JX9_OP_BOR</name></expr>:</case>
<case>case <expr><name>JX9_OP_BXOR</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force the operands to be integer */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>JX9_OP_BOR_STORE</name></expr>:</case>
	<case>case <expr><name>JX9_OP_BOR</name></expr>:</case>  <expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>|</operator><name>b</name></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BXOR_STORE</name></expr>:</case>
	<case>case <expr><name>JX9_OP_BXOR</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>^</operator><name>b</name></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BAND_STORE</name></expr>:</case>
	<case>case <expr><name>JX9_OP_BAND</name></expr>:</case>
	<default>default:</default>          <expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>&amp;</operator><name>b</name></expr>;</expr_stmt> <break>break;</break>
	</block_content>}</block></switch>
	<comment type="block">/* Push the result */</comment>
	<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_BAND_STORE * * * 
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the bit-wise AND of the
 * two elements.
*/</comment>
<comment type="block">/* OP_BOR_STORE * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the bit-wise OR of the
 * two elements.
 */</comment>
<comment type="block">/* OP_BXOR_STORE * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the bit-wise XOR of the
 * two elements.
 */</comment>
<case>case <expr><name>JX9_OP_BAND_STORE</name></expr>:</case>
<case>case <expr><name>JX9_OP_BOR_STORE</name></expr>:</case>
<case>case <expr><name>JX9_OP_BXOR_STORE</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force the operands to be integer */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>JX9_OP_BOR_STORE</name></expr>:</case>
	<case>case <expr><name>JX9_OP_BOR</name></expr>:</case>  <expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>|</operator><name>b</name></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BXOR_STORE</name></expr>:</case>
	<case>case <expr><name>JX9_OP_BXOR</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>^</operator><name>b</name></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BAND_STORE</name></expr>:</case>
	<case>case <expr><name>JX9_OP_BAND</name></expr>:</case>
	<default>default:</default>          <expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name><operator>&amp;</operator><name>b</name></expr>;</expr_stmt> <break>break;</break>
	</block_content>}</block></switch>
	<comment type="block">/* Push the result */</comment>
	<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_SHL * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the second element shifted
 * left by N bits where N is the top element on the stack.
 * Note: Only integer arithmetic is allowed.
 */</comment>
<comment type="block">/* OP_SHR * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the second element shifted
 * right by N bits where N is the top element on the stack.
 * Note: Only integer arithmetic is allowed.
 */</comment>
<case>case <expr><name>JX9_OP_SHL</name></expr>:</case>
<case>case <expr><name>JX9_OP_SHR</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>b</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force the operands to be integer */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_SHL</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>&lt;&lt;</operator> <name>b</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Push the result */</comment>
	<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/*  OP_SHL_STORE * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the second element shifted
 * left by N bits where N is the top element on the stack.
 * Note: Only integer arithmetic is allowed.
 */</comment>
<comment type="block">/* OP_SHR_STORE * * *
 *
 * Pop the top two elements from the stack.  Convert both elements
 * to integers.  Push back onto the stack the second element shifted
 * right by N bits where N is the top element on the stack.
 * Note: Only integer arithmetic is allowed.
 */</comment>
<case>case <expr><name>JX9_OP_SHL_STORE</name></expr>:</case>
<case>case <expr><name>JX9_OP_SHR_STORE</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>b</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force the operands to be integer */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_SHL_STORE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>&lt;&lt;</operator> <name>b</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Push the result */</comment>
	<expr_stmt><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* CAT:  P1 * *
 *
 * Pop P1 elements from the stack. Concatenate them togeher and push the result
 * back.
 */</comment>
<case>case <expr><name>JX9_OP_CAT</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pNos</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>pNos</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force a string cast */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pCur</name> <operator>=</operator> <operator>&amp;</operator><name><name>pNos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>pCur</name> <operator>&lt;=</operator> <name>pTos</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Perform the concatenation */</comment>
		<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pCur</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>pTos</name> <operator>=</operator> <name>pNos</name></expr>;</expr_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/*  CAT_STORE: * * *
 *
 * Pop two elements from the stack. Concatenate them togeher and push the result
 * back.
 */</comment>
<case>case <expr><name>JX9_OP_CAT_STORE</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Force a string cast */</comment>
		<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Force a string cast */</comment>
		<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the concatenation (Reverse order) */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the store operation */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Cannot perform assignment on a constant object attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/* OP_AND: * * *
 *
 * Pop two values off the stack.  Take the logical AND of the
 * two values and push the resulting boolean value back onto the
 * stack. 
 */</comment>
<comment type="block">/* OP_OR: * * *
 *
 * Pop two values off the stack.  Take the logical OR of the
 * two values and push the resulting boolean value back onto the
 * stack. 
 */</comment>
<case>case <expr><name>JX9_OP_LAND</name></expr>:</case>
<case>case <expr><name>JX9_OP_LOR</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>    <comment type="block">/* 0==TRUE, 1==FALSE, 2==UNKNOWN or NULL */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force a boolean cast */</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>v1</name> <operator>=</operator> <ternary><condition><expr><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>v2</name> <operator>=</operator> <ternary><condition><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_LAND</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>and_logic</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>v1</name> <operator>=</operator> <name><name>and_logic</name><index>[<expr><name>v1</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>v2</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>or_logic</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>v1</name> <operator>=</operator> <name><name>or_logic</name><index>[<expr><name>v1</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>v2</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>v1</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>v1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <ternary><condition><expr><name>v1</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_LXOR: * * *
 *
 * Pop two values off the stack. Take the logical XOR of the
 * two values and push the resulting boolean value back onto the
 * stack.
 * According to the JX9 language reference manual:
 *  $a xor $b is evaluated to TRUE if either $a or $b is 
 *  TRUE, but not both.
 */</comment>
<case>case <expr><name>JX9_OP_LXOR</name></expr>:</case><block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Force a boolean cast */</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pNos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_EQ P1 P2 P3
 *
 * Pop the top two elements from the stack.  If they are equal, then
 * jump to instruction P2.  Otherwise, continue to the next instruction.
 * If P2 is zero, do not jump.  Instead, push a boolean 1 (TRUE) onto the
 * stack if the jump would have been taken, or a 0 (FALSE) if not. 
 */</comment>
<comment type="block">/* OP_NEQ P1 P2 P3
 *
 * Pop the top two elements from the stack. If they are not equal, then
 * jump to instruction P2. Otherwise, continue to the next instruction.
 * If P2 is zero, do not jump.  Instead, push a boolean 1 (TRUE) onto the
 * stack if the jump would have been taken, or a 0 (FALSE) if not.
 */</comment>
<case>case <expr><name>JX9_OP_EQ</name></expr>:</case>
<case>case <expr><name>JX9_OP_NEQ</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Perform the comparison and act accordingly */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjCmp</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_EQ</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Push comparison result without taking the jump */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Jump to the desired location */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_TEQ P1 P2 *
 *
 * Pop the top two elements from the stack. If they have the same type and are equal
 * then jump to instruction P2. Otherwise, continue to the next instruction.
 * If P2 is zero, do not jump. Instead, push a boolean 1 (TRUE) onto the
 * stack if the jump would have been taken, or a 0 (FALSE) if not. 
 */</comment>
<case>case <expr><name>JX9_OP_TEQ</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Perform the comparison and act accordingly */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjCmp</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Push comparison result without taking the jump */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Jump to the desired location */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_TNE P1 P2 *
 *
 * Pop the top two elements from the stack.If they are not equal an they are not 
 * of the same type, then jump to instruction P2. Otherwise, continue to the next 
 * instruction.
 * If P2 is zero, do not jump. Instead, push a boolean 1 (TRUE) onto the
 * stack if the jump would have been taken, or a 0 (FALSE) if not.
 * 
 */</comment>
<case>case <expr><name>JX9_OP_TNE</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Perform the comparison and act accordingly */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjCmp</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Push comparison result without taking the jump */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Jump to the desired location */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
				 </block_content>}</block>
<comment type="block">/* OP_LT P1 P2 P3
 *
 * Pop the top two elements from the stack. If the second element (the top of stack)
 * is less than the first (next on stack), then jump to instruction P2.Otherwise
 * continue to the next instruction. In other words, jump if pNos&lt;pTos.
 * If P2 is zero, do not jump.Instead, push a boolean 1 (TRUE) onto the
 * stack if the jump would have been taken, or a 0 (FALSE) if not.
 * 
 */</comment>
<comment type="block">/* OP_LE P1 P2 P3
 *
 * Pop the top two elements from the stack. If the second element (the top of stack)
 * is less than or equal to the first (next on stack), then jump to instruction P2.
 * Otherwise continue to the next instruction. In other words, jump if pNos&lt;pTos.
 * If P2 is zero, do not jump.Instead, push a boolean 1 (TRUE) onto the
 * stack if the jump would have been taken, or a 0 (FALSE) if not.
 * 
 */</comment>
<case>case <expr><name>JX9_OP_LT</name></expr>:</case>
<case>case <expr><name>JX9_OP_LE</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Perform the comparison and act accordingly */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjCmp</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_LE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Push comparison result without taking the jump */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Jump to the desired location */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/* OP_GT P1 P2 P3
 *
 * Pop the top two elements from the stack. If the second element (the top of stack)
 * is greater than the first (next on stack), then jump to instruction P2.Otherwise
 * continue to the next instruction. In other words, jump if pNos&lt;pTos.
 * If P2 is zero, do not jump.Instead, push a boolean 1 (TRUE) onto the
 * stack if the jump would have been taken, or a 0 (FALSE) if not.
 * 
 */</comment>
<comment type="block">/* OP_GE P1 P2 P3
 *
 * Pop the top two elements from the stack. If the second element (the top of stack)
 * is greater than or equal to the first (next on stack), then jump to instruction P2.
 * Otherwise continue to the next instruction. In other words, jump if pNos&lt;pTos.
 * If P2 is zero, do not jump.Instead, push a boolean 1 (TRUE) onto the
 * stack if the jump would have been taken, or a 0 (FALSE) if not.
 * 
 */</comment>
<case>case <expr><name>JX9_OP_GT</name></expr>:</case>
<case>case <expr><name>JX9_OP_GE</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pNos</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Perform the comparison and act accordingly */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pNos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjCmp</name><argument_list>(<argument><expr><name>pNos</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_GE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Push comparison result without taking the jump */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Jump to the desired location */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
				</block_content>}</block>
<comment type="block">/*
 * OP_FOREACH_INIT * P2 P3
 * Prepare a foreach step.
 */</comment>
<case>case <expr><name>JX9_OP_FOREACH_INIT</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_foreach_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>jx9_foreach_info</name> <operator>*</operator><operator>)</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sValue</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Take the variable name from the top of the stack */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Force a string cast */</comment>
			<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Duplicate name */</comment>
		<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pName</name> <operator>=</operator> <call><name>SyMemBackendDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sValue</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>JX9_4EACH_STEP_KEY</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sKey</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Force a string cast */</comment>
			<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Duplicate name */</comment>
		<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pName</name> <operator>=</operator> <call><name>SyMemBackendDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sKey</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a hashmap [i.e. JSON array or object ]*/</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_HASHMAP</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sValue</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Jump out of the loop */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>,
				<argument><expr><literal type="string">"Invalid argument supplied for the foreach statement, expecting JSON array or object instance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>jx9_foreach_step</name> <modifier>*</modifier></type><name>pStep</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>pStep</name> <operator>=</operator> <operator>(</operator><name>jx9_foreach_step</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_foreach_step</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pStep</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory while preparing the 'foreach' step"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Jump out of the loop */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Zero the structure */</comment>
			<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pStep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_foreach_step</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Prepare the step */</comment>
			<expr_stmt><expr><name><name>pStep</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>iFlags</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
				<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></init></decl>;</decl_stmt>
				<comment type="block">/* Reset the internal loop cursor */</comment>
				<expr_stmt><expr><call><name>jx9HashmapResetLoopCursor</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Mark the step */</comment>
				<expr_stmt><expr><name><name>pStep</name><operator>-&gt;</operator><name>pMap</name></name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pMap</name><operator>-&gt;</operator><name>iRef</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aStep</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pStep</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory while preparing the 'foreach' step"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Jump out of the loop */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
						  </block_content>}</block>
<comment type="block">/*
 * OP_FOREACH_STEP * P2 P3
 * Perform a foreach step. Jump to P2 at the end of the step.
 */</comment>
<case>case <expr><name>JX9_OP_FOREACH_STEP</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_foreach_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>jx9_foreach_info</name> <operator>*</operator><operator>)</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_foreach_step</name> <modifier>*</modifier><modifier>*</modifier></type><name>apStep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pStep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_hashmap_node</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<comment type="block">/* Peek the last step */</comment>
	<expr_stmt><expr><name>apStep</name> <operator>=</operator> <operator>(</operator><name>jx9_foreach_step</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aStep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pStep</name> <operator>=</operator> <name><name>apStep</name><index>[<expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aStep</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pMap</name> <operator>=</operator> <name><name>pStep</name><operator>-&gt;</operator><name>pMap</name></name></expr>;</expr_stmt>
	<comment type="block">/* Extract the current node value */</comment>
	<expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>jx9HashmapGetNextEntry</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pNode</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* No more entry to process */</comment>
		<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Jump to this destination */</comment>
		<comment type="block">/* Automatically reset the loop cursor */</comment>
		<expr_stmt><expr><call><name>jx9HashmapResetLoopCursor</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Cleanup the mess left behind */</comment>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SySetPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aStep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pStep</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>JX9_4EACH_STEP_KEY</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sKey</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><call><name>VmExtractMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sKey</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>pKey</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9HashmapExtractNodeKey</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Make a copy of the entry value */</comment>
		<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sValue</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9HashmapExtractNodeValue</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
						  </block_content>}</block>
<comment type="block">/*
 * OP_MEMBER P1 P2
 * Load JSON object entry on the stack.
 */</comment>
<case>case <expr><name>JX9_OP_MEMBER</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap_node</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pIdx</name> <operator>=</operator> <name>pTos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pTos</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_NOTFOUND</name></expr>;</expr_stmt> <comment type="block">/* Assume the index is invalid */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Point to the hashmap */</comment>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pTos</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
		<comment type="block">/* Load the desired entry */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapLookup</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Load entry contents */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pMap</name><operator>-&gt;</operator><name>iRef</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* TICKET 1433-42: Array will be deleted shortly, so we will make a copy
			 * of the entry value, rather than pointing to it.
			 */</comment>
			<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9HashmapExtractNodeValue</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>nValIdx</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9HashmapExtractNodeValue</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such entry, load NULL */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pTos</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
					</block_content>}</block>
<comment type="block">/*
 * OP_SWITCH * * P3
 *  This is the bytecode implementation of the complex switch() JX9 construct.
 */</comment>
<case>case <expr><name>JX9_OP_SWITCH</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_switch</name> <modifier>*</modifier></type><name>pSwitch</name> <init>= <expr><operator>(</operator><name>jx9_switch</name> <operator>*</operator><operator>)</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_case_expr</name> <modifier>*</modifier></type><name>aCase</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pCase</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name></type> <name>sValue</name></decl>, <decl><type ref="prev"/><name>sCaseValue</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nEntry</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNTRUST</name></cpp:ifdef>
	<if_stmt><if>if<condition>( <expr><name>pSwitch</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pTos</name> <operator>&lt;</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Abort</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Point to the case table  */</comment>
	<expr_stmt><expr><name>aCase</name> <operator>=</operator> <operator>(</operator><name>jx9_case_expr</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSwitch</name><operator>-&gt;</operator><name>aCaseExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nEntry</name> <operator>=</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSwitch</name><operator>-&gt;</operator><name>aCaseExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Select the appropriate case block to execute */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCaseValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nEntry</name></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><name>pCase</name> <operator>=</operator> <operator>&amp;</operator><name><name>aCase</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjLoad</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Execute the case expression first */</comment>
		<expr_stmt><expr><call><name>VmLocalExec</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pCase</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCaseValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Compare the two expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjCmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCaseValue</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCaseValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Value match, jump to this block */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pCase</name><operator>-&gt;</operator><name>nStart</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <name>nEntry</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* No approprite case to execute, jump to the default case */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pSwitch</name><operator>-&gt;</operator><name>nDefault</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pSwitch</name><operator>-&gt;</operator><name>nDefault</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* No default case, jump out of this switch */</comment>
			<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pSwitch</name><operator>-&gt;</operator><name>nOut</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<break>break;</break>
					</block_content>}</block>
<comment type="block">/*
 * OP_UPLINK P1 * *
 * Link a variable to the top active VM frame. 
 * This is used to implement the 'uplink' JX9 construct.
 */</comment>
<case>case <expr><name>JX9_OP_UPLINK</name></expr>:</case> <block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pLink</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
		<comment type="block">/* Perform the link */</comment>
		<while>while<condition>( <expr><name>pLink</name> <operator>&lt;=</operator> <name>pTos</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pLink</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Force a string cast */</comment>
				<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLink</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLink</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>sName</name><operator>.</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>VmFrameLink</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pLink</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
					</block_content>}</block>
<comment type="block">/*
 * OP_CALL P1 * *
 *  Call a JX9 or a foreign function and push the return value of the called
 *  function on the stack.
 */</comment>
<case>case <expr><name>JX9_OP_CALL</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArg</name> <init>= <expr><operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<comment type="block">/* Extract function name */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTos</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Raise exception: Invalid function name */</comment>
		<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid function name, JX9 is returning NULL."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Pop given arguments */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Assume a null return value so that the program continue it's execution normally */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTos</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Check for a compiled function first */</comment>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hFunction</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>sName</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>sName</name><operator>.</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_vm_func_arg</name> <modifier>*</modifier></type><name>aFormalArg</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pFrameStack</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pVmFunc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pFrame</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>VmSlot</name></type> <name>sArg</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>pVmFunc</name> <operator>=</operator> <operator>(</operator><name>jx9_vm_func</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</expr_stmt>
		<comment type="block">/* Check The recursion limit */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>nRecursionDepth</name></name> <operator>&gt;</operator> <name><name>pVm</name><operator>-&gt;</operator><name>nMaxDepth</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, 
				<argument><expr><literal type="string">"Recursion limit reached while invoking user function '%z', JX9 will set a NULL return value"</literal></expr></argument>, 
				<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Pop given arguments */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Assume a null return value so that the program continue it's execution normally */</comment>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pVmFunc</name><operator>-&gt;</operator><name>pNextName</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Function is candidate for overloading, select the appropriate function to call */</comment>
			<expr_stmt><expr><name>pVmFunc</name> <operator>=</operator> <call><name>VmOverload</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pVmFunc</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pTos</name><operator>-</operator><name>pArg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Extract the formal argument set */</comment>
		<expr_stmt><expr><name>aFormalArg</name> <operator>=</operator> <operator>(</operator><name>jx9_vm_func_arg</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>aArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Create a new VM frame  */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmEnterFrame</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>,<argument><expr><name>pVmFunc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Raise exception: Out of memory */</comment>
			<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, 
				<argument><expr><literal type="string">"JX9 is running out of memory while calling function '%z', JX9 is returning NULL."</literal></expr></argument>, 
				<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Pop given arguments */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Assume a null return value so that the program continue it's execution normally */</comment>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>aStatic</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_vm_func_static_var</name> <modifier>*</modifier></type><name>pStatic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aStatic</name></decl>;</decl_stmt>
			<comment type="block">/* Install static variables */</comment>
			<expr_stmt><expr><name>aStatic</name> <operator>=</operator> <operator>(</operator><name>jx9_vm_func_static_var</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>aStatic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>aStatic</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
				<expr_stmt><expr><name>pStatic</name> <operator>=</operator> <operator>&amp;</operator><name><name>aStatic</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pStatic</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>==</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Initialize the static variables */</comment>
					<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmReserveMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStatic</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
						<comment type="block">/* Assume a NULL initialization value */</comment>
						<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStatic</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
							<comment type="block">/* Evaluate initialization expression (Any complex expression) */</comment>
							<expr_stmt><expr><call><name>VmLocalExec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStatic</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name><name>pStatic</name><operator>-&gt;</operator><name>nIdx</name></name></expr>;</expr_stmt>
					</block_content>}</block></if><else>else<block>{<block_content>
						<continue>continue;</continue>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Install in the current frame */</comment>
				<expr_stmt><expr><call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><call><name>SyStringData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStatic</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStatic</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr></argument>, 
					<argument><expr><call><name>SX_INT_TO_PTR</name><argument_list>(<argument><expr><name><name>pStatic</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Push arguments in the local frame */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>pArg</name> <operator>&lt;</operator> <name>pTos</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>aArgs</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pArg</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>aByteCode</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* NULL values are redirected to default arguments */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmLocalExec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>aByteCode</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_ABORT</name></expr> )</condition><block>{<block_content>
						<goto>goto <name>Abort</name>;</goto>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Make sure the given arguments are of the correct type */</comment>
				<if_stmt><if>if<condition>( <expr><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nType</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				 <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name><name>pArg</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nType</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
						<decl_stmt><decl><type><name>ProcMemObjCast</name></type> <name>xCast</name> <init>= <expr><call><name>jx9MemObjCastMethod</name><argument_list>(<argument><expr><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="block">/* Cast to the desired type */</comment>
						<if_stmt><if>if<condition>( <expr><name>xCast</name></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><call><name>xCast</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Pass by value, make a copy of the given argument */</comment>
				<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>sName</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>zName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
				<comment type="block">/* Set a dummy name */</comment>
				<expr_stmt><expr><name><name>sName</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <call><name>SyBufferFormat</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[%u]apArg"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sName</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <name>zName</name></expr>;</expr_stmt>
				<comment type="block">/* Annonymous argument */</comment>
				<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Insert argument index  */</comment>
				<expr_stmt><expr><name><name>sArg</name><operator>.</operator><name>nIdx</name></name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>nIdx</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sArg</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pArg</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<comment type="block">/* Process default values */</comment>
		<while>while<condition>( <expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>aArgs</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>aByteCode</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>sName</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Evaluate the default value and extract it's result */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmLocalExec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>aByteCode</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_ABORT</name></expr> )</condition><block>{<block_content>
						<goto>goto <name>Abort</name>;</goto>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* Insert argument index */</comment>
					<expr_stmt><expr><name><name>sArg</name><operator>.</operator><name>nIdx</name></name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>nIdx</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sArg</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Make sure the default argument is of the correct type */</comment>
					<if_stmt><if>if<condition>( <expr><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nType</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nType</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
						<decl_stmt><decl><type><name>ProcMemObjCast</name></type> <name>xCast</name> <init>= <expr><call><name>jx9MemObjCastMethod</name><argument_list>(<argument><expr><name><name>aFormalArg</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="block">/* Cast to the desired type */</comment>
						<expr_stmt><expr><call><name>xCast</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<comment type="block">/* Pop arguments, function name from the operand stack and assume the function 
		 * does not return anything.
		 */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pTos</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* Allocate a new operand stack and evaluate the function body */</comment>
		<expr_stmt><expr><name>pFrameStack</name> <operator>=</operator> <call><name>VmNewOperandStack</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pFrameStack</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Raise exception: Out of memory */</comment>
			<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory while calling function '%z', JX9 is returning NULL."</literal></expr></argument>, 
				<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Increment nesting level */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nRecursionDepth</name></name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* Execute function body */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmByteCodeExec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>VmInstr</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVmFunc</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pFrameStack</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Decrement nesting level */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nRecursionDepth</name></name><operator>--</operator></expr>;</expr_stmt>
		<comment type="block">/* Free the operand stack */</comment>
		<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pFrameStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Leave the frame */</comment>
		<expr_stmt><expr><call><name>VmLeaveFrame</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Abort processing immeditaley */</comment>
			<goto>goto <name>Abort</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>jx9_user_func</name> <modifier>*</modifier></type><name>pFunc</name></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name>jx9_context</name></type> <name>sCtx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name></type> <name>sRet</name></decl>;</decl_stmt>
		<comment type="block">/* Look for an installed foreign function */</comment>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hHostFunction</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>sName</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>sName</name><operator>.</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Call to undefined function */</comment>
			<expr_stmt><expr><call><name>VmErrorFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Call to undefined function '%z', JX9 is returning NULL."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Pop given arguments */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Assume a null return value so that the program continue it's execution normally */</comment>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pFunc</name> <operator>=</operator> <operator>(</operator><name>jx9_user_func</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</expr_stmt>
		<comment type="block">/* Start collecting function arguments */</comment>
		<expr_stmt><expr><call><name>SySetReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>pArg</name> <operator>&lt;</operator> <name>pTos</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pArg</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<comment type="block">/* Assume a null return value */</comment>
		<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Init the call context */</comment>
		<expr_stmt><expr><call><name>VmInitCallContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Call the foreign function */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFunc</name><operator>-&gt;</operator><name>xFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Release the call context */</comment>
		<expr_stmt><expr><call><name>VmReleaseCallContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_ABORT</name></expr> )</condition><block>{<block_content>
			<goto>goto <name>Abort</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Pop function name and arguments */</comment>
			<expr_stmt><expr><call><name>VmPopOperand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTos</name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Save foreign function return value */</comment>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sRet</name></expr></argument>, <argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
				  </block_content>}</block>
<comment type="block">/*
 * OP_CONSUME: P1 * *
 * Consume (Invoke the installed VM output consumer callback) and POP P1 elements from the stack.
 */</comment>
<case>case <expr><name>JX9_OP_CONSUME</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>jx9_output_consumer</name> <modifier>*</modifier></type><name>pCons</name> <init>= <expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pCur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pOut</name> <init>= <expr><name>pTos</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>pOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTos</name><index>[<expr><operator>-</operator><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pCur</name> <operator>=</operator> <name>pOut</name></expr>;</expr_stmt>
	<comment type="block">/* Start the consume process  */</comment>
	<while>while<condition>( <expr><name>pOut</name> <operator>&lt;=</operator> <name>pTos</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Force a string cast */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pOut</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/*SyBlobNullAppend(&amp;pOut-&gt;sBlob);*/</comment>
			<comment type="block">/* Invoke the output consumer callback */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCons</name><operator>-&gt;</operator><name>xConsumer</name></name><argument_list>(<argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pCons</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Increment output length */</comment>
			<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nOutputLen</name></name> <operator>+=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Output consumer callback request an operation abort. */</comment>
				<goto>goto <name>Abort</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pOut</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>pTos</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCur</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<break>break;</break>
					 </block_content>}</block>

		</block_content>}</block></switch> <comment type="block">/* Switch() */</comment>
		<expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Next instruction in the stream */</comment>
	</block_content>}</block></for> <comment type="block">/* For(;;) */</comment>
<label><name>Done</name>:</label>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
<label><name>Abort</name>:</label>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>pTos</name> <operator>&gt;=</operator> <name>pStack</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pTos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pTos</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>JX9_ABORT</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Execute as much of a local JX9 bytecode program as we can then return.
 * This function is a wrapper around [VmByteCodeExec()].
 * See block-comment on that function for additional information.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmLocalExec</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pByteCode</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResult</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pStack</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new operand stack */</comment>
	<expr_stmt><expr><name>pStack</name> <operator>=</operator> <call><name>VmNewOperandStack</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><call><name>SySetUsed</name><argument_list>(<argument><expr><name>pByteCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pStack</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_MEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Execute the program */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmByteCodeExec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>VmInstr</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><name>pByteCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pStack</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pResult</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Free the operand stack */</comment>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Execution result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Execute as much of a JX9 bytecode program as we can then return.
 * This function is a wrapper around [VmByteCodeExec()].
 * See block-comment on that function for additional information.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmByteCodeExec</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Make sure we are ready to execute this program */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>!=</operator> <name>JX9_VM_RUN</name></expr> )</condition><block>{<block_content>
		<return>return <expr><ternary><condition><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>==</operator> <name>JX9_VM_EXEC</name></expr> ?</condition><then> <expr><name>SXERR_LOCKED</name></expr> <comment type="block">/* Locked VM */</comment> </then><else>: <expr><name>SXERR_CORRUPT</name></expr></else></ternary></expr>;</return> <comment type="block">/* Stale VM */</comment>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Set the execution magic number  */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>JX9_VM_EXEC</name></expr>;</expr_stmt>
	<comment type="block">/* Execute the program */</comment>
	<expr_stmt><expr><call><name>VmByteCodeExec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>VmInstr</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>aOps</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sExec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * TICKET 1433-100: Do not remove the JX9_VM_EXEC magic number
	 * so that any following call to [jx9_vm_exec()] without calling
	 * [jx9_vm_reset()] first would fail.
	 */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Extract a memory object (i.e. a variable) from the running script.
 * This function must be called after calling jx9_vm_exec(). Otherwise
 * NULL is returned.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_value</name> <modifier>*</modifier></type> <name>jx9VmExtractVariable</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pVar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>!=</operator> <name>JX9_VM_EXEC</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* call jx9_vm_exec() first */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the lookup */</comment>
	<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><name>pVar</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Lookup result */</comment>
	<return>return <expr><name>pValue</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Invoke the installed VM output consumer callback to consume
 * the desired message.
 * Refer to the implementation of [jx9_context_output()] defined
 * in 'api.c' for additional information.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmOutputConsume</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,      <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pString</name></decl></parameter> <comment type="block">/* Message to output */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_output_consumer</name> <modifier>*</modifier></type><name>pCons</name> <init>= <expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Call the output consumer */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pString</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCons</name><operator>-&gt;</operator><name>xConsumer</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>pString</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pString</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><name><name>pCons</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Increment output length */</comment>
		<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nOutputLen</name></name> <operator>+=</operator> <name><name>pString</name><operator>-&gt;</operator><name>nByte</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Format a message and invoke the installed VM output consumer
 * callback to consume the formatted message.
 * Refer to the implementation of [jx9_context_output_format()] defined
 * in 'api.c' for additional information.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmOutputConsumeAp</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,         <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <comment type="block">/* Formatted message to output */</comment>
	<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>           <comment type="block">/* Variable list of arguments */</comment> 
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_output_consumer</name> <modifier>*</modifier></type><name>pCons</name> <init>= <expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyBlob</name></type> <name>sWorker</name></decl>;</decl_stmt>
	<comment type="block">/* Format the message and call the output consumer */</comment>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Consume the formatted message */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pCons</name><operator>-&gt;</operator><name>xConsumer</name></name><argument_list>(<argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pCons</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Increment output length */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nOutputLen</name></name> <operator>+=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the working buffer */</comment>
	<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return a string representation of the given JX9 OP code.
 * This function never fail and always return a pointer
 * to a null terminated string.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>VmInstrToString</name><parameter_list>(<parameter><decl><type><name>sxi32</name></type> <name>nOp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOp</name> <init>= <expr><literal type="string">"Unknown     "</literal></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>nOp</name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>JX9_OP_DONE</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"DONE       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_HALT</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"HALT       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LOAD</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOAD       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LOADC</name></expr>:</case>      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOADC      "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LOAD_MAP</name></expr>:</case>   <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOAD_MAP   "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LOAD_IDX</name></expr>:</case>   <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOAD_IDX   "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_NOOP</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"NOOP       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_JMP</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"JMP        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_JZ</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"JZ         "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_JNZ</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"JNZ        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_POP</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"POP        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CAT</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CAT        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CVT_INT</name></expr>:</case>    <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CVT_INT    "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CVT_STR</name></expr>:</case>    <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CVT_STR    "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CVT_REAL</name></expr>:</case>   <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CVT_REAL   "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CALL</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CALL       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_UMINUS</name></expr>:</case>     <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"UMINUS     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_UPLUS</name></expr>:</case>      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"UPLUS      "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BITNOT</name></expr>:</case>     <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"BITNOT     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LNOT</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOGNOT     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_MUL</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"MUL        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_DIV</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"DIV        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_MOD</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"MOD        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_ADD</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"ADD        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_SUB</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SUB        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_SHL</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SHL        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_SHR</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SHR        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LT</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LT         "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LE</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LE         "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_GT</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"GT         "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_GE</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"GE         "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_EQ</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"EQ         "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_NEQ</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"NEQ        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_TEQ</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"TEQ        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_TNE</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"TNE        "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BAND</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"BITAND     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BXOR</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"BITXOR     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BOR</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"BITOR      "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LAND</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOGAND     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LOR</name></expr>:</case>        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOGOR      "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_LXOR</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOGXOR     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_STORE</name></expr>:</case>      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"STORE      "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_STORE_IDX</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"STORE_IDX  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_PULL</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"PULL       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_SWAP</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SWAP       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_YIELD</name></expr>:</case>      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"YIELD      "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CVT_BOOL</name></expr>:</case>   <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CVT_BOOL   "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CVT_NULL</name></expr>:</case>   <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CVT_NULL   "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CVT_ARRAY</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CVT_JSON   "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CVT_NUMC</name></expr>:</case>   <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CVT_NUMC   "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_INCR</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"INCR       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_DECR</name></expr>:</case>       <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"DECR       "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_ADD_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"ADD_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_SUB_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SUB_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_MUL_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"MUL_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_DIV_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"DIV_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_MOD_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"MOD_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CAT_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CAT_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_SHL_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SHL_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_SHR_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SHR_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BAND_STORE</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"BAND_STORE "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BOR_STORE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"BOR_STORE  "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_BXOR_STORE</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"BXOR_STORE "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_CONSUME</name></expr>:</case>    <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"CONSUME    "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_MEMBER</name></expr>:</case>     <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"MEMBER     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_UPLINK</name></expr>:</case>     <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"UPLINK     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_SWITCH</name></expr>:</case>     <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SWITCH     "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_FOREACH_INIT</name></expr>:</case>
		                    <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"4EACH_INIT "</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>JX9_OP_FOREACH_STEP</name></expr>:</case>
						    <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"4EACH_STEP "</literal></expr>;</expr_stmt> <break>break;</break>
	<default>default:</default>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>zOp</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Dump JX9 bytecodes instructions to a human readable format.
 * The xConsumer() callback which is an used defined function
 * is responsible of consuming the generated dump.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmDump</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,            <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>ProcConsumer</name></type> <name>xConsumer</name></decl></parameter>, <comment type="block">/* Output [i.e: dump] consumer callback */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>         <comment type="block">/* Last argument to xConsumer() */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmByteCodeDump</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr></argument>, <argument><expr><name>xConsumer</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Default constant expansion callback used by the 'const' statement if used
 * outside a object body [i.e: global or function scope].
 * Refer to the implementation of [JX9_CompileConstant()] defined
 * in 'compile.c' for additional information.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name></type> <name>jx9VmExpandConstantValue</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pByteCode</name> <init>= <expr><operator>(</operator><name>SySet</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Evaluate and expand constant value */</comment>
	<expr_stmt><expr><call><name>VmLocalExec</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_vm</name> <operator>*</operator><operator>)</operator><call><name>SySetGetUserData</name><argument_list>(<argument><expr><name>pByteCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pByteCode</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *  Function handling functions.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<comment type="block">/*
 * int func_num_args(void)
 *   Returns the number of arguments passed to the function.
 * Parameters
 *   None.
 * Return
 *  Total number of arguments passed into the current user-defined function
 *  or -1 if called from the globe scope.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_func_num_args</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pFrame</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the target VM */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<comment type="block">/* Current frame */</comment>
	<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Global frame, return -1 */</comment>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Total number of arguments passed to the enclosing function */</comment>
	<expr_stmt><expr><name>nArg</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * value func_get_arg(int $arg_num)
 *   Return an item from the argument list.
 * Parameters
 *  Argument number(index start from zero).
 * Return
 *  Returns the specified argument or FALSE on error.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_func_get_arg</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmSlot</name> <modifier>*</modifier></type><name>pSlot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pFrame</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the target VM */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<comment type="block">/* Current frame */</comment>
	<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Global frame or Missing arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Called in the global scope"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the desired index */</comment>
	<expr_stmt><expr><name>nArg</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nArg</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid index, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the desired argument */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name>pSlot</name> <operator>=</operator> <operator>(</operator><name>VmSlot</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nArg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pSlot</name><operator>-&gt;</operator><name>nIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Return the desired argument */</comment>
			<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* No such argument, return false */</comment>
			<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* CAN'T HAPPEN */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * array func_get_args(void)
 *   Returns an array comprising a copy of function's argument list.
 * Parameters
 *  None.
 * Return
 *  Returns an array in which each element is a copy of the corresponding
 *  member of the current user-defined function's argument list.
 *  Otherwise FALSE is returned on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_func_get_args</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmFrame</name> <modifier>*</modifier></type><name>pFrame</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmSlot</name> <modifier>*</modifier></type><name>aSlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the current frame */</comment>
	<expr_stmt><expr><name>pFrame</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>pFrame</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pFrame</name><operator>-&gt;</operator><name>pParent</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Global frame, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Called in the global scope"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create a new array */</comment>
	<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Start filling the array with the given arguments */</comment>
	<expr_stmt><expr><name>aSlot</name> <operator>=</operator> <operator>(</operator><name>VmSlot</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>  <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFrame</name><operator>-&gt;</operator><name>sArg</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>aSlot</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_array_add_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument><comment type="block">/* Automatic index assign*/</comment>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Return the freshly created array */</comment>
	<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool function_exists(string $name)
 *  Return TRUE if the given function has been defined.
 * Parameters
 *  The name of the desired function.
 * Return
 *  Return TRUE if the given function has been defined.False otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_func_exists</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing argument, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target VM */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<comment type="block">/* Extract the function name */</comment>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Assume the function is not defined */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Perform the lookup */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hFunction</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hHostFunction</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Function is defined */</comment>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Verify that the contents of a variable can be called as a function.
 * [i.e: Whether it is callable or not].
 * Return TRUE if callable.FALSE otherwise.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9VmIsCallable</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pValue</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
		<comment type="block">/* Extract the name */</comment>
		<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Perform the lookup */</comment>
		<if_stmt><if>if<condition>( <expr><call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hFunction</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hHostFunction</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Function is callable */</comment>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool is_callable(callable $name[, bool $syntax_only = false])
 * Verify that the contents of a variable can be called as a function.
 * Parameters
 * $name
 *    The callback function to check
 * $syntax_only
 *    If set to TRUE the function only verifies that name might be a function or method.
 *    It will only reject simple variables that are not strings, or an array that does
 *    not have a valid structure to be used as a callback. The valid ones are supposed
 *    to have only 2 entries, the first of which is an object or a string, and the second
 *    a string.
 * Return
 *  TRUE if name is callable, FALSE otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_is_callable</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>	
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target VM */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>jx9VmIsCallable</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Hash walker callback used by the [get_defined_functions()] function
 * defined below.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>VmHashFuncStep</name><parameter_list>(<parameter><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Prepare the function name for insertion */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>nKeyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the insertion */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_array_add_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument><comment type="block">/* Automatic index assign */</comment>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * array get_defined_functions(void)
 *  Returns an array of all defined functions.
 * Parameter
 *  None.
 * Return
 *  Returns an multidimensional array containing a list of all defined functions
 *  both built-in (internal) and user-defined.
 *  The internal functions will be accessible via $arr["internal"], and the user 
 *  defined ones using $arr["user"]. 
 * Note:
 *  NULL is returned on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_get_defined_func</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>;</decl_stmt>
	<comment type="block">/* NOTE:
	 * Don't worry about freeing memory here, every allocated resource will be released
	 * automatically by the engine as soon we return from this foreign function.
	 */</comment>
	<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Fill with the appropriate information */</comment>
	<expr_stmt><expr><call><name>SyHashForEach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>hHostFunction</name></name></expr></argument>,<argument><expr><name>VmHashFuncStep</name></expr></argument>,<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fill with the appropriate information */</comment>
	<expr_stmt><expr><call><name>SyHashForEach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>hFunction</name></name></expr></argument>, <argument><expr><name>VmHashFuncStep</name></expr></argument>,<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return a copy of the array array */</comment>
	<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Call a user defined or foreign function where the name of the function
 * is stored in the pFunc parameter and the given arguments are stored
 * in the apArg[] array.
 * Return SXRET_OK if the function was successfuly called.Any other
 * return value indicates failure.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmCallUserFunction</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,       <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>,  <comment type="block">/* Callback name */</comment>
	<parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,          <comment type="block">/* Total number of given arguments */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>, <comment type="block">/* Callback arguments */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResult</name></decl></parameter> <comment type="block">/* Store callback return value here. NULL otherwise */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>aStack</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmInstr</name></type> <name><name>aInstr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pFunc</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_STRING</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't bother processing, it's invalid anyway */</comment>
		<if_stmt><if>if<condition>( <expr><name>pResult</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Assume a null return value */</comment>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXERR_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create a new operand stack */</comment>
	<expr_stmt><expr><name>aStack</name> <operator>=</operator> <call><name>VmNewOperandStack</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>aStack</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, 
			<argument><expr><literal type="string">"JX9 is running out of memory while invoking user callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pResult</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Assume a null return value */</comment>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXERR_MEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Fill the operand stack with the given arguments */</comment>
	<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nArg</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjLoad</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aStack</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aStack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nIdx</name> <operator>=</operator> <name><name>apArg</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nIdx</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Push the function name */</comment>
	<expr_stmt><expr><call><name>jx9MemObjLoad</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aStack</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aStack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nIdx</name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt> <comment type="block">/* Mark as constant */</comment>
	<comment type="block">/* Emit the CALL istruction */</comment>
	<expr_stmt><expr><name><name>aInstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iOp</name> <operator>=</operator> <name>JX9_OP_CALL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aInstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iP1</name> <operator>=</operator> <name>nArg</name></expr>;</expr_stmt> <comment type="block">/* Total number of given arguments */</comment>
	<expr_stmt><expr><name><name>aInstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iP2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aInstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p3</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Emit the DONE instruction */</comment>
	<expr_stmt><expr><name><name>aInstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iOp</name> <operator>=</operator> <name>JX9_OP_DONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aInstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iP1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>   <comment type="block">/* Extract function return value if available */</comment>
	<expr_stmt><expr><name><name>aInstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iP2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aInstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p3</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Execute the function body (if available) */</comment>
	<expr_stmt><expr><call><name>VmByteCodeExec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>aInstr</name></expr></argument>, <argument><expr><name>aStack</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Clean up the mess left behind */</comment>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>aStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Call a user defined or foreign function whith a varibale number
 * of arguments where the name of the function is stored in the pFunc
 * parameter.
 * Return SXRET_OK if the function was successfuly called.Any other
 * return value indicates failure.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmCallUserFunctionAp</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,       <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>,  <comment type="block">/* Callback name */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pResult</name></decl></parameter>, <comment type="block">/* Store callback return value here. NULL otherwise */</comment>
	<parameter><decl><type><modifier>...</modifier></type></decl></parameter>                <comment type="block">/* 0 (Zero) or more Callback arguments */</comment> 
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SySet</name></type> <name>aArg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Copy arguments one after one */</comment>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>pArg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jx9_value</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pArg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Call the core routine */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmCallUserFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Cleanup */</comment>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool defined(string $name)
 *  Checks whether a given named constant exists.
 * Parameter:
 *  Name of the desired constant.
 * Return
 *  TRUE if the given constant exists.FALSE otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_defined</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing constant name, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Missing constant name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract constant name */</comment>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the lookup */</comment>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>hConstant</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Already defined */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Hash walker callback used by the [get_defined_constants()] function
 * defined below.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>VmHashConstStep</name><parameter_list>(<parameter><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Prepare the constant name for insertion */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>nKeyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the insertion */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_array_add_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * array get_defined_constants(void)
 *  Returns an associative array with the names of all defined
 *  constants.
 * Parameters
 *  NONE.
 * Returns
 *  Returns the names of all the constants currently defined.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_get_defined_constants</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>;</decl_stmt>
	<comment type="block">/* Create the array first*/</comment>
	<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Fill the array with the defined constants */</comment>
	<expr_stmt><expr><call><name>SyHashForEach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>hConstant</name></name></expr></argument>, <argument><expr><name>VmHashConstStep</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return the created array */</comment>
	<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *  Random numbers/string generators.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<comment type="block">/*
 * Generate a random 32-bit unsigned integer.
 * JX9 use it's own private PRNG which is based on the one
 * used by te SQLite3 library.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxu32</name></type> <name>jx9VmRandomNum</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>iNum</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SyRandomness</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sPrng</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sxu32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>iNum</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Generate a random string (English Alphabet) of length nLen.
 * Note that the generated string is NOT null terminated.
 * JX9 use it's own private PRNG which is based on the one used
 * by te SQLite3 library.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name></type> <name>jx9VmRandomString</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zBase</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr>}</block></expr></init></decl>;</decl_stmt> <comment type="block">/* English Alphabet */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="block">/* Generate a binary string first */</comment>
	<expr_stmt><expr><call><name>SyRandomness</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sPrng</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Turn the binary string into english based alphabet */</comment>
	<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nLen</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
		 <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>zBase</name><index>[<expr><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>zBase</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
	 </block_content>}</block></for>
</block_content>}</block></function>
<comment type="block">/*
 * int rand()
 *  Generate a random (unsigned 32-bit) integer.
 * Parameter
 *  $min
 *    The lowest value to return (default: 0)
 *  $max
 *   The highest value to return (default: getrandmax())
 * Return
 *   A pseudo random value between min (or 0) and max (or getrandmax(), inclusive).
 * Note:
 *  JX9 use it's own private PRNG which is based on the one used
 *  by te SQLite3 library.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_rand</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>iNum</name></decl>;</decl_stmt>
	<comment type="block">/* Generate the random number */</comment>
	<expr_stmt><expr><name>iNum</name> <operator>=</operator> <call><name>jx9VmRandomNum</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>iMin</name></decl>, <decl><type ref="prev"/><name>iMax</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>iMin</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iMax</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iMin</name> <operator>&lt;</operator> <name>iMax</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>sxu32</name></type> <name>iDiv</name> <init>= <expr><name>iMax</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>iMin</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>iDiv</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>iNum</name> <operator>=</operator> <operator>(</operator><name>iNum</name> <operator>%</operator> <name>iDiv</name><operator>)</operator><operator>+</operator><name>iMin</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>iMax</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iNum</name> <operator>%=</operator> <name>iMax</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return the number */</comment>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>iNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int getrandmax(void)
 *   Show largest possible random value
 * Return
 *  The largest possible random value returned by rand() which is in
 *  this implementation 0xFFFFFFFF.
 * Note:
 *  JX9 use it's own private PRNG which is based on the one used
 *  by te SQLite3 library.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_getrandmax</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>SXU32_HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string rand_str()
 * string rand_str(int $len)
 *  Generate a random string (English alphabet).
 * Parameter
 *  $len
 *    Length of the desired string (default: 16, Min: 1, Max: 1024)
 * Return
 *   A pseudo random string.
 * Note:
 *  JX9 use it's own private PRNG which is based on the one used
 *  by te SQLite3 library.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_rand_str</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zString</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iLen</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Get the desired length */</comment>
		<expr_stmt><expr><name>iLen</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>iLen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>iLen</name></expr></argument> &gt;</argument_list></name> <literal type="number">1024</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Default length */</comment>
			<expr_stmt><expr><name>iLen</name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Generate the random string */</comment>
	<expr_stmt><expr><call><name>jx9VmRandomString</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return the generated string */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *  Language construct implementation as foreign functions.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<comment type="block">/*
 * void print($string...)
 *  Output one or more messages.
 * Parameters
 *  $string
 *   Message to output.
 * Return
 *  NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_print</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nDataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the target VM */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<comment type="block">/* Output */</comment>
	<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nArg</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><name>zData</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nDataLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name><operator>.</operator><name>xConsumer</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zData</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>nDataLen</name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>sVmConsumer</name><operator>.</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Increment output length */</comment>
			<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>nOutputLen</name></name> <operator>+=</operator> <name>nDataLen</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Output consumer callback request an operation abort */</comment>
				<return>return <expr><name>JX9_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * void exit(string $msg)
 * void exit(int $status)
 * void die(string $ms)
 * void die(int $status)
 *   Output a message and terminate program execution.
 * Parameter
 *  If status is a string, this function prints the status just before exiting.
 *  If status is an integer, that value will be used as the exit status 
 *  and not printed
 * Return
 *  NULL
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_exit</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>iLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Print exit message */</comment>
			<expr_stmt><expr><name>zData</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_context_output</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>jx9_value_is_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>sxi32</name></type> <name>iExitStatus</name></decl>;</decl_stmt>
			<comment type="block">/* Record exit status code */</comment>
			<expr_stmt><expr><name>iExitStatus</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>iExitStatus</name></name> <operator>=</operator> <name>iExitStatus</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Abort processing immediately */</comment>
	<return>return <expr><name>JX9_ABORT</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Unset a memory object [i.e: a jx9_value].
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmUnsetMemObj</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><name>sxu32</name></type> <name>nObjIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name>nObjIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>VmSlot</name></type> <name>sFree</name></decl>;</decl_stmt>
		<comment type="block">/* Release the object */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Restore to the free list */</comment>
		<expr_stmt><expr><name><name>sFree</name><operator>.</operator><name>nIdx</name></name> <operator>=</operator> <name>nObjIdx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sFree</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFreeObj</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>				
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string gettype($var)
 *  Get the type of a variable
 * Parameters
 *   $var
 *    The variable being type checked.
 * Return
 *   String representation of the given variable type.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_gettype</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><literal type="string">"null"</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zType</name> <operator>=</operator> <call><name>jx9MemObjTypeDump</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return the variable type */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument><comment type="block">/*Compute length automatically*/</comment>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string get_resource_type(resource $handle)
 *  This function gets the type of the given resource.
 * Parameters
 *  $handle
 *  The evaluated resource handle.
 * Return
 *  If the given handle is a resource, this function will return a string 
 *  representing its type. If the type is not identified by this function
 *  the return value will be the string Unknown.
 *  This function will return FALSE and generate an error if handle
 *  is not a resource.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_get_resource_type</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_resource</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE*/</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9_result_string_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"resID_%#x"</literal></expr></argument>, <argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * void dump(expression, ....)
 *   dump â Dumps information about a variable
 * Parameters
 *   One or more expression to dump.
 * Returns
 *  Nothing.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_dump</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyBlob</name></type> <name>sDump</name></decl>;</decl_stmt> <comment type="block">/* Generated dump is stored here */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDump</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Dump one or more expressions */</comment>
	<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nArg</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><name><name>apArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Reset the working buffer */</comment>
		<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Dump the given expression */</comment>
		<expr_stmt><expr><call><name>jx9MemObjDump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDump</name></expr></argument>,<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Output */</comment>
		<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDump</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_context_output</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDump</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDump</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Release the working buffer */</comment>
	<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *  Version, Credits and Copyright related functions.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 *    Stable.
 */</comment>
<comment type="block">/*
 * string jx9_version(void)
 * string jx9_credits(void)
 *  Returns the running version of the jx9 version.
 * Parameters
 *  None
 * Return
 * Current jx9 version.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_jx9_version</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>apArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<comment type="block">/* Current engine version, signature and cipyright notice */</comment>
	<expr_stmt><expr><call><name>jx9_result_string_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="string">"%s %s, %s"</literal></expr></argument>,<argument><expr><name>JX9_VERSION</name></expr></argument>,<argument><expr><name>JX9_SIG</name></expr></argument>,<argument><expr><name>JX9_COPYRIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *    URL related routines.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpSplitURI</name><parameter_list>(<parameter><decl><type><name>SyhttpUri</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUri</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nLen</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * value parse_url(string $url [, int $component = -1 ])
 *  Parse a URL and return its fields.
 * Parameters
 *  $url
 *   The URL to parse.
 * $component
 *  Specify one of JX9_URL_SCHEME, JX9_URL_HOST, JX9_URL_PORT, JX9_URL_USER
 *  JX9_URL_PASS, JX9_URL_PATH, JX9_URL_QUERY or JX9_URL_FRAGMENT to retrieve
 *  just a specific URL component as a string (except when JX9_URL_PORT is given
 *  in which case the return value will be an integer).
 * Return
 *  If the component parameter is omitted, an associative array is returned.
 *  At least one element will be present within the array. Potential keys within
 *  this array are:
 *   scheme - e.g. http
 *   host
 *   port
 *   user
 *   pass
 *   path
 *   query - after the question mark ?
 *   fragment - after the hashmark #
 * Note:
 *  FALSE is returned on failure.
 *  This function work with relative URL unlike the one shipped
 *  with the standard JX9 engine.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_parse_url</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStr</name></decl>;</decl_stmt> <comment type="block">/* Input string */</comment>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pComp</name></decl>;</decl_stmt>  <comment type="block">/* Pointer to the URI component */</comment>
	<decl_stmt><decl><type><name>SyhttpUri</name></type> <name>sURI</name></decl>;</decl_stmt>   <comment type="block">/* Parse of the given URI */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the given URI */</comment>
	<expr_stmt><expr><name>zStr</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing to process, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Get a parse */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmHttpSplitURI</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sURI</name></expr></argument>, <argument><expr><name>zStr</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Malformed input, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>nComponent</name> <init>= <expr><call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Refer to constant.c for constants values */</comment>
		<switch>switch<condition>(<expr><name>nComponent</name></expr>)</condition><block>{<block_content>
		<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* JX9_URL_SCHEME */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sScheme</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* No available value, return NULL */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* JX9_URL_HOST */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sHost</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* No available value, return NULL */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* JX9_URL_PORT */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sPort</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* No available value, return NULL */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>iPort</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<comment type="block">/* Cast the value to integer */</comment>
				<expr_stmt><expr><call><name>SyStrToInt32</name><argument_list>(<argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iPort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="block">/* JX9_URL_USER */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sUser</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* No available value, return NULL */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="block">/* JX9_URL_PASS */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sPass</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* No available value, return NULL */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">7</literal></expr>:</case> <comment type="block">/* JX9_URL_QUERY */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sQuery</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* No available value, return NULL */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">8</literal></expr>:</case> <comment type="block">/* JX9_URL_FRAGMENT */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sFragment</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* No available value, return NULL */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="block">/*  JX9_URL_PATH */</comment>
			<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sPath</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* No available value, return NULL */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* No such entry, return NULL */</comment>
			<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
		<comment type="block">/* Return an associative array */</comment>
		<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Empty array */</comment>
		<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Array value */</comment>
		<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Out of memory */</comment>
			<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"jx9 engine is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Return false */</comment>
			<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>JX9_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Fill the array */</comment>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sScheme</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"scheme"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sHost</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sPort</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>iPort</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><comment type="block">/* cc warning */</comment>
			<comment type="block">/* Convert to integer */</comment>
			<expr_stmt><expr><call><name>SyStrToInt32</name><argument_list>(<argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iPort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>iPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sUser</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sPass</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"pass"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sPath</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sQuery</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reset the string cursor */</comment>
		<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>sURI</name><operator>.</operator><name>sFragment</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="string">"fragment"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Return the created array */</comment>
		<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* NOTE:
		 * Don't worry about freeing 'pValue', everything will be released
		 * automatically as soon we return from this function.
		 */</comment>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* All done */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *   Array related routines.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 * Note 2012-5-21 01:04:15:
 *  Array related functions that need access to the underlying
 *  virtual machine are implemented here rather than 'hashmap.c'
 */</comment>
<comment type="block">/*
 * The [extract()] function store it's state information in an instance
 * of the following structure.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>extract_aux_data</name></name></type> <name>extract_aux_data</name>;</typedef>
<struct>struct <name>extract_aux_data</name>
<block>{
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>          <comment type="block">/* VM that own this instance */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>iCount</name></decl>;</decl_stmt>           <comment type="block">/* Number of variables successfully imported  */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrefix</name></decl>;</decl_stmt>  <comment type="block">/* Prefix name */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>Prefixlen</name></decl>;</decl_stmt>        <comment type="block">/* Prefix  length */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>iFlags</name></decl>;</decl_stmt>           <comment type="block">/* Control flags */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zWorker</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* Working buffer */</comment>
}</block>;</struct>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VmExtractCallback</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * int extract(array $var_array[, int $extract_type = EXTR_OVERWRITE[, string $prefix = NULL ]])
 *   Import variables into the current symbol table from an array.
 * Parameters
 * $var_array
 *  An associative array. This function treats keys as variable names and values
 *  as variable values. For each key/value pair it will create a variable in the current symbol
 *  table, subject to extract_type and prefix parameters.
 *  You must use an associative array; a numerically indexed array will not produce results
 *  unless you use EXTR_PREFIX_ALL or EXTR_PREFIX_INVALID.
 * $extract_type
 *  The way invalid/numeric keys and collisions are treated is determined by the extract_type.
 *  It can be one of the following values:
 *   EXTR_OVERWRITE
 *       If there is a collision, overwrite the existing variable. 
 *   EXTR_SKIP
 *       If there is a collision, don't overwrite the existing variable. 
 *   EXTR_PREFIX_SAME
 *       If there is a collision, prefix the variable name with prefix. 
 *   EXTR_PREFIX_ALL
 *       Prefix all variable names with prefix. 
 *   EXTR_PREFIX_INVALID
 *       Only prefix invalid/numeric variable names with prefix. 
 *   EXTR_IF_EXISTS
 *       Only overwrite the variable if it already exists in the current symbol table
 *       otherwise do nothing.
 *       This is useful for defining a list of valid variables and then extracting only those
 *       variables you have defined out of $_REQUEST, for example. 
 *   EXTR_PREFIX_IF_EXISTS
 *       Only create prefixed variable names if the non-prefixed version of the same variable exists in 
 *      the current symbol table.
 * $prefix
 *  Note that prefix is only required if extract_type is EXTR_PREFIX_SAME, EXTR_PREFIX_ALL
 *  EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS. If the prefixed result is not a valid variable name
 *  it is not imported into the symbol table. Prefixes are automatically separated from the array key by an
 *  underscore character.
 * Return
 *   Returns the number of variables successfully imported into the symbol table.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_extract</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>extract_aux_data</name></type> <name>sAux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_json_array</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return 0 */</comment>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target hashmap */</comment>
	<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pMap</name><operator>-&gt;</operator><name>nEntry</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty map, return  0 */</comment>
		<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Prepare the aux data */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sAux</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extract_aux_data</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sAux</name><operator>.</operator><name>zWorker</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>sAux</name><operator>.</operator><name>iFlags</name></name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>sAux</name><operator>.</operator><name>zPrefix</name></name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sAux</name><operator>.</operator><name>Prefixlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>sAux</name><operator>.</operator><name>pVm</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<comment type="block">/* Invoke the worker callback */</comment>
	<expr_stmt><expr><call><name>jx9HashmapWalk</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>VmExtractCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Number of variables successfully imported */</comment>
	<expr_stmt><expr><call><name>jx9_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>sAux</name><operator>.</operator><name>iCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Worker callback for the [extract()] function defined
 * below.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>VmExtractCallback</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>extract_aux_data</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><operator>(</operator><name>extract_aux_data</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iFlags</name> <init>= <expr><name><name>pAux</name><operator>-&gt;</operator><name>iFlags</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name> <init>= <expr><name><name>pAux</name><operator>-&gt;</operator><name>pVm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sVar</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x10</literal><comment type="block">/* EXTR_PREFIX_INVALID */</comment><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pKey</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_INT</name><operator>|</operator><name>MEMOBJ_BOOL</name><operator>|</operator><name>MEMOBJ_REAL</name><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><name>iFlags</name> <operator>|=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt> <comment type="block">/*EXTR_PREFIX_ALL*/</comment>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform a string cast */</comment>
	<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pKey</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Unavailable variable name */</comment>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>sVar</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x08</literal><comment type="block">/*EXTR_PREFIX_ALL*/</comment> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pAux</name><operator>-&gt;</operator><name>Prefixlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>sVar</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><call><name>SyBufferFormat</name><argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zWorker</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zWorker</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.*s_%.*s"</literal></expr></argument>, 
			<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>Prefixlen</name></name></expr></argument>, <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zPrefix</name></name></expr></argument>, 
			<argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pKey</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pKey</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name><name>sVar</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator> <call><name>SyMemcpy</name><argument_list>(<argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pKey</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zWorker</name></name></expr></argument>, 
			<argument><expr><call><name>SXMIN</name><argument_list>(<argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pKey</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zWorker</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>sVar</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <name><name>pAux</name><operator>-&gt;</operator><name>zWorker</name></name></expr>;</expr_stmt>
	<comment type="block">/* Try to extract the variable */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sVar</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Collision */</comment>
		<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr> <comment type="block">/* EXTR_SKIP */</comment> )</condition><block>{<block_content>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr> <comment type="block">/* EXTR_PREFIX_SAME */</comment> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name>iFlags</name> <operator>&amp;</operator> <literal type="number">0x08</literal><comment type="block">/*EXTR_PREFIX_ALL*/</comment><operator>)</operator> <operator>||</operator> <name><name>pAux</name><operator>-&gt;</operator><name>Prefixlen</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
				<comment type="block">/* Already prefixed */</comment>
				<return>return <expr><name>SXRET_OK</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>sVar</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <call><name>SyBufferFormat</name><argument_list>(
				<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zWorker</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zWorker</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><literal type="string">"%.*s_%.*s"</literal></expr></argument>, 
				<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>Prefixlen</name></name></expr></argument>, <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zPrefix</name></name></expr></argument>, 
				<argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pKey</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pKey</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>
				)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sVar</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Create the variable */</comment>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>VmExtractMemObj</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sVar</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Overwrite the old value */</comment>
		<expr_stmt><expr><call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Increment counter */</comment>
		<expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>iCount</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile and evaluate a JX9 chunk at run-time.
 * Refer to the include language construct implementation for more
 * information.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmEvalChunk</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,        <comment type="block">/* Underlying Virtual Machine */</comment>
	<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,  <comment type="block">/* Call Context */</comment>
	<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>,   <comment type="block">/* JX9 chunk to evaluate */</comment> 
	<parameter><decl><type><name>int</name></type> <name>iFlags</name></decl></parameter>,         <comment type="block">/* Compile flag */</comment>
	<parameter><decl><type><name>int</name></type> <name>bTrueReturn</name></decl></parameter>     <comment type="block">/* TRUE to return execution result */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pByteCode</name></decl>, <decl><type ref="prev"/><name>aByteCode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcConsumer</name></type> <name>xErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pErrData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Initialize bytecode container */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aByteCode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aByteCode</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Reset the code generator */</comment>
	<if_stmt><if>if<condition>( <expr><name>bTrueReturn</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Included file, log compile-time errors */</comment>
		<expr_stmt><expr><name>xErr</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>xErr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pErrData</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>pErrData</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9ResetCodeGenerator</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>xErr</name></expr></argument>, <argument><expr><name>pErrData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Swap bytecode container */</comment>
	<expr_stmt><expr><name>pByteCode</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name> <operator>=</operator> <operator>&amp;</operator><name>aByteCode</name></expr>;</expr_stmt>
	<comment type="block">/* Compile the chunk */</comment>
	<expr_stmt><expr><call><name>jx9CompileScript</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>sCodeGen</name><operator>.</operator><name>nErr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Compilation error, return false */</comment>
		<if_stmt><if>if<condition>( <expr><name>pCtx</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name></type> <name>sResult</name></decl>;</decl_stmt> <comment type="block">/* Return value */</comment>
		<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>JX9_OP_DONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<comment type="block">/* Out of memory */</comment>
			<if_stmt><if>if<condition>( <expr><name>pCtx</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<goto>goto <name>Cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>bTrueReturn</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Assume a boolean true return value */</comment>
			<expr_stmt><expr><call><name>jx9MemObjInitFromBool</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Assume a null return value */</comment>
			<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/* Execute the compiled chunk */</comment>
		<expr_stmt><expr><call><name>VmLocalExec</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aByteCode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pCtx</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Set the execution result */</comment>
			<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<label><name>Cleanup</name>:</label>
	<comment type="block">/* Cleanup the mess left behind */</comment>
	<expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pByteContainer</name></name> <operator>=</operator> <name>pByteCode</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aByteCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check if a file path is already included.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>VmIsIncludedFile</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>aEntries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>aEntries</name> <operator>=</operator> <operator>(</operator><name>SyString</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aIncluded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform a linear search */</comment>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aIncluded</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><call><name>SyStringCmp</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aEntries</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>SyMemcmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Already included */</comment>
			<return>return <expr><name>TRUE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Push a file path in the appropriate VM container.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9VmPushFilePath</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>, <parameter><decl><type><name>sxu8</name></type> <name>bMain</name></decl></parameter>, <parameter><decl><type><name>sxi32</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDup</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zCur</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <call><name>SyStrlen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Duplicate the file path first */</comment>
	<expr_stmt><expr><name>zDup</name> <operator>=</operator> <call><name>SyMemBackendStrDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zDup</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_MEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<comment type="block">/* Normalize path on windows
	 * Example:
	 *    Path/To/File.jx9
	 * becomes
	 *   path\to\file.jx9
	 */</comment>
	<expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zDup</name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name><name>zCur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>zCur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>zCur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zCur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisUpper</name><argument_list>(<argument><expr><name><name>zCur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>SyToLower</name><argument_list>(<argument><expr><name><name>zCur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>zCur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt> <comment type="block">/* MSVC stupidity */</comment>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zCur</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Install the file path */</comment>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sPath</name></expr></argument>, <argument><expr><name>zDup</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>bMain</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><call><name>VmIsIncludedFile</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sPath</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<comment type="block">/* Already included */</comment>
			<expr_stmt><expr><operator>*</operator><name>pNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Insert in the corresponding container */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aIncluded</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>zDup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>rc</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>pNew</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFiles</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile and Execute a JX9 script at run-time.
 * SXRET_OK is returned on sucessful evaluation.Any other return values
 * indicates failure.
 * Note that the JX9 script to evaluate can be a local or remote file.In
 * either cases the [jx9StreamReadWholeFile()] function handle all the underlying
 * operations.
 * If the [jJX9_DISABLE_BUILTIN_FUNC] compile-time directive is defined, then
 * this function is a no-op.
 * Refer to the implementation of the include(), import() language
 * constructs for more information.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmExecIncludedFile</name><parameter_list>(
	 <parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <comment type="block">/* Call Context */</comment>
	 <parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pPath</name></decl></parameter>,   <comment type="block">/* Script path or URL*/</comment>
	 <parameter><decl><type><name>int</name></type> <name>IncludeOnce</name></decl></parameter>    <comment type="block">/* TRUE if called from import() or require_once() */</comment>
	 )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyBlob</name></type> <name>sContents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>isNew</name></decl>;</decl_stmt>
	<comment type="block">/* Initialize fields */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>isNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Extract the associated stream */</comment>
	<expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>jx9VmGetStreamDevice</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPath</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pPath</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Open the file or the URL [i.e: http://jx9.symisc.net/example/hello.jx9.txt"] 
	 * in a read-only mode.
	 */</comment>
	<expr_stmt><expr><name>pHandle</name> <operator>=</operator> <call><name>jx9StreamOpenHandle</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>,<argument><expr><name><name>pPath</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name>JX9_IO_OPEN_RDONLY</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pHandle</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_IO</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt> <comment type="block">/* Stupid cc warning */</comment>
	<if_stmt><if>if<condition>( <expr><name>IncludeOnce</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isNew</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Already included */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_EXISTS</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Read the whole file contents */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9StreamReadWholeFile</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>SyString</name></type> <name>sScript</name></decl>;</decl_stmt>
			<comment type="block">/* Compile and execute the script */</comment>
			<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sScript</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>VmEvalChunk</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pCtx</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sScript</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Pop from the set of included file */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SySetPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Close the handle */</comment>
	<expr_stmt><expr><call><name>jx9StreamCloseHandle</name><argument_list>(<argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the working buffer */</comment>
	<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>pCtx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><name>pPath</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>IncludeOnce</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_IO</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_BUILTIN_FUNC */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* * include:
 * According to the JX9 reference manual.
 *  The include() function includes and evaluates the specified file.
 *  Files are included based on the file path given or, if none is given
 *  the include_path specified.If the file isn't found in the include_path
 *  include() will finally check in the calling script's own directory
 *  and the current working directory before failing. The include()
 *  construct will emit a warning if it cannot find a file; this is different
 *  behavior from require(), which will emit a fatal error.
 *  If a path is defined â whether absolute (starting with a drive letter
 *  or \ on Windows, or / on Unix/Linux systems) or relative to the current
 *  directory (starting with . or ..) â the include_path will be ignored altogether.
 *  For example, if a filename begins with ../, the parser will look in the parent
 *  directory to find the requested file.
 *  When a file is included, the code it contains inherits the variable scope
 *  of the line on which the include occurs. Any variables available at that line
 *  in the calling file will be available within the called file, from that point forward.
 *  However, all functions and objectes defined in the included file have the global scope. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_include</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing to evaluate, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* File to include */</comment>
	<expr_stmt><expr><name><name>sFile</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sFile</name><operator>.</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sFile</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Open, compile and execute the desired script */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmExecIncludedFile</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pCtx</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sFile</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Emit a warning and return false */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IO error while importing: '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * import:
 *  According to the JX9 reference manual.
 *   The import() statement includes and evaluates the specified file during
 *   the execution of the script. This is a behavior similar to the include() 
 *   statement, with the only difference being that if the code from a file has already
 *   been included, it will not be included again. As the name suggests, it will be included
 *   just once.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_import</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing to evaluate, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* File to include */</comment>
	<expr_stmt><expr><name><name>sFile</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sFile</name><operator>.</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sFile</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Open, compile and execute the desired script */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmExecIncludedFile</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pCtx</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sFile</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_EXISTS</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* File already included, return TRUE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Emit a warning and return false */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IO error while importing: '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Section:
 *  Command line arguments processing.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment>
<comment type="block">/*
 * Check if a short option argument [i.e: -c] is available in the command
 * line string. Return a pointer to the start of the stream on success.
 * NULL otherwise.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>VmFindShortOpt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>c</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Got one */</comment>
			<return>return <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Advance the cursor */</comment>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/* No such option */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check if a long option argument [i.e: --opt] is available in the command
 * line string. Return a pointer to the start of the stream on success.
 * NULL otherwise.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>VmFindLongOpt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLong</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOpt</name></decl>;</decl_stmt>
	<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zIn</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>zOpt</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
			<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> <comment type="block">/* --opt=val */</comment>)</condition><block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="block">/* Test */</comment>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zIn</name><operator>-</operator><name>zOpt</name><operator>)</operator> <operator>==</operator> <name>nByte</name> <operator>&amp;&amp;</operator> <call><name>SyMemcmp</name><argument_list>(<argument><expr><name>zOpt</name></expr></argument>, <argument><expr><name>zLong</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Got one, return it's value */</comment>
				<return>return <expr><name>zIn</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<comment type="block">/* No such option */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Long option [i.e: --opt] arguments private data structure.
 */</comment>
<struct>struct <name>getopt_long_opt</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArgIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zArgEnd</name></decl>;</decl_stmt> <comment type="block">/* Command line arguments */</comment>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pWorker</name></decl>;</decl_stmt>  <comment type="block">/* Worker variable*/</comment>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>;</decl_stmt>   <comment type="block">/* getopt() return value */</comment>
	<decl_stmt><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl>;</decl_stmt>   <comment type="block">/* Call Context */</comment>
}</block>;</struct>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VmProcessLongOpt</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Extract short or long argument option values.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>VmExtractOptArgValue</name><parameter_list>(
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>,  <comment type="block">/* getopt() return value */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>, <comment type="block">/* Worker variable */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>,   <comment type="block">/* Argument stream */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArgEnd</name></decl></parameter>, <comment type="block">/* End of the argument stream  */</comment>
	<parameter><decl><type><name>int</name></type> <name>need_val</name></decl></parameter>,       <comment type="block">/* TRUE to fetch option argument */</comment>
	<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,  <comment type="block">/* Call Context */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>   <comment type="block">/* Option name */</comment>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>jx9_value_bool</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>need_val</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* 
		 * Option does not need arguments.
		 * Insert the option name and a boolean FALSE.
		 */</comment>
		<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCur</name></decl>;</decl_stmt>
		<comment type="block">/* Extract option argument */</comment>
		<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<while>while<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>zArg</name> <operator>&gt;=</operator> <name>zArgEnd</name> <operator>||</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/*
			 * Argument not found.
			 * Insert the option name and a boolean FALSE.
			 */</comment>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Delimit the value */</comment>
		<expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zArg</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Delimt the argument */</comment>
			<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zArg</name></expr>;</expr_stmt>
			<while>while<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>d</name> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Delimiter found, exit the loop  */</comment>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="block">/* Save the value */</comment>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zCur</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zArg</name><operator>-</operator><name>zCur</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<while>while<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="block">/* Save the value */</comment>
			<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zCur</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zArg</name><operator>-</operator><name>zCur</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/*
		 * Check if we are dealing with multiple values.
		 * If so, create an array to hold them, rather than a scalar variable.
		 */</comment>
		<while>while<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pOptArg</name></decl>;</decl_stmt> <comment type="block">/* Array of option arguments */</comment>
			<expr_stmt><expr><name>pOptArg</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pOptArg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Insert the first value */</comment>
				<expr_stmt><expr><call><name>jx9_array_add_elem</name><argument_list>(<argument><expr><name>pOptArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
				<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
					<if_stmt><if>if<condition>( <expr><name>zArg</name> <operator>&gt;=</operator> <name>zArgEnd</name> <operator>||</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
						<comment type="block">/* No more value */</comment>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* Delimit the value */</comment>
					<expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zArg</name></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zArg</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<while>while<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<comment type="block">/* Reset the string cursor */</comment>
					<expr_stmt><expr><call><name>jx9_value_reset_string_cursor</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Save the value */</comment>
					<expr_stmt><expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zCur</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zArg</name><operator>-</operator><name>zCur</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Insert */</comment>
					<expr_stmt><expr><call><name>jx9_array_add_elem</name><argument_list>(<argument><expr><name>pOptArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
					<comment type="block">/* Jump trailing white spaces */</comment>
					<while>while<condition>( <expr><name>zArg</name> <operator>&lt;</operator> <name>zArgEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
				</block_content>}</block></for>
				<comment type="block">/* Insert the option arg array */</comment>
				<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><name>pOptArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
				<comment type="block">/* Safely release */</comment>
				<expr_stmt><expr><call><name>jx9_context_release_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pOptArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Single value */</comment>
			<expr_stmt><expr><call><name>jx9_array_add_strkey_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Will make it's own copy */</comment>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * array getopt(string $options[, array $longopts ])
 *   Gets options from the command line argument list.
 * Parameters
 *  $options
 *   Each character in this string will be used as option characters
 *   and matched against options passed to the script starting with
 *   a single hyphen (-). For example, an option string "x" recognizes
 *   an option -x. Only a-z, A-Z and 0-9 are allowed.
 *  $longopts
 *   An array of options. Each element in this array will be used as option
 *   strings and matched against options passed to the script starting with
 *   two hyphens (--). For example, an longopts element "opt" recognizes an
 *   option --opt. 
 * Return
 *  This function will return an array of option / argument pairs or FALSE
 *  on failure. 
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_getopt</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zArg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zArgIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zArgEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>getopt_long_opt</name></name></type> <name>sLong</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pWorker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pArg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"Missing/Invalid option arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract option arguments */</comment>
	<expr_stmt><expr><name>zIn</name>  <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>nByte</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Point to the string representation of the $argv[] array */</comment>
	<expr_stmt><expr><name>pArg</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sArgv</name></name></expr>;</expr_stmt>
	<comment type="block">/* Create a new empty array and a worker variable */</comment>
	<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pWorker</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pArray</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pWorker</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty command line, return the empty array*/</comment>
		<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Everything will be released automatically when we return 
		 * from this function.
		 */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zArgIn</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zArgEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zArgIn</name><index>[<expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Fill the long option structure */</comment>
	<expr_stmt><expr><name><name>sLong</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <name>pArray</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sLong</name><operator>.</operator><name>pWorker</name></name> <operator>=</operator> <name>pWorker</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sLong</name><operator>.</operator><name>zArgIn</name></name> <operator>=</operator>  <name>zArgIn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sLong</name><operator>.</operator><name>zArgEnd</name></name> <operator>=</operator> <name>zArgEnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sLong</name><operator>.</operator><name>pCtx</name></name> <operator>=</operator> <name>pCtx</name></expr>;</expr_stmt>
	<comment type="block">/* Start processing */</comment>
	<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>need_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Advance the stream cursor */</comment>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* Ignore non-alphanum characters */</comment>
		<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SyisAlphaNum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>need_val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Find option */</comment>
		<expr_stmt><expr><name>zArg</name> <operator>=</operator> <call><name>VmFindShortOpt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>zArgIn</name></expr></argument>, <argument><expr><name>zArgEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zArg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* No such option */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Extract option argument value */</comment>
		<expr_stmt><expr><call><name>VmExtractOptArgValue</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><name>zArgEnd</name></expr></argument>, <argument><expr><name>need_val</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>jx9_value_is_json_array</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>jx9_array_count</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Process long options */</comment>
		<expr_stmt><expr><call><name>jx9_array_walk</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>VmProcessLongOpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sLong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return the option array */</comment>
	<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 
	 * Don't worry about freeing memory, everything will be released
	 * automatically as soon we return from this foreign function.
	 */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Array walker callback used for processing long options values.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>VmProcessLongOpt</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>getopt_long_opt</name></name> <modifier>*</modifier></type><name>pOpt</name> <init>= <expr><operator>(</operator>struct <name>getopt_long_opt</name> <operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zOpt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>need_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<comment type="block">/* Value must be of type string */</comment>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Simply ignore */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zOpt</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, ignore */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zOpt</name><index>[<expr><name>nByte</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTerm</name></decl>;</decl_stmt>
		<comment type="block">/* Try to extract a value */</comment>
		<expr_stmt><expr><name>need_value</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>zEnd</name> <operator>&gt;=</operator> <name>zOpt</name> <operator>&amp;&amp;</operator> <name><name>zEnd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zEnd</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>zOpt</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Empty string, ignore */</comment>
			<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>JX9_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zEnd</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>zTerm</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>zEnd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zOpt</name><index>[<expr><name>nByte</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Find the option */</comment>
	<expr_stmt><expr><name>zArg</name> <operator>=</operator> <call><name>VmFindLongOpt</name><argument_list>(<argument><expr><name>zOpt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zOpt</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>zArgIn</name></name></expr></argument>, <argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>zArgEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zArg</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* No such option, return immediately */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Try to extract a value */</comment>
	<expr_stmt><expr><call><name>VmExtractOptArgValue</name><argument_list>(<argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>pWorker</name></name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>zArgEnd</name></name></expr></argument>, <argument><expr><name>need_value</name></expr></argument>, <argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int utf8_encode(string $input)
 *  UTF-8 encoding.
 *  This function encodes the string data to UTF-8, and returns the encoded version.
 *  UTF-8 is a standard mechanism used by Unicode for encoding wide character values
 * into a byte stream. UTF-8 is transparent to plain ASCII characters, is self-synchronized
 * (meaning it is possible for a program to figure out where in the bytestream characters start)
 * and can be used with normal string comparison functions for sorting and such.
 *  Notes on UTF-8 (According to SQLite3 authors):
 *  Byte-0    Byte-1    Byte-2    Byte-3    Value
 *  0xxxxxxx                                 00000000 00000000 0xxxxxxx
 *  110yyyyy  10xxxxxx                       00000000 00000yyy yyxxxxxx
 *  1110zzzz  10yyyyyy  10xxxxxx             00000000 zzzzyyyy yyxxxxxx
 *  11110uuu  10uuzzzz  10yyyyyy  10xxxxxx   000uuuuu zzzzyyyy yyxxxxxx
 * Parameters
 * $input
 *   String to encode or NULL on failure.
 * Return
 *  An UTF-8 encoded string.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_utf8_encode</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments, return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the target string */</comment>
	<expr_stmt><expr><name>zIn</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>nByte</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Start the encoding process */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* End of input */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* Advance the stream cursor */</comment>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* Encode */</comment>
		<if_stmt><if>if<condition>( <expr><name>c</name><operator>&lt;</operator><literal type="number">0x00080</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>c</name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>&lt;</operator><literal type="number">0x00800</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0xC0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>&lt;</operator><literal type="number">0x10000</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0xF0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt> 
	</block_content>}</block></for>
	<comment type="block">/* All done */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * UTF-8 decoding routine extracted from the sqlite3 source tree.
 * Original author: D. Richard Hipp (http://www.sqlite.org)
 * Status: Public Domain
 */</comment>
<comment type="block">/*
** This lookup table is used to help decode the first byte of
** a multi-byte UTF8 character.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>UtfTrans1</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, 
  <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, 
  <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, 
  <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, 
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, 
  <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, 
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, 
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*
** Translate a single UTF-8 character.  Return the unicode value.
**
** During translation, assume that the byte that zTerm points
** is a 0x00.
**
** Write a pointer to the next unread byte back into *pzNext.
**
** Notes On Invalid UTF-8:
**
**  *  This routine never allows a 7-bit character (0x00 through 0x7f) to
**     be encoded as a multi-byte character.  Any multi-byte character that
**     attempts to encode a value between 0x00 and 0x7f is rendered as 0xfffd.
**
**  *  This routine never allows a UTF16 surrogate value to be encoded.
**     If a multi-byte character attempts to encode a value between
**     0xd800 and 0xe000 then it is rendered as 0xfffd.
**
**  *  Bytes in the range of 0x80 through 0xbf which occur as the first
**     byte of a character are interpreted as single-byte characters
**     and rendered as themselves even though they are technically
**     invalid characters.
**
**  *  This routine accepts an infinite number of different UTF8 encodings
**     for unicode values 0x80 and greater.  It do not change over-length
**     encodings to 0xfffd as some systems recommend.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_UTF8</name><parameter_list>(<parameter><type><name>zIn</name></type></parameter>, <parameter><type><name>zTerm</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>                           \
  <cpp:value>c = *(zIn++);                                            \
  if( c&gt;=0xc0 ){                                           \
    c = UtfTrans1[c-0xc0];                                 \
    while( zIn!=zTerm &amp;&amp; (*zIn &amp; 0xc0)==0x80 ){            \
      c = (c&lt;&lt;6) + (0x3f &amp; *(zIn++));                      \
    }                                                      \
    if( c&lt;0x80                                             \
        || (c&amp;0xFFFFF800)==0xD800                          \
        || (c&amp;0xFFFFFFFE)==0xFFFE ){  c = 0xFFFD; }        \
  }</cpp:value></cpp:define>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9Utf8Read</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>,         <comment type="block">/* First byte of UTF-8 character */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zTerm</name></decl></parameter>,     <comment type="block">/* Pretend this byte is 0x00 */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzNext</name></decl></parameter>    <comment type="block">/* Write first byte past UTF-8 char here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>READ_UTF8</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzNext</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string utf8_decode(string $data)
 *  This function decodes data, assumed to be UTF-8 encoded, to unicode.
 * Parameters
 * data
 *  An UTF-8 encoded string.
 * Return
 *  Unicode decoded string or NULL on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_utf8_decode</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments, return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the target string */</comment>
	<expr_stmt><expr><name>zIn</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>nByte</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Start the decoding process */</comment>
	<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>jx9Utf8Read</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><name>zEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="number">0x0</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string json_encode(mixed $value)
 *  Returns a string containing the JSON representation of value.
 * Parameters
 *  $value
 *  The value being encoded. Can be any type except a resource.
 * Return
 *  Returns a JSON encoded string on success. FALSE otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_json_encode</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyBlob</name></type> <name>sBlob</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Init the working buffer */</comment>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the encoding operation */</comment>
	<expr_stmt><expr><call><name>jx9JsonSerialize</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return the serialized value */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Cleanup */</comment>
	<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* All done */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * mixed json_decode(string $json)
 *  Takes a JSON encoded string and converts it into a JX9 variable.
 * Parameters
 *  $json
 *    The json string being decoded.
 * Return
 *  The value encoded in json in appropriate JX9 type. Values true, false and null (case-insensitive)
 *  are returned as TRUE, FALSE and NULL respectively. NULL is returned if the json cannot be decoded
 *  or if the encoded data is deeper than the recursion limit.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_builtin_json_decode</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zJSON</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nArg</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>jx9_value_is_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing/Invalid arguments, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the JSON string */</comment>
	<expr_stmt><expr><name>zJSON</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Decode the raw JSON */</comment>
	<expr_stmt><expr><call><name>jx9JsonDecode</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>zJSON</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Table of built-in VM functions. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_builtin_func</name></type> <name><name>aVmFunc</name><index>[]</index></name> <init>= <expr><block>{
	     <comment type="block">/* JSON Encoding/Decoding */</comment>
	<expr><block>{ <expr><literal type="string">"json_encode"</literal></expr>,     <expr><name>vm_builtin_json_encode</name></expr>   }</block></expr>,
	<expr><block>{ <expr><literal type="string">"json_decode"</literal></expr>,     <expr><name>vm_builtin_json_decode</name></expr>   }</block></expr>,
	     <comment type="block">/* Functions calls */</comment>
	<expr><block>{ <expr><literal type="string">"func_num_args"</literal></expr>  , <expr><name>vm_builtin_func_num_args</name></expr> }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"func_get_arg"</literal></expr>   , <expr><name>vm_builtin_func_get_arg</name></expr>  }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"func_get_args"</literal></expr>  , <expr><name>vm_builtin_func_get_args</name></expr> }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"function_exists"</literal></expr>, <expr><name>vm_builtin_func_exists</name></expr>   }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"is_callable"</literal></expr>    , <expr><name>vm_builtin_is_callable</name></expr>   }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"get_defined_functions"</literal></expr>, <expr><name>vm_builtin_get_defined_func</name></expr> }</block></expr>,  
	    <comment type="block">/* Constants management */</comment>
	<expr><block>{ <expr><literal type="string">"defined"</literal></expr>,  <expr><name>vm_builtin_defined</name></expr>              }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"get_defined_constants"</literal></expr>, <expr><name>vm_builtin_get_defined_constants</name></expr> }</block></expr>, 
	   <comment type="block">/* Random numbers/strings generators */</comment>
	<expr><block>{ <expr><literal type="string">"rand"</literal></expr>,          <expr><name>vm_builtin_rand</name></expr>            }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"rand_str"</literal></expr>,      <expr><name>vm_builtin_rand_str</name></expr>        }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"getrandmax"</literal></expr>,    <expr><name>vm_builtin_getrandmax</name></expr>      }</block></expr>, 
	   <comment type="block">/* Language constructs functions */</comment>
	<expr><block>{ <expr><literal type="string">"print"</literal></expr>, <expr><name>vm_builtin_print</name></expr>                   }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"exit"</literal></expr>,  <expr><name>vm_builtin_exit</name></expr>                    }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"die"</literal></expr>,   <expr><name>vm_builtin_exit</name></expr>                    }</block></expr>,  
	  <comment type="block">/* Variable handling functions */</comment> 
	<expr><block>{ <expr><literal type="string">"gettype"</literal></expr>,   <expr><name>vm_builtin_gettype</name></expr>              }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"get_resource_type"</literal></expr>, <expr><name>vm_builtin_get_resource_type</name></expr>}</block></expr>,
	 <comment type="block">/* Variable dumping */</comment>
	<expr><block>{ <expr><literal type="string">"dump"</literal></expr>,     <expr><name>vm_builtin_dump</name></expr>                 }</block></expr>,
	  <comment type="block">/* Release info */</comment>
	<expr><block>{<expr><literal type="string">"jx9_version"</literal></expr>,       <expr><name>vm_builtin_jx9_version</name></expr>  }</block></expr>, 
	<expr><block>{<expr><literal type="string">"jx9_credits"</literal></expr>,       <expr><name>vm_builtin_jx9_version</name></expr>  }</block></expr>, 
	<expr><block>{<expr><literal type="string">"jx9_info"</literal></expr>,          <expr><name>vm_builtin_jx9_version</name></expr>  }</block></expr>,
	<expr><block>{<expr><literal type="string">"jx9_copyright"</literal></expr>,     <expr><name>vm_builtin_jx9_version</name></expr>  }</block></expr>, 
	  <comment type="block">/* hashmap */</comment>
	<expr><block>{<expr><literal type="string">"extract"</literal></expr>,          <expr><name>vm_builtin_extract</name></expr>       }</block></expr>, 
	  <comment type="block">/* URL related function */</comment>
	<expr><block>{<expr><literal type="string">"parse_url"</literal></expr>,        <expr><name>vm_builtin_parse_url</name></expr>     }</block></expr>, 
	   <comment type="block">/* UTF-8 encoding/decoding */</comment>
	<expr><block>{<expr><literal type="string">"utf8_encode"</literal></expr>,    <expr><name>vm_builtin_utf8_encode</name></expr>}</block></expr>, 
	<expr><block>{<expr><literal type="string">"utf8_decode"</literal></expr>,    <expr><name>vm_builtin_utf8_decode</name></expr>}</block></expr>, 
	   <comment type="block">/* Command line processing */</comment>
	<expr><block>{<expr><literal type="string">"getopt"</literal></expr>,         <expr><name>vm_builtin_getopt</name></expr>     }</block></expr>, 
	   <comment type="block">/* Files/URI inclusion facility */</comment>
	<expr><block>{ <expr><literal type="string">"include"</literal></expr>,      <expr><name>vm_builtin_include</name></expr>          }</block></expr>, 
	<expr><block>{ <expr><literal type="string">"import"</literal></expr>, <expr><name>vm_builtin_import</name></expr>     }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Register the built-in VM functions defined above.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmRegisterSpecialFunction</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SX_ARRAYSIZE</name><argument_list>(<argument><expr><name>aVmFunc</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<comment type="block">/* Note that these special functions have access
		 * to the underlying virtual machine as their
		 * private data.
		 */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_create_function</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name><name>aVmFunc</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><name><name>aVmFunc</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>xFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>rc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_DISABLE_BUILTIN_FUNC</name></cpp:ifndef>
<comment type="block">/*
 * Extract the IO stream device associated with a given scheme.
 * Return a pointer to an instance of jx9_io_stream when the scheme
 * have an associated IO stream registered with it. NULL otherwise.
 * If no scheme:// is avalilable then the file:// scheme is assumed.
 * For more information on how to register IO stream devices, please
 * refer to the official documentation.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <specifier>const</specifier> <name>jx9_io_stream</name> <modifier>*</modifier></type> <name>jx9VmGetStreamDevice</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,           <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzDevice</name></decl></parameter>, <comment type="block">/* Full path, URI, ... */</comment>
	<parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>              <comment type="block">/* *pzDevice length*/</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zCur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zNext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_io_stream</name> <modifier>*</modifier><modifier>*</modifier></type><name>apStream</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sDev</name></decl>, <decl><type ref="prev"/><name>sCur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Check if a scheme [i.e: file://, http://, zip://...] is available */</comment>
	<expr_stmt><expr><name>zNext</name> <operator>=</operator> <name>zCur</name> <operator>=</operator> <name>zIn</name> <operator>=</operator> <operator>*</operator><name>pzDevice</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>nByte</name></expr>]</index></name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>zEnd</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><comment type="block">/*://*/</comment> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Got one */</comment>
			<expr_stmt><expr><name>zNext</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Advance the cursor */</comment>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* No such scheme, return the default stream */</comment>
		<return>return <expr><name><name>pVm</name><operator>-&gt;</operator><name>pDefStream</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDev</name></expr></argument>, <argument><expr><name>zCur</name></expr></argument>, <argument><expr><name>zIn</name><operator>-</operator><name>zCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Remove leading and trailing white spaces */</comment>
	<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform a linear lookup on the installed stream devices */</comment>
	<expr_stmt><expr><name>apStream</name> <operator>=</operator> <operator>(</operator><name>jx9_io_stream</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aIOstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nEntry</name> <operator>=</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>aIOstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nEntry</name></expr> ;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><name>pStream</name> <operator>=</operator> <name><name>apStream</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCur</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Perfrom a case-insensitive comparison */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyStringCmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCur</name></expr></argument>, <argument><expr><name>SyStrnicmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Stream device found */</comment>
			<expr_stmt><expr><operator>*</operator><name>pzDevice</name> <operator>=</operator> <name>zNext</name></expr>;</expr_stmt>
			<return>return <expr><name>pStream</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* No such stream, return NULL */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JX9_DISABLE_BUILTIN_FUNC */</comment>
<comment type="block">/*
 * Section:
 *    HTTP/URI related routines.
 * Authors:
 *    Symisc Systems, devel@symisc.net.
 *    Copyright (C) Symisc Systems, http://jx9.symisc.net
 * Status:
 *    Stable.
 */</comment> 
 <comment type="block">/*
  * URI Parser: Split an URI into components [i.e: Host, Path, Query, ...].
  * URI syntax: [method:/][/[user[:pwd]@]host[:port]/][document]
  * This almost, but not quite, RFC1738 URI syntax.
  * This routine is not a validator, it does not check for validity
  * nor decode URI parts, the only thing this routine does is splitting
  * the input to its fields.
  * Upper layer are responsible of decoding and validating URI parts.
  * On success, this function populate the "SyhttpUri" structure passed
  * as the first argument. Otherwise SXERR_* is returned when a malformed
  * input is encountered.
  */</comment>
 <function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpSplitURI</name><parameter_list>(<parameter><decl><type><name>SyhttpUri</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUri</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
	 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name> <init>= <expr><operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nLen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu8</name></type> <name>bHostOnly</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu8</name></type> <name>bIPv6</name> <init>= <expr><name>FALSE</name></expr></init></decl>	;</decl_stmt> 
	 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCur</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pComp</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu32</name></type> <name>nPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	 <comment type="block">/* Zero the structure first */</comment>
	 <expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyhttpUri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* Remove leading and trailing white spaces  */</comment>
	 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sRaw</name></name></expr></argument>, <argument><expr><name>zUri</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sRaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* Find the first '/' separator */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyByteFind</name><argument_list>(<argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name> <operator>-</operator> <name>zUri</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Assume a host name only */</comment>
		 <expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zEnd</name></expr>;</expr_stmt>
		 <expr_stmt><expr><name>bHostOnly</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
		 <goto>goto <name>ProcessHost</name>;</goto>
	 </block_content>}</block></if></if_stmt>
	 <expr_stmt><expr><name>zCur</name> <operator>=</operator> <operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name></expr>]</index></name></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>zUri</name> <operator>!=</operator> <name>zCur</name> <operator>&amp;&amp;</operator> <name><name>zCur</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Extract a scheme:
		  * Not that we can get an invalid scheme here.
		  * Fortunately the caller can discard any URI by comparing this scheme with its 
		  * registered schemes and will report the error as soon as his comparison function
		  * fail.
		  */</comment>
	 	<expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sScheme</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pComp</name></expr></argument>, <argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zCur</name> <operator>-</operator> <name>zUri</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyStringLeftTrim</name><argument_list>(<argument><expr><name>pComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	 </block_content>}</block></if></if_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>zCur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr> )</condition><block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>zCur</name> <operator>==</operator> <name>zUri</name> <operator>||</operator> <name><name>zCur</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block>{<block_content>
		  <comment type="block">/* No authority */</comment>
		  <goto>goto <name>PathSplit</name>;</goto>
		</block_content>}</block></if></if_stmt>
		 <comment type="block">/* There is something here , we will assume its an authority
		  * and someone has forgot the two prefix slashes "//", 
		  * sooner or later we will detect if we are dealing with a malicious
		  * user or not, but now assume we are dealing with an authority
		  * and let the caller handle all the validation process.
		  */</comment>
		 <goto>goto <name>ProcessHost</name>;</goto>
	 </block_content>}</block></if></if_stmt>	 
	 <expr_stmt><expr><name>zUri</name> <operator>=</operator> <operator>&amp;</operator><name><name>zCur</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	 <expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zEnd</name></expr>;</expr_stmt>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyByteFind</name><argument_list>(<argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name> <operator>-</operator> <name>zUri</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>zCur</name> <operator>=</operator> <operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name></expr>]</index></name></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
 <label><name>ProcessHost</name>:</label>
	 <comment type="block">/* Extract user information if present */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyByteFind</name><argument_list>(<argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zCur</name> <operator>-</operator> <name>zUri</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>nPos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <decl_stmt><decl><type><name>sxu32</name></type> <name>nPassOfft</name></decl>;</decl_stmt> <comment type="block">/* Password offset */</comment>
			 <expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sUser</name></name></expr>;</expr_stmt>
			 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pComp</name></expr></argument>, <argument><expr><name>zUri</name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Extract the password if available */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyByteFind</name><argument_list>(<argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zCur</name> <operator>-</operator> <name>zUri</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPassOfft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name> <operator>&amp;&amp;</operator> <name>nPassOfft</name> <operator>&lt;</operator> <name>nPos</name></expr>)</condition><block>{<block_content>
				 <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <name>nPassOfft</name></expr>;</expr_stmt>
				 <expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sPass</name></name></expr>;</expr_stmt>
				 <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPassOfft</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;</expr_stmt>
				 <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <name>nPos</name> <operator>-</operator> <name>nPassOfft</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			 </block_content>}</block></if></if_stmt>
			 <comment type="block">/* Update the cursor */</comment>
			 <expr_stmt><expr><name>zUri</name> <operator>=</operator> <operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <expr_stmt><expr><name>zUri</name><operator>++</operator></expr>;</expr_stmt>
		 </block_content>}</block></else></if_stmt>
	 </block_content>}</block></if></if_stmt>
	 <expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sHost</name></name></expr>;</expr_stmt>
	 <while>while<condition>( <expr><name>zUri</name> <operator>&lt;</operator> <name>zCur</name> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zUri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
		 <expr_stmt><expr><name>zUri</name><operator>++</operator></expr>;</expr_stmt>
	 </block_content>}</block></while>	
	 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pComp</name></expr></argument>, <argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zCur</name> <operator>-</operator> <name>zUri</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* An IPv6 Address: Make a simple naive test
		  */</comment>
		 <expr_stmt><expr><name>zUri</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>zString</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		 <while>while<condition>( <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zUri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisHex</name><argument_list>(<argument><expr><name><name>zUri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>zUri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>zUri</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name><operator>++</operator></expr>;</expr_stmt>
		 </block_content>}</block></while>
		 <if_stmt><if>if<condition>( <expr><name><name>zUri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>SXERR_CORRUPT</name></expr>;</return> <comment type="block">/* Malformed IPv6 address */</comment>
		 </block_content>}</block></if></if_stmt>
		 <expr_stmt><expr><name>zUri</name><operator>++</operator></expr>;</expr_stmt>
		 <expr_stmt><expr><name>bIPv6</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* Extract a port number if available */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyByteFind</name><argument_list>(<argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zCur</name> <operator>-</operator> <name>zUri</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		 <if_stmt><if>if<condition>( <expr><name>bIPv6</name> <operator>==</operator> <name>FALSE</name></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name></expr>]</index></name> <operator>-</operator> <name>zUri</name><operator>)</operator></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sPort</name></name></expr>;</expr_stmt>
		 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pComp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zCur</name> <operator>-</operator> <operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	 </block_content>}</block></if></if_stmt>
	 <if_stmt><if>if<condition>( <expr><name>bHostOnly</name> <operator>==</operator> <name>TRUE</name></expr> )</condition><block>{<block_content>
		 <return>return <expr><name>SXRET_OK</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
<label><name>PathSplit</name>:</label>
	 <expr_stmt><expr><name>zUri</name> <operator>=</operator> <name>zCur</name></expr>;</expr_stmt>
	 <expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sPath</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pComp</name></expr></argument>, <argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zUri</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <return>return <expr><name>SXRET_OK</name></expr>;</return> <comment type="block">/* Empty path */</comment>
	 </block_content>}</block></if></if_stmt>
	 <if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>==</operator> <call><name>SyByteFind</name><argument_list>(<argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zUri</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <name>nPos</name></expr>;</expr_stmt> <comment type="block">/* Update path length */</comment>
		 <expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sQuery</name></name></expr>;</expr_stmt>
		 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pComp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>==</operator> <call><name>SyByteFind</name><argument_list>(<argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zUri</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Update path or query length */</comment>
		 <if_stmt><if>if<condition>( <expr><name>pComp</name> <operator>==</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sPath</name></name></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <name>nPos</name></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>SyStringData</name><argument_list>(<argument><expr><name>pComp</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				 <comment type="block">/* Malformed syntax : Query must be present before fragment */</comment>
				 <return>return <expr><name>SXERR_SYNTAX</name></expr>;</return>
			 </block_content>}</block></if></if_stmt>
			 <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>-=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name> <operator>-</operator> <operator>&amp;</operator><name><name>zUri</name><index>[<expr><name>nPos</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		 </block_content>}</block></else></if_stmt>
		 <expr_stmt><expr><name>pComp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sFragment</name></name></expr>;</expr_stmt>
		 <macro><name>SyStringInitFromBuf</name><argument_list>(<argument>pComp</argument>, <argument>&amp;zUri[nPos+<literal type="number">1</literal>]</argument>, <argument>(sxu32)(zEnd-&amp;zUri[nPos+<literal type="number">1</literal>])</argument>)</argument_list></macro>
	 </block_content>}</block></if></if_stmt>
	 <return>return <expr><name>SXRET_OK</name></expr>;</return>
 </block_content>}</block></function>
 <comment type="block">/*
 * Extract a single line from a raw HTTP request.
 * Return SXRET_OK on success, SXERR_EOF when end of input
 * and SXERR_MORE when more input is needed.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmGetNextLine</name><parameter_list>(<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, <parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pCurrent</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>;</decl_stmt>
  	<decl_stmt><decl><type><name>sxu32</name></type> <name>nPos</name></decl>;</decl_stmt> 
	<comment type="block">/* Jump leading white spaces */</comment>
	<expr_stmt><expr><call><name>SyStringLeftTrim</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pCursor</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pCurrent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXERR_EOF</name></expr>;</return> <comment type="block">/* End of input */</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zIn</name> <operator>=</operator> <call><name>SyStringData</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>SyByteListFind</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Line not found, tell the caller to read more input from source */</comment>
		<expr_stmt><expr><call><name>SyStringDupPtr</name><argument_list>(<argument><expr><name>pCurrent</name></expr></argument>, <argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXERR_MORE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
  	<expr_stmt><expr><name><name>pCurrent</name><operator>-&gt;</operator><name>zString</name></name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
  	<expr_stmt><expr><name><name>pCurrent</name><operator>-&gt;</operator><name>nByte</name></name>	<operator>=</operator> <name>nPos</name></expr>;</expr_stmt>	
  	<comment type="block">/* advance the cursor so we can call this routine again */</comment>
  	<expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>zString</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>nPos</name></expr>]</index></name></expr>;</expr_stmt>
  	<expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>nByte</name></name> <operator>-=</operator> <name>nPos</name></expr>;</expr_stmt>
  	<return>return <expr><name>SXRET_OK</name></expr>;</return>
 </block_content>}</block></function>
 <comment type="block">/*
  * Split a single MIME header into a name value pair. 
  * This function return SXRET_OK, SXERR_CONTINUE on success.
  * Otherwise SXERR_NEXT is returned when a malformed header
  * is encountered.
  * Note: This function handle also mult-line headers.
  */</comment>
 <function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpProcessOneHeader</name><parameter_list>(<parameter><decl><type><name>SyhttpHeader</name> <modifier>*</modifier></type><name>pHdr</name></decl></parameter>, <parameter><decl><type><name>SyhttpHeader</name> <modifier>*</modifier></type><name>pLast</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLine</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
	 <decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu32</name></type> <name>nPos</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	 <if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		 <return>return <expr><name>SXERR_NEXT</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* Check for multi-line header */</comment>
	<if_stmt><if>if<condition>( <expr><name>pLast</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zLine</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>zLine</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pTmp</name> <init>= <expr><operator>&amp;</operator><name><name>pLast</name><operator>-&gt;</operator><name>sValue</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><name>pTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pTmp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pTmp</name></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Update header value length */</comment>
			<expr_stmt><expr><name><name>pTmp</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>zLine</name><index>[<expr><name>nLen</name></expr>]</index></name> <operator>-</operator> <name><name>pTmp</name><operator>-&gt;</operator><name>zString</name></name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		 <comment type="block">/* Simply tell the caller to reset its states and get another line */</comment>
		 <return>return <expr><name>SXERR_CONTINUE</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
	<comment type="block">/* Split the header */</comment>
	<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>sName</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyByteFind</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_NEXT</name></expr>;</return> <comment type="block">/* Malformed header;Check the next entry */</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract a header value */</comment>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>sValue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zLine</name><index>[<expr><name>nPos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nLen</name> <operator>-</operator> <name>nPos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Remove leading and trailing whitespaces */</comment>
	<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>sValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
 </block_content>}</block></function>
 <comment type="block">/*
  * Extract all MIME headers associated with a HTTP request.
  * After processing the first line of a HTTP request, the following
  * routine is called in order to extract MIME headers.
  * This function return SXRET_OK on success, SXERR_MORE when it needs
  * more inputs.
  * Note: Any malformed header is simply discarded.
  */</comment>
 <function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpExtractHeaders</name><parameter_list>(<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
	 <decl_stmt><decl><type><name>SyhttpHeader</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>SyString</name></type> <name>sCurrent</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>SyhttpHeader</name></type> <name>sHdr</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu8</name></type> <name>bEol</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	 <if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>pLast</name> <operator>=</operator> <operator>(</operator><name>SyhttpHeader</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><call><name>SySetUsed</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <expr_stmt><expr><name>bEol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
	 <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		 <expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyhttpHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <comment type="block">/* Extract a single line from the raw HTTP request */</comment>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmGetNextLine</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			 <if_stmt><if>if<condition>( <expr><name><name>sCurrent</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				 <break>break;</break>
			 </block_content>}</block></if></if_stmt>
			 <expr_stmt><expr><name>bEol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <comment type="block">/* Process the header */</comment>
		 <if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>==</operator> <call><name>VmHttpProcessOneHeader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHdr</name></expr></argument>, <argument><expr><name>pLast</name></expr></argument>, <argument><expr><name><name>sCurrent</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>sCurrent</name><operator>.</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
			 <if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sHdr</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				 <break>break;</break>
			 </block_content>}</block></if></if_stmt>
			 <comment type="block">/* Retrieve the last parsed header so we can handle multi-line header
			  * in case we face one of them.
			  */</comment>
			 <expr_stmt><expr><name>pLast</name> <operator>=</operator> <operator>(</operator><name>SyhttpHeader</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <if_stmt><if>if<condition>( <expr><name>bEol</name></expr> )</condition><block>{<block_content>
			 <break>break;</break>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></for> <comment type="block">/* for(;;) */</comment>
	 <return>return <expr><name>SXRET_OK</name></expr>;</return>
 </block_content>}</block></function>
 <comment type="block">/*
  * Process the first line of a HTTP request.
  * This routine perform the following operations
  *  1) Extract the HTTP method.
  *  2) Split the request URI to it's fields [ie: host, path, query, ...].
  *  3) Extract the HTTP protocol version.
  */</comment>
 <function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpProcessFirstLine</name><parameter_list>(
	 <parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>, <comment type="block">/* Raw HTTP request */</comment>
	 <parameter><decl><type><name>sxi32</name> <modifier>*</modifier></type><name>pMethod</name></decl></parameter>,     <comment type="block">/* OUT: HTTP method */</comment>
	 <parameter><decl><type><name>SyhttpUri</name> <modifier>*</modifier></type><name>pUri</name></decl></parameter>,    <comment type="block">/* OUT: Parse of the URI */</comment>
	 <parameter><decl><type><name>sxi32</name> <modifier>*</modifier></type><name>pProto</name></decl></parameter>       <comment type="block">/* OUT: HTTP protocol */</comment>
	 )</parameter_list>
 <block>{<block_content>
	 <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azMethods</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"get"</literal></expr>, <expr><literal type="string">"post"</literal></expr>, <expr><literal type="string">"head"</literal></expr>, <expr><literal type="string">"put"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sxi32</name></type> <name><name>aMethods</name><index>[]</index></name>  <init>= <expr><block>{ <expr><name>HTTP_METHOD_GET</name></expr>, <expr><name>HTTP_METHOD_POST</name></expr>, <expr><name>HTTP_METHOD_HEAD</name></expr>, <expr><name>HTTP_METHOD_PUT</name></expr>}</block></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zPtr</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>SyString</name></type> <name>sLine</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu32</name></type> <name>nLen</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	 <comment type="block">/* Extract the first line and update the pointer */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmGetNextLine</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		 <return>return <expr><name>rc</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
	 <if_stmt><if>if <condition>( <expr><name><name>sLine</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Empty HTTP request */</comment>
		 <return>return <expr><name>SXERR_EMPTY</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* Delimit the line and ignore trailing and leading white spaces */</comment>
	 <expr_stmt><expr><name>zIn</name> <operator>=</operator> <name><name>sLine</name><operator>.</operator><name>zString</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name><name>sLine</name><operator>.</operator><name>nByte</name></name></expr>]</index></name></expr>;</expr_stmt>
	 <while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	 </block_content>}</block></while>
	 <comment type="block">/* Extract the HTTP method */</comment>
	 <expr_stmt><expr><name>zPtr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
	 <while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	 </block_content>}</block></while>
	 <expr_stmt><expr><operator>*</operator><name>pMethod</name> <operator>=</operator> <name>HTTP_METHOD_OTHR</name></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;</operator> <name>zPtr</name></expr> )</condition><block>{<block_content>
		 <decl_stmt><decl><type><name>sxu32</name></type> <name>i</name></decl>;</decl_stmt>
		 <expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zIn</name><operator>-</operator><name>zPtr</name><operator>)</operator></expr>;</expr_stmt>
		 <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>SX_ARRAYSIZE</name><argument_list>(<argument><expr><name>azMethods</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			 <if_stmt><if>if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>azMethods</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>zPtr</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				 <expr_stmt><expr><operator>*</operator><name>pMethod</name> <operator>=</operator> <name><name>aMethods</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				 <break>break;</break>
			 </block_content>}</block></if></if_stmt>
		 </block_content>}</block></for>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* Jump trailing white spaces */</comment>
	 <while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	 </block_content>}</block></while>
	  <comment type="block">/* Extract the request URI */</comment>
	 <expr_stmt><expr><name>zPtr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
	 <while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	 </block_content>}</block></while> 
	 <if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;</operator> <name>zPtr</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zIn</name><operator>-</operator><name>zPtr</name><operator>)</operator></expr>;</expr_stmt>
		 <comment type="block">/* Split raw URI to it's fields */</comment>
		 <expr_stmt><expr><call><name>VmHttpSplitURI</name><argument_list>(<argument><expr><name>pUri</name></expr></argument>, <argument><expr><name>zPtr</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* Jump trailing white spaces */</comment>
	 <while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	 </block_content>}</block></while>
	 <comment type="block">/* Extract the HTTP version */</comment>
	 <expr_stmt><expr><name>zPtr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
	 <while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	 </block_content>}</block></while>
	 <expr_stmt><expr><operator>*</operator><name>pProto</name> <operator>=</operator> <name>HTTP_PROTO_11</name></expr>;</expr_stmt> <comment type="block">/* HTTP/1.1 */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;</operator> <name>zPtr</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyStrnicmp</name><argument_list>(<argument><expr><name>zPtr</name></expr></argument>, <argument><expr><literal type="string">"http/1.0"</literal></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zIn</name><operator>-</operator><name>zPtr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><operator>*</operator><name>pProto</name> <operator>=</operator> <name>HTTP_PROTO_10</name></expr>;</expr_stmt> <comment type="block">/* HTTP/1.0 */</comment>
	 </block_content>}</block></if></if_stmt>
	 <return>return <expr><name>SXRET_OK</name></expr>;</return>
 </block_content>}</block></function>
 <comment type="block">/*
  * Tokenize, decode and split a raw query encoded as: "x-www-form-urlencoded" 
  * into a name value pair.
  * Note that this encoding is implicit in GET based requests.
  * After the tokenization process, register the decoded queries
  * in the $_GET/$_POST/$_REQUEST superglobals arrays.
  */</comment>
 <function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpSplitEncodedQuery</name><parameter_list>(
	 <parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,       <comment type="block">/* Target VM */</comment>
	 <parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pQuery</name></decl></parameter>,  <comment type="block">/* Raw query to decode */</comment>
	 <parameter><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>,   <comment type="block">/* Working buffer */</comment>
	 <parameter><decl><type><name>int</name></type> <name>is_post</name></decl></parameter>        <comment type="block">/* TRUE if we are dealing with a POST request */</comment>
	 )</parameter_list>
 <block>{<block_content>
	 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name> <init>= <expr><operator>&amp;</operator><name><name>pQuery</name><operator>-&gt;</operator><name>zString</name><index>[<expr><name><name>pQuery</name><operator>-&gt;</operator><name>nByte</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name> <init>= <expr><name><name>pQuery</name><operator>-&gt;</operator><name>zString</name></name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pGet</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pRequest</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>, <decl><type ref="prev"/><name>sValue</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPtr</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu32</name></type> <name>nBlobOfft</name></decl>;</decl_stmt>
	 <comment type="block">/* Extract superglobals */</comment>
	 <if_stmt><if>if<condition>( <expr><name>is_post</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* $_POST superglobal */</comment>
		 <expr_stmt><expr><name>pGet</name> <operator>=</operator> <call><name>VmExtractSuper</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"_POST"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"_POST"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <comment type="block">/* $_GET superglobal */</comment>
		 <expr_stmt><expr><name>pGet</name> <operator>=</operator> <call><name>VmExtractSuper</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"_GET"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"_GET"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></else></if_stmt>
	 <expr_stmt><expr><name>pRequest</name> <operator>=</operator> <call><name>VmExtractSuper</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"_REQUEST"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"_REQUEST"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* Split up the raw query */</comment>
	 <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		 <comment type="block">/* Jump leading white spaces */</comment>
		 <while>while<condition>(<expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name>  <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		 </block_content>}</block></while>
		 <if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			 <break>break;</break>
		 </block_content>}</block></if></if_stmt>
		 <expr_stmt><expr><name>zPtr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
		 <while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
		 </block_content>}</block></while>
		 <comment type="block">/* Reset the working buffer */</comment>
		 <expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <comment type="block">/* Decode the entry */</comment>
		 <expr_stmt><expr><call><name>SyUriDecode</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zPtr</name><operator>-</operator><name>zIn</name><operator>)</operator></expr></argument>, <argument><expr><name>jx9VmBlobConsumer</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <comment type="block">/* Save the entry */</comment>
		 <expr_stmt><expr><name><name>sName</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name><name>sValue</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		 <expr_stmt><expr><name><name>sValue</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
			 <expr_stmt><expr><name>zIn</name> <operator>=</operator> <name>zPtr</name></expr>;</expr_stmt>
			 <comment type="block">/* Store field value */</comment>
			 <while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr> )</condition><block>{<block_content>
				 <expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
			 </block_content>}</block></while>
			 <if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>&gt;</operator> <name>zIn</name></expr> )</condition><block>{<block_content>
				 <comment type="block">/* Decode the value */</comment>
				  <expr_stmt><expr><name>nBlobOfft</name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  <expr_stmt><expr><call><name>SyUriDecode</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zPtr</name><operator>-</operator><name>zIn</name><operator>)</operator></expr></argument>, <argument><expr><name>jx9VmBlobConsumer</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  <expr_stmt><expr><name><name>sValue</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobDataAt</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>nBlobOfft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  <expr_stmt><expr><name><name>sValue</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>nBlobOfft</name></expr>;</expr_stmt>
				 
			 </block_content>}</block></if></if_stmt>
			 <comment type="block">/* Synchronize pointers */</comment>
			 <expr_stmt><expr><name>zIn</name> <operator>=</operator> <name>zPtr</name></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <expr_stmt><expr><name><name>sName</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <comment type="block">/* Install the decoded query in the $_GET/$_REQUEST array */</comment>
		 <if_stmt><if>if<condition>( <expr><name>pGet</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGet</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><call><name>VmHashmapInsert</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pGet</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, 
				 <argument><expr><name><name>sName</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sName</name><operator>.</operator><name>nByte</name></name></expr></argument>, 
				 <argument><expr><name><name>sValue</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sValue</name><operator>.</operator><name>nByte</name></name></expr></argument>
				 )</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <if_stmt><if>if<condition>( <expr><name>pRequest</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pRequest</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><call><name>VmHashmapInsert</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pRequest</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, 
				 <argument><expr><name><name>sName</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sName</name><operator>.</operator><name>nByte</name></name></expr></argument>, 
				 <argument><expr><name><name>sValue</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sValue</name><operator>.</operator><name>nByte</name></name></expr></argument>
					 )</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <comment type="block">/* Advance the pointer */</comment>
		 <expr_stmt><expr><name>zIn</name> <operator>=</operator> <operator>&amp;</operator><name><name>zPtr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	 </block_content>}</block></for>
	<comment type="block">/* All done*/</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
 </block_content>}</block></function>
 <comment type="block">/*
  * Extract MIME header value from the given set.
  * Return header value on success. NULL otherwise.
  */</comment>
 <function><type><specifier>static</specifier> <name>SyString</name> <modifier>*</modifier></type> <name>VmHttpExtractHeaderValue</name><parameter_list>(<parameter><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMime</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nByte</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
	 <decl_stmt><decl><type><name>SyhttpHeader</name> <modifier>*</modifier></type><name>aMime</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pMime</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>SyString</name></type> <name>sMime</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sMime</name></expr></argument>, <argument><expr><name>zMime</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* Point to the MIME entries */</comment>
	 <expr_stmt><expr><name>aMime</name> <operator>=</operator> <operator>(</operator><name>SyhttpHeader</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* Perform the lookup */</comment>
	 <for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		 <expr_stmt><expr><name>pMime</name> <operator>=</operator> <operator>&amp;</operator><name><name>aMime</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><call><name>SyStringCmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sMime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMime</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>, <argument><expr><name>SyStrnicmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Header found, return it's associated value */</comment>
			 <return>return <expr><operator>&amp;</operator><name><name>pMime</name><operator>-&gt;</operator><name>sValue</name></name></expr>;</return>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></for>
	 <comment type="block">/* No such MIME header */</comment>
	 <return>return <expr><literal type="number">0</literal></expr>;</return>
 </block_content>}</block></function>
 <comment type="block">/*
  * Tokenize and decode a raw "Cookie:" MIME header into a name value pair
  * and insert it's fields [i.e name, value] in the $_COOKIE superglobal.
  */</comment>
 <function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpPorcessCookie</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nByte</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
	 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPtr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zDelimiter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name> <init>= <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>nByte</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>, <decl><type ref="prev"/><name>sValue</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pCookie</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>sxu32</name></type> <name>nOfft</name></decl>;</decl_stmt>
	 <comment type="block">/* Make sure the $_COOKIE superglobal is available */</comment>
	 <expr_stmt><expr><name>pCookie</name> <operator>=</operator> <call><name>VmExtractSuper</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"_COOKIE"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"_COOKIE"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pCookie</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pCookie</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* $_COOKIE superglobal not available */</comment>
		 <return>return <expr><name>SXERR_NOTFOUND</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>	
	 <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		  <comment type="block">/* Jump leading white spaces */</comment>
		 <while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		 </block_content>}</block></while>
		 <if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			 <break>break;</break>
		 </block_content>}</block></if></if_stmt>
		  <comment type="block">/* Reset the working buffer */</comment>
		 <expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>zDelimiter</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
		 <comment type="block">/* Delimit the name[=value]; pair */</comment> 
		 <while>while<condition>( <expr><name>zDelimiter</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zDelimiter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>zDelimiter</name><operator>++</operator></expr>;</expr_stmt>
		 </block_content>}</block></while>
		 <expr_stmt><expr><name>zPtr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
		 <while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zDelimiter</name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
		 </block_content>}</block></while>
		 <comment type="block">/* Decode the cookie */</comment>
		 <expr_stmt><expr><call><name>SyUriDecode</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zPtr</name><operator>-</operator><name>zIn</name><operator>)</operator></expr></argument>, <argument><expr><name>jx9VmBlobConsumer</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name><name>sName</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
		 <expr_stmt><expr><name><name>sValue</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		 <expr_stmt><expr><name><name>sValue</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zDelimiter</name></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Got a Cookie value */</comment>
			 <expr_stmt><expr><name>nOfft</name> <operator>=</operator> <call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><call><name>SyUriDecode</name><argument_list>(<argument><expr><name>zPtr</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zDelimiter</name><operator>-</operator><name>zPtr</name><operator>)</operator></expr></argument>, <argument><expr><name>jx9VmBlobConsumer</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sValue</name></expr></argument>, <argument><expr><call><name>SyBlobDataAt</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>nOfft</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call><operator>-</operator><name>nOfft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <comment type="block">/* Synchronize pointers */</comment>
		 <expr_stmt><expr><name>zIn</name> <operator>=</operator> <operator>&amp;</operator><name><name>zDelimiter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		 <comment type="block">/* Perform the insertion */</comment>
		 <expr_stmt><expr><name><name>sName</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><call><name>VmHashmapInsert</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pCookie</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, 
			 <argument><expr><name><name>sName</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sName</name><operator>.</operator><name>nByte</name></name></expr></argument>, 
			 <argument><expr><name><name>sValue</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sValue</name><operator>.</operator><name>nByte</name></name></expr></argument>
			 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></for>
	 <return>return <expr><name>SXRET_OK</name></expr>;</return>
 </block_content>}</block></function>
 <comment type="block">/*
  * Process a full HTTP request and populate the appropriate arrays
  * such as $_SERVER, $_GET, $_POST, $_COOKIE, $_REQUEST, ... with the information
  * extracted from the raw HTTP request. As an extension Symisc introduced 
  * the $_HEADER array which hold a copy of the processed HTTP MIME headers
  * and their associated values. [i.e: $_HEADER['Server'], $_HEADER['User-Agent'], ...].
  * This function return SXRET_OK on success. Any other return value indicates
  * a malformed HTTP request.
  */</comment>
 <function><type><specifier>static</specifier> <name>sxi32</name></type> <name>VmHttpProcessRequest</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRequest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
	 <decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pValue</name></decl>, <decl><type ref="prev"/><name>sRequest</name></decl>;</decl_stmt> <comment type="block">/* Raw HTTP request */</comment>
	 <decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pHeaderArray</name></decl>;</decl_stmt>          <comment type="block">/* $_HEADER superglobal (Symisc eXtension to the JX9 specification)*/</comment>
	 <decl_stmt><decl><type><name>SyhttpHeader</name> <modifier>*</modifier></type><name>pHeader</name></decl>;</decl_stmt>            <comment type="block">/* MIME header */</comment>
	 <decl_stmt><decl><type><name>SyhttpUri</name></type> <name>sUri</name></decl>;</decl_stmt>     <comment type="block">/* Parse of the raw URI*/</comment>
	 <decl_stmt><decl><type><name>SyBlob</name></type> <name>sWorker</name></decl>;</decl_stmt>     <comment type="block">/* General purpose working buffer */</comment>
	 <decl_stmt><decl><type><name>SySet</name></type> <name>sHeader</name></decl>;</decl_stmt>      <comment type="block">/* MIME headers set */</comment>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>iMethod</name></decl>;</decl_stmt>      <comment type="block">/* HTTP method [i.e: GET, POST, HEAD...]*/</comment>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>iVer</name></decl>;</decl_stmt>         <comment type="block">/* HTTP protocol version */</comment>
	 <decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sRequest</name></expr></argument>, <argument><expr><name>zRequest</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyhttpHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* Ignore leading and trailing white spaces*/</comment>
	 <expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* Process the first line */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>VmHttpProcessFirstLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iMethod</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sUri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		 <return>return <expr><name>rc</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* Process MIME headers */</comment>
	 <expr_stmt><expr><call><name>VmHttpExtractHeaders</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/*
	  * Setup $_SERVER environments 
	  */</comment>
	 <comment type="block">/* 'SERVER_PROTOCOL': Name and revision of the information protocol via which the page was requested */</comment>
	 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
		 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
		 <argument><expr><literal type="string">"SERVER_PROTOCOL"</literal></expr></argument>, 
		 <argument><expr><ternary><condition><expr><name>iVer</name> <operator>==</operator> <name>HTTP_PROTO_10</name></expr> ?</condition><then> <expr><literal type="string">"HTTP/1.0"</literal></expr> </then><else>: <expr><literal type="string">"HTTP/1.1"</literal></expr></else></ternary></expr></argument>, 
		 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"HTTP/1.1"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* 'REQUEST_METHOD':  Which request method was used to access the page */</comment>
	 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
		 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
		 <argument><expr><literal type="string">"REQUEST_METHOD"</literal></expr></argument>, 
		 <argument><expr><ternary><condition><expr><name>iMethod</name> <operator>==</operator> <name>HTTP_METHOD_GET</name></expr> ?</condition><then>   <expr><literal type="string">"GET"</literal></expr> </then><else>: 
		 <expr><operator>(</operator><ternary><condition><expr><name>iMethod</name> <operator>==</operator> <name>HTTP_METHOD_POST</name></expr> ?</condition><then> <expr><literal type="string">"POST"</literal></expr></then><else>:
		 <expr><operator>(</operator><ternary><condition><expr><name>iMethod</name> <operator>==</operator> <name>HTTP_METHOD_PUT</name></expr>  ?</condition><then> <expr><literal type="string">"PUT"</literal></expr> </then><else>:
		 <expr><operator>(</operator><ternary><condition><expr><name>iMethod</name> <operator>==</operator> <name>HTTP_METHOD_HEAD</name></expr> ?</condition><then>  <expr><literal type="string">"HEAD"</literal></expr> </then><else>: <expr><literal type="string">"OTHER"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>, 
		 <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> <comment type="block">/* Compute attribute length automatically */</comment>
		 )</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sUri</name><operator>.</operator><name>sQuery</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iMethod</name> <operator>==</operator> <name>HTTP_METHOD_GET</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <operator>&amp;</operator><name><name>sUri</name><operator>.</operator><name>sQuery</name></name></expr>;</expr_stmt>
		 <comment type="block">/* 'QUERY_STRING': The query string, if any, via which the page was accessed */</comment>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"QUERY_STRING"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
			 )</argument_list></call></expr>;</expr_stmt>
		 <comment type="block">/* Decoded the raw query */</comment>
		 <expr_stmt><expr><call><name>VmHttpSplitEncodedQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>pValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* REQUEST_URI: The URI which was given in order to access this page; for instance, '/index.html' */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <operator>&amp;</operator><name><name>sUri</name><operator>.</operator><name>sRaw</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
		 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
		 <argument><expr><literal type="string">"REQUEST_URI"</literal></expr></argument>, 
		 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
		 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/*
	  * 'PATH_INFO'
	  * 'ORIG_PATH_INFO' 
      * Contains any client-provided pathname information trailing the actual script filename but preceding
	  * the query string, if available. For instance, if the current script was accessed via the URL
	  * http://www.example.com/jx9/path_info.jx9/some/stuff?foo=bar, then $_SERVER['PATH_INFO'] would contain
	  * /some/stuff. 
	  */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <operator>&amp;</operator><name><name>sUri</name><operator>.</operator><name>sPath</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
		 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
		 <argument><expr><literal type="string">"PATH_INFO"</literal></expr></argument>, 
		 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
		 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
		 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
		 <argument><expr><literal type="string">"ORIG_PATH_INFO"</literal></expr></argument>, 
		 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
		 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* 'HTTP_ACCEPT': Contents of the Accept: header from the current request, if there is one */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Accept"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"HTTP_ACCEPT"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* 'HTTP_ACCEPT_CHARSET': Contents of the Accept-Charset: header from the current request, if there is one. */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Accept-Charset"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Accept-Charset"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"HTTP_ACCEPT_CHARSET"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* 'HTTP_ACCEPT_ENCODING': Contents of the Accept-Encoding: header from the current request, if there is one. */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Accept-Encoding"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Accept-Encoding"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"HTTP_ACCEPT_ENCODING"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	  <comment type="block">/* 'HTTP_ACCEPT_LANGUAGE': Contents of the Accept-Language: header from the current request, if there is one */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Accept-Language"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Accept-Language"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"HTTP_ACCEPT_LANGUAGE"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* 'HTTP_CONNECTION': Contents of the Connection: header from the current request, if there is one. */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"HTTP_CONNECTION"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* 'HTTP_HOST': Contents of the Host: header from the current request, if there is one. */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Host"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"HTTP_HOST"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* 'HTTP_REFERER': Contents of the Referer: header from the current request, if there is one. */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Referer"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Referer"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"HTTP_REFERER"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* 'HTTP_USER_AGENT': Contents of the Referer: header from the current request, if there is one. */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"User-Agent"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"HTTP_USER_AGENT"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	  <comment type="block">/* 'JX9_AUTH_DIGEST': When doing Digest HTTP authentication this variable is set to the 'Authorization'
	   * header sent by the client (which you should then use to make the appropriate validation).
	   */</comment>
	 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Authorization"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Authorization"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"JX9_AUTH_DIGEST"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, 
			 <argument><expr><name>JX9_VM_CONFIG_SERVER_ATTR</name></expr></argument>, 
			 <argument><expr><literal type="string">"JX9_AUTH"</literal></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, 
			 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
		 )</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* Install all clients HTTP headers in the $_HEADER superglobal */</comment>
	 <expr_stmt><expr><name>pHeaderArray</name> <operator>=</operator> <call><name>VmExtractSuper</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"_HEADER"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"_HEADER"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <comment type="block">/* Iterate throw the available MIME headers*/</comment>
	 <expr_stmt><expr><call><name>SySetResetCursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><name>pHeader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* stupid cc warning */</comment>
	 <while>while<condition>( <expr><name>SXRET_OK</name> <operator>==</operator> <call><name>SySetGetNextEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pHeader</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		 <expr_stmt><expr><name>pName</name>  <operator>=</operator> <operator>&amp;</operator><name><name>pHeader</name><operator>-&gt;</operator><name>sName</name></name></expr>;</expr_stmt>
		 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <operator>&amp;</operator><name><name>pHeader</name><operator>-&gt;</operator><name>sValue</name></name></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name>pHeaderArray</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pHeaderArray</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator></expr>)</condition><block>{<block_content>
			 <comment type="block">/* Insert the MIME header and it's associated value */</comment>
			 <expr_stmt><expr><call><name>VmHashmapInsert</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pHeaderArray</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, 
				 <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, 
				 <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>
				 )</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
		 <if_stmt><if>if<condition>( <expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Cookie"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"Cookie"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Cookie"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> 
			 <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
				 <comment type="block">/* Process the name=value pair and insert them in the $_COOKIE superglobal array */</comment>
				 <expr_stmt><expr><call><name>VmHttpPorcessCookie</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></while>
	 <if_stmt><if>if<condition>( <expr><name>iMethod</name> <operator>==</operator> <name>HTTP_METHOD_POST</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Extract raw POST data */</comment>
		 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name>pValue</name> <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"application/x-www-form-urlencoded"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
			 <call><name>SyMemcmp</name><argument_list>(<argument><expr><literal type="string">"application/x-www-form-urlencoded"</literal></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				 <comment type="block">/* Extract POST data length */</comment>
				 <expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>VmHttpExtractHeaderValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				 <if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
					 <decl_stmt><decl><type><name>sxi32</name></type> <name>iLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* POST data length */</comment>
					 <expr_stmt><expr><call><name>SyStrToInt32</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					 <if_stmt><if>if<condition>( <expr><name>iLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
						 <comment type="block">/* Remove leading and trailing white spaces */</comment>
						 <expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						 <if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sRequest</name><operator>.</operator><name>nByte</name></name> <operator>&gt;</operator> <name>iLen</name></expr> )</condition><block>{<block_content>
							 <expr_stmt><expr><name><name>sRequest</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name>iLen</name></expr>;</expr_stmt>
						 </block_content>}</block></if></if_stmt>
						 <comment type="block">/* Decode POST data now */</comment>
						 <expr_stmt><expr><call><name>VmHttpSplitEncodedQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					 </block_content>}</block></if></if_stmt>
				 </block_content>}</block></if></if_stmt>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
	 <comment type="block">/* All done, clean-up the mess left behind */</comment>
	 <expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <return>return <expr><name>SXRET_OK</name></expr>;</return>
 </block_content>}</block></function>
</unit>
