<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/jx9_memobj.c"><comment type="block">/*
 * Symisc JX9: A Highly Efficient Embeddable Scripting Engine Based on JSON.
 * Copyright (C) 2012-2013, Symisc Systems http://jx9.symisc.net/
 * Version 1.7.2
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://jx9.symisc.net/
 */</comment>
 <comment type="block">/* $SymiscID: memobj.c v2.7 FreeBSD 2012-08-09 03:40 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jx9Int.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* This file manage low-level stuff related to indexed memory objects [i.e: jx9_value] */</comment>
<comment type="block">/*
 * Notes on memory objects [i.e: jx9_value].
 * Internally, the JX9 virtual machine manipulates nearly all JX9 values
 * [i.e: string, int, float, resource, object, bool, null..] as jx9_values structures.
 * Each jx9_values struct may cache multiple representations (string, 
 * integer etc.) of the same value.
 */</comment>
<comment type="block">/*
 * Convert a 64-bit IEEE double into a 64-bit signed integer.
 * If the double is too large, return 0x8000000000000000.
 *
 * Most systems appear to do this simply by assigning ariables and without
 * the extra range tests.
 * But there are reports that windows throws an expection if the floating 
 * point value is out of range.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi64</name></type> <name>MemObjRealToInt</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JX9_OMIT_FLOATING_POINT</name></cpp:ifdef>
	<comment type="block">/* Real and 64bit integer are the same when floating point arithmetic
	 * is omitted from the build.
	 */</comment>
	<return>return <expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
 <comment type="block">/*
  ** Many compilers we encounter do not define constants for the
  ** minimum and maximum 64-bit integers, or they define them
  ** inconsistently.  And many do not understand the "LL" notation.
  ** So we define our own static constants here using nothing
  ** larger than a 32-bit integer constant.
  */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sxi64</name></type> <name>maxInt</name> <init>= <expr><name>LARGEST_INT64</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sxi64</name></type> <name>minInt</name> <init>= <expr><name>SMALLEST_INT64</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jx9_real</name></type> <name>r</name> <init>= <expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>r</name><operator>&lt;</operator><operator>(</operator><name>jx9_real</name><operator>)</operator><name>minInt</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>minInt</name></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>r</name><operator>&gt;</operator><operator>(</operator><name>jx9_real</name><operator>)</operator><name>maxInt</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* minInt is correct here - not maxInt.  It turns out that assigning
    ** a very large positive number to an integer results in a very large
    ** negative integer.  This makes no sense, but it is what x86 hardware
    ** does so for compatibility we will do the same in software. */</comment>
    <return>return <expr><name>minInt</name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><operator>(</operator><name>sxi64</name><operator>)</operator><name>r</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block">/*
 * Convert a raw token value typically a stream of digit [i.e: hex, octal, binary or decimal] 
 * to a 64-bit integer.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi64</name></type> <name>jx9TokenValueToInt64</name><parameter_list>(<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi64</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>zString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>sxi32</name></type> <name>c</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>zString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>c</name>  <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'X'</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Hex digit stream */</comment>
			<expr_stmt><expr><call><name>SyHexStrToInt64</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'B'</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Binary digit stream */</comment>
			<expr_stmt><expr><call><name>SyBinaryStrToInt64</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Octal digit stream */</comment>
			<expr_stmt><expr><call><name>SyOctalStrToInt64</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Decimal digit stream */</comment>
		<expr_stmt><expr><call><name>SyStrToInt64</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>iVal</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return some kind of 64-bit integer value which is the best we can
 * do at representing the value that pObj describes as a string
 * representation.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi64</name></type> <name>MemObjStringToInt</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sVal</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>jx9TokenValueToInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>;</return>	
</block_content>}</block></function>
<comment type="block">/*
 * Return some kind of integer value which is the best we can
 * do at representing the value that pObj describes as an integer.
 * If pObj is an integer, then the value is exact. If pObj is
 * a floating-point then  the value returned is the integer part.
 * If pObj is a string, then we make an attempt to convert it into
 * a integer and return that. 
 * If pObj represents a NULL value, return 0.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi64</name></type> <name>MemObjIntValue</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iFlags</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><call><name>MemObjRealToInt</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_INT</name><operator>|</operator><name>MEMOBJ_BOOL</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<return>return <expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>MemObjStringToInt</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name> <init>= <expr><name><name>pMap</name><operator>-&gt;</operator><name>nEntry</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return total number of entries in the hashmap */</comment>
		<return>return <expr><name>n</name></expr>;</return> 
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_RES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* CANT HAPPEN */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return some kind of real value which is the best we can
 * do at representing the value that pObj describes as a real.
 * If pObj is a real, then the value is exact.If pObj is an
 * integer then the integer  is promoted to real and that value
 * is returned.
 * If pObj is a string, then we make an attempt to convert it
 * into a real and return that. 
 * If pObj represents a NULL value, return 0.0
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_real</name></type> <name>MemObjRealValue</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iFlags</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_INT</name><operator>|</operator><name>MEMOBJ_BOOL</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>(</operator><name>jx9_real</name><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr>)</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyString</name></type> <name>sString</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JX9_OMIT_FLOATING_POINT</name></cpp:ifdef>
		<decl_stmt><decl><type><name>jx9_real</name></type> <name>rVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>jx9_real</name></type> <name>rVal</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sString</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Convert as much as we can */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JX9_OMIT_FLOATING_POINT</name></cpp:ifdef>
			<expr_stmt><expr><name>rVal</name> <operator>=</operator> <call><name>MemObjStringToInt</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>SyStrToReal</name><argument_list>(<argument><expr><name><name>sString</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>sString</name><operator>.</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>rVal</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JX9_OMIT_FLOATING_POINT</name></cpp:ifdef>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><literal type="number">0.0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Return the total number of entries in the hashmap */</comment>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_real</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>jx9_real</name><operator>)</operator><name><name>pMap</name><operator>-&gt;</operator><name>nEntry</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>n</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_RES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>(</operator><name>jx9_real</name><operator>)</operator><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* NOT REACHED  */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* 
 * Return the string representation of a given jx9_value.
 * This function never fail and always return SXRET_OK.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>MemObjStringValue</name><parameter_list>(<parameter><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%.15g"</literal></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%qd"</literal></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* %qd (BSD quad) is equivalent to %lld in the libc printf */</comment>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>,<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>,<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Serialize JSON object or array */</comment>
		<expr_stmt><expr><call><name>jx9JsonSerialize</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>,<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_RES</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"ResourceID_%#x"</literal></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return some kind of boolean value which is the best we can do
 * at representing the value that pObj describes as a boolean.
 * When converting to boolean, the following values are considered FALSE:
 * NULL
 * the boolean FALSE itself.
 * the integer 0 (zero).
 * the real 0.0 (zero).
 * the empty string, a stream of zero [i.e: "0", "00", "000", ...] and the string
 * "false".
 * an array with zero elements. 
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>MemObjBooleanValue</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iFlags</name></decl>;</decl_stmt>	
	<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JX9_OMIT_FLOATING_POINT</name></cpp:ifdef>
		<return>return <expr><ternary><condition><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><ternary><condition><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><ternary><condition><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SyString</name></type> <name>sString</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sString</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>sString</name><operator>.</operator><name>nByte</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Empty string */</comment>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>sString</name><operator>.</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>sString</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name><name>sString</name><operator>.</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>sString</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name><name>sString</name><operator>.</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>sString</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>sString</name><operator>.</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>sString</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if><else>else<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>zIn</name> <operator>=</operator> <name><name>sString</name><operator>.</operator><name>zString</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name><name>sString</name><operator>.</operator><name>nByte</name></name></expr>]</index></name></expr>;</expr_stmt>
			<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<return>return <expr><ternary><condition><expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name> <init>= <expr><name><name>pMap</name><operator>-&gt;</operator><name>nEntry</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_RES</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* NOT REACHED */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * If the jx9_value is of type real, try to make it an integer also.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>MemObjTryIntger</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi64</name></type> <name>iVal</name> <init>= <expr><call><name>MemObjRealToInt</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Only mark the value as an integer if
  **
  **    (1) the round-trip conversion real-&gt;int-&gt;real is a no-op, and
  **    (2) The integer is neither the largest nor the smallest
  **        possible integer
  **
  ** The second and third terms in the following conditional enforces
  ** the second condition under the assumption that addition overflow causes
  ** values to wrap around.  On x86 hardware, the third term is always
  ** true and could be omitted.  But we leave it in because other
  ** architectures might behave differently.
  */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>==</operator><operator>(</operator><name>jx9_real</name><operator>)</operator><name>iVal</name> <operator>&amp;&amp;</operator> <name>iVal</name><operator>&gt;</operator><name>SMALLEST_INT64</name> <operator>&amp;&amp;</operator> <name>iVal</name><operator>&lt;</operator><name>LARGEST_INT64</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>iVal</name></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>MEMOBJ_INT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Convert a jx9_value to type integer.Invalidate any prior representations.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjToInteger</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Preform the conversion */</comment>
		<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <call><name>MemObjIntValue</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representations */</comment>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Convert a jx9_value to type real (Try to get an integer representation also).
 * Invalidate any prior representations
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjToReal</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Preform the conversion */</comment>
		<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <call><name>MemObjRealValue</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representations */</comment>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Convert a jx9_value to type boolean.Invalidate any prior representations.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjToBool</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Preform the conversion */</comment>
		<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <call><name>MemObjBooleanValue</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representations */</comment>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Convert a jx9_value to type string.Prior representations are NOT invalidated.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjToString</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Perform the conversion */</comment>
		<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Reset the internal buffer */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>MemObjStringValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>MEMOBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Nullify a jx9_value.In other words invalidate any prior
 * representation.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjToNull</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Convert a jx9_value to type array.Invalidate any prior representations.
  * According to the JX9 language reference manual.
  *   For any of the types: integer, float, string, boolean converting a value
  *   to an array results in an array with a single element with index zero 
  *   and the value of the scalar which was converted.
  */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjToHashmap</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
		<comment type="block">/* Allocate a new hashmap instance */</comment>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <call><name>jx9NewHashmap</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pMap</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_MEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_NULL</name><operator>|</operator><name>MEMOBJ_RES</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* 
			 * According to the JX9 language reference manual.
			 *   For any of the types: integer, float, string, boolean converting a value
			 *   to an array results in an array with a single element with index zero 
			 *   and the value of the scalar which was converted.
			 */</comment>
			<comment type="block">/* Insert a single element */</comment>
			<expr_stmt><expr><call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument><comment type="block">/* Automatic index assign */</comment>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>MEMOBJ_HASHMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return a pointer to the appropriate convertion method associated 
 * with the given type. 
 * Note on type juggling.
 * Accoding to the JX9 language reference manual
 *  JX9 does not require (or support) explicit type definition in variable
 *  declaration; a variable's type is determined by the context in which
 *  the variable is used. That is to say, if a string value is assigned 
 *  to variable $var, $var becomes a string. If an integer value is then
 *  assigned to $var, it becomes an integer. 
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>ProcMemObjCast</name></type> <name>jx9MemObjCastMethod</name><parameter_list>(<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>jx9MemObjToString</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>jx9MemObjToInteger</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>jx9MemObjToReal</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>jx9MemObjToBool</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>jx9MemObjToHashmap</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* NULL cast */</comment>
	<return>return <expr><name>jx9MemObjToNull</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check whether the jx9_value is numeric [i.e: int/float/bool] or looks
 * like a numeric number [i.e: if the jx9_value is of type string.].
 * Return TRUE if numeric.FALSE otherwise.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjIsNumeric</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator> <name>MEMOBJ_BOOL</name><operator>|</operator><name>MEMOBJ_INT</name><operator>|</operator><name>MEMOBJ_REAL</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<return>return <expr><name>TRUE</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_NULL</name><operator>|</operator><name>MEMOBJ_HASHMAP</name><operator>|</operator><name>MEMOBJ_RES</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyString</name></type> <name>sStr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sStr</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>sStr</name><operator>.</operator><name>nByte</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Empty string */</comment>
			<return>return <expr><name>FALSE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Check if the string representation looks like a numeric number */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyStrIsNumeric</name><argument_list>(<argument><expr><name><name>sStr</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>sStr</name><operator>.</operator><name>nByte</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* NOT REACHED */</comment>
	<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check whether the jx9_value is empty.Return TRUE if empty.
 * FALSE otherwise.
 * An jx9_value is considered empty if the following are true:
 * NULL value.
 * Boolean FALSE.
 * Integer/Float with a 0 (zero) value.
 * An empty string or a stream of 0 (zero) [i.e: "0", "00", "000", ...].
 * An empty array.
 * NOTE
 *  OBJECT VALUE MUST NOT BE MODIFIED.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjIsEmpty</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>TRUE</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><ternary><condition><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><ternary><condition><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>==</operator> <operator>(</operator><name>jx9_real</name><operator>)</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>!</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>TRUE</name></expr>;</return>
		</block_content>}</block></if><else>else<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>zIn</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
			<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr> )</condition><block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<return>return <expr><ternary><condition><expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></init></decl>;</decl_stmt>
		<return>return <expr><ternary><condition><expr><name><name>pMap</name><operator>-&gt;</operator><name>nEntry</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if <condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_RES</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Assume empty by default */</comment>
	<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Convert a jx9_value so that it has types MEMOBJ_REAL or MEMOBJ_INT
 * or both.
 * Invalidate any prior representations. Every effort is made to force
 * the conversion, even if the input is a string that does not look 
 * completely like a number.Convert as much of the string as we can
 * and ignore the rest.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjToNumeric</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_INT</name><operator>|</operator><name>MEMOBJ_REAL</name><operator>|</operator><name>MEMOBJ_BOOL</name><operator>|</operator><name>MEMOBJ_NULL</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_BOOL</name><operator>|</operator><name>MEMOBJ_NULL</name><operator>)</operator></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Already numeric */</comment>
		<return>return  <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXERR_INVALID</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu8</name></type> <name>bReal</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SyString</name></type> <name>sString</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sString</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Check if the given string looks like a numeric number */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>sString</name><operator>.</operator><name>nByte</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyStrIsNumeric</name><argument_list>(<argument><expr><name><name>sString</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>sString</name><operator>.</operator><name>nByte</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bReal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>bReal</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* The input does not look at all like a number, set the value to 0 */</comment>
				<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Convert as much as we can */</comment>
				<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <call><name>MemObjStringToInt</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_HASHMAP</name><operator>|</operator><name>MEMOBJ_RES</name><operator>)</operator></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Perform a blind cast */</comment>
		<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Try a get an integer representation of the given jx9_value.
 * If the jx9_value is not of type real, this function is a no-op.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjTryInteger</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Work only with reals */</comment>
		<expr_stmt><expr><call><name>MemObjTryIntger</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Initialize a jx9_value to the null type.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjInit</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize fields */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>pVm</name></name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the NULL type */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>MEMOBJ_NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Initialize a jx9_value to the integer type.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjInitFromInt</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>sxi64</name></type> <name>iVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize fields */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>pVm</name></name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the desired type */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>iVal</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>MEMOBJ_INT</name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Initialize a jx9_value to the boolean type.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjInitFromBool</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize fields */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>pVm</name></name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the desired type */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <ternary><condition><expr><name>iVal</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>MEMOBJ_BOOL</name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block">/*
 * Initialize a jx9_value to the real type.
 */</comment>
JX9_PRIVATE sxi32 jx9MemObjInitFromReal(jx9_vm *pVm, jx9_value *pObj, jx9_real rVal)
{
	<comment type="block">/* Zero the structure */</comment>
	SyZero(pObj, sizeof(jx9_value));
	<comment type="block">/* Initialize fields */</comment>
	pObj-&gt;pVm = pVm;
	SyBlobInit(&amp;pObj-&gt;sBlob, &amp;pVm-&gt;sAllocator);
	<comment type="block">/* Set the desired type */</comment>
	pObj-&gt;x.rVal = rVal;
	pObj-&gt;iFlags = MEMOBJ_REAL;
	return SXRET_OK;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * Initialize a jx9_value to the array type.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjInitFromArray</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize fields */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>pVm</name></name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set the desired type */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>MEMOBJ_HASHMAP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>=</operator> <name>pArray</name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Initialize a jx9_value to the string type.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjInitFromString</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyString</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize fields */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>pVm</name></name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVal</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Append contents */</comment>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Set the desired type */</comment>
	<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>MEMOBJ_STRING</name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Append some contents to the internal buffer of a given jx9_value.
 * If the given jx9_value is not of type string, this function
 * invalidate any prior representation and set the string type.
 * Then a simple append operation is performed.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjStringAppend</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>MEMOBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Append contents */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block">/*
 * Format and append some contents to the internal buffer of a given jx9_value.
 * If the given jx9_value is not of type string, this function invalidate
 * any prior representation and set the string type.
 * Then a simple format and append operation is performed.
 */</comment>
JX9_PRIVATE sxi32 jx9MemObjStringFormat(jx9_value *pObj, const char *zFormat, va_list ap)
{
	sxi32 rc;
	if( (pObj-&gt;iFlags &amp; MEMOBJ_STRING) == 0 ){
		<comment type="block">/* Invalidate any prior representation */</comment>
		jx9MemObjRelease(pObj);
		MemObjSetType(pObj, MEMOBJ_STRING);
	}
	<comment type="block">/* Format and append contents */</comment>
	rc = SyBlobFormatAp(&amp;pObj-&gt;sBlob, zFormat, ap);
	return rc;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * Duplicate the contents of a jx9_value.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjStore</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pDest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pSrc</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Increment reference count */</comment>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pSrc</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name><operator>)</operator><operator>-&gt;</operator><name>iRef</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pDest</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pDest</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pSrc</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pDest</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof><operator>-</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SyBlob</name></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sxu32</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSrc</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDest</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSrc</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDest</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDest</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDest</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>pMap</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Duplicate the contents of a jx9_value but do not copy internal
 * buffer contents, simply point to it.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjLoad</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pDest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pSrc</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pDest</name><operator>)</operator></expr></argument>, 
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof><operator>-</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SyBlob</name></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sxu32</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pSrc</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Increment reference count */</comment>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pSrc</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name><operator>)</operator><operator>-&gt;</operator><name>iRef</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDest</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDest</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSrc</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobReadOnly</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDest</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSrc</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSrc</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Invalidate any prior representation of a given jx9_value.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjRelease</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9HashmapUnref</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Release the internal buffer */</comment>
		<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>=</operator> <name>MEMOBJ_NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compare two jx9_values.
 * Return 0 if the values are equals, &gt; 0 if pObj1 is greater than pObj2
 * or &lt; 0 if pObj2 is greater than pObj1.
 * Type comparison table taken from the JX9 language reference manual.
 * Comparisons of $x with JX9 functions Expression
 *              gettype() 	empty() 	is_null() 	isset() 	boolean : if($x)
 * $x = ""; 	string 	    TRUE 	FALSE 	TRUE 	FALSE
 * $x = null 	NULL 	    TRUE 	TRUE 	FALSE 	FALSE
 * var $x; 	    NULL 	TRUE 	TRUE 	FALSE 	FALSE
 * $x is undefined 	NULL 	TRUE 	TRUE 	FALSE 	FALSE
 *  $x = array(); 	array 	TRUE 	FALSE 	TRUE 	FALSE
 * $x = false; 	boolean 	TRUE 	FALSE 	TRUE 	FALSE
 * $x = true; 	boolean 	FALSE 	FALSE 	TRUE 	TRUE
 * $x = 1; 	    integer 	FALSE 	FALSE 	TRUE 	TRUE
 * $x = 42; 	integer 	FALSE 	FALSE 	TRUE 	TRUE
 * $x = 0; 	    integer 	TRUE 	FALSE 	TRUE 	FALSE
 * $x = -1; 	integer 	FALSE 	FALSE 	TRUE 	TRUE
 * $x = "1"; 	string 	FALSE 	FALSE 	TRUE 	TRUE
 * $x = "0"; 	string 	TRUE 	FALSE 	TRUE 	FALSE
 * $x = "-1"; 	string 	FALSE 	FALSE 	TRUE 	TRUE
 * $x = "jx9"; 	string 	FALSE 	FALSE 	TRUE 	TRUE
 * $x = "true"; string 	FALSE 	FALSE 	TRUE 	TRUE
 * $x = "false"; string 	FALSE 	FALSE 	TRUE 	TRUE
 *      Loose comparisons with == 
 * TRUE 	FALSE 	1 	0 	-1 	"1" 	"0" 	"-1" 	NULL 	array() 	"jx9" 	""
 * TRUE 	TRUE 	FALSE 	TRUE 	FALSE 	TRUE 	TRUE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE
 * FALSE 	FALSE 	TRUE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE 	TRUE 	TRUE 	FALSE 	TRUE
 * 1 	TRUE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * 0 	FALSE 	TRUE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE 	TRUE 	FALSE 	TRUE 	TRUE
 * -1 	TRUE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE
 * "1" 	TRUE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * "0" 	FALSE 	TRUE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * "-1" 	TRUE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE
 * NULL 	FALSE 	TRUE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	TRUE 	FALSE 	TRUE
 * array() 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	TRUE 	FALSE 	FALSE
 * "jx9" 	TRUE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE
 * "" 	FALSE 	TRUE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	TRUE
 *    Strict comparisons with === 
 * TRUE 	FALSE 	1 	0 	-1 	"1" 	"0" 	"-1" 	NULL 	array() 	"jx9" 	""
 * TRUE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * 1 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * 0 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * -1 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * "1" 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * "0" 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE
 * "-1" 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE 	FALSE 
 * NULL 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE 	FALSE
 * array() 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE 	FALSE
 * "jx9" 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE 	FALSE
 * "" 	    FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	FALSE 	TRUE
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjCmp</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj1</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bStrict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iNest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iComb</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>bStrict</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>sxi32</name></type> <name>iF1</name></decl>, <decl><type ref="prev"/><name>iF2</name></decl>;</decl_stmt>
		<comment type="block">/* Strict comparisons with === */</comment>
		<expr_stmt><expr><name>iF1</name> <operator>=</operator> <name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>iF2</name> <operator>=</operator> <name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iF1</name> <operator>!=</operator> <name>iF2</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Not of the same type */</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Combine flag together */</comment>
	<expr_stmt><expr><name>iComb</name> <operator>=</operator> <name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name><operator>|</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iComb</name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_RES</name><operator>|</operator><name>MEMOBJ_BOOL</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* Convert to boolean: Keep in mind FALSE &lt; TRUE */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pObj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>sxi32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iComb</name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if <condition>( <expr><name>iComb</name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Hashmap aka 'array' comparison */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Array is always greater */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Array is always greater */</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Perform the comparison */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapCmp</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj2</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, <argument><expr><name>bStrict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if <condition>( <expr><name>iComb</name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyString</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
		<comment type="block">/* Perform a strict string comparison.*/</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name><operator>&amp;</operator><name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name><operator>&amp;</operator><name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pObj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj1</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj1</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj2</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj2</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Strings are compared using memcmp(). If one value is an exact prefix of the
		 * other, then the shorter value is less than the longer value.
		 */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyMemcmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>s1</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>s2</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><call><name>SXMIN</name><argument_list>(<argument><expr><name><name>s1</name><operator>.</operator><name>nByte</name></name></expr></argument>, <argument><expr><name><name>s2</name><operator>.</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>s1</name><operator>.</operator><name>nByte</name></name> <operator>!=</operator> <name><name>s2</name><operator>.</operator><name>nByte</name></name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><name><name>s1</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <name><name>s2</name><operator>.</operator><name>nByte</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iComb</name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_INT</name><operator>|</operator><name>MEMOBJ_REAL</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* Perform a numeric comparison if one of the operand is numeric(integer or real) */</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_INT</name><operator>|</operator><name>MEMOBJ_REAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_INT</name><operator>|</operator><name>MEMOBJ_REAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pObj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>jx9_real</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
			<comment type="block">/* Compare as reals */</comment>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>	
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pObj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>pObj2</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>r1</name> <operator>&gt;</operator> <name>r2</name></expr> )</condition><block>{<block_content>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>r1</name> <operator>&lt;</operator> <name>r2</name></expr> )</condition><block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Integer comparison */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>&gt;</operator> <name><name>pObj2</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr> )</condition><block>{<block_content>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>&lt;</operator> <name><name>pObj2</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr> )</condition><block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* NOT REACHED */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iNest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Perform an addition operation of two jx9_values.
 * The reason this function is implemented here rather than 'vm.c'
 * is that the '+' operator is overloaded.
 * That is, the '+' operator is used for arithmetic operation and also 
 * used for operation on arrays [i.e: union]. When used with an array 
 * The + operator returns the right-hand array appended to the left-hand array.
 * For keys that exist in both arrays, the elements from the left-hand array
 * will be used, and the matching elements from the right-hand array will
 * be ignored.
 * This function take care of handling all the scenarios.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjAdd</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj1</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bAddStore</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name><operator>|</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name><operator>)</operator> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Arithemtic operation */</comment>
			<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9MemObjToNumeric</name><argument_list>(<argument><expr><name>pObj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name><operator>|</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name><operator>)</operator> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Floating point arithmetic */</comment>
				<decl_stmt><decl><type><name>jx9_real</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
				<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pObj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pObj2</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <name>a</name><operator>+</operator><name>b</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Try to get an integer representation also */</comment>
				<expr_stmt><expr><call><name>MemObjTryIntger</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Integer arithmetic */</comment>
				<decl_stmt><decl><type><name>sxi64</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pObj2</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>a</name><operator>+</operator><name>b</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name><operator>|</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name><operator>)</operator> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>bAddStore</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Do not duplicate the hashmap, use the left one since its an add&amp;store operation.
				 */</comment>
				<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>				
					<comment type="block">/* Force a hashmap cast */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjToHashmap</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><name><name>pObj1</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory while creating array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>rc</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Point to the structure that describe the hashmap */</comment>
				<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Create a new hashmap */</comment>
				<expr_stmt><expr><name>pMap</name> <operator>=</operator> <call><name>jx9NewHashmap</name><argument_list>(<argument><expr><name><name>pObj1</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>pMap</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
					<expr_stmt><expr><call><name>jx9VmThrowError</name><argument_list>(<argument><expr><name><name>pObj1</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>JX9_CTX_ERR</name></expr></argument>, <argument><expr><literal type="string">"JX9 is running out of memory while creating array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>SXERR_MEM</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if<condition>( <expr><operator>!</operator><name>bAddStore</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Perform a hashmap duplication */</comment>
					<expr_stmt><expr><call><name>jx9HashmapDup</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, <argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
						<comment type="block">/* Simple insertion */</comment>
						<expr_stmt><expr><call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pObj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Perform the union */</comment>
			<if_stmt><if>if<condition>(<expr><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9HashmapUnion</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj2</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pObj2</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Simple insertion */</comment>
					<expr_stmt><expr><call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pObj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<comment type="block">/* Reflect the change */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pObj1</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>SyBlobRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj1</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>pObj1</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pObj1</name></expr></argument>, <argument><expr><name>MEMOBJ_HASHMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return a printable representation of the type of a given 
 * jx9_value.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>jx9MemObjTypeDump</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"int"</literal></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"float"</literal></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"string"</literal></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"bool"</literal></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pMap</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>HASHMAP_JSON_OBJECT</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"JSON Object"</literal></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"JSON Array"</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_RES</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"resource"</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>zType</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Dump a jx9_value [i.e: get a printable representation of it's type and contents.].
 * Store the dump in the given blob.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9MemObjDump</name><parameter_list>(
	<parameter><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>,      <comment type="block">/* Store the dump here */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>   <comment type="block">/* Dump this */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name></decl>;</decl_stmt>
	<comment type="block">/* Get value type first */</comment>
	<expr_stmt><expr><name>zType</name> <operator>=</operator> <call><name>jx9MemObjTypeDump</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><literal type="string">"%u "</literal></expr></argument>,<argument><expr><name><name>pMap</name><operator>-&gt;</operator><name>nEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Dump hashmap entries */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9JsonSerialize</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>,<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<decl_stmt><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pContents</name> <init>= <expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Get a printable representation of the contents */</comment>
			<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>MemObjStringValue</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pObj</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Append length first */</comment>
				<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%u '"</literal></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pContents</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><name>pContents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pContents</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
