<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/mem_kv.c"><comment type="block">/*
 * Symisc unQLite: An Embeddable NoSQL (Post Modern) Database Engine.
 * Copyright (C) 2012-2013, Symisc Systems http://unqlite.org/
 * Version 1.1.6
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://unqlite.org/licensing.html
 */</comment>
 <comment type="block">/* $SymiscID: mem_kv.c v1.7 Win7 2012-11-28 01:41 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unqliteInt.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* 
 * This file implements an in-memory key value storage engine for unQLite.
 * Note that this storage engine does not support transactions.
 *
 * Normaly, I (chm@symisc.net) planned to implement a red-black tree
 * which is suitable for this kind of operation, but due to the lack
 * of time, I decided to implement a tunned hashtable which everybody
 * know works very well for this kind of operation.
 * Again, I insist on a red-black tree implementation for future version
 * of Unqlite.
 */</comment>
<comment type="block">/* Forward declaration */</comment>
<typedef>typedef <type><name><name>struct</name> <name>mem_hash_kv_engine</name></name></type> <name>mem_hash_kv_engine</name>;</typedef>
<comment type="block">/*
 * Each record is storead in an instance of the following structure.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>mem_hash_record</name></name></type> <name>mem_hash_record</name>;</typedef>
<struct>struct <name>mem_hash_record</name>
<block>{
	<decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>    <comment type="block">/* Storage engine */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nHash</name></decl>;</decl_stmt>                    <comment type="block">/* Hash of the key */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>               <comment type="block">/* Key */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nKeyLen</name></decl>;</decl_stmt>                  <comment type="block">/* Key size (Max 1GB) */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>              <comment type="block">/* Data */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nDataLen</name></decl>;</decl_stmt>                 <comment type="block">/* Data length (Max 4GB) */</comment>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pNext</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>pPrev</name></decl>;</decl_stmt>  <comment type="block">/* Link to other records */</comment>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pNextHash</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>pPrevHash</name></decl>;</decl_stmt> <comment type="block">/* Collision link */</comment>
}</block>;</struct>
<comment type="block">/*
 * Each in-memory KV engine is represented by an instance
 * of the following structure.
 */</comment>
<struct>struct <name>mem_hash_kv_engine</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>unqlite_kv_io</name> <modifier>*</modifier></type><name>pIo</name></decl>;</decl_stmt> <comment type="block">/* IO methods: MUST be first */</comment>
	<comment type="block">/* Private data */</comment>
	<decl_stmt><decl><type><name>SyMemBackend</name></type> <name>sAlloc</name></decl>;</decl_stmt>        <comment type="block">/* Private memory allocator */</comment>
	<decl_stmt><decl><type><name>ProcHash</name></type>    <name>xHash</name></decl>;</decl_stmt>          <comment type="block">/* Default hash function */</comment>
	<decl_stmt><decl><type><name>ProcCmp</name></type>     <name>xCmp</name></decl>;</decl_stmt>           <comment type="block">/* Default comparison function */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nRecord</name></decl>;</decl_stmt>              <comment type="block">/* Total number of records  */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nBucket</name></decl>;</decl_stmt>              <comment type="block">/* Bucket size: Must be a power of two */</comment>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier><modifier>*</modifier></type><name>apBucket</name></decl>;</decl_stmt> <comment type="block">/* Hash bucket */</comment>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pFirst</name></decl>;</decl_stmt>    <comment type="block">/* First inserted entry */</comment>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pLast</name></decl>;</decl_stmt>     <comment type="block">/* Last inserted entry */</comment>
}</block>;</struct>
<comment type="block">/*
 * Allocate a new hash record.
 */</comment>
<function><type><specifier>static</specifier> <name>mem_hash_record</name> <modifier>*</modifier></type> <name>MemHashNewRecord</name><parameter_list>(
	<parameter><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name></type> <name>nData</name></decl></parameter>,
	<parameter><decl><type><name>sxu32</name></type> <name>nHash</name></decl></parameter>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyMemBackend</name> <modifier>*</modifier></type><name>pAlloc</name> <init>= <expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pRecord</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pDupData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPtr</name></decl>;</decl_stmt>
	
	<comment type="block">/* Total number of bytes to alloc */</comment>
	<expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_record</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nKey</name></expr>;</expr_stmt>
	<comment type="block">/* Allocate a new instance */</comment>
	<expr_stmt><expr><name>pRecord</name> <operator>=</operator> <operator>(</operator><name>mem_hash_record</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pRecord</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pDupData</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pDupData</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><name>pRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pRecord</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>zPtr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_record</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pRecord</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fill in the structure */</comment>
	<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>pEngine</name></name> <operator>=</operator> <name>pEngine</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>nDataLen</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name>nData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>nKeyLen</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name>nKey</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>nHash</name></name> <operator>=</operator> <name>nHash</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>zPtr</name></expr></argument>,<argument><expr><name><name>pRecord</name><operator>-&gt;</operator><name>nKeyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><name>pData</name></expr></argument>,<argument><expr><name>pDupData</name></expr></argument>,<argument><expr><name><name>pRecord</name><operator>-&gt;</operator><name>nDataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pDupData</name></expr>;</expr_stmt>
	<comment type="block">/* All done */</comment>
	<return>return <expr><name>pRecord</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Install a given record in the hashtable.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MemHashLinkRecord</name><parameter_list>(<parameter><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>,<parameter><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pRecord</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nBucket</name> <init>= <expr><name><name>pRecord</name><operator>-&gt;</operator><name>nHash</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>pEngine</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name><index>[<expr><name>nBucket</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name><index>[<expr><name>nBucket</name></expr>]</index></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name><index>[<expr><name>nBucket</name></expr>]</index></name><operator>-&gt;</operator><name>pPrevHash</name> <operator>=</operator> <name>pRecord</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name><index>[<expr><name>nBucket</name></expr>]</index></name> <operator>=</operator> <name>pRecord</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>pFirst</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pFirst</name></name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pLast</name></name> <operator>=</operator> <name>pRecord</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><call><name>MACRO_LD_PUSH</name><argument_list>(<argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pLast</name></name></expr></argument>,<argument><expr><name>pRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Unlink a given record from the hashtable.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MemHashUnlinkRecord</name><parameter_list>(<parameter><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>,<parameter><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nBucket</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>nHash</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>pEngine</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyMemBackend</name> <modifier>*</modifier></type><name>pAlloc</name> <init>= <expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pEntry</name><operator>-&gt;</operator><name>pPrevHash</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name><index>[<expr><name>nBucket</name></expr>]</index></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pPrevHash</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name><operator>-&gt;</operator><name>pPrevHash</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pPrevHash</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>MACRO_LD_REMOVE</name><argument_list>(<argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pLast</name></name></expr></argument>,<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pFirst</name></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pFirst</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name><operator>--</operator></expr>;</expr_stmt>
	<comment type="block">/* Release the entry */</comment>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Key is also stored here */</comment>
</block_content>}</block></function>
<comment type="block">/*
 * Perform a lookup for a given entry.
 */</comment>
<function><type><specifier>static</specifier> <name>mem_hash_record</name> <modifier>*</modifier></type> <name>MemHashGetEntry</name><parameter_list>(
	<parameter><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nHash</name></decl>,<decl><type ref="prev"/><name>nBucket</name></decl>;</decl_stmt>
	<comment type="block">/* Hash the entry */</comment>
	<expr_stmt><expr><name>nHash</name> <operator>=</operator> <call><name><name>pEngine</name><operator>-&gt;</operator><name>xHash</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nKeyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nBucket</name> <operator>=</operator> <name>nHash</name> <operator>&amp;</operator> <operator>(</operator><name><name>pEngine</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name><index>[<expr><name>nBucket</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pEntry</name><operator>-&gt;</operator><name>nHash</name></name> <operator>==</operator> <name>nHash</name> <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nKeyLen</name></name> <operator>==</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name>nKeyLen</name> <operator>&amp;&amp;</operator> 
			<call><name><name>pEngine</name><operator>-&gt;</operator><name>xCmp</name></name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>nKeyLen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<return>return <expr><name>pEntry</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* No such entry */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Rehash all the entries in the given table.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashGrowTable</name><parameter_list>(<parameter><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nNewSize</name> <init>= <expr><name><name>pEngine</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>iBucket</name></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new larger table */</comment>
	<expr_stmt><expr><name>apNew</name> <operator>=</operator> <operator>(</operator><name>mem_hash_record</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>, <argument><expr><name>nNewSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_record</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>apNew</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Not so fatal, simply a performance hit */</comment>
		<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the new table */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>apNew</name></expr></argument>, <argument><expr><name>nNewSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_record</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Rehash all entries */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pLast</name></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		
		<comment type="block">/* Loop one */</comment>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pPrevHash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="block">/* Install in the new bucket */</comment>
		<expr_stmt><expr><name>iBucket</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nHash</name></name> <operator>&amp;</operator> <operator>(</operator><name>nNewSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name><operator>-&gt;</operator><name>pPrevHash</name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* Loop two */</comment>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pPrevHash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="block">/* Install in the new bucket */</comment>
		<expr_stmt><expr><name>iBucket</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nHash</name></name> <operator>&amp;</operator> <operator>(</operator><name>nNewSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name><operator>-&gt;</operator><name>pPrevHash</name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* Loop three */</comment>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pPrevHash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="block">/* Install in the new bucket */</comment>
		<expr_stmt><expr><name>iBucket</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nHash</name></name> <operator>&amp;</operator> <operator>(</operator><name>nNewSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name><operator>-&gt;</operator><name>pPrevHash</name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* Loop four */</comment>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pPrevHash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="block">/* Install in the new bucket */</comment>
		<expr_stmt><expr><name>iBucket</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nHash</name></name> <operator>&amp;</operator> <operator>(</operator><name>nNewSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextHash</name></name> <operator>=</operator> <name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name><operator>-&gt;</operator><name>pPrevHash</name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Release the old table and reflect the change */</comment>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>nBucket</name></name>  <operator>=</operator> <name>nNewSize</name></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Exported Interfaces.
 */</comment>
<comment type="block">/*
 * Each public cursor is identified by an instance of this structure.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>mem_hash_cursor</name></name></type> <name>mem_hash_cursor</name>;</typedef>
<struct>struct <name>mem_hash_cursor</name>
<block>{
	<decl_stmt><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pStore</name></decl>;</decl_stmt> <comment type="block">/* Must be first */</comment>
	<comment type="block">/* Private fields */</comment>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>     <comment type="block">/* Current hash record */</comment>
}</block>;</struct>
<comment type="block">/*
 * Initialize the cursor.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MemHashInitCursor</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	 <decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name></name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	 <comment type="block">/* Point to the first inserted entry */</comment>
	 <expr_stmt><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pFirst</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Point to the first entry.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorFirst</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	 <decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name></name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	 <expr_stmt><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pFirst</name></name></expr>;</expr_stmt>
	 <return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Point to the last entry.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorLast</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	 <decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name></name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	 <expr_stmt><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pLast</name></name></expr>;</expr_stmt>
	 <return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * is a Valid Cursor.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorValid</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	 <decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	 <return>return <expr><ternary><condition><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Point to the next entry.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorNext</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	 <decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		 <return>return <expr><name>UNQLITE_EOF</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
	 <expr_stmt><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt> <comment type="block">/* Reverse link: Not a Bug */</comment>
	 <return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Point to the previous entry.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorPrev</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	 <decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	 <if_stmt><if>if<condition>( <expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		 <return>return <expr><name>UNQLITE_EOF</name></expr>;</return>
	 </block_content>}</block></if></if_stmt>
	 <expr_stmt><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt> <comment type="block">/* Reverse link: Not a Bug */</comment>
	 <return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return key length.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorKeyLength</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		 <return>return <expr><name>UNQLITE_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>nKeyLen</name></name></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return data length.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorDataLength</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <return>return <expr><name>UNQLITE_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>nDataLen</name></name></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Consume the key.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorKey</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xConsumer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		 <return>return <expr><name>UNQLITE_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Invoke the callback */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xConsumer</name><argument_list>(<argument><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>,<argument><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>nKeyLen</name></name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Callback result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Consume the data.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorData</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xConsumer</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		 <return>return <expr><name>UNQLITE_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Invoke the callback */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xConsumer</name><argument_list>(<argument><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>,<argument><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>nDataLen</name></name></expr></argument>,<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Callback result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Reset the cursor.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MemHashCursorReset</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name></name><operator>)</operator><operator>-&gt;</operator><name>pFirst</name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Remove a particular record.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorDelete</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Cursor does not point to anything */</comment>
		<return>return <expr><name>UNQLITE_NOTFOUND</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
	<comment type="block">/* Perform the deletion */</comment>
	<expr_stmt><expr><call><name>MemHashUnlinkRecord</name><argument_list>(<argument><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name><operator>-&gt;</operator><name>pEngine</name></name></expr></argument>,<argument><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the next entry */</comment>
	<expr_stmt><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Find a particular record.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashCursorSeek</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iPos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pStore</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mem_hash_cursor</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><operator>(</operator><name>mem_hash_cursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Perform the lookup */</comment>
	<expr_stmt><expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>=</operator> <call><name>MemHashGetEntry</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pMem</name><operator>-&gt;</operator><name>pCur</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>iPos</name> <operator>!=</operator> <name>UNQLITE_CURSOR_MATCH_EXACT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* noop; */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* No such record */</comment>
		<return>return <expr><name>UNQLITE_NOTFOUND</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Builtin hash function.
 */</comment>
<function><type><specifier>static</specifier> <name>sxu32</name></type> <name>MemHashFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>,<parameter><decl><type><name>sxu32</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zIn</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pSrc</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nH</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>nLen</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name>nH</name> <operator>=</operator> <name>nH</name> <operator>*</operator> <literal type="number">33</literal> <operator>+</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name>nH</name> <operator>=</operator> <name>nH</name> <operator>*</operator> <literal type="number">33</literal> <operator>+</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name>nH</name> <operator>=</operator> <name>nH</name> <operator>*</operator> <literal type="number">33</literal> <operator>+</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt> <expr_stmt><expr><name>nH</name> <operator>=</operator> <name>nH</name> <operator>*</operator> <literal type="number">33</literal> <operator>+</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>	
	<return>return <expr><name>nH</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Default bucket size */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_HASH_BUCKET_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<comment type="block">/* Default fill factor */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_HASH_FILL_FACTOR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> <comment type="block">/* or 3 */</comment>
<comment type="block">/*
 * Initialize the in-memory storage engine.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashInit</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pKvEngine</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iPageSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name>pKvEngine</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Note that this instance is already zeroed */</comment>	
	<comment type="block">/* Memory backend */</comment>
	<expr_stmt><expr><call><name>SyMemBackendInitFromParent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>,<argument><expr><call><name>unqliteExportMemBackend</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//#if defined(UNQLITE_ENABLE_THREADS)</comment>
<comment type="line">//	/* Already protected by the upper layers */</comment>
<comment type="line">//	SyMemBackendDisbaleMutexing(&amp;pEngine-&gt;sAlloc);</comment>
<comment type="line">//#endif</comment>
	<comment type="block">/* Default hash &amp; comparison function */</comment>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xHash</name></name> <operator>=</operator> <name>MemHashFunc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xCmp</name></name> <operator>=</operator> <name>SyMemcmp</name></expr>;</expr_stmt>
	<comment type="block">/* Allocate a new bucket */</comment>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name></name> <operator>=</operator> <operator>(</operator><name>mem_hash_record</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>,<argument><expr><name>MEM_HASH_BUCKET_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_record</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iPageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the bucket */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>apBucket</name></name></expr></argument>,<argument><expr><name>MEM_HASH_BUCKET_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_record</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>=</operator> <name>MEM_HASH_BUCKET_SIZE</name></expr>;</expr_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release the in-memory storage engine.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MemHashRelease</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pKvEngine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name>pKvEngine</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Release the private memory backend */</comment>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Configure the in-memory storage engine.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashConfigure</name><parameter_list>(<parameter><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pKvEngine</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iOp</name></decl></parameter>,<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name>pKvEngine</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>iOp</name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>UNQLITE_KV_CONFIG_HASH_FUNC</name></expr>:</case><block>{<block_content>
		<comment type="block">/* Use a default hash function */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_LOCKED</name></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<decl_stmt><decl><type><name>ProcHash</name></type> <name>xHash</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>ProcHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>xHash</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xHash</name></name> <operator>=</operator> <name>xHash</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<break>break;</break>
									 </block_content>}</block>
	<case>case <expr><name>UNQLITE_KV_CONFIG_CMP_FUNC</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Default comparison function */</comment>
		<decl_stmt><decl><type><name>ProcCmp</name></type> <name>xCmp</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>ProcCmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>xCmp</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xCmp</name></name> <operator>=</operator> <name>xCmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
									 </block_content>}</block>
	<default>default:</default>
		<comment type="block">/* Unknown configuration option */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_UNKNOWN</name></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Replace method.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashReplace</name><parameter_list>(
	  <parameter><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pKv</name></decl></parameter>,
	  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,
	  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name></type> <name>nDataLen</name></decl></parameter>
	  )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name>pKv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pRecord</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nDataLen</name> <operator>&gt;</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Database limit */</comment>
		<expr_stmt><expr><call><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>xErr</name></name><argument_list>(<argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>,<argument><expr><literal type="string">"Record size limit reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>UNQLITE_LIMIT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Fetch the record first */</comment>
	<expr_stmt><expr><name>pRecord</name> <operator>=</operator> <call><name>MemHashGetEntry</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pRecord</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Allocate a new record */</comment>
		<expr_stmt><expr><name>pRecord</name> <operator>=</operator> <call><name>MemHashNewRecord</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,
			<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,
			<argument><expr><name>pData</name></expr></argument>,<argument><expr><name>nDataLen</name></expr></argument>,
			<argument><expr><call><name><name>pEngine</name><operator>-&gt;</operator><name>xHash</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pRecord</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Link the entry */</comment>
		<expr_stmt><expr><call><name>MemHashLinkRecord</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name> <operator>&gt;=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>*</operator> <name>MEM_HASH_FILL_FACTOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name> <operator>&lt;</operator> <literal type="number">100000</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Rehash the table */</comment>
			<expr_stmt><expr><call><name>MemHashGrowTable</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nData</name> <init>= <expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nDataLen</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
		<comment type="block">/* Replace an existing record */</comment>
		<if_stmt><if>if<condition>( <expr><name>nData</name> <operator>==</operator> <name><name>pRecord</name><operator>-&gt;</operator><name>nDataLen</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* No need to free the old chunk */</comment>
			<expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pRecord</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>,<argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pNew</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Release the old data */</comment>
			<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pRecord</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/* Reflect the change */</comment>
		<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>nDataLen</name></name> <operator>=</operator> <name>nData</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><name>pData</name></expr></argument>,<argument><expr><name>pNew</name></expr></argument>,<argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Append method.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>MemHashAppend</name><parameter_list>(
	  <parameter><decl><type><name>unqlite_kv_engine</name> <modifier>*</modifier></type><name>pKv</name></decl></parameter>,
	  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nKeyLen</name></decl></parameter>,
	  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,<parameter><decl><type><name>unqlite_int64</name></type> <name>nDataLen</name></decl></parameter>
	  )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mem_hash_kv_engine</name> <modifier>*</modifier></type><name>pEngine</name> <init>= <expr><operator>(</operator><name>mem_hash_kv_engine</name> <operator>*</operator><operator>)</operator><name>pKv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mem_hash_record</name> <modifier>*</modifier></type><name>pRecord</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nDataLen</name> <operator>&gt;</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Database limit */</comment>
		<expr_stmt><expr><call><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>xErr</name></name><argument_list>(<argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>,<argument><expr><literal type="string">"Record size limit reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>UNQLITE_LIMIT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Fetch the record first */</comment>
	<expr_stmt><expr><name>pRecord</name> <operator>=</operator> <call><name>MemHashGetEntry</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pRecord</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Allocate a new record */</comment>
		<expr_stmt><expr><name>pRecord</name> <operator>=</operator> <call><name>MemHashNewRecord</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,
			<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>,
			<argument><expr><name>pData</name></expr></argument>,<argument><expr><name>nDataLen</name></expr></argument>,
			<argument><expr><call><name><name>pEngine</name><operator>-&gt;</operator><name>xHash</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKeyLen</name></expr></argument>)</argument_list></call></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pRecord</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Link the entry */</comment>
		<expr_stmt><expr><call><name>MemHashLinkRecord</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>,<argument><expr><name>pRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name> <operator>*</operator> <name>MEM_HASH_FILL_FACTOR</name> <operator>&gt;=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>&amp;&amp;</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>nRecord</name></name> <operator>&lt;</operator> <literal type="number">100000</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Rehash the table */</comment>
			<expr_stmt><expr><call><name>MemHashGrowTable</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>unqlite_int64</name></type> <name>nNew</name> <init>= <expr><name><name>pRecord</name><operator>-&gt;</operator><name>nDataLen</name></name> <operator>+</operator> <name>nDataLen</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pOld</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pRecord</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nData</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNew</name></decl>;</decl_stmt>
		<comment type="block">/* Append data to the existing record */</comment>
		<if_stmt><if>if<condition>( <expr><name>nNew</name> <operator>&gt;</operator> <name>SXU32_HIGH</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Overflow */</comment>
			<expr_stmt><expr><call><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>xErr</name></name><argument_list>(<argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pIo</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>,<argument><expr><literal type="string">"Append operation will cause data overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			<return>return <expr><name>UNQLITE_LIMIT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nData</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><name>nNew</name></expr>;</expr_stmt>
		<comment type="block">/* Allocate bigger chunk */</comment>
		<expr_stmt><expr><name>zNew</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAlloc</name></name></expr></argument>,<argument><expr><name>pOld</name></expr></argument>,<argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zNew</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Reflect the change */</comment>
		<expr_stmt><expr><call><name>SyMemcpy</name><argument_list>(<argument><expr><name>pData</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>zNew</name><index>[<expr><name><name>pRecord</name><operator>-&gt;</operator><name>nDataLen</name></name></expr>]</index></name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zNew</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRecord</name><operator>-&gt;</operator><name>nDataLen</name></name> <operator>=</operator> <name>nData</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Export the in-memory storage engine.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <specifier>const</specifier> <name>unqlite_kv_methods</name> <modifier>*</modifier></type> <name>unqliteExportMemKvStorage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unqlite_kv_methods</name></type> <name>sMemStore</name> <init>= <expr><block>{
		<expr><literal type="string">"mem"</literal></expr>,                      <comment type="block">/* zName */</comment>
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_kv_engine</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/* szKv */</comment>
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>mem_hash_cursor</name></expr></argument>)</argument_list></sizeof></expr>,    <comment type="block">/* szCursor */</comment>
		<expr><literal type="number">1</literal></expr>,                          <comment type="block">/* iVersion */</comment>
		<expr><name>MemHashInit</name></expr>,                <comment type="block">/* xInit */</comment>
		<expr><name>MemHashRelease</name></expr>,             <comment type="block">/* xRelease */</comment>
		<expr><name>MemHashConfigure</name></expr>,           <comment type="block">/* xConfig */</comment>
		<expr><literal type="number">0</literal></expr>,                          <comment type="block">/* xOpen */</comment>
		<expr><name>MemHashReplace</name></expr>,             <comment type="block">/* xReplace */</comment>
		<expr><name>MemHashAppend</name></expr>,              <comment type="block">/* xAppend */</comment>
		<expr><name>MemHashInitCursor</name></expr>,          <comment type="block">/* xCursorInit */</comment>
		<expr><name>MemHashCursorSeek</name></expr>,          <comment type="block">/* xSeek */</comment>
		<expr><name>MemHashCursorFirst</name></expr>,         <comment type="block">/* xFirst */</comment>
		<expr><name>MemHashCursorLast</name></expr>,          <comment type="block">/* xLast */</comment>
		<expr><name>MemHashCursorValid</name></expr>,         <comment type="block">/* xValid */</comment>
		<expr><name>MemHashCursorNext</name></expr>,          <comment type="block">/* xNext */</comment>
		<expr><name>MemHashCursorPrev</name></expr>,          <comment type="block">/* xPrev */</comment>
		<expr><name>MemHashCursorDelete</name></expr>,        <comment type="block">/* xDelete */</comment>
		<expr><name>MemHashCursorKeyLength</name></expr>,     <comment type="block">/* xKeyLength */</comment>
		<expr><name>MemHashCursorKey</name></expr>,           <comment type="block">/* xKey */</comment>
		<expr><name>MemHashCursorDataLength</name></expr>,    <comment type="block">/* xDataLength */</comment>
		<expr><name>MemHashCursorData</name></expr>,          <comment type="block">/* xData */</comment>
		<expr><name>MemHashCursorReset</name></expr>,         <comment type="block">/* xReset */</comment>
		<expr><literal type="number">0</literal></expr>        <comment type="block">/* xRelease */</comment>                        
	}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>&amp;</operator><name>sMemStore</name></expr>;</return>
</block_content>}</block></function>
</unit>
