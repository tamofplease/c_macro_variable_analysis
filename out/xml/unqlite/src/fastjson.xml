<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/fastjson.c"><comment type="block">/*
 * Symisc unQLite: An Embeddable NoSQL (Post Modern) Database Engine.
 * Copyright (C) 2012-2013, Symisc Systems http://unqlite.org/
 * Version 1.1.6
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://unqlite.org/licensing.html
 */</comment>
 <comment type="block">/* $SymiscID: fastjson.c v1.1 FreeBSD 2012-12-05 22:52 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unqliteInt.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* JSON binary encoding, decoding and stuff like that */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNQLITE_FAST_JSON_NEST_LIMIT</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINNT__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__UNIXES__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_FAST_JSON_NEST_LIMIT</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> <comment type="block">/* Nesting limit */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNQLITE_FAST_JSON_NEST_LIMIT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> <comment type="block">/* Nesting limit */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* UNQLITE_FAST_JSON_NEST_LIMIT */</comment>
<comment type="block">/* 
 * JSON to Binary using the FastJSON implementation (BigEndian).
 */</comment>
<comment type="block">/*
 * FastJSON implemented binary token.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_DOC_START</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* { */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_DOC_END</name></cpp:macro>      <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* } */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_ARRAY_START</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define> <comment type="block">/* [ */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_ARRAY_END</name></cpp:macro>    <cpp:value>4</cpp:value></cpp:define> <comment type="block">/* ] */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_COLON</name></cpp:macro>        <cpp:value>5</cpp:value></cpp:define> <comment type="block">/* : */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_COMMA</name></cpp:macro>        <cpp:value>6</cpp:value></cpp:define> <comment type="block">/* , */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_ID</name></cpp:macro>           <cpp:value>7</cpp:value></cpp:define> <comment type="block">/* ID + 4 Bytes length */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_STRING</name></cpp:macro>       <cpp:value>8</cpp:value></cpp:define> <comment type="block">/* String + 4 bytes length */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_BYTE</name></cpp:macro>         <cpp:value>9</cpp:value></cpp:define> <comment type="block">/* Byte */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_INT64</name></cpp:macro>       <cpp:value>10</cpp:value></cpp:define> <comment type="block">/* Integer 64 + 8 bytes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_REAL</name></cpp:macro>        <cpp:value>18</cpp:value></cpp:define> <comment type="block">/* Floating point value + 2 bytes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_NULL</name></cpp:macro>        <cpp:value>23</cpp:value></cpp:define> <comment type="block">/* NULL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_TRUE</name></cpp:macro>        <cpp:value>24</cpp:value></cpp:define> <comment type="block">/* TRUE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJSON_FALSE</name></cpp:macro>       <cpp:value>25</cpp:value></cpp:define> <comment type="block">/* FALSE */</comment>
<comment type="block">/*
 * Encode a Jx9 value to binary JSON.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>sxi32</name></type> <name>FastJsonEncode</name><parameter_list>(
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <comment type="block">/* Value to encode */</comment>
	<parameter><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>,      <comment type="block">/* Store encoded value here */</comment>
	<parameter><decl><type><name>int</name></type> <name>iNest</name></decl></parameter>          <comment type="block">/* Nesting limit */</comment> 
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iType</name> <init>= <expr><ternary><condition><expr><name>pValue</name></expr> ?</condition><then> <expr><name><name>pValue</name><operator>-&gt;</operator><name>iFlags</name></name></expr> </then><else>: <expr><name>MEMOBJ_NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>iNest</name> <operator>&gt;=</operator> <name>UNQLITE_FAST_JSON_NEST_LIMIT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nesting limit reached */</comment>
		<return>return <expr><name>SXERR_LIMIT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iType</name> <operator>&amp;</operator> <operator>(</operator><name>MEMOBJ_NULL</name><operator>|</operator><name>MEMOBJ_RES</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/*
		 * Resources are encoded as null also.
		 */</comment>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iType</name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr> ?</condition><then> <expr><name>FJSON_TRUE</name></expr> </then><else>: <expr><name>FJSON_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iType</name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zBuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>sxu32</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* String length */</comment>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_STRING</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyBigEndianPack32</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pValue</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pValue</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pValue</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iType</name> <operator>&amp;</operator> <name>MEMOBJ_INT</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
		<comment type="block">/* 64bit big endian integer */</comment>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_INT64</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SyBigEndianPack64</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu64</name><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iType</name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Real number */</comment>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_REAL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>sxu32</name></type> <name>iOfft</name> <init>= <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppendBig16</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zBlob</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><literal type="string">"%.15g"</literal></expr></argument>,<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>zBlob</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobDataAt</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><name>iOfft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SyBigEndianPack16</name><argument_list>(<argument><expr><name>zBlob</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu16</name><operator>)</operator><operator>(</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator> <literal type="number">2</literal> <operator>+</operator> <name>iOfft</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iType</name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* A JSON object or array */</comment>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name> <init>= <expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_hashmap_node</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
		<comment type="block">/* Reset the hashmap loop cursor */</comment>
		<expr_stmt><expr><call><name>jx9HashmapResetLoopCursor</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pMap</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>HASHMAP_JSON_OBJECT</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_value</name></type> <name>sKey</name></decl>;</decl_stmt>
			<comment type="block">/* A JSON object */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_DOC_START</name></expr>;</expr_stmt> <comment type="block">/* { */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name><name>pMap</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Encode object entries */</comment>
				<while>while<condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>jx9HashmapGetNextEntry</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Extract the key */</comment>
					<expr_stmt><expr><call><name>jx9HashmapExtractNodeKey</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Encode it */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FastJsonEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>,<argument><expr><name>pOut</name></expr></argument>,<argument><expr><name>iNest</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_COLON</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* Extract the value */</comment>
					<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>jx9HashmapGetNodeValue</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Encode it */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FastJsonEncode</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>,<argument><expr><name>pOut</name></expr></argument>,<argument><expr><name>iNest</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* Delimit the entry */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_COMMA</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></while>
				<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_DOC_END</name></expr>;</expr_stmt> <comment type="block">/* } */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* A JSON array */</comment>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_ARRAY_START</name></expr>;</expr_stmt> <comment type="block">/* [ */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Encode array entries */</comment>
				<while>while<condition>( <expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>jx9HashmapGetNextEntry</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Extract the value */</comment>
					<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>jx9HashmapGetNodeValue</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Encode it */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FastJsonEncode</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>,<argument><expr><name>pOut</name></expr></argument>,<argument><expr><name>iNest</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* Delimit the entry */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_COMMA</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></while>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <name>FJSON_ARRAY_END</name></expr>;</expr_stmt> <comment type="block">/* ] */</comment>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Decode a FastJSON binary blob.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>sxi32</name></type> <name>FastJsonDecode</name><parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>,  <comment type="block">/* Binary JSON  */</comment>
	<parameter><decl><type><name>sxu32</name></type> <name>nByte</name></decl></parameter>,      <comment type="block">/* Chunk delimiter */</comment>
	<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>,  <comment type="block">/* Decoded value */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzPtr</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>iNest</name></decl></parameter> <comment type="block">/* Nesting limit */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zIn</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pIn</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zEnd</name> <init>= <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>nByte</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>iNest</name> <operator>&gt;=</operator> <name>UNQLITE_FAST_JSON_NEST_LIMIT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nesting limit reached */</comment>
		<return>return <expr><name>SXERR_LIMIT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Advance the stream cursor */</comment>
	<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Process the binary token */</comment>
	<switch>switch<condition>(<expr><name>c</name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>FJSON_NULL</name></expr>:</case>
		<comment type="block">/* null */</comment>
		<expr_stmt><expr><call><name>jx9_value_null</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>FJSON_FALSE</name></expr>:</case>
		<comment type="block">/* Boolean FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_value_bool</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>FJSON_TRUE</name></expr>:</case>
		<comment type="block">/* Boolean TRUE */</comment>
		<expr_stmt><expr><call><name>jx9_value_bool</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>FJSON_INT64</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* 64Bit integer */</comment>
		<decl_stmt><decl><type><name>sxu64</name></type> <name>iVal</name></decl>;</decl_stmt>
		<comment type="block">/* Sanity check */</comment>
		<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Corrupt chunk */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyBigEndianUnpack64</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Advance the pointer */</comment>
		<expr_stmt><expr><name>zIn</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><name>jx9_int64</name><operator>)</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
					  </block_content>}</block>
	<case>case <expr><name>FJSON_REAL</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Real number */</comment>
		<decl_stmt><decl><type><name>double</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
		<decl_stmt><decl><type><name>sxu16</name></type> <name>iLen</name></decl>;</decl_stmt>
		<comment type="block">/* Sanity check */</comment>
		<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Corrupt chunk */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyBigEndianUnpack16</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>iLen</name></expr>]</index></name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Corrupt chunk */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zIn</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyStrToReal</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>iLen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Advance the pointer */</comment>
		<expr_stmt><expr><name>zIn</name> <operator>+=</operator> <name>iLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_value_double</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
					 </block_content>}</block>
	<case>case <expr><name>FJSON_STRING</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* UTF-8/Binary chunk */</comment>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>iLength</name></decl>;</decl_stmt>
		<comment type="block">/* Sanity check */</comment>
		<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Corrupt chunk */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyBigEndianUnpack32</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>iLength</name></expr>]</index></name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Corrupt chunk */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zIn</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pOut</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Reset the string cursor */</comment>
			<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr></argument>,<argument><expr><name>iLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Update pointer */</comment>
		<expr_stmt><expr><name>zIn</name> <operator>+=</operator> <name>iLength</name></expr>;</expr_stmt>
		<break>break;</break>
					   </block_content>}</block>
	<case>case <expr><name>FJSON_ARRAY_START</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Binary JSON array */</comment>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name></type> <name>sVal</name></decl>;</decl_stmt>
		<comment type="block">/* Allocate a new hashmap */</comment>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><call><name>jx9NewHashmap</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pMap</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_MEM</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><name>MEMOBJ_HASHMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
		<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
			<comment type="block">/* Jump leading binary commas */</comment>
			<while>while <condition>(<expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>FJSON_COMMA</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>FJSON_ARRAY_END</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the trailing binary ] */</comment>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Decode the value */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FastJsonDecode</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zIn</name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>zIn</name></expr></argument>,<argument><expr><name>iNest</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Insert the decoded value */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
							</block_content>}</block>
	<case>case <expr><name>FJSON_DOC_START</name></expr>:</case> <block>{<block_content>
		<comment type="block">/* Binary JSON object */</comment>
		<decl_stmt><decl><type><name>jx9_value</name></type> <name>sVal</name></decl>,<decl><type ref="prev"/><name>sKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
		<comment type="block">/* Allocate a new hashmap */</comment>
		<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><call><name>jx9NewHashmap</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pMap</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_MEM</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>,<argument><expr><name>MEMOBJ_HASHMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
		<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
			<comment type="block">/* Jump leading binary commas */</comment>
			<while>while <condition>(<expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>FJSON_COMMA</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>FJSON_DOC_END</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the trailing binary } */</comment>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Extract the key */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FastJsonDecode</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zIn</name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>zIn</name></expr></argument>,<argument><expr><name>iNest</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>FJSON_COLON</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_CORRUPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the binary colon ':' */</comment>
			<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_CORRUPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Decode the value */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>FastJsonDecode</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zIn</name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>zIn</name></expr></argument>,<argument><expr><name>iNest</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Insert the key and its associated value */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
						  </block_content>}</block>
	<default>default:</default>
		<comment type="block">/* Corrupt data */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_CORRUPT</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<if_stmt><if>if<condition>( <expr><name>pzPtr</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>pzPtr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
