<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/unqlite_jx9.c"><comment type="block">/*
 * Symisc unQLite: An Embeddable NoSQL (Post Modern) Database Engine.
 * Copyright (C) 2012-2013, Symisc Systems http://unqlite.org/
 * Version 1.1.6
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://unqlite.org/licensing.html
 */</comment>
 <comment type="block">/* $SymiscID: unql_jx9.c v1.2 FreeBSD 2013-01-24 22:45 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unqliteInt.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* 
 * This file implements UnQLite functions (db_exists(), db_create(), db_put(), db_get(), etc.) for the
 * underlying Jx9 Virtual Machine. 
 */</comment>
<comment type="block">/*
 * string db_version(void)
 *   Return the current version of the unQLite database engine.
 * Parameter
 *   None
 * Return
 *    unQLite version number (string).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_version</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>UNQLITE_VERSION</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>UNQLITE_VERSION</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string db_errlog(void)
 *   Return the database error log.
 * Parameter
 *   None
 * Return
 *    Database error log (string).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_errlog</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pErr</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the error log */</comment>
	<expr_stmt><expr><name>pErr</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>pDb</name><operator>-&gt;</operator><name>sErr</name></name></expr>;</expr_stmt>
	<comment type="block">/* Return the log */</comment>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string db_copyright(void)
 * string db_credits(void)
 *   Return the unQLite database engine copyright notice.
 * Parameter
 *   None
 * Return
 *    Copyright notice.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_credits</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>UNQLITE_COPYRIGHT</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>UNQLITE_COPYRIGHT</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string db_sig(void)
 *   Return the unQLite database engine unique signature.
 * Parameter
 *   None
 * Return
 *    unQLite signature.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_sig</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9_result_string</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>UNQLITE_IDENT</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UNQLITE_IDENT</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool collection_exists(string $name)
 * bool db_exits(string $name)
 *   Check if a given collection exists in the underlying database.
 * Parameter
 *   name: Lookup name
 * Return
 *    TRUE if the collection exits. FALSE otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_collection_exists</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the lookup */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteExistsCollection</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Lookup result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool collection_create(string $name)
 * bool db_create(string $name)
 *   Create a new collection.
 * Parameter
 *   name: Collection name
 * Return
 *    TRUE if the collection was successfuly created. FALSE otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_collection_create</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Try to create the collection */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCreateCollection</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Return the result to the caller */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * value db_fetch(string $col_name)
 * value db_get(string $col_name)
 *   Fetch the current record from a given collection and advance
 *   the record cursor.
 * Parameter
 *   col_name: Collection name
 * Return
 *    Record content success. NULL on failure (No more records to retrieve).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_fetch_next</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Fetch the current record */</comment>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Jx9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>JX9_OK</name></expr>;</return>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCollectionFetchNextRecord</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* pValue will be automatically released as soon we return from this function */</comment>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Return null */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such collection, return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * value db_fetch_by_id(string $col_name,int64 $record_id)
 * value db_get_by_id(string $col_name,int64 $record_id)
 *   Fetch a record using its unique ID from a given collection.
 * Parameter
 *   col_name:  Collection name
 *   record_id: Record number (__id field of a JSON object)
 * Return
 *    Record content success. NULL on failure (No such record).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_fetch_by_id</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name and/or record ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the record ID */</comment>
	<expr_stmt><expr><name>nId</name> <operator>=</operator> <call><name>jx9_value_to_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Fetch the desired record */</comment>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Jx9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>JX9_OK</name></expr>;</return>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCollectionFetchRecordById</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>,<argument><expr><name>nId</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* pValue will be automatically released as soon we return from this function */</comment>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* No such record, return null */</comment>
				<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such collection, return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * array db_fetch_all(string $col_name,[callback filter_callback])
 * array db_get_all(string $col_name,[callback filter_callback])
 *   Retrieve all records of a given collection and apply the given
 *   callback if available to filter records.
 * Parameter
 *   col_name: Collection name
 * Return
 *    Contents of the collection (JSON array) on success. NULL on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_fetch_all</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return NULL */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>pArray</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>pCallback</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jx9_value</name></type> <name>sResult</name></decl>;</decl_stmt> <comment type="block">/* Callback result */</comment>
		<comment type="block">/* Allocate an empty scalar value and an empty JSON array */</comment>
		<expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>jx9_context_new_array</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pValue</name> <operator>=</operator> <call><name>jx9_context_new_scalar</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pValue</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pArray</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Jx9 is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>JX9_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>jx9_value_is_callable</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pCallback</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>unqliteCollectionResetRecordCursor</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Fetch collection records one after one */</comment>
		<while>while<condition>( <expr><name>UNQLITE_OK</name> <operator>==</operator> <call><name>unqliteCollectionFetchNextRecord</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name>pCallback</name></expr> )</condition><block>{<block_content>
				<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name><name>apArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
				<comment type="block">/* Invoke the filter callback */</comment>
				<expr_stmt><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pValue</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmCallUserFunction</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><name>pCallback</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>apArg</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type> <name>iResult</name></decl>;</decl_stmt> <comment type="block">/* Callback result */</comment>
					<comment type="block">/* Extract callback result */</comment>
					<expr_stmt><expr><name>iResult</name> <operator>=</operator> <call><name>jx9_value_to_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><operator>!</operator><name>iResult</name></expr> )</condition><block>{<block_content>
						<comment type="block">/* Discard the result */</comment>
						<expr_stmt><expr><call><name>unqliteCollectionCacheRemoveRecord</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>,<argument><expr><call><name>unqliteCollectionCurrentRecordId</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Put the value in the JSON array */</comment>
			<expr_stmt><expr><call><name>jx9_array_add_elem</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Release the value */</comment>
			<expr_stmt><expr><call><name>jx9_value_null</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Finally, return our array */</comment>
		<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* pValue will be automatically released as soon we return from
		 * this foreign function.
		 */</comment>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such collection, return null */</comment>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 db_last_record_id(string $col_name)
 *   Return the ID of the last inserted record.
 * Parameter
 *   col_name: Collection name
 * Return
 *    Record ID (64-bit integer) on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_last_record_id</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><call><name>unqliteCollectionLastRecordId</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such collection, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * inr64 db_current_record_id(string $col_name)
 *   Return the current record ID.
 * Parameter
 *   col_name: Collection name
 * Return
 *    Current record ID (64-bit integer) on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_current_record_id</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><call><name>unqliteCollectionCurrentRecordId</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such collection, return FALSE */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_reset_record_cursor(string $col_name)
 *   Reset the record ID cursor.
 * Parameter
 *   col_name: Collection name
 * Return
 *    TRUE on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_reset_record_cursor</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>unqliteCollectionResetRecordCursor</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such collection */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * int64 db_total_records(string $col_name)
 *   Return the total number of inserted records in the given collection.
 * Parameter
 *   col_name: Collection name
 * Return
 *    Total number of records on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_total_records</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>unqlite_int64</name></type> <name>nRec</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>nRec</name> <operator>=</operator> <call><name>unqliteCollectionTotalRecords</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>nRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such collection */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * string db_creation_date(string $col_name)
 *   Return the creation date of the given collection.
 * Parameter
 *   col_name: Collection name
 * Return
 *    Creation date on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_creation_date</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>Sytm</name> <modifier>*</modifier></type><name>pTm</name> <init>= <expr><operator>&amp;</operator><name><name>pCol</name><operator>-&gt;</operator><name>sCreation</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>jx9_result_string_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="string">"%d-%d-%d %02d:%02d:%02d"</literal></expr></argument>,
			<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>,<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>,<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
			<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>,<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>,<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* No such collection */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_store(string $col_name,...)
 * bool db_put(string $col_name,...)
 *   Store one or more JSON values in a given collection.
 * Parameter
 *   col_name: Collection name
 * Return
 *    TRUE on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_store</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name and/or records"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"No such collection '%z'"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Store the given values */</comment>
	<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCollectionPut</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr>)</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,
				<argument><expr><literal type="string">"Error while storing record %d in collection '%z'"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>
				)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Return false */</comment>
			<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>JX9_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* All done, return TRUE */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_drop_collection(string $col_name)
 * bool collection_delete(string $col_name)
 *   Remove a given collection from the database.
 * Parameter
 *   col_name: Collection name
 * Return
 *    TRUE on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_drop_col</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"No such collection '%z'"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Drop the collection */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteDropCollection</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Processing result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_drop_record(string $col_name,int64 record_id)
 *   Remove a given record from a collection.
 * Parameter
 *   col_name: Collection name.
 *   record_id: ID of the record.
 * Return
 *    TRUE on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_drop_record</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_int64</name></type> <name>nId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name and/or records"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"No such collection '%z'"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the record ID */</comment>
	<expr_stmt><expr><name>nId</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Drop the record */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCollectionDropRecord</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>,<argument><expr><name>nId</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Processing result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_update_record(string $col_name, int_64 record_id, object $json_object)
 *   Update a given record with new json object
 * Parameter
 * col_name: Collection name
 *   record_id: ID of the record
 *   json_object: New Record data
 * Return
 *   TRUE on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_update_record</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jx9_int64</name></type> <name>nId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <comment type="block">/* Extract collection name */</comment>
    <if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* Missing arguments */</comment>
        <expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name and/or records"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Return false */</comment>
        <expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JX9_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Return false */</comment>
        <expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JX9_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Fetch the collection */</comment>
    <expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pCol</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"No such collection '%z'"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Return false */</comment>
        <expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JX9_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Update a record with the given value */</comment>
    <expr_stmt><expr><name>nId</name> <operator>=</operator> <call><name>jx9_value_to_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCollectionUpdateRecord</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>nId</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* All done, return TRUE */</comment>
    <expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_set_schema(string $col_name, object $json_object)
 *   Set a schema for a given collection.
 * Parameter
 *   col_name: Collection name.
 *   json_object: Collection schema (Must be a JSON object).
 * Return
 *    TRUE on success. FALSE on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_set_schema</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name and/or db scheme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>jx9_value_is_json_object</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection scheme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>UNQLITE_NOOP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Set the collection scheme */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqliteCollectionSetSchema</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_WARNING</name></expr></argument>,
			<argument><expr><literal type="string">"No such collection '%z'"</literal></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Processing result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * object db_get_schema(string $col_name)
 *   Return the schema associated with a given collection.
 * Parameter
 *   col_name: Collection name
 * Return
 *    Collection schema on success. null otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_get_schema</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_col</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
	<comment type="block">/* Extract collection name */</comment>
	<if_stmt><if>if<condition>( <expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Missing arguments */</comment>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Missing collection name and/or db scheme"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>jx9_value_to_string</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_ERR</name></expr></argument>,<argument><expr><literal type="string">"Invalid collection name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Return false */</comment>
		<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fetch the collection */</comment>
	<expr_stmt><expr><name>pCol</name> <operator>=</operator> <call><name>unqliteCollectionFetch</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><name>UNQLITE_VM_AUTO_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pCol</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Return the collection schema */</comment>
		<expr_stmt><expr><call><name>jx9_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pCol</name><operator>-&gt;</operator><name>sSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><call><name>jx9_context_throw_error_format</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>JX9_CTX_WARNING</name></expr></argument>,
			<argument><expr><literal type="string">"No such collection '%z'"</literal></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_begin(void)
 *   Manually begin a write transaction.
 * Parameter
 *   None
 * Return
 *    TRUE on success. FALSE otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_begin</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the unqlite Vm */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the underlying database handle  */</comment>
	<expr_stmt><expr><name>pDb</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pDb</name></name></expr>;</expr_stmt>
	<comment type="block">/* Begin the transaction */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerBegin</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_commit(void)
 *   Manually commit a transaction.
 * Parameter
 *   None
 * Return
 *    TRUE if the transaction was successfuly commited. FALSE otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_commit</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the unqlite Vm */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the underlying database handle  */</comment>
	<expr_stmt><expr><name>pDb</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pDb</name></name></expr>;</expr_stmt>
	<comment type="block">/* Commit the transaction if any */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerCommit</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Commit result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * bool db_rollback(void)
 *   Manually rollback a transaction.
 * Parameter
 *   None
 * Return
 *    TRUE if the transaction was successfuly rolled back. FALSE otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unqliteBuiltin_db_rollback</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the unqlite Vm */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>unqlite_vm</name> <operator>*</operator><operator>)</operator><call><name>jx9_context_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the underlying database handle  */</comment>
	<expr_stmt><expr><name>pDb</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pDb</name></name></expr>;</expr_stmt>
	<comment type="block">/* Rollback the transaction if any */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlitePagerRollback</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>sDB</name><operator>.</operator><name>pPager</name></name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Rollback result */</comment>
	<expr_stmt><expr><call><name>jx9_result_bool</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Register all the UnQLite foreign functions defined above.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteRegisterJx9Functions</name><parameter_list>(<parameter><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jx9_builtin_func</name></type> <name><name>aBuiltin</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{ <expr><literal type="string">"db_version"</literal></expr> , <expr><name>unqliteBuiltin_db_version</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_copyright"</literal></expr>, <expr><name>unqliteBuiltin_db_credits</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_credits"</literal></expr> , <expr><name>unqliteBuiltin_db_credits</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_sig"</literal></expr> ,     <expr><name>unqliteBuiltin_db_sig</name></expr>     }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_errlog"</literal></expr>,   <expr><name>unqliteBuiltin_db_errlog</name></expr>  }</block></expr>,
		<expr><block>{ <expr><literal type="string">"collection_exists"</literal></expr>, <expr><name>unqliteBuiltin_collection_exists</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_exists"</literal></expr>,         <expr><name>unqliteBuiltin_collection_exists</name></expr> }</block></expr>, 
		<expr><block>{ <expr><literal type="string">"collection_create"</literal></expr>, <expr><name>unqliteBuiltin_collection_create</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_create"</literal></expr>,         <expr><name>unqliteBuiltin_collection_create</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_fetch"</literal></expr>,          <expr><name>unqliteBuiltin_db_fetch_next</name></expr>     }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_get"</literal></expr>,            <expr><name>unqliteBuiltin_db_fetch_next</name></expr>     }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_fetch_by_id"</literal></expr>,    <expr><name>unqliteBuiltin_db_fetch_by_id</name></expr>    }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_get_by_id"</literal></expr>,      <expr><name>unqliteBuiltin_db_fetch_by_id</name></expr>    }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_fetch_all"</literal></expr>,      <expr><name>unqliteBuiltin_db_fetch_all</name></expr>      }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_get_all"</literal></expr>,        <expr><name>unqliteBuiltin_db_fetch_all</name></expr>      }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_last_record_id"</literal></expr>, <expr><name>unqliteBuiltin_db_last_record_id</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_current_record_id"</literal></expr>, <expr><name>unqliteBuiltin_db_current_record_id</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_reset_record_cursor"</literal></expr>, <expr><name>unqliteBuiltin_db_reset_record_cursor</name></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_total_records"</literal></expr>,  <expr><name>unqliteBuiltin_db_total_records</name></expr>  }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_creation_date"</literal></expr>,  <expr><name>unqliteBuiltin_db_creation_date</name></expr>  }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_store"</literal></expr>,          <expr><name>unqliteBuiltin_db_store</name></expr>          }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_put"</literal></expr>,            <expr><name>unqliteBuiltin_db_store</name></expr>          }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_drop_collection"</literal></expr>, <expr><name>unqliteBuiltin_db_drop_col</name></expr>      }</block></expr>,
		<expr><block>{ <expr><literal type="string">"collection_delete"</literal></expr>, <expr><name>unqliteBuiltin_db_drop_col</name></expr>       }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_drop_record"</literal></expr>,    <expr><name>unqliteBuiltin_db_drop_record</name></expr>    }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_update_record"</literal></expr>,  <expr><name>unqliteBuiltin_db_update_record</name></expr>  }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_set_schema"</literal></expr>,     <expr><name>unqliteBuiltin_db_set_schema</name></expr>     }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_get_schema"</literal></expr>,     <expr><name>unqliteBuiltin_db_get_schema</name></expr>     }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_begin"</literal></expr>,          <expr><name>unqliteBuiltin_db_begin</name></expr>          }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_commit"</literal></expr>,         <expr><name>unqliteBuiltin_db_commit</name></expr>         }</block></expr>,
		<expr><block>{ <expr><literal type="string">"db_rollback"</literal></expr>,       <expr><name>unqliteBuiltin_db_rollback</name></expr>       }</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>UNQLITE_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<comment type="block">/* Register the unQLite functions defined above in the Jx9 call table */</comment>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SX_ARRAYSIZE</name><argument_list>(<argument><expr><name>aBuiltin</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_create_function</name><argument_list>(<argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pJx9Vm</name></name></expr></argument>,<argument><expr><name><name>aBuiltin</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>,<argument><expr><name><name>aBuiltin</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>xFunc</name></expr></argument>,<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
