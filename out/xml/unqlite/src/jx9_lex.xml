<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/jx9_lex.c"><comment type="block">/*
 * Symisc JX9: A Highly Efficient Embeddable Scripting Engine Based on JSON.
 * Copyright (C) 2012-2013, Symisc Systems http://jx9.symisc.net/
 * Version 1.7.2
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://jx9.symisc.net/
 */</comment>
 <comment type="block">/* $SymiscID: lex.c v1.0 FreeBSD 2012-12-09 00:19 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jx9Int.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* This file implements a thread-safe and full reentrant lexical analyzer for the Jx9 programming language */</comment>
<comment type="block">/* Forward declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>sxu32</name></type> <name>keywordCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>LexExtractNowdoc</name><parameter_list>(<parameter><decl><type><name>SyStream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>,<parameter><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Tokenize a raw jx9 input.
 * Get a single low-level token from the input file. Update the stream pointer so that
 * it points to the first character beyond the extracted token.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9TokenizeInput</name><parameter_list>(<parameter><decl><type><name>SyStream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>,<parameter><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtxData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pStr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Ignore leading white spaces */</comment>
	<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Advance the stream cursor */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Update line counter */</comment>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>nLine</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&gt;=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* End of input reached */</comment>
		<return>return <expr><name>SXERR_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Record token starting position and line */</comment>
	<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nLine</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pStr</name> <operator>=</operator> <operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xc0</literal> <operator>||</operator> <call><name>SyisAlpha</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* The following code fragment is taken verbatim from the xPP source tree.
		 * xPP is a modern embeddable macro processor with advanced features useful for
		 * application seeking for a production quality, ready to use macro processor.
		 * xPP is a widely used library developed and maintened by Symisc Systems.
		 * You can reach the xPP home page by following this link:
		 * http://xpp.symisc.net/
		 */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nKeyword</name></decl>;</decl_stmt>
		<comment type="block">/* Isolate UTF-8 or alphanumeric stream */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
			<expr_stmt><expr><name>zIn</name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xc0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
				<comment type="block">/* UTF-8 stream */</comment>
				<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Skip alphanumeric stream */</comment>
			<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>SyisAlphaNum</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>==</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Not an UTF-8 or alphanumeric stream */</comment>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Synchronize pointers */</comment>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<comment type="block">/* Record token length */</comment>
		<expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>-</operator><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>nKeyword</name> <operator>=</operator> <call><name>keywordCode</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nKeyword</name> <operator>!=</operator> <name>JX9_TK_ID</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* We are dealing with a keyword [i.e: if, function, CREATE, ...], save the keyword ID */</comment>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_KEYWORD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <call><name>SX_INT_TO_PTR</name><argument_list>(<argument><expr><name>nKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* A simple identifier */</comment>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_ID</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>sxi32</name></type> <name>c</name></decl>;</decl_stmt>
		<comment type="block">/* Non-alpha stream */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> 
			<operator>(</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator>  <operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				<comment type="block">/* Inline comments */</comment>
				<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
				<comment type="block">/* Tell the upper-layer to ignore this token */</comment> 
				<return>return <expr><name>SXERR_CONTINUE</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<comment type="block">/* Block comment */</comment>
			<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr> )</condition><block>{<block_content>
					<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>  )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>nLine</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<comment type="block">/* Tell the upper-layer to ignore this token */</comment>
			<return>return <expr><name>SXERR_CONTINUE</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* Decimal digit stream */</comment>
			<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="block">/* Mark the token as integer until we encounter a real number */</comment>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_INTEGER</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Real number */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
						<if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'e'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'E'</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
							<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
								<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
								<if_stmt><if>if<condition>( <expr><operator>(</operator><name>c</name> <operator>==</operator><literal type="char">'+'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name>  <operator>&amp;&amp;</operator>
									<name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
										<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
								</block_content>}</block></if></if_stmt>
								<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
									<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
								</block_content>}</block></while>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_REAL</name></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'e'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'E'</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Prevent compiler warning */</comment>
					<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>pCtxData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
						<if_stmt><if>if<condition>( <expr><operator>(</operator><name>c</name> <operator>==</operator><literal type="char">'+'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name>  <operator>&amp;&amp;</operator>
							<name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
								<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_REAL</name></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'X'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Hex digit stream */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisHex</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
				</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>c</name>  <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'B'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Binary digit stream */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Record token length */</comment>
			<expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>-</operator><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name><operator>)</operator></expr>;</expr_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Advance the stream cursor */</comment>
		<comment type="block">/* Assume we are dealing with an operator*/</comment>
		<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_OP</name></expr>;</expr_stmt>
		<switch>switch<condition>(<expr><name>c</name></expr>)</condition><block>{<block_content>
		<case>case <expr><literal type="char">'$'</literal></expr>:</case> <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_DOLLAR</name></expr>;</expr_stmt> <break>break;</break>
		<case>case <expr><literal type="char">'{'</literal></expr>:</case> <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_OCB</name></expr>;</expr_stmt>   <break>break;</break> 
		<case>case <expr><literal type="char">'}'</literal></expr>:</case> <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_CCB</name></expr>;</expr_stmt>    <break>break;</break>
		<case>case <expr><literal type="char">'('</literal></expr>:</case> <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_LPAREN</name></expr>;</expr_stmt> <break>break;</break> 
		<case>case <expr><literal type="char">'['</literal></expr>:</case> <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>|=</operator> <name>JX9_TK_OSB</name></expr>;</expr_stmt>   <break>break;</break> <comment type="block">/* Bitwise operation here, since the square bracket token '[' 
														 * is a potential operator [i.e: subscripting] */</comment>
		<case>case <expr><literal type="char">']'</literal></expr>:</case> <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_CSB</name></expr>;</expr_stmt>    <break>break;</break>
		<case>case <expr><literal type="char">')'</literal></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pTokSet</name> <init>= <expr><name><name>pStream</name><operator>-&gt;</operator><name>pSet</name></name></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Assemble type cast operators [i.e: (int), (float), (bool)...] */</comment> 
			<if_stmt><if>if<condition>( <expr><name><name>pTokSet</name><operator>-&gt;</operator><name>nUsed</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
				<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmp</name></decl>;</decl_stmt>
				<comment type="block">/* Peek the last recongnized token */</comment>
				<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <operator>(</operator><name>SyToken</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><name>pTokSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pTmp</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name></expr> )</condition><block>{<block_content>
					<decl_stmt><decl><type><name>sxi32</name></type> <name>nID</name> <init>= <expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>( <expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nID</name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TKWRD_INT</name><operator>|</operator><name>JX9_TKWRD_FLOAT</name><operator>|</operator><name>JX9_TKWRD_STRING</name><operator>|</operator><name>JX9_TKWRD_BOOL</name><operator>)</operator></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <operator>(</operator><name>SyToken</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><name>pTokSet</name></expr></argument>, <argument><expr><name><name>pTokSet</name><operator>-&gt;</operator><name>nUsed</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if<condition>( <expr><name><name>pTmp</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_LPAREN</name></expr> )</condition><block>{<block_content>
							<comment type="block">/* Merge the three tokens '(' 'TYPE' ')' into a single one */</comment>
							<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>zTypeCast</name> <init>= <expr><literal type="string">"(int)"</literal></expr></init></decl>;</decl_stmt>
							<if_stmt><if>if<condition>( <expr><name>nID</name> <operator>&amp;</operator> <name>JX9_TKWRD_FLOAT</name></expr> )</condition><block>{<block_content>
								<expr_stmt><expr><name>zTypeCast</name> <operator>=</operator> <literal type="string">"(float)"</literal></expr>;</expr_stmt>
							</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nID</name> <operator>&amp;</operator> <name>JX9_TKWRD_BOOL</name></expr> )</condition><block>{<block_content>
								<expr_stmt><expr><name>zTypeCast</name> <operator>=</operator> <literal type="string">"(bool)"</literal></expr>;</expr_stmt>
							</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nID</name> <operator>&amp;</operator> <name>JX9_TKWRD_STRING</name></expr> )</condition><block>{<block_content>
								<expr_stmt><expr><name>zTypeCast</name> <operator>=</operator> <literal type="string">"(string)"</literal></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
							<comment type="block">/* Reflect the change */</comment>
							<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_OP</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>, <argument><expr><name>zTypeCast</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zTypeCast</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="block">/* Save the instance associated with the type cast operator */</comment>
							<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>jx9ExprExtractOperator</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="block">/* Remove the two previous tokens */</comment>
							<expr_stmt><expr><name><name>pTokSet</name><operator>-&gt;</operator><name>nUsed</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
							<return>return <expr><name>SXRET_OK</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_RPAREN</name></expr>;</expr_stmt>
			<break>break;</break>
				  </block_content>}</block>
		<case>case <expr><literal type="char">'\''</literal></expr>:</case><block>{<block_content>
			<comment type="block">/* Single quoted string */</comment>
			<expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name><operator>++</operator></expr>;</expr_stmt>
			<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>  )</condition><block>{<block_content>
					<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if><else>else<block>{<block_content>
						<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zPtr</name> <init>= <expr><operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>sxi32</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
						<while>while<condition>( <expr><name>zPtr</name> <operator>&gt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zInput</name></name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name>zPtr</name><operator>--</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
						<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>nLine</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="block">/* Record token length and type */</comment>
			<expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>-</operator><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_SSTR</name></expr>;</expr_stmt>
			<comment type="block">/* Jump the trailing single quote */</comment>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
				  </block_content>}</block>
		<case>case <expr><literal type="char">'"'</literal></expr>:</case><block>{<block_content>
			<decl_stmt><decl><type><name>sxi32</name></type> <name>iNest</name></decl>;</decl_stmt>
			<comment type="block">/* Double quoted string */</comment>
			<expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name><operator>++</operator></expr>;</expr_stmt>
			<while>while<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block>{<block_content>
					<expr_stmt><expr><name>iNest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					<comment type="block">/* TICKET 1433-40: Hnadle braces'{}' in double quoted string where everything is allowed */</comment>
					<while>while<condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
						<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name>iNest</name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name>iNest</name><operator>--</operator></expr>;</expr_stmt>
							<if_stmt><if>if<condition>( <expr><name>iNest</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
								<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
								<break>break;</break>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>nLine</name></name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&gt;=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr> )</condition><block>{<block_content>
					<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if><else>else<block>{<block_content>
						<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zPtr</name> <init>= <expr><operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>sxi32</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
						<while>while<condition>( <expr><name>zPtr</name> <operator>&gt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zInput</name></name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name>zPtr</name><operator>--</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
						<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>nLine</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="block">/* Record token length and type */</comment>
			<expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>-</operator><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_DSTR</name></expr>;</expr_stmt>
			<comment type="block">/* Jump the trailing quote */</comment>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
				  </block_content>}</block>
		<case>case <expr><literal type="char">':'</literal></expr>:</case>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_COLON</name></expr>;</expr_stmt> <comment type="block">/* Single colon */</comment>
			<break>break;</break>
		<case>case <expr><literal type="char">','</literal></expr>:</case> <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>|=</operator> <name>JX9_TK_COMMA</name></expr>;</expr_stmt>  <break>break;</break> <comment type="block">/* Comma is also an operator */</comment>
		<case>case <expr><literal type="char">';'</literal></expr>:</case> <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_SEMI</name></expr>;</expr_stmt>   <break>break;</break>
			<comment type="block">/* Handle combined operators [i.e: +=, ===, !=== ...] */</comment>
		<case>case <expr><literal type="char">'='</literal></expr>:</case>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>|=</operator> <name>JX9_TK_EQUAL</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_TK_EQUAL</name></expr>;</expr_stmt>
					<comment type="block">/* Current operator: == */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
						<comment type="block">/* Current operator: === */</comment>
						<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'!'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Current operator: != */</comment>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: !== */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
			<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>|=</operator> <name>JX9_TK_AMPER</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_TK_AMPER</name></expr>;</expr_stmt>
					<comment type="block">/* Current operator: &amp;&amp; */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_TK_AMPER</name></expr>;</expr_stmt>
					<comment type="block">/* Current operator: &amp;= */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		<case>case <expr><literal type="char">'.'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr> )</condition><block>{<block_content>
				<comment type="block">/* Concatenation operator: '..' or '.='  */</comment>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'|'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: || */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: |= */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'+'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: ++ */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: += */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'-'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: -- */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: -= */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: -&gt; */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'*'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Current operator: *= */</comment>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'/'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Current operator: /= */</comment>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'%'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Current operator: %= */</comment>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'^'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Current operator: ^= */</comment>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: &lt;&lt; */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
						<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
							<comment type="block">/* Current operator: &lt;&lt;= */</comment>
							<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> )</condition><block>{<block_content>
							<comment type="block">/* Current Token: &lt;&lt;&lt;  */</comment>
							<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
							<comment type="block">/* This may be the beginning of a Heredoc/Nowdoc string, try to delimit it */</comment>
							<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>LexExtractNowdoc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pStream</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pToken</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
								<comment type="block">/* Here/Now doc successfuly extracted */</comment>
								<return>return <expr><name>SXRET_OK</name></expr>;</return>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: &lt;&gt; */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: &lt;= */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
			<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: &gt;&gt; */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>&lt;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
						<comment type="block">/* Current operator: &gt;&gt;= */</comment>
						<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Current operator: &gt;= */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
		<if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Record token length */</comment>
			<expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name><operator>-</operator><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_OP</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_expr_op</name> <modifier>*</modifier></type><name>pOp</name></decl>;</decl_stmt>
			<comment type="block">/* Check if the extracted token is an operator */</comment>
			<expr_stmt><expr><name>pOp</name> <operator>=</operator> <call><name>jx9ExprExtractOperator</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><operator>(</operator><name>SyToken</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>pSet</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pOp</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Not an operator */</comment>
				<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;=</operator> <operator>~</operator><name>JX9_TK_OP</name></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_OTHER</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Save the instance associated with this operator for later processing */</comment>
				<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pOp</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Tell the upper-layer to save the extracted token for later processing */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**     $Header: /sqlite/sqlite/tool/mkkeywordhash.c,v 1.38 2011/12/21 01:00:46 &lt;chm@symisc.net&gt; $
**
** The code in this file implements a function that determines whether
** or not a given identifier is really a JX9 keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/</comment>
<comment type="block">/* Hash score: 35 */</comment>
<function><type><specifier>static</specifier> <name>sxu32</name></type> <name>keywordCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* zText[] encodes 188 bytes of keywords in 128 bytes */</comment>
  <comment type="block">/*   printegereturnconstaticaselseifloatincludefaultDIEXITcontinue      */</comment>
  <comment type="block">/*   diewhileASPRINTbooleanbreakforeachfunctionimportstringswitch       */</comment>
  <comment type="block">/*   uplink                                                             */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zText</name><index>[<expr><literal type="number">127</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="char">'p'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'g'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,
    <expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,
    <expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="char">'d'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'D'</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="char">'E'</literal></expr>,<expr><literal type="char">'X'</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="char">'T'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,
    <expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'d'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'w'</literal></expr>,<expr><literal type="char">'h'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'A'</literal></expr>,<expr><literal type="char">'S'</literal></expr>,<expr><literal type="char">'P'</literal></expr>,
    <expr><literal type="char">'R'</literal></expr>,<expr><literal type="char">'I'</literal></expr>,<expr><literal type="char">'N'</literal></expr>,<expr><literal type="char">'T'</literal></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'k'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,
    <expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="char">'a'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'h'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'m'</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,
    <expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="char">'g'</literal></expr>,<expr><literal type="char">'s'</literal></expr>,<expr><literal type="char">'w'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'h'</literal></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,
    <expr><literal type="char">'k'</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aHash</name><index>[<expr><literal type="number">59</literal></expr>]</index></name> <init>= <expr><block>{
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">15</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">19</literal></expr>,  <expr><literal type="number">18</literal></expr>,   <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">10</literal></expr>,   <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">29</literal></expr>,  <expr><literal type="number">23</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">13</literal></expr>,  <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">14</literal></expr>,  <expr><literal type="number">24</literal></expr>,  <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">31</literal></expr>,  <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">27</literal></expr>,   <expr><literal type="number">9</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">8</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">26</literal></expr>,   <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aNext</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">4</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">21</literal></expr>,   <expr><literal type="number">7</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aLen</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{
       <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">4</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">4</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">7</literal></expr>,
       <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">4</literal></expr>,   <expr><literal type="number">8</literal></expr>,   <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">4</literal></expr>,   <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">7</literal></expr>,
       <expr><literal type="number">8</literal></expr>,   <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">6</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sxu16</name></type> <name><name>aOffset</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">14</literal></expr>,  <expr><literal type="number">17</literal></expr>,  <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">23</literal></expr>,  <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">29</literal></expr>,  <expr><literal type="number">30</literal></expr>,  <expr><literal type="number">35</literal></expr>,
      <expr><literal type="number">40</literal></expr>,  <expr><literal type="number">47</literal></expr>,  <expr><literal type="number">49</literal></expr>,  <expr><literal type="number">53</literal></expr>,  <expr><literal type="number">61</literal></expr>,  <expr><literal type="number">64</literal></expr>,  <expr><literal type="number">69</literal></expr>,  <expr><literal type="number">71</literal></expr>,  <expr><literal type="number">76</literal></expr>,  <expr><literal type="number">76</literal></expr>,  <expr><literal type="number">83</literal></expr>,  <expr><literal type="number">88</literal></expr>,  <expr><literal type="number">88</literal></expr>,
      <expr><literal type="number">95</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">121</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sxu32</name></type> <name><name>aCode</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><name>JX9_TKWRD_PRINT</name></expr>,   <expr><name>JX9_TKWRD_INT</name></expr>,      <expr><name>JX9_TKWRD_INT</name></expr>,     <expr><name>JX9_TKWRD_RETURN</name></expr>,   <expr><name>JX9_TKWRD_CONST</name></expr>, 
    <expr><name>JX9_TKWRD_STATIC</name></expr>,  <expr><name>JX9_TKWRD_CASE</name></expr>,     <expr><name>JX9_TKWRD_AS</name></expr>,      <expr><name>JX9_TKWRD_ELIF</name></expr>,     <expr><name>JX9_TKWRD_ELSE</name></expr>,
    <expr><name>JX9_TKWRD_IF</name></expr>,      <expr><name>JX9_TKWRD_FLOAT</name></expr>,    <expr><name>JX9_TKWRD_INCLUDE</name></expr>, <expr><name>JX9_TKWRD_DEFAULT</name></expr>,  <expr><name>JX9_TKWRD_DIE</name></expr>, 
    <expr><name>JX9_TKWRD_EXIT</name></expr>,    <expr><name>JX9_TKWRD_CONTINUE</name></expr>, <expr><name>JX9_TKWRD_DIE</name></expr>,     <expr><name>JX9_TKWRD_WHILE</name></expr>,    <expr><name>JX9_TKWRD_AS</name></expr>,  
    <expr><name>JX9_TKWRD_PRINT</name></expr>,   <expr><name>JX9_TKWRD_BOOL</name></expr>,     <expr><name>JX9_TKWRD_BOOL</name></expr>,    <expr><name>JX9_TKWRD_BREAK</name></expr>,    <expr><name>JX9_TKWRD_FOR</name></expr>, 
    <expr><name>JX9_TKWRD_FOREACH</name></expr>, <expr><name>JX9_TKWRD_FUNCTION</name></expr>, <expr><name>JX9_TKWRD_IMPORT</name></expr>,  <expr><name>JX9_TKWRD_STRING</name></expr>,  <expr><name>JX9_TKWRD_SWITCH</name></expr>,  
    <expr><name>JX9_TKWRD_UPLINK</name></expr>,  
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>JX9_TK_ID</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>z</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>n</name><operator>)</operator> <operator>%</operator> <literal type="number">59</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>aHash</name><index>[<expr><name>h</name></expr>]</index></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>aNext</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>aLen</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>n</name> <operator>&amp;&amp;</operator> <call><name>SyMemcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zText</name><index>[<expr><name><name>aOffset</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
       <comment type="block">/* JX9_TKWRD_PRINT */</comment>
       <comment type="block">/* JX9_TKWRD_INT */</comment>
       <comment type="block">/* JX9_TKWRD_INT */</comment>
       <comment type="block">/* JX9_TKWRD_RETURN */</comment>
       <comment type="block">/* JX9_TKWRD_CONST */</comment>
       <comment type="block">/* JX9_TKWRD_STATIC */</comment>
       <comment type="block">/* JX9_TKWRD_CASE */</comment>
       <comment type="block">/* JX9_TKWRD_AS */</comment>
       <comment type="block">/* JX9_TKWRD_ELIF */</comment>
       <comment type="block">/* JX9_TKWRD_ELSE */</comment>
       <comment type="block">/* JX9_TKWRD_IF */</comment>
       <comment type="block">/* JX9_TKWRD_FLOAT */</comment>
       <comment type="block">/* JX9_TKWRD_INCLUDE */</comment>
       <comment type="block">/* JX9_TKWRD_DEFAULT */</comment>
       <comment type="block">/* JX9_TKWRD_DIE */</comment>
       <comment type="block">/* JX9_TKWRD_EXIT */</comment>
       <comment type="block">/* JX9_TKWRD_CONTINUE */</comment>
       <comment type="block">/* JX9_TKWRD_DIE */</comment>
       <comment type="block">/* JX9_TKWRD_WHILE */</comment>
       <comment type="block">/* JX9_TKWRD_AS */</comment>
       <comment type="block">/* JX9_TKWRD_PRINT */</comment>
       <comment type="block">/* JX9_TKWRD_BOOL */</comment>
       <comment type="block">/* JX9_TKWRD_BOOL */</comment>
       <comment type="block">/* JX9_TKWRD_BREAK */</comment>
       <comment type="block">/* JX9_TKWRD_FOR */</comment>
       <comment type="block">/* JX9_TKWRD_FOREACH */</comment>
       <comment type="block">/* JX9_TKWRD_FUNCTION */</comment>
       <comment type="block">/* JX9_TKWRD_IMPORT */</comment>
       <comment type="block">/* JX9_TKWRD_STRING */</comment>
       <comment type="block">/* JX9_TKWRD_SWITCH */</comment>
       <comment type="block">/* JX9_TKWRD_UPLINK */</comment>
      <return>return <expr><name><name>aCode</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>JX9_TK_ID</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Extract a heredoc/nowdoc text from a raw JX9 input.
 * According to the JX9 language reference manual:
 *  A third way to delimit strings is the heredoc syntax: &lt;&lt;&lt;. After this operator, an identifier
 *  is provided, then a newline. The string itself follows, and then the same identifier again
 *  to close the quotation.
 *  The closing identifier must begin in the first column of the line. Also, the identifier must 
 *  follow the same naming rules as any other label in JX9: it must contain only alphanumeric 
 *  characters and underscores, and must start with a non-digit character or underscore. 
 *  Heredoc text behaves just like a double-quoted string, without the double quotes.
 *  This means that quotes in a heredoc do not need to be escaped, but the escape codes listed
 *  above can still be used. Variables are expanded, but the same care must be taken when expressing
 *  complex variables inside a heredoc as with strings. 
 *  Nowdocs are to single-quoted strings what heredocs are to double-quoted strings.
 *  A nowdoc is specified similarly to a heredoc, but no parsing is done inside a nowdoc.
 *  The construct is ideal for embedding JX9 code or other large blocks of text without the need
 *  for escaping. It shares some features in common with the SGML &lt;![CDATA[ ]]&gt; construct, in that
 *  it declares a block of text which is not for parsing.
 *  A nowdoc is identified with the same &lt;&lt;&lt; sequence used for heredocs, but the identifier which follows
 *  is enclosed in single quotes, e.g. &lt;&lt;&lt;'EOT'. All the rules for heredoc identifiers also apply to nowdoc
 *  identifiers, especially those regarding the appearance of the closing identifier.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>LexExtractNowdoc</name><parameter_list>(<parameter><decl><type><name>SyStream</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>, <parameter><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zIn</name>  <init>= <expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zEnd</name> <init>= <expr><name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zPtr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sDelim</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sStr</name></decl>;</decl_stmt>
	<comment type="block">/* Jump leading white spaces */</comment>
	<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* A simple symbol, return immediately */</comment>
		<return>return <expr><name>SXERR_CONTINUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SyisAlphaNum</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid delimiter, return immediately */</comment>
		<return>return <expr><name>SXERR_CONTINUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Isolate the identifier */</comment>
	<expr_stmt><expr><name><name>sDelim</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
		<comment type="block">/* Skip alphanumeric stream */</comment>
		<while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>SyisAlphaNum</name><argument_list>(<argument><expr><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xc0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* UTF-8 stream */</comment>
			<while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>==</operator> <name>zIn</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Not an UTF-8 or alphanumeric stream */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Synchronize pointers */</comment>
		<expr_stmt><expr><name>zIn</name> <operator>=</operator> <name>zPtr</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Get the identifier length */</comment>
	<expr_stmt><expr><name><name>sDelim</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name><operator>-</operator><name><name>sDelim</name><operator>.</operator><name>zString</name></name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Jump the trailing single quote */</comment>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Jump trailing white spaces */</comment>
	<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name><name>sDelim</name><operator>.</operator><name>nByte</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid syntax */</comment>
		<return>return <expr><name>SXERR_CONTINUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>nLine</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Increment line counter */</comment>
	<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Isolate the delimited string */</comment>
	<expr_stmt><expr><name><name>sStr</name><operator>.</operator><name>zString</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr>;</expr_stmt>
	<comment type="block">/* Go and found the closing delimiter */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<comment type="block">/* Synchronize with the next line */</comment>
		<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* End of the input reached, break immediately */</comment>
			<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>zEnd</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>nLine</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Increment line counter */</comment>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name> <operator>-</operator> <name>zIn</name><operator>)</operator> <operator>&gt;=</operator> <name><name>sDelim</name><operator>.</operator><name>nByte</name></name> <operator>&amp;&amp;</operator> <call><name>SyMemcmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>sDelim</name><operator>.</operator><name>zString</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr></argument>, <argument><expr><name><name>sDelim</name><operator>.</operator><name>nByte</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zPtr</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name><name>sDelim</name><operator>.</operator><name>nByte</name></name></expr>]</index></name></expr>;</expr_stmt>
			<while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* End of input */</comment>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>=</operator> <name>zPtr</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr> )</condition><block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zCur</name> <init>= <expr><name>zPtr</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
				<while>while<condition>( <expr><name>zPtr</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisSpace</name><argument_list>(<argument><expr><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>zPtr</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
				<if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>&gt;=</operator> <name>zEnd</name> <operator>||</operator> <name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Closing delimiter found, break immediately */</comment>
					<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>=</operator> <name>zCur</name></expr>;</expr_stmt> <comment type="block">/* Keep the semi-colon */</comment>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Closing delimiter found, break immediately */</comment>
				<expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>zText</name></name> <operator>=</operator> <name>zPtr</name></expr>;</expr_stmt> <comment type="block">/* Synchronize with the stream cursor */</comment>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Synchronize pointers and continue searching */</comment>
			<expr_stmt><expr><name>zIn</name> <operator>=</operator> <name>zPtr</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for> <comment type="block">/* For(;;) */</comment>
	<comment type="block">/* Get the delimited string length */</comment>
	<expr_stmt><expr><name><name>sStr</name><operator>.</operator><name>nByte</name></name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name><operator>-</operator><name><name>sStr</name><operator>.</operator><name>zString</name></name><operator>)</operator></expr>;</expr_stmt>
	<comment type="block">/* Record token type and length */</comment>
	<expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>JX9_TK_NOWDOC</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyStringDupPtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Remove trailing white spaces */</comment>
	<expr_stmt><expr><call><name>SyStringRightTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* All done */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Tokenize a raw jx9 input.
 * This is the public tokenizer called by most code generator routines. 
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9Tokenize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zInput</name></decl></parameter>,<parameter><decl><type><name>sxu32</name></type> <name>nLen</name></decl></parameter>,<parameter><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyLex</name></type> <name>sLexer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Initialize the lexer */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyLexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sLexer</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pOut</name><operator>)</operator></expr></argument>,<argument><expr><name>jx9TokenizeInput</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Tokenize input */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyLexTokenizeInput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sLexer</name></expr></argument>, <argument><expr><name>zInput</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the lexer */</comment>
	<expr_stmt><expr><call><name>SyLexRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sLexer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Tokenization result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
