<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/bitvec.c"><comment type="block">/*
 * Symisc unQLite: An Embeddable NoSQL (Post Modern) Database Engine.
 * Copyright (C) 2012-2013, Symisc Systems http://unqlite.org/
 * Version 1.1.6
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://unqlite.org/licensing.html
 */</comment>
 <comment type="block">/* $SymiscID: bitvec.c v1.0 Win7 2013-02-27 15:16 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unqliteInt.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** This file implements an object that represents a dynmaic
** bitmap.
**
** A bitmap is used to record which pages of a database file have been
** journalled during a transaction, or which pages have the "dont-write"
** property.  Usually only a few pages are meet either condition.
** So the bitmap is usually sparse and has low cardinality.
*/</comment>
<comment type="block">/*
 * Actually, this is not a bitmap but a simple hashtable where page 
 * number (64-bit unsigned integers) are used as the lookup keys.
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>bitvec_rec</name></name></type> <name>bitvec_rec</name>;</typedef>
<struct>struct <name>bitvec_rec</name>
<block>{
	<decl_stmt><decl><type><name>pgno</name></type> <name>iPage</name></decl>;</decl_stmt>                  <comment type="block">/* Page number */</comment>
	<decl_stmt><decl><type><name>bitvec_rec</name> <modifier>*</modifier></type><name>pNext</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>pNextCol</name></decl>;</decl_stmt> <comment type="block">/* Collison link */</comment>
}</block>;</struct>
<struct>struct <name>Bitvec</name>
<block>{
	<decl_stmt><decl><type><name>SyMemBackend</name> <modifier>*</modifier></type><name>pAlloc</name></decl>;</decl_stmt> <comment type="block">/* Memory allocator */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nRec</name></decl>;</decl_stmt>           <comment type="block">/* Total number of records */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nSize</name></decl>;</decl_stmt>          <comment type="block">/* Table size */</comment>
	<decl_stmt><decl><type><name>bitvec_rec</name> <modifier>*</modifier><modifier>*</modifier></type><name>apRec</name></decl>;</decl_stmt>   <comment type="block">/* Record table */</comment>
	<decl_stmt><decl><type><name>bitvec_rec</name> <modifier>*</modifier></type><name>pList</name></decl>;</decl_stmt>    <comment type="block">/* List of records */</comment>
}</block>;</struct>
<comment type="block">/* 
 * Allocate a new bitvec instance.
*/</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>Bitvec</name> <modifier>*</modifier></type> <name>unqliteBitvecCreate</name><parameter_list>(<parameter><decl><type><name>SyMemBackend</name> <modifier>*</modifier></type><name>pAlloc</name></decl></parameter>,<parameter><decl><type><name>pgno</name></type> <name>iSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bitvec_rec</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitvec</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Bitvec</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Bitvec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Allocate a new table */</comment>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nSize</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <comment type="block">/* Must be a power of two */</comment>
	<expr_stmt><expr><name>apNew</name> <operator>=</operator> <operator>(</operator><name>bitvec_rec</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nSize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitvec_rec</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>apNew</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the new table */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>apNew</name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nSize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitvec_rec</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fill-in */</comment>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apRec</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pAlloc</name></name> <operator>=</operator> <name>pAlloc</name></expr>;</expr_stmt>
	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check if the given page number is already installed in the table.
 * Return true if installed. False otherwise.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteBitvecTest</name><parameter_list>(<parameter><decl><type><name>Bitvec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,<parameter><decl><type><name>pgno</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
	<decl_stmt><decl><type><name>bitvec_rec</name> <modifier>*</modifier></type><name>pRec</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the desired bucket */</comment>
	<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>apRec</name><index>[<expr><name>i</name> <operator>&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nSize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>pRec</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pRec</name><operator>-&gt;</operator><name>iPage</name></name> <operator>==</operator> <name>i</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Page found */</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name><name>pRec</name><operator>-&gt;</operator><name>pNextCol</name></name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>( <expr><name>pRec</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pRec</name><operator>-&gt;</operator><name>iPage</name></name> <operator>==</operator> <name>i</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Page found */</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name><name>pRec</name><operator>-&gt;</operator><name>pNextCol</name></name></expr>;</expr_stmt>


		<if_stmt><if>if<condition>( <expr><name>pRec</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pRec</name><operator>-&gt;</operator><name>iPage</name></name> <operator>==</operator> <name>i</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Page found */</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name><name>pRec</name><operator>-&gt;</operator><name>pNextCol</name></name></expr>;</expr_stmt>


		<if_stmt><if>if<condition>( <expr><name>pRec</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pRec</name><operator>-&gt;</operator><name>iPage</name></name> <operator>==</operator> <name>i</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Page found */</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the next entry */</comment>
		<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name><name>pRec</name><operator>-&gt;</operator><name>pNextCol</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* No such entry */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Install a given page number in our bitmap (Actually, our hashtable).
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>int</name></type> <name>unqliteBitvecSet</name><parameter_list>(<parameter><decl><type><name>Bitvec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,<parameter><decl><type><name>pgno</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bitvec_rec</name> <modifier>*</modifier></type><name>pRec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iBuck</name></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new instance */</comment>
	<expr_stmt><expr><name>pRec</name> <operator>=</operator> <operator>(</operator><name>bitvec_rec</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pAlloc</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitvec_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pRec</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>UNQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pRec</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitvec_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fill-in */</comment>
	<expr_stmt><expr><name><name>pRec</name><operator>-&gt;</operator><name>iPage</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>iBuck</name> <operator>=</operator> <name>i</name> <operator>&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nSize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRec</name><operator>-&gt;</operator><name>pNextCol</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>apRec</name><index>[<expr><name>iBuck</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apRec</name><index>[<expr><name>iBuck</name></expr>]</index></name> <operator>=</operator> <name>pRec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRec</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pList</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pList</name></name> <operator>=</operator> <name>pRec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nSize</name></name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nRec</name></name> <operator>&lt;</operator> <literal type="number">100000</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Grow the hashtable */</comment>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nNewSize</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nSize</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bitvec_rec</name> <modifier>*</modifier></type><name>pEntry</name></decl>,<decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>apNew</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>apNew</name> <operator>=</operator> <operator>(</operator><name>bitvec_rec</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pAlloc</name></name></expr></argument>, <argument><expr><name>nNewSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitvec_rec</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>apNew</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>sxu32</name></type> <name>iBucket</name></decl>;</decl_stmt>
			<comment type="block">/* Zero the new table */</comment>
			<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>apNew</name></expr></argument>, <argument><expr><name>nNewSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitvec_rec</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Rehash all entries */</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pList</name></name></expr>;</expr_stmt>
			<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
				<comment type="block">/* Loop one */</comment>
				<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>nRec</name></name></expr> )</condition><block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<comment type="block">/* Install in the new bucket */</comment>
				<expr_stmt><expr><name>iBucket</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>iPage</name></name> <operator>&amp;</operator> <operator>(</operator><name>nNewSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNextCol</name></name> <operator>=</operator> <name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
				<comment type="block">/* Point to the next entry */</comment>
				<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
			<comment type="block">/* Release the old table and reflect the change */</comment>
			<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pAlloc</name></name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>apRec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apRec</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nSize</name></name>  <operator>=</operator> <name>nNewSize</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Destroy a bitvec instance. Reclaim all memory used.
 */</comment>
<function><type><name>UNQLITE_PRIVATE</name> <name>void</name></type> <name>unqliteBitvecDestroy</name><parameter_list>(<parameter><decl><type><name>Bitvec</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bitvec_rec</name> <modifier>*</modifier></type><name>pNext</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>pRec</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pList</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyMemBackend</name> <modifier>*</modifier></type><name>pAlloc</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pAlloc</name></name></expr></init></decl>;</decl_stmt>
	
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pRec</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name><operator>--</operator></expr>;</expr_stmt>

		<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pRec</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name><operator>--</operator></expr>;</expr_stmt>


		<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pRec</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name><operator>--</operator></expr>;</expr_stmt>


		<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pRec</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pRec</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>apRec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><name>pAlloc</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
