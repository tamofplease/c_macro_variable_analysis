<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/jx9_api.c"><comment type="block">/*
 * Symisc JX9: A Highly Efficient Embeddable Scripting Engine Based on JSON.
 * Copyright (C) 2012-2013, Symisc Systems http://jx9.symisc.net/
 * Version 1.7.2
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://jx9.symisc.net/
 */</comment>
 <comment type="block">/* $SymiscID: api.c v1.7 FreeBSD 2012-12-18 06:54 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jx9Int.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* This file implement the public interfaces presented to host-applications.
 * Routines in other files are for internal use by JX9 and should not be
 * accessed by users of the library.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_ENGINE_MAGIC</name></cpp:macro> <cpp:value>0xF874BCD7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_ENGINE_MISUSE</name><parameter_list>(<parameter><type><name>ENGINE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ENGINE == 0 || ENGINE-&gt;nMagic != JX9_ENGINE_MAGIC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_VM_MISUSE</name><parameter_list>(<parameter><type><name>VM</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VM == 0 || VM-&gt;nMagic == JX9_VM_STALE)</cpp:value></cpp:define>
<comment type="block">/* If another thread have released a working instance, the following macros
 * evaluates to true. These macros are only used when the library
 * is built with threading support enabled which is not the case in
 * the default built.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_THRD_ENGINE_RELEASE</name><parameter_list>(<parameter><type><name>ENGINE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ENGINE-&gt;nMagic != JX9_ENGINE_MAGIC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_THRD_VM_RELEASE</name><parameter_list>(<parameter><type><name>VM</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VM-&gt;nMagic == JX9_VM_STALE)</cpp:value></cpp:define>
<comment type="block">/* IMPLEMENTATION: jx9@embedded@symisc 311-12-32 */</comment>
<comment type="block">/*
 * All global variables are collected in the structure named "sJx9MPGlobal".
 * That way it is clear in the code when we are using static variable because
 * its name start with sJx9MPGlobal.
 */</comment>
<struct><specifier>static</specifier> struct <name>Jx9Global_Data</name>
<block>{
	<decl_stmt><decl><type><name>SyMemBackend</name></type> <name>sAllocator</name></decl>;</decl_stmt>                <comment type="block">/* Global low level memory allocator */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SyMutexMethods</name> <modifier>*</modifier></type><name>pMutexMethods</name></decl>;</decl_stmt>   <comment type="block">/* Mutex methods */</comment>
	<decl_stmt><decl><type><name>SyMutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>                       <comment type="block">/* Global mutex */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nThreadingLevel</name></decl>;</decl_stmt>                 <comment type="block">/* Threading level: 0 == Single threaded/1 == Multi-Threaded 
										    * The threading level can be set using the [jx9_lib_config()]
											* interface with a configuration verb set to
											* JX9_LIB_CONFIG_THREAD_LEVEL_SINGLE or 
											* JX9_LIB_CONFIG_THREAD_LEVEL_MULTI
											*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>                    <comment type="block">/* Underlying virtual file system */</comment>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nEngine</name></decl>;</decl_stmt>                          <comment type="block">/* Total number of active engines */</comment>
	<decl_stmt><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngines</name></decl>;</decl_stmt>                          <comment type="block">/* List of active engine */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nMagic</name></decl>;</decl_stmt>                           <comment type="block">/* Sanity check against library misuse */</comment>
}</block><decl><name>sJx9MPGlobal</name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>, 
	<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_LIB_MAGIC</name></cpp:macro>  <cpp:value>0xEA1495BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_LIB_MISUSE</name></cpp:macro> <cpp:value>(sJx9MPGlobal.nMagic != JX9_LIB_MAGIC)</cpp:value></cpp:define>
<comment type="block">/*
 * Supported threading level.
 * These options have meaning only when the library is compiled with multi-threading
 * support.That is, the JX9_ENABLE_THREADS compile time directive must be defined
 * when JX9 is built.
 * JX9_THREAD_LEVEL_SINGLE:
 * In this mode, mutexing is disabled and the library can only be used by a single thread.
 * JX9_THREAD_LEVEL_MULTI
 * In this mode, all mutexes including the recursive mutexes on [jx9] objects
 * are enabled so that the application is free to share the same engine
 * between different threads at the same time.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_THREAD_LEVEL_SINGLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_THREAD_LEVEL_MULTI</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>
<comment type="block">/*
 * Configure a running JX9 engine instance.
 * return JX9_OK on success.Any other return
 * value indicates failure.
 * Refer to [jx9_config()].
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9EngineConfig</name><parameter_list>(<parameter><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>nOp</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_conf</name> <modifier>*</modifier></type><name>pConf</name> <init>= <expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>JX9_OK</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Perform the requested operation */</comment>
	<switch>switch<condition>(<expr><name>nOp</name></expr>)</condition><block>{<block_content>									 
	<case>case <expr><name>JX9_CONFIG_ERR_LOG</name></expr>:</case><block>{<block_content>
		<comment type="block">/* Extract compile-time error log if any */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzPtr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pLen</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name>pzPtr</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* NULL terminate the error-log buffer */</comment>
		<expr_stmt><expr><call><name>SyBlobNullAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConf</name><operator>-&gt;</operator><name>sErrConsumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Point to the error-log buffer */</comment>
		<expr_stmt><expr><operator>*</operator><name>pzPtr</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConf</name><operator>-&gt;</operator><name>sErrConsumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pLen</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConf</name><operator>-&gt;</operator><name>sErrConsumer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> <comment type="block">/* NULL '\0' terminator */</comment> )</condition><block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConf</name><operator>-&gt;</operator><name>sErrConsumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
							</block_content>}</block>
	<case>case <expr><name>JX9_CONFIG_ERR_ABORT</name></expr>:</case>
		<comment type="block">/* Reserved for future use */</comment>
		<break>break;</break>
	<default>default:</default>
		<comment type="block">/* Unknown configuration verb */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_CORRUPT</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch> <comment type="block">/* Switch() */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Configure the JX9 library.
 * Return JX9_OK on success. Any other return value indicates failure.
 * Refer to [jx9_lib_config()].
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>Jx9CoreConfigure</name><parameter_list>(<parameter><decl><type><name>sxi32</name></type> <name>nOp</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>JX9_OK</name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>nOp</name></expr>)</condition><block>{<block_content>
	    <case>case <expr><name>JX9_LIB_CONFIG_VFS</name></expr>:</case><block>{<block_content>
			<comment type="block">/* Install a virtual file system */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>jx9_vfs</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pVfs</name></name> <operator>=</operator> <name>pVfs</name></expr>;</expr_stmt>
			<break>break;</break>
								</block_content>}</block>
		<case>case <expr><name>JX9_LIB_CONFIG_USER_MALLOC</name></expr>:</case> <block>{<block_content>
			<comment type="block">/* Use an alternative low-level memory allocation routines */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>SyMemMethods</name> <modifier>*</modifier></type><name>pMethods</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SyMemMethods</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Save the memory failure callback (if available) */</comment>
			<decl_stmt><decl><type><name>ProcMemError</name></type> <name>xMemErr</name> <init>= <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>xMemError</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pMemErr</name> <init>= <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>pUserData</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>pMethods</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Use the built-in memory allocation subsystem */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyMemBackendInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>xMemErr</name></expr></argument>, <argument><expr><name>pMemErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyMemBackendInitFromOthers</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pMethods</name></expr></argument>, <argument><expr><name>xMemErr</name></expr></argument>, <argument><expr><name>pMemErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
										  </block_content>}</block>
		<case>case <expr><name>JX9_LIB_CONFIG_MEM_ERR_CALLBACK</name></expr>:</case> <block>{<block_content>
			<comment type="block">/* Memory failure callback */</comment>
			<decl_stmt><decl><type><name>ProcMemError</name></type> <name>xMemErr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ProcMemError</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>xMemError</name></name> <operator>=</operator> <name>xMemErr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
			<break>break;</break>
												 </block_content>}</block>	  
		<case>case <expr><name>JX9_LIB_CONFIG_USER_MUTEX</name></expr>:</case> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Use an alternative low-level mutex subsystem */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>SyMutexMethods</name> <modifier>*</modifier></type><name>pMethods</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SyMutexMethods</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>UNTRUST</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<if_stmt><if>if<condition>( <expr><name>pMethods</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_CORRUPT</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* Sanity check */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pMethods</name><operator>-&gt;</operator><name>xEnter</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xLeave</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMethods</name><operator>-&gt;</operator><name>xNew</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
				<comment type="block">/* At least three criticial callbacks xEnter(), xLeave() and xNew() must be supplied */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_CORRUPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Overwrite the previous mutex subsystem */</comment>
				<expr_stmt><expr><call><name>SyMutexRelease</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Initialize and install the new mutex subsystem */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pMethods</name><operator>-&gt;</operator><name>xGlobalInit</name></name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xGlobalInit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Create the global mutex */</comment>
			<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name> <operator>=</operator> <call><name><name>pMethods</name><operator>-&gt;</operator><name>xNew</name></name><argument_list>(<argument><expr><name>SXMUTEX_TYPE_FAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/*
				 * If the supplied mutex subsystem is so sick that we are unable to
				 * create a single mutex, there is no much we can do here.
				 */</comment>
				<if_stmt><if>if<condition>( <expr><name><name>pMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><call><name><name>pMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_CORRUPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name> <operator>=</operator> <name>pMethods</name></expr>;</expr_stmt>			
			<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Set a default threading level */</comment>
				<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>=</operator> <name>JX9_THREAD_LEVEL_MULTI</name></expr>;</expr_stmt> 
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
										   </block_content>}</block>
		<case>case <expr><name>JX9_LIB_CONFIG_THREAD_LEVEL_SINGLE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Single thread mode(Only one thread is allowed to play with the library) */</comment>
			<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>=</operator> <name>JX9_THREAD_LEVEL_SINGLE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<case>case <expr><name>JX9_LIB_CONFIG_THREAD_LEVEL_MULTI</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Multi-threading mode (library is thread safe and JX9 engines and virtual machines
			 * may be shared between multiple threads).
			 */</comment>
			<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>=</operator> <name>JX9_THREAD_LEVEL_MULTI</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* Unknown configuration option */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_CORRUPT</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_lib_config()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_lib_config</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nConfigOp</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>==</operator> <name>JX9_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Library is already initialized, this operation is forbidden */</comment>
		<return>return <expr><name>JX9_LOOKED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>nConfigOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Jx9CoreConfigure</name><argument_list>(<argument><expr><name>nConfigOp</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Global library initialization
 * Refer to [jx9_lib_init()]
 * This routine must be called to initialize the memory allocation subsystem, the mutex 
 * subsystem prior to doing any serious work with the library.The first thread to call
 * this routine does the initialization process and set the magic number so no body later
 * can re-initialize the library.If subsequent threads call this  routine before the first
 * thread have finished the initialization process, then the subsequent threads must block 
 * until the initialization process is done.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>Jx9CoreInitialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt> <comment type="block">/* Built-in vfs */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SyMutexMethods</name> <modifier>*</modifier></type><name>pMutexMethods</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyMutex</name> <modifier>*</modifier></type><name>pMaster</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/*
	 * If the library is already initialized, then a call to this routine
	 * is a no-op.
	 */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>==</operator> <name>JX9_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_OK</name></expr>;</return> <comment type="block">/* Already initialized */</comment>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pVfs</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Point to the built-in vfs */</comment>
		<expr_stmt><expr><name>pVfs</name> <operator>=</operator> <call><name>jx9ExportBuiltinVfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Install it */</comment>
		<expr_stmt><expr><call><name>jx9_lib_config</name><argument_list>(<argument><expr><name>JX9_LIB_CONFIG_VFS</name></expr></argument>, <argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>!=</operator> <name>JX9_THREAD_LEVEL_SINGLE</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pMutexMethods</name> <operator>=</operator> <name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pMutexMethods</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Use the built-in mutex subsystem */</comment>
			<expr_stmt><expr><name>pMutexMethods</name> <operator>=</operator> <call><name>SyMutexExportMethods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pMutexMethods</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<return>return <expr><name>JX9_CORRUPT</name></expr>;</return> <comment type="block">/* Can't happen */</comment>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Install the mutex subsystem */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_lib_config</name><argument_list>(<argument><expr><name>JX9_LIB_CONFIG_USER_MUTEX</name></expr></argument>, <argument><expr><name>pMutexMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>rc</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Obtain a static mutex so we can initialize the library without calling malloc() */</comment>
		<expr_stmt><expr><name>pMaster</name> <operator>=</operator> <call><name>SyMutexNew</name><argument_list>(<argument><expr><name>pMutexMethods</name></expr></argument>, <argument><expr><name>SXMUTEX_TYPE_STATIC_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pMaster</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>JX9_CORRUPT</name></expr>;</return> <comment type="block">/* Can't happen */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Lock the master mutex */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name>pMutexMethods</name></expr></argument>, <argument><expr><name>pMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel == JX9_THREAD_LEVEL_SINGLE */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>!=</operator> <name>JX9_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>pMethods</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Install a memory subsystem */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9_lib_config</name><argument_list>(<argument><expr><name>JX9_LIB_CONFIG_USER_MALLOC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* zero mean use the built-in memory backend */</comment>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* If we are unable to initialize the memory backend, there is no much we can do here.*/</comment>
				<goto>goto <name>End</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Protect the memory allocation subsystem */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyMemBackendMakeThreadSafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
				<goto>goto <name>End</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/* Our library is initialized, set the magic number */</comment>
		<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>=</operator> <name>JX9_LIB_MAGIC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_OK</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	</block_content>}</block></if></if_stmt> <comment type="block">/* sJx9MPGlobal.nMagic != JX9_LIB_MAGIC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>End</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Unlock the master mutex */</comment>
	<expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name>pMutexMethods</name></expr></argument>, <argument><expr><name>pMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel == JX9_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release an active JX9 engine and it's associated active virtual machines.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>EngineRelease</name><parameter_list>(<parameter><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
	<comment type="block">/* Release all active VM */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pVms</name></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>iVm</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9VmRelease</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pVm</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>iVm</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Set a dummy magic number */</comment>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <literal type="number">0x7635</literal></expr>;</expr_stmt>
	<comment type="block">/* Release the private memory subsystem */</comment>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release all resources consumed by the library.
 * If JX9 is already shut when this routine is invoked then this
 * routine is a harmless no-op.
 * Note: This call is not thread safe. Refer to [jx9_lib_shutdown()].
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>JX9CoreShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
	<comment type="block">/* Release all active engines first */</comment>
	<expr_stmt><expr><name>pEngine</name> <operator>=</operator> <name><name>sJx9MPGlobal</name><operator>.</operator><name>pEngines</name></name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nEngine</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EngineRelease</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<expr_stmt><expr><name>pEngine</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nEngine</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Release the mutex subsystem */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SyMutexRelease</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name><operator>-&gt;</operator><name>xGlobalRelease</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name><operator>.</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Release the memory backend */</comment>
		<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>=</operator> <literal type="number">0x1928</literal></expr>;</expr_stmt>	
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_lib_shutdown()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_lib_shutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nMagic</name></name> <operator>!=</operator> <name>JX9_LIB_MAGIC</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Already shut */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>JX9CoreShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_lib_signature()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>jx9_lib_signature</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>JX9_SIG</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_init()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_init</name><parameter_list>(<parameter><decl><type><name>jx9</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppEngine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNTRUST</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if<condition>( <expr><name>ppEngine</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><operator>*</operator><name>ppEngine</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* One-time automatic library initialization */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Jx9CoreInitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new engine */</comment>
	<expr_stmt><expr><name>pEngine</name> <operator>=</operator> <operator>(</operator><name>jx9</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEngine</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize engine fields */</comment>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>nMagic</name></name> <operator>=</operator> <name>JX9_ENGINE_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyMemBackendInitFromParent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Release</name>;</goto>
	</block_content>}</block></if></if_stmt>
<comment type="line">//#if defined(JX9_ENABLE_THREADS)</comment>
<comment type="line">//	SyMemBackendDisbaleMutexing(&amp;pEngine-&gt;sAllocator);</comment>
<comment type="line">//#endif</comment>
	<comment type="block">/* Default configuration */</comment>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>sErrConsumer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Install a default compile-time error consumer routine */</comment>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>xErr</name></name> <operator>=</operator> <name>jx9VmBlobConsumer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>pErrData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>sErrConsumer</name></name></expr>;</expr_stmt>
	<comment type="block">/* Built-in vfs */</comment>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pVfs</name></name> <operator>=</operator> <name><name>sJx9MPGlobal</name><operator>.</operator><name>pVfs</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Associate a recursive mutex with this instance */</comment>
		 <expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>=</operator> <call><name>SyMutexNew</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name>SXMUTEX_TYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_NOMEM</name></expr>;</expr_stmt>
			 <goto>goto <name>Release</name>;</goto>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Link to the list of active engines */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Enter the global mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel == JX9_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>MACRO_LD_PUSH</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pEngines</name></name></expr></argument>, <argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nEngine</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Leave the global mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel == JX9_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Write a pointer to the new instance */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppEngine</name> <operator>=</operator> <name>pEngine</name></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
<label><name>Release</name>:</label>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>,<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_release()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_release</name><parameter_list>(<parameter><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>JX9_ENGINE_MISUSE</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire engine mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>JX9_THRD_ENGINE_RELEASE</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>JX9_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Release the engine */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>EngineRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pEngine</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave engine mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <comment type="block">/* Release engine mutex */</comment>
	 <macro><name>SyMutexRelease</name><argument_list>(<argument>sJx9MPGlobal.pMutexMethods</argument>, <argument>pEngine-&gt;pMutex</argument>)</argument_list></macro> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Enter the global mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel == JX9_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Unlink from the list of active engines */</comment>
	<expr_stmt><expr><call><name>MACRO_LD_REMOVE</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pEngines</name></name></expr></argument>, <argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nEngine</name></name><operator>--</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Leave the global mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel == JX9_THREAD_LEVEL_SINGLE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Release the memory chunk allocated to this engine */</comment>
	<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sJx9MPGlobal</name><operator>.</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a raw JX9 script.
 * To execute a JX9 code, it must first be compiled into a bytecode program using this routine.
 * If something goes wrong [i.e: compile-time error], your error log [i.e: error consumer callback]
 * should  display the appropriate error message and this function set ppVm to null and return
 * an error code that is different from JX9_OK. Otherwise when the script is successfully compiled
 * ppVm should hold the JX9 bytecode and it's safe to call [jx9_vm_exec(), jx9_vm_reset(), etc.].
 * This API does not actually evaluate the JX9 code. It merely compile and prepares the JX9 script
 * for evaluation.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>ProcessScript</name><parameter_list>(
	<parameter><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>,          <comment type="block">/* Running JX9 engine */</comment>
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVm</name></decl></parameter>,         <comment type="block">/* OUT: A pointer to the virtual machine */</comment>
	<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pScript</name></decl></parameter>,     <comment type="block">/* Raw JX9 script to compile */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>,          <comment type="block">/* Compile-time flags */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilePath</name></decl></parameter>  <comment type="block">/* File path if script come from a file. NULL otherwise */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new virtual machine */</comment>
	<expr_stmt><expr><name>pVm</name> <operator>=</operator> <operator>(</operator><name>jx9_vm</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVm</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* If the supplied memory subsystem is so sick that we are unable to allocate
		 * a tiny chunk of memory, there is no much we can do here. */</comment>
		<if_stmt><if>if<condition>( <expr><name>ppVm</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ppVm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>JX9_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Default compile-time flags */</comment>
		<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the Virtual Machine */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pEngine</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>ppVm</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ppVm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>JX9_VM_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>zFilePath</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Push processed file path */</comment>
		<expr_stmt><expr><call><name>jx9VmPushFilePath</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>zFilePath</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reset the error message consumer */</comment>
	<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>sErrConsumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the script */</comment>
	<expr_stmt><expr><call><name>jx9CompileScript</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pScript</name><operator>)</operator></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>sCodeGen</name><operator>.</operator><name>nErr</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pVm</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nErr</name> <init>= <expr><name><name>pVm</name><operator>-&gt;</operator><name>sCodeGen</name><operator>.</operator><name>nErr</name></name></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Compilation error or null ppVm pointer, release this VM */</comment>
		<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>ppVm</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ppVm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><ternary><condition><expr><name>nErr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>JX9_COMPILE_ERR</name></expr> </then><else>: <expr><name>JX9_OK</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Prepare the virtual machine for bytecode execution */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmMakeReady</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<goto>goto <name>Release</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Install local import path which is the current directory */</comment>
	<expr_stmt><expr><call><name>jx9_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>JX9_VM_CONFIG_IMPORT_PATH</name></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Associate a recursive mutex with this instance */</comment>
		 <expr_stmt><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>=</operator> <call><name>SyMutexNew</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name>SXMUTEX_TYPE_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			 <goto>goto <name>Release</name>;</goto>
		 </block_content>}</block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Script successfully compiled, link to the list of active virtual machines */</comment>
	<expr_stmt><expr><call><name>MACRO_LD_PUSH</name><argument_list>(<argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pVms</name></name></expr></argument>, <argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>iVm</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Point to the freshly created VM */</comment>
	<expr_stmt><expr><operator>*</operator><name>ppVm</name> <operator>=</operator> <name>pVm</name></expr>;</expr_stmt>
	<comment type="block">/* Ready to execute JX9 bytecode */</comment>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
<label><name>Release</name>:</label>
	<expr_stmt><expr><call><name>SyMemBackendRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ppVm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>JX9_VM_ERR</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_compile()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_compile</name><parameter_list>(<parameter><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSource</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>, <parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOutVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sScript</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>JX9_ENGINE_MISUSE</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>zSource</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty Jx9 statement ';' */</comment>
		<expr_stmt><expr><name>zSource</name> <operator>=</operator> <literal type="string">";"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Compute input length automatically */</comment>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sScript</name></expr></argument>, <argument><expr><name>zSource</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire engine mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>JX9_THRD_ENGINE_RELEASE</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>JX9_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Compile the script */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ProcessScript</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pEngine</name><operator>)</operator></expr></argument>,<argument><expr><name>ppOutVm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sScript</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave engine mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Compilation result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_compile_file()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_compile_file</name><parameter_list>(<parameter><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilePath</name></decl></parameter>, <parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOutVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>jx9_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>ppOutVm</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ppOutVm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_OK</name></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>JX9_ENGINE_MISUSE</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>SX_EMPTY_STR</name><argument_list>(<argument><expr><name>zFilePath</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire engine mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>JX9_THRD_ENGINE_RELEASE</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>JX9_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <comment type="block">/*
	  * Check if the underlying vfs implement the memory map
	  * [i.e: mmap() under UNIX/MapViewOfFile() under windows] function.
	  */</comment>
	 <expr_stmt><expr><name>pVfs</name> <operator>=</operator> <name><name>pEngine</name><operator>-&gt;</operator><name>pVfs</name></name></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xMmap</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Memory map routine not implemented */</comment>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_IO_ERR</name></expr>;</expr_stmt>
	 </block_content>}</block></if><else>else<block>{<block_content>
		 <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pMapView</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
		 <decl_stmt><decl><type><name>jx9_int64</name></type> <name>nSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
		 <decl_stmt><decl><type><name>SyString</name></type> <name>sScript</name></decl>;</decl_stmt>
		 <comment type="block">/* Try to get a memory view of the whole file */</comment>
		 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xMmap</name></name><argument_list>(<argument><expr><name>zFilePath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMapView</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
			 <comment type="block">/* Assume an IO error */</comment>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_IO_ERR</name></expr>;</expr_stmt>
		 </block_content>}</block></if><else>else<block>{<block_content>
			 <comment type="block">/* Compile the file */</comment>
			 <expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sScript</name></expr></argument>, <argument><expr><name>pMapView</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ProcessScript</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pEngine</name><operator>)</operator></expr></argument>, <argument><expr><name>ppOutVm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sScript</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>zFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <comment type="block">/* Release the memory view of the whole file */</comment>
			 <if_stmt><if>if<condition>( <expr><name><name>pVfs</name><operator>-&gt;</operator><name>xUnmap</name></name></expr> )</condition><block>{<block_content>
				 <expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xUnmap</name></name><argument_list>(<argument><expr><name>pMapView</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 </block_content>}</block></if></if_stmt>
		 </block_content>}</block></else></if_stmt>
	 </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave engine mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Compilation result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_vm_config()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_vm_config</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iConfigOp</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Ticket 1433-002: NULL VM is harmless operation */</comment>
	<if_stmt><if>if <condition>( <expr><call><name>JX9_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>JX9_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>JX9_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Confiugure the virtual machine */</comment>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>iConfigOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmConfigure</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><name>iConfigOp</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_vm_release()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_vm_release</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Ticket 1433-002: NULL VM is harmless operation */</comment>
	<if_stmt><if>if <condition>( <expr><call><name>JX9_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>JX9_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>JX9_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>pEngine</name> <operator>=</operator> <name><name>pVm</name><operator>-&gt;</operator><name>pEngine</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <comment type="block">/* Release VM mutex */</comment>
	 <macro><name>SyMutexRelease</name><argument_list>(<argument>sJx9MPGlobal.pMutexMethods</argument>, <argument>pVm-&gt;pMutex</argument>)</argument_list></macro> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Unlink from the list of active VM */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Acquire engine mutex */</comment>
			<expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
				<call><name>JX9_THRD_ENGINE_RELEASE</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
					<return>return <expr><name>JX9_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>MACRO_LD_REMOVE</name><argument_list>(<argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pVms</name></name></expr></argument>, <argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pEngine</name><operator>-&gt;</operator><name>iVm</name></name><operator>--</operator></expr>;</expr_stmt>
		<comment type="block">/* Release the memory chunk allocated to this VM */</comment>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEngine</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* Leave engine mutex */</comment>
			<expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pEngine</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_create_function()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_create_function</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xFunc</name>)<parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Ticket 1433-002: NULL VM is harmless operation */</comment>
	<if_stmt><if>if <condition>( <expr><call><name>JX9_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Remove leading and trailing white spaces */</comment>
	<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Ticket 1433-003: NULL values are not allowed */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>sName</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>xFunc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>JX9_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>JX9_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Install the foreign function */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmInstallForeignFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>xFunc</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9DeleteFunction</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_user_func</name> <modifier>*</modifier></type><name>pFunc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Perform the deletion */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyHashDeleteEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hHostFunction</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Release internal fields */</comment>
		<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aAux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>SyStringData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_create_constant()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_create_constant</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xExpand</name>)<parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Ticket 1433-002: NULL VM is harmless operation */</comment>
	<if_stmt><if>if <condition>( <expr><call><name>JX9_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Remove leading and trailing white spaces */</comment>
	<expr_stmt><expr><call><name>SyStringFullTrim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>sName</name><operator>.</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty constant name */</comment>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* TICKET 1433-003: NULL pointer is harmless operation */</comment>
	<if_stmt><if>if<condition>( <expr><name>xExpand</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Acquire VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexEnter</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
	 <if_stmt><if>if<condition>( <expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>nThreadingLevel</name></name> <operator>&gt;</operator> <name>JX9_THREAD_LEVEL_SINGLE</name> <operator>&amp;&amp;</operator> 
		 <call><name>JX9_THRD_VM_RELEASE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			 <return>return <expr><name>JX9_ABORT</name></expr>;</return> <comment type="block">/* Another thread have released this instance */</comment>
	 </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Perform the registration */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmRegisterConstant</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>xExpand</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JX9_ENABLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
	 <comment type="block">/* Leave VM mutex */</comment>
	 <expr_stmt><expr><call><name>SyMutexLeave</name><argument_list>(<argument><expr><name><name>sJx9MPGlobal</name><operator>.</operator><name>pMutexMethods</name></name></expr></argument>, <argument><expr><name><name>pVm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* NO-OP if sJx9MPGlobal.nThreadingLevel != JX9_THREAD_LEVEL_MULTI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>Jx9DeleteConstant</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_constant</name> <modifier>*</modifier></type><name>pCons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Query the constant hashtable */</comment>
	 <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyHashDeleteEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>hConstant</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		 <comment type="block">/* Perform the deletion */</comment>
		 <expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>SyStringData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCons</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
	 <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_new_scalar()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_value</name> <modifier>*</modifier></type> <name>jx9_new_scalar</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<comment type="block">/* Ticket 1433-002: NULL VM is harmless operation */</comment>
	<if_stmt><if>if <condition>( <expr><call><name>JX9_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Allocate a new scalar variable */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Nullify the new scalar */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_new_array()] 
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_value</name> <modifier>*</modifier></type> <name>jx9_new_array</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<comment type="block">/* Ticket 1433-002: NULL VM is harmless operation */</comment>
	<if_stmt><if>if <condition>( <expr><call><name>JX9_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create a new hashmap first */</comment>
	<expr_stmt><expr><name>pMap</name> <operator>=</operator> <call><name>jx9NewHashmap</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pMap</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Associate a new jx9_value with this hashmap */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9HashmapRelease</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInitFromArray</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_release_value()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_release_value</name><parameter_list>(<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Ticket 1433-002: NULL VM is a harmless operation */</comment>
	<if_stmt><if>if <condition>( <expr><call><name>JX9_VM_MISUSE</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>pValue</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Release the value */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_to_int()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_to_int</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_to_bool()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_to_bool</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjToBool</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_to_int64()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_int64</name></type> <name>jx9_value_to_int64</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjToInteger</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_to_double()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>double</name></type> <name>jx9_value_to_double</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_to_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>jx9_value_to_string</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>jx9MemObjToString</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pValue</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyBlobNullAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pValue</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pLen</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pValue</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pValue</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Return the empty string */</comment>
		<if_stmt><if>if<condition>( <expr><name>pLen</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="string">""</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_to_resource()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9_value_to_resource</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pValue</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_RES</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Not a resource, return NULL */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>pValue</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_compare()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_compare</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pLeft</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pRight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bStrict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pLeft</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pRight</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* TICKET 1433-24: NULL values is harmless operation */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the comparison */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjCmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pLeft</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pRight</name><operator>)</operator></expr></argument>, <argument><expr><name>bStrict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Comparison result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_int()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_int</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_int</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>, <argument><expr><name>iValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_int64()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_int64</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>iValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_int64</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>, <argument><expr><name>iValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_bool()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_bool</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iBool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_bool</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>, <argument><expr><name>iBool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_double()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_double</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_double</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_null()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_null</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Invalidate any prior representation and set the NULL flag */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_string</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_string</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_string_format()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_string_format</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>MEMOBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Format the given string */</comment>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_value()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_value</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>JX9_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pValue</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjStore</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_result_resource()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_result_resource</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>jx9_value_resource</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name></name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_new_scalar()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_value</name> <modifier>*</modifier></type> <name>jx9_context_new_scalar</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>jx9_new_scalar</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVal</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Record value address so it can be freed automatically
		 * when the calling function returns. 
		 */</comment>
		<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>pVal</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_new_array()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_value</name> <modifier>*</modifier></type> <name>jx9_context_new_array</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>jx9_new_array</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pVal</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Record value address so it can be freed automatically
		 * when the calling function returns. 
		 */</comment>
		<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sVar</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>pVal</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_release_value()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name></type> <name>jx9_context_release_value</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>jx9VmReleaseContextValue</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pCtx</name><operator>)</operator></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_alloc_chunk()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9_context_alloc_chunk</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ZeroChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>AutoRelease</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pChunk</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pChunk</name> <operator>=</operator> <call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pChunk</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>ZeroChunk</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Zero the memory chunk */</comment>
			<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pChunk</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>AutoRelease</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_aux_data</name></type> <name>sAux</name></decl>;</decl_stmt>
			<comment type="block">/* Track the chunk so that it can be released automatically 
			 * upon this context is destroyed.
			 */</comment>
			<expr_stmt><expr><name><name>sAux</name><operator>.</operator><name>pAuxData</name></name> <operator>=</operator> <name>pChunk</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>pChunk</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check if the given chunk address is registered in the call context
 * chunk container.
 * Return TRUE if registered.FALSE otherwise.
 * Refer to [jx9_context_realloc_chunk(), jx9_context_free_chunk()].
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_aux_data</name> <modifier>*</modifier></type> <name>ContextFindChunk</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_aux_data</name> <modifier>*</modifier></type><name>aAux</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't bother processing, the container is empty */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the lookup */</comment>
	<expr_stmt><expr><name>aAux</name> <operator>=</operator> <operator>(</operator><name>jx9_aux_data</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>sChunk</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><name>pAux</name> <operator>=</operator> <operator>&amp;</operator><name><name>aAux</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>pAuxData</name></name> <operator>==</operator> <name>pChunk</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Chunk found */</comment>
			<return>return <expr><name>pAux</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* No such allocated chunk */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_realloc_chunk()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9_context_realloc_chunk</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_aux_data</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>SyMemBackendRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pAux</name> <operator>=</operator> <call><name>ContextFindChunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pAux</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pAuxData</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_free_chunk()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name></type> <name>jx9_context_free_chunk</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_aux_data</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pChunk</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* TICKET-1433-93: NULL chunk is a harmless operation */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pAux</name> <operator>=</operator> <call><name>ContextFindChunk</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pAux</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Mark as destroyed */</comment>
		<expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pAuxData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyMemBackendFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_array_fetch()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>jx9_value</name> <modifier>*</modifier></type> <name>jx9_array_fetch</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap_node</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name></type> <name>skey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Make sure we are dealing with a valid hashmap */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pArray</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>nByte</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Convert the key to a jx9_value  */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInit</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Perform the lookup */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapLookup</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* No such entry */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the target value */</comment>
	<expr_stmt><expr><name>pValue</name> <operator>=</operator> <operator>(</operator><name>jx9_value</name> <operator>*</operator><operator>)</operator><call><name>SySetAt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pArray</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>aMemObj</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nValIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pValue</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_array_walk()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_array_walk</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xWalk</name>)<parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>xWalk</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Make sure we are dealing with a valid hashmap */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pArray</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Start the walk process */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapWalk</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, <argument><expr><name>xWalk</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>rc</name> <operator>!=</operator> <name>JX9_OK</name></expr> ?</condition><then> <expr><name>JX9_ABORT</name></expr> <comment type="block">/* User callback request an operation abort*/</comment> </then><else>: <expr><name>JX9_OK</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_array_add_elem()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_array_add_elem</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Make sure we are dealing with a valid hashmap */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pArray</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the insertion */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pKey</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pValue</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_array_add_strkey_elem()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_array_add_strkey_elem</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Make sure we are dealing with a valid hashmap */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pArray</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Perform the insertion */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SX_EMPTY_STR</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty key, assign an automatic index */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pValue</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name></type> <name>sKey</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9HashmapInsert</name><argument_list>(<argument><expr><operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pValue</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_array_count()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>unsigned</name> <name>int</name></type> <name>jx9_array_count</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
	<comment type="block">/* Make sure we are dealing with a valid hashmap */</comment>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pArray</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the internal representation of the hashmap */</comment>
	<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>pMap</name><operator>-&gt;</operator><name>nEntry</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_output()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_context_output</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sData</name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmOutputConsume</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_throw_error()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_context_throw_error</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>JX9_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>zErr</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmThrowError</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>, <argument><expr><name>iErr</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_throw_error_format()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_context_throw_error_format</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>zFormat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmThrowErrorAp</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>, <argument><expr><name>iErr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_random_num()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>unsigned</name> <name>int</name></type> <name>jx9_context_random_num</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>jx9VmRandomNum</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_random_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_context_random_string</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name>nBuflen</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>JX9_CORRUPT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9VmRandomString</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>nBuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_user_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9_context_user_data</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pFunc</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_push_aux_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_context_push_aux_data</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_aux_data</name></type> <name>sAux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>sAux</name><operator>.</operator><name>pAuxData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pFunc</name><operator>-&gt;</operator><name>aAux</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_peek_aux_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9_context_peek_aux_data</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_aux_data</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pAux</name> <operator>=</operator> <operator>(</operator><name>jx9_aux_data</name> <operator>*</operator><operator>)</operator><call><name>SySetPeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pFunc</name><operator>-&gt;</operator><name>aAux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>pAux</name></expr> ?</condition><then> <expr><name><name>pAux</name><operator>-&gt;</operator><name>pAuxData</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_pop_aux_data()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>void</name> <modifier>*</modifier></type> <name>jx9_context_pop_aux_data</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_aux_data</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pAux</name> <operator>=</operator> <operator>(</operator><name>jx9_aux_data</name> <operator>*</operator><operator>)</operator><call><name>SySetPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pFunc</name><operator>-&gt;</operator><name>aAux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>pAux</name></expr> ?</condition><then> <expr><name><name>pAux</name><operator>-&gt;</operator><name>pAuxData</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_context_result_buf_length()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>unsigned</name> <name>int</name></type> <name>jx9_context_result_buf_length</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pRet</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_function_name()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>jx9_function_name</name><parameter_list>(<parameter><decl><type><name>jx9_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_int()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_int</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Invalidate any prior representation */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <operator>(</operator><name>jx9_int64</name><operator>)</operator><name>iValue</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_int64()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_int64</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>jx9_int64</name></type> <name>iValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Invalidate any prior representation */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <name>iValue</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>MEMOBJ_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_bool()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_bool</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iBool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Invalidate any prior representation */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>iVal</name></name> <operator>=</operator> <ternary><condition><expr><name>iBool</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>MEMOBJ_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_null()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_null</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Invalidate any prior representation and set the NULL flag */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_double()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_double</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Invalidate any prior representation */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>rVal</name></name> <operator>=</operator> <operator>(</operator><name>jx9_real</name><operator>)</operator><name>Value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>MEMOBJ_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Try to get an integer representation also */</comment>
	<expr_stmt><expr><call><name>jx9MemObjTryInteger</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_string</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>MEMOBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>zString</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>nLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Compute length automatically */</comment>
			<expr_stmt><expr><name>nLen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>SyStrlen</name><argument_list>(<argument><expr><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>zString</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_string_format()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_string_format</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalidate any prior representation */</comment>
		<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>MEMOBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_reset_string_cursor()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_reset_string_cursor</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Reset the string cursor */</comment>
	<expr_stmt><expr><call><name>SyBlobReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_resource()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_resource</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Invalidate any prior representation */</comment>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Reflect the new type */</comment>
	<expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemObjSetType</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>MEMOBJ_RES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_release()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_release</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>jx9MemObjRelease</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_int()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_int</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_INT</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_float()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_float</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_REAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_bool()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_bool</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_BOOL</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_string()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_string</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_STRING</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_null()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_null</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_numeric()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_numeric</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjIsNumeric</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_callable()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_callable</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmIsCallable</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_scalar()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_scalar</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_SCALAR</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_json_array()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_json_array</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_json_object()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_json_object</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_hashmap</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_HASHMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pMap</name> <operator>=</operator> <operator>(</operator><name>jx9_hashmap</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pOther</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pMap</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>HASHMAP_JSON_OBJECT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_resource()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_resource</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>MEMOBJ_RES</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * [CAPIREF: jx9_value_is_empty()]
 * Please refer to the official documentation for function purpose and expected parameters.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>int</name></type> <name>jx9_value_is_empty</name><parameter_list>(<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9MemObjIsEmpty</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
