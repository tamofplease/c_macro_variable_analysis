<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/src/jx9_compile.c"><comment type="block">/*
 * Symisc JX9: A Highly Efficient Embeddable Scripting Engine Based on JSON.
 * Copyright (C) 2012-2013, Symisc Systems http://jx9.symisc.net/
 * Version 1.7.2
 * For information on licensing, redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES
 * please contact Symisc Systems via:
 *       legal@symisc.net
 *       licensing@symisc.net
 *       contact@symisc.net
 * or visit:
 *      http://jx9.symisc.net/
 */</comment>
 <comment type="block">/* $SymiscID: compile.c v1.7 FreeBSD 2012-12-11 21:46 stable &lt;chm@symisc.net&gt; $ */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JX9_AMALGAMATION</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jx9Int.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * This file implement a thread-safe and full-reentrant compiler for the JX9 engine.
 * That is, routines defined in this file takes a stream of tokens and output
 * JX9 bytecode instructions.
 */</comment>
<comment type="block">/* Forward declaration */</comment>
<typedef>typedef <type><name><name>struct</name> <name>LangConstruct</name></name></type> <name>LangConstruct</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>JumpFixup</name></name></type>     <name>JumpFixup</name>;</typedef>
<comment type="block">/* Block [i.e: set of statements] control flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOCK_LOOP</name></cpp:macro>        <cpp:value>0x001</cpp:value></cpp:define>    <comment type="block">/* Loop block [i.e: for, while, ...] */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOCK_PROTECTED</name></cpp:macro>   <cpp:value>0x002</cpp:value></cpp:define>    <comment type="block">/* Protected block */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOCK_COND</name></cpp:macro>        <cpp:value>0x004</cpp:value></cpp:define>    <comment type="block">/* Conditional block [i.e: if(condition){} ]*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOCK_FUNC</name></cpp:macro>        <cpp:value>0x008</cpp:value></cpp:define>    <comment type="block">/* Function body */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOCK_GLOBAL</name></cpp:macro>      <cpp:value>0x010</cpp:value></cpp:define>    <comment type="block">/* Global block (always set)*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOC_NESTED_FUNC</name></cpp:macro>  <cpp:value>0x020</cpp:value></cpp:define>    <comment type="block">/* Nested function body */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOCK_EXPR</name></cpp:macro>        <cpp:value>0x040</cpp:value></cpp:define>    <comment type="block">/* Expression */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOCK_STD</name></cpp:macro>         <cpp:value>0x080</cpp:value></cpp:define>    <comment type="block">/* Standard block */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_BLOCK_SWITCH</name></cpp:macro>      <cpp:value>0x100</cpp:value></cpp:define>    <comment type="block">/* Switch statement */</comment>
<comment type="block">/*
 * Compilation of some JX9 constructs such as if, for, while, the logical or
 * (||) and logical and (&amp;&amp;) operators in expressions requires the
 * generation of forward jumps.
 * Since the destination PC target of these jumps isn't known when the jumps
 * are emitted, we record each forward jump in an instance of the following
 * structure. Those jumps are fixed later when the jump destination is resolved.
 */</comment>
<struct>struct <name>JumpFixup</name>
<block>{
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nJumpType</name></decl>;</decl_stmt>     <comment type="block">/* Jump type. Either TRUE jump, FALSE jump or Unconditional jump */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nInstrIdx</name></decl>;</decl_stmt>     <comment type="block">/* Instruction index to fix later when the jump destination is resolved. */</comment>
}</block>;</struct>
<comment type="block">/*
 * Each language construct is represented by an instance
 * of the following structure.
 */</comment>
<struct>struct <name>LangConstruct</name>
<block>{
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nID</name></decl>;</decl_stmt>                     <comment type="block">/* Language construct ID [i.e: JX9_TKWRD_WHILE, JX9_TKWRD_FOR, JX9_TKWRD_IF...] */</comment>
	<decl_stmt><decl><type><name>ProcLangConstruct</name></type> <name>xConstruct</name></decl>;</decl_stmt>  <comment type="block">/* C function implementing the language construct */</comment>
}</block>;</struct>
<comment type="block">/* Compilation flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_COMPILE_SINGLE_STMT</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define> <comment type="block">/* Compile a single statement */</comment>
<comment type="block">/* Token stream synchronization macros */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_TOKEN_STREAM</name><parameter_list>(<parameter><type><name>GEN</name></type></parameter>, <parameter><type><name>START</name></type></parameter>, <parameter><type><name>END</name></type></parameter>)</parameter_list></cpp:macro>\
	<cpp:value>pTmp  = GEN-&gt;pEnd;\
	pGen-&gt;pIn  = START;\
	pGen-&gt;pEnd = END</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_TOKEN_STREAM</name><parameter_list>(<parameter><type><name>GEN</name></type></parameter>)</parameter_list></cpp:macro>\
	<cpp:value>if( GEN-&gt;pIn &lt; pTmp ){\
	    GEN-&gt;pIn++;\
	}\
	GEN-&gt;pEnd = pTmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_DELIMITER</name><parameter_list>(<parameter><type><name>GEN</name></type></parameter>, <parameter><type><name>START</name></type></parameter>, <parameter><type><name>END</name></type></parameter>)</parameter_list></cpp:macro>\
	<cpp:value>pTmpIn  = GEN-&gt;pIn;\
	pTmpEnd = GEN-&gt;pEnd;\
	GEN-&gt;pIn = START;\
	GEN-&gt;pEnd = END</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_SWAP_DELIMITER</name><parameter_list>(<parameter><type><name>GEN</name></type></parameter>)</parameter_list></cpp:macro>\
	<cpp:value>GEN-&gt;pIn  = pTmpIn;\
	GEN-&gt;pEnd = pTmpEnd</cpp:value></cpp:define>
<comment type="block">/* Flags related to expression compilation */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPR_FLAG_LOAD_IDX_STORE</name></cpp:macro>    <cpp:value>0x001</cpp:value></cpp:define> <comment type="block">/* Set the iP2 flag when dealing with the LOAD_IDX instruction */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPR_FLAG_RDONLY_LOAD</name></cpp:macro>       <cpp:value>0x002</cpp:value></cpp:define> <comment type="block">/* Read-only load, refer to the 'JX9_OP_LOAD' VM instruction for more information */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPR_FLAG_COMMA_STATEMENT</name></cpp:macro>   <cpp:value>0x004</cpp:value></cpp:define> <comment type="block">/* Treat comma expression as a single statement (used by object attributes) */</comment>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileExpr</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>,        <comment type="block">/* Control flags */</comment>
	<parameter><function_decl><type><name>sxi32</name></type> (<modifier>*</modifier><name>xTreeValidator</name>)<parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jx9_expr_node</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> <comment type="block">/* Node validator callback.NULL otherwise */</comment>
	)</parameter_list>;</function_decl>

<comment type="block">/*
 * Recover from a compile-time error. In other words synchronize
 * the token stream cursor with the first semi-colon seen.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9ErrorRecover</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Synchronize with the next-semi-colon and avoid compiling this erroneous statement */</comment>
	<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name> <comment type="block">/*';'*/</comment><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check if the given identifier name is reserved or not.
 * Return TRUE if reserved.FALSE otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>GenStateIsReservedID</name><parameter_list>(<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>TRUE</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>TRUE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><name>TRUE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Not a reserved constant */</comment>
	<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check if a given token value is installed in the literal table.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateFindLiteral</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SyString</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>, <parameter><decl><type><name>sxu32</name> <modifier>*</modifier></type><name>pIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>hLiteral</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>pValue</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_NOTFOUND</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pIdx</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Install a given constant index in the literal table.
 * In order to be installed, the jx9_value must be of type string.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateInstallLiteral</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>hLiteral</name></name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sBlob</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SX_INT_TO_PTR</name><argument_list>(<argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Generate a fatal error.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateOutOfMem</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>,<argument><expr><name>E_ERROR</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Fatal, Jx9 compiler is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Abort compilation immediately */</comment>
	<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Fetch a block that correspond to the given criteria from the stack of
 * compiled blocks.
 * Return a pointer to that block on success. NULL otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>GenBlock</name> <modifier>*</modifier></type> <name>GenStateFetchBlock</name><parameter_list>(<parameter><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pCurrent</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iBlockType</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><name>pCurrent</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pBlock</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>iBlockType</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iCount</name><operator>--</operator></expr>;</expr_stmt> <comment type="block">/* Decrement nesting level */</comment>
			<if_stmt><if>if<condition>( <expr><name>iCount</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Block meet with the desired criteria */</comment>
				<return>return <expr><name>pBlock</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the upper block */</comment>
		<expr_stmt><expr><name>pBlock</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pParent</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pBlock</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>GEN_BLOCK_PROTECTED</name><operator>|</operator><name>GEN_BLOCK_FUNC</name><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content>
			<comment type="block">/* Forbidden */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* No such block */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Initialize a freshly allocated block instance.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>GenStateInitBlock</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>,    <comment type="block">/* Target block */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iType</name></decl></parameter>,         <comment type="block">/* Block type [i.e: loop, conditional, function body, etc.]*/</comment>
	<parameter><decl><type><name>sxu32</name></type> <name>nFirstInstr</name></decl></parameter>,   <comment type="block">/* First instruction to compile */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>      <comment type="block">/* Upper layer private data */</comment>
	)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Initialize block fields */</comment>
	<expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nFirstInstr</name></name> <operator>=</operator> <name>nFirstInstr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pUserData</name></name>   <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pGen</name></name>        <operator>=</operator> <name>pGen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>iFlags</name></name>      <operator>=</operator> <name>iType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pParent</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>bPostContinue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>aJumpFix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JumpFixup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>aPostContFix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JumpFixup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Allocate a new block instance.
 * Return SXRET_OK and write a pointer to the new instantiated block
 * on success.Otherwise generate a compile-time error and abort
 * processing on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateEnterBlock</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,  <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iType</name></decl></parameter>,          <comment type="block">/* Block type [i.e: loop, conditional, function body, etc.]*/</comment>
	<parameter><decl><type><name>sxu32</name></type> <name>nFirstInstr</name></decl></parameter>,    <comment type="block">/* First instruction to compile */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,      <comment type="block">/* Upper layer private data */</comment>
	<parameter><decl><type><name>GenBlock</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBlock</name></decl></parameter>    <comment type="block">/* OUT: instantiated block */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl>;</decl_stmt>
	<comment type="block">/* Allocate a new block instance */</comment>
	<expr_stmt><expr><name>pBlock</name> <operator>=</operator> <operator>(</operator><name>GenBlock</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GenBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pBlock</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* If the supplied memory subsystem is so sick that we are unable to allocate
		 * a tiny chunk of memory, there is no much we can do here.
		 */</comment>
		<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GenBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GenStateInitBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>iType</name></expr></argument>, <argument><expr><name>nFirstInstr</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Link to the parent block */</comment>
	<expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pParent</name></name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name></expr>;</expr_stmt>
	<comment type="block">/* Mark as the current block */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>ppBlock</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Write a pointer to the new instance */</comment>
		<expr_stmt><expr><operator>*</operator><name>ppBlock</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release block fields without freeing the whole instance.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>GenStateReleaseBlock</name><parameter_list>(<parameter><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>aPostContFix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>aJumpFix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Release a block.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>GenStateFreeBlock</name><parameter_list>(<parameter><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>pGen</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GenStateReleaseBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pBlock</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Free the instance */</comment>
	<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * POP and release a block from the stack of compiled blocks.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateLeaveBlock</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>GenBlock</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBlock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>pBlock</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* No more block to pop */</comment>
		<return>return <expr><name>SXERR_EMPTY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the upper block */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pParent</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>ppBlock</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Write a pointer to the popped block */</comment>
		<expr_stmt><expr><operator>*</operator><name>ppBlock</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Safely release the block */</comment>
		<expr_stmt><expr><call><name>GenStateFreeBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pBlock</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Emit a forward jump.
 * Notes on forward jumps
 *  Compilation of some JX9 constructs such as if, for, while and the logical or
 *  (||) and logical and (&amp;&amp;) operators in expressions requires the
 *  generation of forward jumps.
 *  Since the destination PC target of these jumps isn't known when the jumps
 *  are emitted, we record each forward jump in an instance of the following
 *  structure. Those jumps are fixed later when the jump destination is resolved.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateNewJumpFixup</name><parameter_list>(<parameter><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>nJumpType</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nInstrIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JumpFixup</name></type> <name>sJumpFix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Init the JumpFixup structure */</comment>
	<expr_stmt><expr><name><name>sJumpFix</name><operator>.</operator><name>nJumpType</name></name> <operator>=</operator> <name>nJumpType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sJumpFix</name><operator>.</operator><name>nInstrIdx</name></name> <operator>=</operator> <name>nInstrIdx</name></expr>;</expr_stmt>
	<comment type="block">/* Insert in the jump fixup table */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>aJumpFix</name></name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sJumpFix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Fix a forward jump now the jump destination is resolved.
 * Return the total number of fixed jumps.
 * Notes on forward jumps:
 *  Compilation of some JX9 constructs such as if, for, while and the logical or
 *  (||) and logical and (&amp;&amp;) operators in expressions requires the
 *  generation of forward jumps.
 *  Since the destination PC target of these jumps isn't known when the jumps
 *  are emitted, we record each forward jump in an instance of the following
 *  structure.Those jumps are fixed later when the jump destination is resolved.
 */</comment>
<function><type><specifier>static</specifier> <name>sxu32</name></type> <name>GenStateFixJumps</name><parameter_list>(<parameter><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>nJumpType</name></decl></parameter>, <parameter><decl><type><name>sxu32</name></type> <name>nJumpDest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JumpFixup</name> <modifier>*</modifier></type><name>aFix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmInstr</name> <modifier>*</modifier></type><name>pInstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nFixed</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the jump fixup table */</comment>
	<expr_stmt><expr><name>aFix</name> <operator>=</operator> <operator>(</operator><name>JumpFixup</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>aJumpFix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fix the desired jumps */</comment>
	<for>for<control>( <init><expr><name>nFixed</name> <operator>=</operator> <name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>aJumpFix</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>aFix</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nJumpType</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Already fixed */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>nJumpType</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>aFix</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nJumpType</name> <operator>!=</operator> <name>nJumpType</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Not of our interest */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the instruction to fix */</comment>
		<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmGetInstr</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name><name>aFix</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nInstrIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pInstr</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>=</operator> <name>nJumpDest</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nFixed</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* Mark as fixed */</comment>
			<expr_stmt><expr><name><name>aFix</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nJumpType</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Total number of fixed jumps */</comment>
	<return>return <expr><name>nFixed</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Reserve a room for a numeric constant [i.e: 64-bit integer or real number]
 * in the constant table.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_value</name> <modifier>*</modifier></type> <name>GenStateInstallNumLiteral</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>sxu32</name> <modifier>*</modifier></type><name>pIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* cc warning */</comment>
	<comment type="block">/* Reserve a new constant */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pIdx</name> <operator>=</operator> <name>nIdx</name></expr>;</expr_stmt>
	<comment type="block">/* TODO(chems): Create a numeric table (64bit int keys) same as 
	 * the constant string iterals table [optimization purposes].
	 */</comment>
	<return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a numeric [i.e: integer or real] literal.
 * Notes on the integer type.
 *  According to the JX9 language reference manual
 *  Integers can be specified in decimal (base 10), hexadecimal (base 16), octal (base 8)
 *  or binary (base 2) notation, optionally preceded by a sign (- or +). 
 *  To use octal notation, precede the number with a 0 (zero). To use hexadecimal 
 *  notation precede the number with 0x. To use binary notation precede the number with 0b.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileNumLiteral</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pToken</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* Raw token */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_INTEGER</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxi64</name></type> <name>iValue</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>iValue</name> <operator>=</operator> <call><name>jx9TokenValueToInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>GenStateInstallNumLiteral</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjInitFromInt</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>iValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Real number */</comment>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
		<comment type="block">/* Reserve a new constant */</comment>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9MemObjToReal</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Emit the load constant instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a nowdoc string.
 * According to the JX9 language reference manual:
 *
 *  Nowdocs are to single-quoted strings what heredocs are to double-quoted strings.
 *  A nowdoc is specified similarly to a heredoc, but no parsing is done inside a nowdoc.
 *  The construct is ideal for embedding JX9 code or other large blocks of text without the
 *  need for escaping. It shares some features in common with the SGML &lt;![CDATA[ ]]&gt; 
 *  construct, in that it declares a block of text which is not for parsing.
 *  A nowdoc is identified with the same &lt;&lt;&lt; sequence used for heredocs, but the identifier
 *  which follows is enclosed in single quotes, e.g. &lt;&lt;&lt;'EOT'. All the rules for heredoc 
 *  identifiers also apply to nowdoc identifiers, especially those regarding the appearance
 *  of the closing identifier. 
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileNowdoc</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pStr</name> <init>= <expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* Constant string literal */</comment>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Prevent compiler warning */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, load NULL */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reserve a new constant */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"JX9 engine is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* No processing is done here, simply a memcpy() operation */</comment>
	<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the load constant instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a single quoted string.
 * According to the JX9 language reference manual:
 *
 *   The simplest way to specify a string is to enclose it in single quotes (the character ' ).
 *   To specify a literal single quote, escape it with a backslash (\). To specify a literal
 *   backslash, double it (\\). All other instances of backslash will be treated as a literal
 *   backslash: this means that the other escape sequences you might be used to, such as \r 
 *   or \n, will be output literally as specified rather than having any special meaning.
 * 
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileSimpleString</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pStr</name> <init>= <expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* Constant string literal */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zCur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Prevent compiler warning */</comment>
	<comment type="block">/* Delimit the string */</comment>
	<expr_stmt><expr><name>zIn</name>  <operator>=</operator> <name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, load NULL */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>==</operator> <call><name>GenStateFindLiteral</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Already processed, emit the load constant instruction
		 * and return.
		 */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reserve a new constant */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"JX9 engine is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the node */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* End of input */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;</operator> <name>zCur</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Append raw contents*/</comment>
			<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>zCur</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zIn</name><operator>-</operator><name>zCur</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* A literal backslash */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* A single quote */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* verbatim copy */</comment>
				<expr_stmt><expr><name>zIn</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>zIn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Advance the stream cursor */</comment>
		<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Emit the load constant instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Install in the literal table */</comment>
		<expr_stmt><expr><call><name>GenStateInstallLiteral</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Process variable expression [i.e: "$var", "${var}"] embedded in a double quoted/heredoc string.
 * According to the JX9 language reference manual
 *   When a string is specified in double quotes or with heredoc, variables are parsed within it.
 *  There are two types of syntax: a simple one and a complex one. The simple syntax is the most
 *  common and convenient. It provides a way to embed a variable, an array value, or an object
 *  property in a string with a minimum of effort.
 *  Simple syntax
 *   If a dollar sign ($) is encountered, the parser will greedily take as many tokens as possible
 *   to form a valid variable name. Enclose the variable name in curly braces to explicitly specify
 *   the end of the name.
 *   Similarly, an array index or an object property can be parsed. With array indices, the closing
 *   square bracket (]) marks the end of the index. The same rules apply to object properties
 *   as to simple variables. 
 *  Complex (curly) syntax
 *   This isn't called complex because the syntax is complex, but because it allows for the use 
 *   of complex expressions.
 *   Any scalar variable, array element or object property with a string representation can be
 *   included via this syntax. Simply write the expression the same way as it would appear outside
 *   the string, and then wrap it in { and }. Since { can not be escaped, this syntax will only
 *   be recognised when the $ immediately follows the {. Use {\$ to get a literal {$
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateProcessStringExpression</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl></parameter>,     <comment type="block">/* Raw expression */</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>     <comment type="block">/* End of the expression */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmpIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTmpEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SySet</name></type> <name>sToken</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Initialize the token set */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyToken</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Preallocate some slots */</comment>
	<expr_stmt><expr><call><name>SySetAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Tokenize the text */</comment>
	<expr_stmt><expr><call><name>jx9Tokenize</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>,<argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zEnd</name><operator>-</operator><name>zIn</name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Swap delimiter */</comment>
	<expr_stmt><expr><name>pTmpIn</name>  <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pTmpEnd</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <operator>(</operator><name>SyToken</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><index>[<expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Compile the expression */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Restore token stream */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name>  <operator>=</operator> <name>pTmpIn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmpEnd</name></expr>;</expr_stmt>
	<comment type="block">/* Release the token set */</comment>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compilation result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Reserve a new constant for a double quoted/heredoc string.
 */</comment>
<function><type><specifier>static</specifier> <name>jx9_value</name> <modifier>*</modifier></type> <name>GenStateNewStrObj</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name> <modifier>*</modifier></type><name>pCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pConstObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Reserve a new constant */</comment>
	<expr_stmt><expr><name>pConstObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConstObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pCount</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pConstObj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the load constant instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pConstObj</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a double quoted/heredoc string.
 * According to the JX9 language reference manual
 * Heredoc
 *  A third way to delimit strings is the heredoc syntax: &lt;&lt;&lt;. After this operator, an identifier
 *  is provided, then a newline. The string itself follows, and then the same identifier again
 *  to close the quotation.
 *  The closing identifier must begin in the first column of the line. Also, the identifier must
 *  follow the same naming rules as any other label in JX9: it must contain only alphanumeric
 *  characters and underscores, and must start with a non-digit character or underscore.
 *  Warning
 *  It is very important to note that the line with the closing identifier must contain
 *  no other characters, except possibly a semicolon (;). That means especially that the identifier
 *  may not be indented, and there may not be any spaces or tabs before or after the semicolon.
 *  It's also important to realize that the first character before the closing identifier must
 *  be a newline as defined by the local operating system. This is \n on UNIX systems, including Mac OS X.
 *  The closing delimiter (possibly followed by a semicolon) must also be followed by a newline.
 *  If this rule is broken and the closing identifier is not "clean", it will not be considered a closing
 *  identifier, and JX9 will continue looking for one. If a proper closing identifier is not found before
 *  the end of the current file, a parse error will result at the last line.
 *  Heredocs can not be used for initializing object properties. 
 * Double quoted
 *  If the string is enclosed in double-quotes ("), JX9 will interpret more escape sequences for special characters:
 *  Escaped characters Sequence 	Meaning
 *  \n linefeed (LF or 0x0A (10) in ASCII)
 *  \r carriage return (CR or 0x0D (13) in ASCII)
 *  \t horizontal tab (HT or 0x09 (9) in ASCII)
 *  \v vertical tab (VT or 0x0B (11) in ASCII)
 *  \f form feed (FF or 0x0C (12) in ASCII)
 *  \\ backslash
 *  \$ dollar sign
 *  \" double-quote
 *  \[0-7]{1, 3} 	the sequence of characters matching the regular expression is a character in octal notation
 *  \x[0-9A-Fa-f]{1, 2} 	the sequence of characters matching the regular expression is a character in hexadecimal notation
 * As in single quoted strings, escaping any other character will result in the backslash being printed too.
 * The most important feature of double-quoted strings is the fact that variable names will be expanded.
 * See string parsing for details.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileString</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pStr</name> <init>= <expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* Raw token value */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zCur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iCons</name></decl>;</decl_stmt>	
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Delimit the string */</comment>
	<expr_stmt><expr><name>zIn</name>  <operator>=</operator> <name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>zEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty string, load NULL */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>zCur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Compile the node */</comment>
	<expr_stmt><expr><name>iCons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<expr_stmt><expr><name>zCur</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>  )</condition><block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xc0</literal> <operator>||</operator> <call><name>SyisAlpha</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content>
					<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;</operator> <name>zCur</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>GenStateNewStrObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>zCur</name></expr></argument>, <argument><expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zIn</name><operator>-</operator><name>zCur</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>GenStateNewStrObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
                    <return>return <expr><name>SXERR_ABORT</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>GenStateNewStrObj</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <comment type="block">/* size of conversion */</comment>
			<switch>switch<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
			<case>case <expr><literal type="char">'$'</literal></expr>:</case>
				<comment type="block">/* Dollar sign */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
				<comment type="block">/* A literal backslash */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case>
				<comment type="block">/* The "alert" character (BEL)[ctrl+g] ASCII code 7 */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\a"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'b'</literal></expr>:</case>
				<comment type="block">/* Backspace (BS)[ctrl+h] ASCII code 8 */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\b"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
				<comment type="block">/* Form-feed (FF)[ctrl+l] ASCII code 12 */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\f"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'n'</literal></expr>:</case>
				<comment type="block">/* Line feed(new line) (LF)[ctrl+j] ASCII code 10 */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'r'</literal></expr>:</case>
				<comment type="block">/* Carriage return (CR)[ctrl+m] ASCII code 13 */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case>
				<comment type="block">/* Horizontal tab (HT)[ctrl+i] ASCII code 9 */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'v'</literal></expr>:</case>
				<comment type="block">/* Vertical tab(VT)[ctrl+k] ASCII code 11 */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\v"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'\''</literal></expr>:</case>
				<comment type="block">/* Single quote */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'"'</literal></expr>:</case>
				<comment type="block">/* Double quote */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case>
				<comment type="block">/* NUL byte */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'x'</literal></expr>:</case>
				<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisHex</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
					<comment type="block">/* Hex digit */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>SyHexToint</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>c</name> <operator>+=</operator>  <call><name>SyHexToint</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* Output char */</comment>
					<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>n</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<comment type="block">/* Output literal character  */</comment>
					<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'o'</literal></expr>:</case>
				<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Octal digit stream */</comment>
					<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
					<for>for<control>( <init><expr><name>zPtr</name> <operator>=</operator> <name>zIn</name></expr> ;</init> <condition><expr><name>zPtr</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr> ;</condition> <incr><expr><name>zPtr</name><operator>++</operator></expr></incr> )</control><block>{<block_content>
						<if_stmt><if>if<condition>( <expr><name>zPtr</name> <operator>&gt;=</operator> <name>zEnd</name> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xc0</literal> <operator>||</operator> <operator>!</operator><call><name>SyisDigit</name><argument_list>(<argument><expr><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">7</literal></expr> )</condition><block>{<block_content>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name><name>zPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
					</block_content>}</block></for>
					<if_stmt><if>if <condition>( <expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><name>zPtr</name><operator>-</operator><name>zIn</name><operator>)</operator></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<comment type="block">/* Output literal character  */</comment>
					<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="string">"o"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<comment type="block">/* Output without a slash */</comment>
				<expr_stmt><expr><call><name>jx9MemObjStringAppend</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>zIn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<comment type="block">/* Advance the stream cursor */</comment>
			<expr_stmt><expr><name>zIn</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Curly syntax */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zExpr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>sxi32</name></type> <name>iNest</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>zExpr</name> <operator>=</operator> <name>zIn</name></expr>;</expr_stmt>
			<comment type="block">/* Synchronize with the next closing curly braces */</comment>
			<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Increment nesting level */</comment>
					<expr_stmt><expr><name>iNest</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Decrement nesting level */</comment>
					<expr_stmt><expr><name>iNest</name><operator>--</operator></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>iNest</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="block">/* Process the expression */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateProcessStringExpression</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,<argument><expr><name>zExpr</name></expr></argument>,<argument><expr><name>zIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><operator>++</operator><name>iCons</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Jump the trailing curly */</comment>
				<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Simple syntax */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zExpr</name> <init>= <expr><name>zIn</name></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Assemble variable name */</comment>
			<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
				<comment type="block">/* Jump leading dollars */</comment>
				<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
				<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
					<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>SyisAlphaNum</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>)</operator></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xc0</literal></expr> )</condition><block>{<block_content>
						<comment type="block">/* UTF-8 stream */</comment>
						<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
						<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>
					<break>break;</break>
				</block_content>}</block></for>
				<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&gt;=</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr> )</condition><block>{<block_content>
					<decl_stmt><decl><type><name>sxi32</name></type> <name>iSquare</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
					<while>while<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
						<if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name>iSquare</name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr> )</condition><block>{<block_content>
							<expr_stmt><expr><name>iSquare</name><operator>--</operator></expr>;</expr_stmt>
							<if_stmt><if>if<condition>( <expr><name>iSquare</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
								<break>break;</break>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<if_stmt><if>if<condition>( <expr><name>zIn</name> <operator>&lt;</operator> <name>zEnd</name></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<break>break;</break>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
					<comment type="block">/* Member access operator '.' */</comment>
					<expr_stmt><expr><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<break>break;</break>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>
			<comment type="block">/* Process the expression */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateProcessStringExpression</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,<argument><expr><name>zExpr</name></expr></argument>, <argument><expr><name>zIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><operator>++</operator><name>iCons</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/* Invalidate the previously used constant */</comment>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for><comment type="block">/*for(;;)*/</comment>
	<if_stmt><if>if<condition>( <expr><name>iCons</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Concatenate all compiled constants */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_CAT</name></expr></argument>, <argument><expr><name>iCons</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a double quoted string.
 *  See the block-comment above for more information.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileString</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileString</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<comment type="block">/* Compilation result */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a literal which is an identifier(name) for simple values.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileLiteral</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pToken</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pStr</name></decl>;</decl_stmt>	
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
	<comment type="block">/* Extract token value */</comment>
	<expr_stmt><expr><name>pStr</name> <operator>=</operator> <operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr>;</expr_stmt>
	<comment type="block">/* Deal with the reserved literals [i.e: null, false, true, ...] first */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* NULL constant are always indexed at 0 */</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"TRUE"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* TRUE constant are always indexed at 1 */</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"FALSE"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
		<call><name>SyStrnicmp</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"FALSE"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* FALSE constant are always indexed at 2 */</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"__LINE__"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
		<call><name>SyMemcmp</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"__LINE__"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"__LINE__"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* TICKET 1433-004: __LINE__ constant must be resolved at compile time, not run time */</comment>
			<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
				<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>jx9MemObjInitFromInt</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Emit the load constant instruction */</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nByte</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"__FUNCTION__"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
		<call><name>SyMemcmp</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><literal type="string">"__FUNCTION__"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"__FUNCTION__"</literal></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name></expr></init></decl>;</decl_stmt>
			<comment type="block">/* TICKET 1433-004: __FUNCTION__/__METHOD__ constants must be resolved at compile time, not run time */</comment>
			<while>while<condition>( <expr><name>pBlock</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>GEN_BLOCK_FUNC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Point to the upper block */</comment>
				<expr_stmt><expr><name>pBlock</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pParent</name></name></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if<condition>( <expr><name>pBlock</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Called in the global scope, load NULL */</comment>
				<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<comment type="block">/* Extract the target function/method */</comment>
				<decl_stmt><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pFunc</name> <init>= <expr><operator>(</operator><name>jx9_vm_func</name> <operator>*</operator><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>pUserData</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>sName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Emit the load constant instruction */</comment>
				<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Query literal table */</comment>
	<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>GenStateFindLiteral</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
		<comment type="block">/* Unknown literal, install it in the literal table */</comment>
		<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GenStateInstallLiteral</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the load constant instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><name>JX9_OP_LOADC</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile an array entry whether it is a key or a value.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileJSONEntry</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>,        <comment type="block">/* Token stream */</comment>
	<parameter><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pEnd</name></decl></parameter>,       <comment type="block">/* End of the token stream */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>,        <comment type="block">/* Compilation flags */</comment>
	<parameter><function_decl><type><name>sxi32</name></type> (<modifier>*</modifier><name>xValidator</name>)<parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>jx9_expr_node</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> <comment type="block">/* Expression tree validator callback */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmpIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTmpEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Swap token stream */</comment>
	<expr_stmt><expr><call><name>SWAP_DELIMITER</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the expression*/</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>, <argument><expr><name>xValidator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Restore token stream */</comment>
	<expr_stmt><expr><call><name>RE_SWAP_DELIMITER</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* 
 * Compile a Jx9 JSON Array.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileJsonArray</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nPair</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the open square bracket '['*/</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<comment type="block">/* Jump leading commas */</comment>
		<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COMMA</name><operator>)</operator></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>pCur</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>jx9GetNextExpr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<comment type="block">/* No more entry to process */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Compile entry */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileJSONEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,<argument><expr><name>pCur</name></expr></argument>,<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>,<argument><expr><name>EXPR_FLAG_RDONLY_LOAD</name></expr></argument><comment type="block">/*Do not create the variable if inexistant*/</comment>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nPair</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Emit the load map instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOAD_MAP</name></expr></argument>,<argument><expr><name>nPair</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Node validator for a given JSON key.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateJSONObjectKeyNodeValidator</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>jx9_expr_node</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pRoot</name><operator>-&gt;</operator><name>xCode</name></name> <operator>!=</operator> <name>jx9CompileVariable</name> <operator>&amp;&amp;</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>xCode</name></name> <operator>!=</operator> <name>jx9CompileString</name> 
		<operator>&amp;&amp;</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>xCode</name></name> <operator>!=</operator> <name>jx9CompileSimpleString</name> <operator>&amp;&amp;</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>xCode</name></name> <operator>!=</operator> <name>jx9CompileLiteral</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Unexpected expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>pStart</name></name></expr>?</condition><then> <expr><name><name>pRoot</name><operator>-&gt;</operator><name>pStart</name><operator>-&gt;</operator><name>nLine</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, 
			<argument><expr><literal type="string">"JSON Object: Unexpected expression, key must be of type string, literal or simple variable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_INVALID</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* 
 * Compile a Jx9 JSON Object
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileJsonObject</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pKey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nPair</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the open querly braces '{'*/</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<comment type="block">/* Jump leading commas */</comment>
		<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COMMA</name><operator>)</operator></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>pCur</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>jx9GetNextExpr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<comment type="block">/* No more entry to process */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Compile the key */</comment>
		<expr_stmt><expr><name>pKey</name> <operator>=</operator> <name>pCur</name></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>pCur</name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COLON</name></expr> <comment type="block">/*':'*/</comment>  )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pCur</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_EMPTY</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COLON</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ABORT</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"JSON Object: Missing colon string \":\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
                <return>return <expr><name>SXERR_ABORT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>SXRET_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>( <expr><name>pCur</name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>pCur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Missing value */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"JSON Object: Missing entry value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
					<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<return>return <expr><name>SXRET_OK</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Compile the expression holding the key */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileJSONEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>,
				<argument><expr><name>EXPR_FLAG_RDONLY_LOAD</name></expr></argument>                <comment type="block">/* Do not create the variable if inexistant */</comment>, 
				<argument><expr><name>GenStateJSONObjectKeyNodeValidator</name></expr></argument>   <comment type="block">/* Node validator callback */</comment>
				)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pCur</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the double colon ':'  */</comment>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>pKey</name> <operator>==</operator> <name>pCur</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Key is omitted, emit an error */</comment>
			<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,<argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"JSON Object: Missing entry key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pCur</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the double colon ':'  */</comment>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Reset back the cursor and point to the entry value */</comment>
			<expr_stmt><expr><name>pCur</name> <operator>=</operator> <name>pKey</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/* Compile indice value */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileJSONEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pCur</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name>EXPR_FLAG_RDONLY_LOAD</name></expr></argument><comment type="block">/*Do not create the variable if inexistant*/</comment>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nPair</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Emit the load map instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOAD_MAP</name></expr></argument>, <argument><expr><name>nPair</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a function [i.e: print, exit(), include(), ...] which is a langauge
 * construct.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileLangConstruct</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nKeyID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Name of the language construct [i.e: print, die...]*/</comment>
	<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nKeyID</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the language construct keyword */</comment>
	<if_stmt><if>if<condition>( <expr><name>nKeyID</name> <operator>==</operator> <name>JX9_TKWRD_PRINT</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Compile arguments one after one */</comment>
		<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* Boolean true index */</comment>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>( <expr><name>SXRET_OK</name> <operator>==</operator> <call><name>jx9GetNextExpr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name>pTmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNext</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name>pNext</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>EXPR_FLAG_RDONLY_LOAD</name></expr></argument><comment type="block">/* Do not create variable if inexistant */</comment>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
					<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Ticket 1433-008: Optimization #1: Consume input directly 
					 * without the overhead of a function call.
					 * This is a very powerful optimization that improve
					 * performance greatly.
					 */</comment>
					<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>,<argument><expr><name>JX9_OP_CONSUME</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Jump trailing commas */</comment>
			<while>while<condition>( <expr><name>pNext</name> <operator>&lt;</operator> <name>pTmp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pNext</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COMMA</name><operator>)</operator></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>pNext</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<comment type="block">/* Restore token stream */</comment>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>	
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>sxi32</name></type> <name>nArg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>EXPR_FLAG_RDONLY_LOAD</name></expr></argument><comment type="block">/* Do not create variable if inexistant */</comment>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>nArg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>SXRET_OK</name> <operator>!=</operator> <call><name>GenStateFindLiteral</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
			<comment type="block">/* Emit the call instruction */</comment>
			<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
				<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Install in the literal table */</comment>
			<expr_stmt><expr><call><name>GenStateInstallLiteral</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Emit the call instruction */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_CALL</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a node holding a variable declaration.
 * According to the J9X language reference
 *  Variables in JX9 are represented by a dollar sign followed by the name of the variable.
 *  The variable name is case-sensitive.
 *  Variable names follow the same rules as other labels in JX9. A valid variable name
 *  starts with a letter, underscore or any UTF-8 stream, followed by any number of letters
 *  numbers, or underscores.
 *  By default, variables are always assigned by value unless the target value is a JSON
 *  array or a JSON object which is passed by reference.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileVariable</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyHashEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iP1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the dollar sign '$' */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_ID</name><operator>|</operator><name>JX9_TK_KEYWORD</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid variable name */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Invalid variable name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract variable name */</comment>
	<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr>;</expr_stmt>
	<comment type="block">/* Advance the stream cursor */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEntry</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Duplicate name */</comment>
		<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>SyMemBackendStrDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zName</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Install in the hashtable */</comment>
		<expr_stmt><expr><call><name>SyHashInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Name already available */</comment>
		<expr_stmt><expr><name>zName</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>p3</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>zName</name></expr>;</expr_stmt>	
	<expr_stmt><expr><name>iP1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>iCompileFlag</name> <operator>&amp;</operator> <name>EXPR_FLAG_RDONLY_LOAD</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name>iCompileFlag</name> <operator>&amp;</operator> <name>EXPR_FLAG_LOAD_IDX_STORE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Read-only load.In other words do not create the variable if inexistant */</comment>
			<expr_stmt><expr><name>iP1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the load instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOAD</name></expr></argument>, <argument><expr><name>iP1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileFunc</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>,<parameter><decl><type><name>jx9_vm_func</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFunc</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Compile an annoynmous function or a closure.
 * According to the JX9 language reference
 *  Anonymous functions, also known as closures, allow the creation of functions
 *  which have no specified name. They are most useful as the value of callback
 *  parameters, but they have many other uses. Closures can also be used as
 *  the values of variables; Assigning a closure to a variable uses the same
 *  syntax as any other assignment, including the trailing semicolon:
 *  Example Anonymous function variable assignment example
 * $greet = function($name)
 * {
 *    printf("Hello %s\r\n", $name);
 * };
 * $greet('World');
 * $greet('JX9');
 * Note that the implementation of annoynmous function and closure under
 * JX9 is completely different from the one used by the  engine.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileAnnonFunc</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iCompileFlag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pAnnonFunc</name></decl>;</decl_stmt> <comment type="block">/* Annonymous function body */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>zName</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>         <comment type="block">/* Unique lambda name */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>iCnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* There is no worry about thread-safety here, because only
							  * one thread is allowed to compile the script.
						      */</comment>
	<decl_stmt><decl><type><name>jx9_value</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name></type> <name>sName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nIdx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the 'function' keyword */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_ID</name><operator>|</operator><name>JX9_TK_KEYWORD</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Reserve a constant for the lambda */</comment>
	<expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>jx9VmReserveConstObj</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pObj</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SXUNUSED</name><argument_list>(<argument><expr><name>iCompileFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Generate a unique name */</comment>
	<expr_stmt><expr><name>nLen</name> <operator>=</operator> <call><name>SyBufferFormat</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[lambda_%d]"</literal></expr></argument>, <argument><expr><name>iCnt</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make sure the generated name is unique */</comment>
	<while>while<condition>( <expr><call><name>SyHashGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>hFunction</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nLen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>nLen</name> <operator>=</operator> <call><name>SyBufferFormat</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[lambda_%d]"</literal></expr></argument>, <argument><expr><name>iCnt</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9MemObjInitFromString</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the lambda body */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileFunc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>pAnnonFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the load constant instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_LOADC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Node successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the 'continue' statement.
 * According to the JX9 language reference
 *  continue is used within looping structures to skip the rest of the current loop iteration
 *  and continue execution at the condition evaluation and then the beginning of the next
 *  iteration.
 *  Note: Note that in JX9 the switch statement is considered a looping structure for
 *  the purposes of continue. 
 *  continue accepts an optional numeric argument which tells it how many levels
 *  of enclosing loops it should skip to the end of.
 *  Note:
 *   continue 0; and continue 1; is the same as running continue;. 
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileContinue</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pLoop</name></decl>;</decl_stmt> <comment type="block">/* Target loop */</comment>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iLevel</name></decl>;</decl_stmt>    <comment type="block">/* How many nesting loop to skip */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>iLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Jump the 'continue' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_NUM</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* optional numeric argument which tells us how many levels
		 * of enclosing loops we should skip to the end of. 
		 */</comment>
		<expr_stmt><expr><name>iLevel</name> <operator>=</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><call><name>jx9TokenValueToInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iLevel</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the optional numeric argument */</comment>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the target loop */</comment>
	<expr_stmt><expr><name>pLoop</name> <operator>=</operator> <call><name>GenStateFetchBlock</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name></expr></argument>, <argument><expr><name>GEN_BLOCK_LOOP</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pLoop</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Illegal continue */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"A 'continue' statement may only be used within a loop or switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nInstrIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Emit the unconditional jump to the beginning of the target loop */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pLoop</name><operator>-&gt;</operator><name>nFirstInstr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nInstrIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pLoop</name><operator>-&gt;</operator><name>bPostContinue</name></name> <operator>==</operator> <name>TRUE</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>JumpFixup</name></type> <name>sJumpFix</name></decl>;</decl_stmt>
			<comment type="block">/* Post-continue */</comment>
			<expr_stmt><expr><name><name>sJumpFix</name><operator>.</operator><name>nJumpType</name></name> <operator>=</operator> <name>JX9_OP_JMP</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sJumpFix</name><operator>.</operator><name>nInstrIdx</name></name> <operator>=</operator> <name>nInstrIdx</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLoop</name><operator>-&gt;</operator><name>aPostContFix</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sJumpFix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Not so fatal, emit a warning only */</comment>
		<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_WARNING</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Expected semi-colon ';' after 'continue' statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Statement successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the 'break' statement.
 * According to the JX9 language reference
 *  break ends execution of the current for, foreach, while, do-while or switch
 *  structure.
 *  break accepts an optional numeric argument which tells it how many nested
 *  enclosing structures are to be broken out of. 
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileBreak</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pLoop</name></decl>;</decl_stmt> <comment type="block">/* Target loop */</comment>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iLevel</name></decl>;</decl_stmt>    <comment type="block">/* How many nesting loop to skip */</comment>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>iLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Jump the 'break' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_NUM</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* optional numeric argument which tells us how many levels
		 * of enclosing loops we should skip to the end of. 
		 */</comment>
		<expr_stmt><expr><name>iLevel</name> <operator>=</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><call><name>jx9TokenValueToInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iLevel</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the optional numeric argument */</comment>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Extract the target loop */</comment>
	<expr_stmt><expr><name>pLoop</name> <operator>=</operator> <call><name>GenStateFetchBlock</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name></expr></argument>, <argument><expr><name>GEN_BLOCK_LOOP</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pLoop</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Illegal break */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"A 'break' statement may only be used within a loop or switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nInstrIdx</name></decl>;</decl_stmt> 
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nInstrIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Fix the jump later when the jump destination is resolved */</comment>
			<expr_stmt><expr><call><name>GenStateNewJumpFixup</name><argument_list>(<argument><expr><name>pLoop</name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><name>nInstrIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Not so fatal, emit a warning only */</comment>
		<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_WARNING</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Expected semi-colon ';' after 'break' statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Statement successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileChunk</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Compile a JX9 block.
 * A block is simply one or more JX9 statements and expressions to compile
 * optionally delimited by braces {}.
 * Return SXRET_OK on success. Any other return value indicates failure
 * and this function takes care of generating the appropriate error
 * message.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileBlock</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter> <comment type="block">/* Code generator state */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_OCB</name></expr> <comment type="block">/* '{' */</comment> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEnterBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>GEN_BLOCK_STD</name></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* Compile until we hit the closing braces '}' */</comment>
		<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* No more token to process. Missing closing braces */</comment>
				<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Missing closing braces '}'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_CCB</name></expr><comment type="block">/*'}'*/</comment> )</condition><block>{<block_content>
				<comment type="block">/* Closing braces found, break immediately*/</comment>
				<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Compile a single statement */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileChunk</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,<argument><expr><name>JX9_COMPILE_SINGLE_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>GenStateLeaveBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
	</block_content>}</block></if><else>else<block>{<block_content>
		<comment type="block">/* Compile a single statement */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileChunk</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,<argument><expr><name>JX9_COMPILE_SINGLE_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Jump trailing semi-colons ';' */</comment>
	<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the gentle 'while' statement.
 * According to the JX9 language reference
 *  while loops are the simplest type of loop in JX9.They behave just like their C counterparts.
 *  The basic form of a while statement is:
 *  while (expr)
 *   statement
 *  The meaning of a while statement is simple. It tells JX9 to execute the nested statement(s)
 *  repeatedly, as long as the while expression evaluates to TRUE. The value of the expression
 *  is checked each time at the beginning of the loop, so even if this value changes during
 *  the execution of the nested statement(s), execution will not stop until the end of the iteration
 *  (each time JX9 runs the statements in the loop is one iteration). Sometimes, if the while
 *  expression evaluates to FALSE from the very beginning, the nested statement(s) won't even be run once.
 *  Like with the if statement, you can group multiple statements within the same while loop by surrounding
 *  a group of statements with curly braces, or by using the alternate syntax:
 *  while (expr):
 *    statement
 *   endwhile;
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileWhile</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pWhileBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nFalseJump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<comment type="block">/* Jump the 'while' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>    
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_LPAREN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Syntax error */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Expected '(' after 'while' keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Jump the left parenthesis '(' */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> 
	<comment type="block">/* Create the loop block */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEnterBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>GEN_BLOCK_LOOP</name></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pWhileBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Delimit the condition */</comment>
	<expr_stmt><expr><call><name>jx9DelimitNestedTokens</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><name>JX9_TK_LPAREN</name></expr></argument> <comment type="block">/* '(' */</comment>, <argument><expr><name>JX9_TK_RPAREN</name></expr></argument> <comment type="block">/* ')' */</comment>, <argument><expr><operator>&amp;</operator><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>==</operator> <name>pEnd</name> <operator>||</operator> <name>pEnd</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Expected expression after 'while' keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Swap token streams */</comment>
	<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
	<comment type="block">/* Compile the expression */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expression handler request an operation abort [i.e: Out-of-memory] */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Update token stream */</comment>
	<while>while<condition>(<expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Unexpected token '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/* Synchronize pointers */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name>  <operator>=</operator> <operator>&amp;</operator><name><name>pEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
	<comment type="block">/* Emit the false jump */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFalseJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Save the instruction index so we can fix it later when the jump destination is resolved */</comment>
	<expr_stmt><expr><call><name>GenStateNewJumpFixup</name><argument_list>(<argument><expr><name>pWhileBlock</name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><name>nFalseJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the loop body */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the unconditional jump to the start of the loop */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pWhileBlock</name><operator>-&gt;</operator><name>nFirstInstr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fix all jumps now the destination is resolved */</comment>
	<expr_stmt><expr><call><name>GenStateFixJumps</name><argument_list>(<argument><expr><name>pWhileBlock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the loop block */</comment>
	<expr_stmt><expr><call><name>GenStateLeaveBlock</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Statement successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
<label><name>Synchronize</name>:</label>
	<comment type="block">/* Synchronize with the first semi-colon ';' so we can avoid 
	 * compiling this erroneous block.
	 */</comment>
	<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SEMI</name><operator>|</operator><name>JX9_TK_OCB</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the complex and powerful 'for' statement.
 * According to the JX9 language reference
 *  for loops are the most complex loops in JX9. They behave like their C counterparts.
 *  The syntax of a for loop is:
 *  for (expr1; expr2; expr3)
 *   statement
 *  The first expression (expr1) is evaluated (executed) once unconditionally at
 *  the beginning of the loop.
 *  In the beginning of each iteration, expr2 is evaluated. If it evaluates to
 *  TRUE, the loop continues and the nested statement(s) are executed. If it evaluates
 *  to FALSE, the execution of the loop ends.
 *  At the end of each iteration, expr3 is evaluated (executed).
 *  Each of the expressions can be empty or contain multiple expressions separated by commas.
 *  In expr2, all expressions separated by a comma are evaluated but the result is taken
 *  from the last part. expr2 being empty means the loop should be run indefinitely
 *  (JX9 implicitly considers it as TRUE, like C). This may not be as useless as you might
 *  think, since often you'd want to end the loop using a conditional break statement instead
 *  of using the for truth expression.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileFor</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pPostStart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pForBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nFalseJump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<comment type="block">/* Jump the 'for' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>    
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_LPAREN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Syntax error */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Expected '(' after 'for' keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Jump the left parenthesis '(' */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> 
	<comment type="block">/* Delimit the init-expr;condition;post-expr */</comment>
	<expr_stmt><expr><call><name>jx9DelimitNestedTokens</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><name>JX9_TK_LPAREN</name></expr></argument> <comment type="block">/* '(' */</comment>, <argument><expr><name>JX9_TK_RPAREN</name></expr></argument> <comment type="block">/* ')' */</comment>, <argument><expr><operator>&amp;</operator><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>==</operator> <name>pEnd</name> <operator>||</operator> <name>pEnd</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"for: Invalid expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Synchronize */</comment>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Swap token streams */</comment>
	<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
	<comment type="block">/* Compile initialization expressions if available */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Pop operand lvalues */</comment>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expression handler request an operation abort [i.e: Out-of-memory] */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_POP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Syntax error */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, 
			<argument><expr><literal type="string">"for: Expected ';' after initialization expressions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Jump the trailing ';' */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Create the loop block */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEnterBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>GEN_BLOCK_LOOP</name></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pForBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Deffer continue jumps */</comment>
	<expr_stmt><expr><name><name>pForBlock</name><operator>-&gt;</operator><name>bPostContinue</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
	<comment type="block">/* Compile the condition */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expression handler request an operation abort [i.e: Out-of-memory] */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Emit the false jump */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFalseJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Save the instruction index so we can fix it later when the jump destination is resolved */</comment>
		<expr_stmt><expr><call><name>GenStateNewJumpFixup</name><argument_list>(<argument><expr><name>pForBlock</name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><name>nFalseJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Syntax error */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, 
			<argument><expr><literal type="string">"for: Expected ';' after conditionals expressions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Jump the trailing ';' */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Save the post condition stream */</comment>
	<expr_stmt><expr><name>pPostStart</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
	<comment type="block">/* Compile the loop body */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name>  <operator>=</operator> <operator>&amp;</operator><name><name>pEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* Jump the trailing parenthesis ')' */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Fix post-continue jumps */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pForBlock</name><operator>-&gt;</operator><name>aPostContFix</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>JumpFixup</name> <modifier>*</modifier></type><name>aPost</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>VmInstr</name> <modifier>*</modifier></type><name>pInstr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nJumpDest</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>aPost</name> <operator>=</operator> <operator>(</operator><name>JumpFixup</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pForBlock</name><operator>-&gt;</operator><name>aPostContFix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nJumpDest</name> <operator>=</operator> <call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pForBlock</name><operator>-&gt;</operator><name>aPostContFix</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
			<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmGetInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name><name>aPost</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nInstrIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pInstr</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Fix jump */</comment>
				<expr_stmt><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>=</operator> <name>nJumpDest</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* compile the post-expressions if available */</comment>
	<while>while<condition>( <expr><name>pPostStart</name> <operator>&lt;</operator> <name>pEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pPostStart</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pPostStart</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>pPostStart</name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmpIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTmpEnd</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SWAP_DELIMITER</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>pPostStart</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Syntax error */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"for: Expected ')' after post-expressions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Error count limit reached, abort immediately */</comment>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name>SXRET_OK</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RE_SWAP_DELIMITER</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Expression handler request an operation abort [i.e: Out-of-memory] */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr>)</condition><block>{<block_content>
			<comment type="block">/* Pop operand lvalue */</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_POP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the unconditional jump to the start of the loop */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pForBlock</name><operator>-&gt;</operator><name>nFirstInstr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fix all jumps now the destination is resolved */</comment>
	<expr_stmt><expr><call><name>GenStateFixJumps</name><argument_list>(<argument><expr><name>pForBlock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the loop block */</comment>
	<expr_stmt><expr><call><name>GenStateLeaveBlock</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Statement successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Expression tree validator callback used by the 'foreach' statement.
 * Note that only variable expression [i.e: $x; ${'My'.'Var'}; ${$a['key]};...]
 * are allowed.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateForEachNodeValidator</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>jx9_expr_node</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Assume a valid expression tree */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pRoot</name><operator>-&gt;</operator><name>xCode</name></name> <operator>!=</operator> <name>jx9CompileVariable</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Unexpected expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,
			<argument><expr><name>E_ERROR</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>pStart</name></name></expr>?</condition><then> <expr><name><name>pRoot</name><operator>-&gt;</operator><name>pStart</name><operator>-&gt;</operator><name>nLine</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, 
			<argument><expr><literal type="string">"foreach: Expecting a variable name"</literal></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_INVALID</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the 'foreach' statement.
 * According to the JX9 language reference
 *  The foreach construct simply gives an easy way to iterate over arrays. foreach works
 *  only on arrays (and objects), and will issue an error when you try to use it on a variable
 *  with a different data type or an uninitialized variable. There are two syntaxes; the second
 *  is a minor but useful extension of the first:
 *  foreach (json_array_json_object as $value)
 *    statement
 *  foreach (json_array_json_objec as $key,$value)
 *   statement
 *  The first form loops over the array given by array_expression. On each loop, the value 
 *  of the current element is assigned to $value and the internal array pointer is advanced
 *  by one (so on the next loop, you'll be looking at the next element).
 *  The second form does the same thing, except that the current element's key will be assigned
 *  to the variable $key on each loop.
 *  Note:
 *  When foreach first starts executing, the internal array pointer is automatically reset to the
 *  first element of the array. This means that you do not need to call reset() before a foreach loop. 
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileForeach</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pCur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pForeachBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_foreach_info</name> <modifier>*</modifier></type><name>pInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nFalseJump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VmInstr</name> <modifier>*</modifier></type><name>pInstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<comment type="block">/* Jump the 'foreach' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>    
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_LPAREN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Syntax error */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"foreach: Expected '('"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Jump the left parenthesis '(' */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> 
	<comment type="block">/* Create the loop block */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEnterBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>GEN_BLOCK_LOOP</name></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pForeachBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Delimit the expression */</comment>
	<expr_stmt><expr><call><name>jx9DelimitNestedTokens</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><name>JX9_TK_LPAREN</name></expr></argument> <comment type="block">/* '(' */</comment>, <argument><expr><name>JX9_TK_RPAREN</name></expr></argument> <comment type="block">/* ')' */</comment>, <argument><expr><operator>&amp;</operator><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>==</operator> <name>pEnd</name> <operator>||</operator> <name>pEnd</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"foreach: Missing expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Synchronize */</comment>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Compile the array expression */</comment>
	<expr_stmt><expr><name>pCur</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>pCur</name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>sxi32</name></type> <name>nKeywrd</name> <init>= <expr><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>( <expr><name>nKeywrd</name> <operator>==</operator> <name>JX9_TKWRD_AS</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Break with the first 'as' found */</comment>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Advance the stream cursor */</comment>
		<expr_stmt><expr><name>pCur</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>pCur</name> <operator>&lt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, 
			<argument><expr><literal type="string">"foreach: Missing array/object expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Swap token streams */</comment>
	<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pCur</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expression handler request an operation abort [i.e: Out-of-memory] */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Update token stream */</comment>
	<while>while<condition>(<expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name>pCur</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"foreach: Unexpected token '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>pCur</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the 'as' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name>pCur</name></expr>;</expr_stmt> 
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"foreach: Missing $key =&gt; $value pair"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create the foreach context */</comment>
	<expr_stmt><expr><name>pInfo</name> <operator>=</operator> <operator>(</operator><name>jx9_foreach_info</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_foreach_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pInfo</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Fatal, JX9 engine is running out-of-memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_foreach_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize structure fields */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aStep</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_foreach_step</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Check if we have a key field */</comment>
	<while>while<condition>( <expr><name>pCur</name> <operator>&lt;</operator> <name>pEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COMMA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pCur</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>pCur</name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Compile the expression holding the key name */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name>pCur</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"foreach: Missing $key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pCur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GenStateForEachNodeValidator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmPopInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Record key name */</comment>
				<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sKey</name></name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>|=</operator> <name>JX9_4EACH_STEP_KEY</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pCur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* Jump the arrow */</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"foreach: Missing $value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Compile the expression holding the value name */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GenStateForEachNodeValidator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmPopInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Record value name */</comment>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>sValue</name></name></expr></argument>, <argument><expr><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>, <argument><expr><call><name>SyStrlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the 'FOREACH_INIT' instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_FOREACH_INIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFalseJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Save the instruction index so we can fix it later when the jump destination is resolved */</comment>
	<expr_stmt><expr><call><name>GenStateNewJumpFixup</name><argument_list>(<argument><expr><name>pForeachBlock</name></expr></argument>, <argument><expr><name>JX9_OP_FOREACH_INIT</name></expr></argument>, <argument><expr><name>nFalseJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Record the first instruction to execute */</comment>
	<expr_stmt><expr><name><name>pForeachBlock</name><operator>-&gt;</operator><name>nFirstInstr</name></name> <operator>=</operator> <call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the FOREACH_STEP instruction */</comment>
    <expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_FOREACH_STEP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFalseJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Save the instruction index so we can fix it later when the jump destination is resolved */</comment>
	<expr_stmt><expr><call><name>GenStateNewJumpFixup</name><argument_list>(<argument><expr><name>pForeachBlock</name></expr></argument>, <argument><expr><name>JX9_OP_FOREACH_STEP</name></expr></argument>, <argument><expr><name>nFalseJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the loop body */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the unconditional jump to the start of the loop */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pForeachBlock</name><operator>-&gt;</operator><name>nFirstInstr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fix all jumps now the destination is resolved */</comment>
	<expr_stmt><expr><call><name>GenStateFixJumps</name><argument_list>(<argument><expr><name>pForeachBlock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the loop block */</comment>
	<expr_stmt><expr><call><name>GenStateLeaveBlock</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Statement successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
<label><name>Synchronize</name>:</label>
	<comment type="block">/* Synchronize with the first semi-colon ';' so we can avoid 
	 * compiling this erroneous block.
	 */</comment>
	<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SEMI</name><operator>|</operator><name>JX9_TK_OCB</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the infamous if/elseif/else if/else statements.
 * According to the JX9 language reference
 *  The if construct is one of the most important features of many languages JX9 included.
 *  It allows for conditional execution of code fragments. JX9 features an if structure 
 *  that is similar to that of C:
 *  if (expr)
 *   statement
 *  else construct:
 *   Often you'd want to execute a statement if a certain condition is met, and a different
 *   statement if the condition is not met. This is what else is for. else extends an if statement
 *   to execute a statement in case the expression in the if statement evaluates to FALSE.
 *   For example, the following code would display a is greater than b if $a is greater than
 *   $b, and a is NOT greater than b otherwise.
 *   The else statement is only executed if the if expression evaluated to FALSE, and if there
 *   were any elseif expressions - only if they evaluated to FALSE as well
 *  elseif
 *   elseif, as its name suggests, is a combination of if and else. Like else, it extends
 *   an if statement to execute a different statement in case the original if expression evaluates
 *   to FALSE. However, unlike else, it will execute that alternative expression only if the elseif
 *   conditional expression evaluates to TRUE. For example, the following code would display a is bigger
 *   than b, a equal to b or a is smaller than b:
 *    if ($a &gt; $b) {
 *     print "a is bigger than b";
 *    } elseif ($a == $b) {
 *     print "a is equal to b";
 *    } else {
 *     print "a is smaller than b";
 *    }
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileIf</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pToken</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pCondBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nJumpIdx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nKeyID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Jump the 'if' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pToken</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt> 
	<comment type="block">/* Create the conditional block */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEnterBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>GEN_BLOCK_COND</name></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCondBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Process as many [if/else if/elseif/else] blocks as we can */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>pToken</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_LPAREN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Syntax error */</comment>
			<if_stmt><if>if<condition>( <expr><name>pToken</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>pToken</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"if/else/elseif: Missing '('"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Error count limit reached, abort immediately */</comment>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<goto>goto <name>Synchronize</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Jump the left parenthesis '(' */</comment>
		<expr_stmt><expr><name>pToken</name><operator>++</operator></expr>;</expr_stmt> 
		<comment type="block">/* Delimit the condition */</comment>
		<expr_stmt><expr><call><name>jx9DelimitNestedTokens</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><name>JX9_TK_LPAREN</name></expr></argument> <comment type="block">/* '(' */</comment>, <argument><expr><name>JX9_TK_RPAREN</name></expr></argument> <comment type="block">/* ')' */</comment>, <argument><expr><operator>&amp;</operator><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pToken</name> <operator>&gt;=</operator> <name>pEnd</name> <operator>||</operator> <operator>(</operator><name><name>pEnd</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_RPAREN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Syntax error */</comment>
			<if_stmt><if>if<condition>( <expr><name>pToken</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>pToken</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"if/else/elseif: Missing ')'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Error count limit reached, abort immediately */</comment>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<goto>goto <name>Synchronize</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Swap token streams */</comment>
		<expr_stmt><expr><call><name>SWAP_TOKEN_STREAM</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Compile the condition */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Update token stream */</comment>
		<while>while<condition>(<expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Unexpected token '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name>  <operator>=</operator> <operator>&amp;</operator><name><name>pEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Expression handler request an operation abort [i.e: Out-of-memory] */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Emit the false jump */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJumpIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Save the instruction index so we can fix it later when the jump destination is resolved */</comment>
		<expr_stmt><expr><call><name>GenStateNewJumpFixup</name><argument_list>(<argument><expr><name>pCondBlock</name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><name>nJumpIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Compile the body */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Ensure that the keyword ID is 'else if' or 'else' */</comment>
		<expr_stmt><expr><name>nKeyID</name> <operator>=</operator> <operator>(</operator><name>sxu32</name><operator>)</operator><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name>nKeyID</name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TKWRD_ELSE</name><operator>|</operator><name>JX9_TKWRD_ELIF</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Emit the unconditional jump */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJumpIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Save the instruction index so we can fix it later when the jump destination is resolved */</comment>
		<expr_stmt><expr><call><name>GenStateNewJumpFixup</name><argument_list>(<argument><expr><name>pCondBlock</name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><name>nJumpIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nKeyID</name> <operator>&amp;</operator> <name>JX9_TKWRD_ELSE</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pToken</name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pToken</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pToken</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
				<call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JX9_TKWRD_IF</name></expr> )</condition><block>{<block_content>
					<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the 'else' keyword */</comment>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the 'elseif/if' keyword */</comment>
		<comment type="block">/* Synchronize cursors */</comment>
		<expr_stmt><expr><name>pToken</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
		<comment type="block">/* Fix the false jump */</comment>
		<expr_stmt><expr><call><name>GenStateFixJumps</name><argument_list>(<argument><expr><name>pCondBlock</name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for> <comment type="block">/* For(;;) */</comment>
	<comment type="block">/* Fix the false jump */</comment>
	<expr_stmt><expr><call><name>GenStateFixJumps</name><argument_list>(<argument><expr><name>pCondBlock</name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>JX9_TKWRD_ELSE</name><operator>)</operator></expr> )</condition><block>{<block_content>
			<comment type="block">/* Compile the else block */</comment>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>nJumpIdx</name> <operator>=</operator> <call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fix all unconditional jumps now the destination is resolved */</comment>
	<expr_stmt><expr><call><name>GenStateFixJumps</name><argument_list>(<argument><expr><name>pCondBlock</name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><name>nJumpIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the conditional block */</comment>
	<expr_stmt><expr><call><name>GenStateLeaveBlock</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Statement successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
<label><name>Synchronize</name>:</label>
	<comment type="block">/* Synchronize with the first semi-colon ';' so we can avoid compiling this erroneous block.
	 */</comment>
	<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SEMI</name><operator>|</operator><name>JX9_TK_OCB</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the return statement.
 * According to the JX9 language reference
 *  If called from within a function, the return() statement immediately ends execution
 *  of the current function, and returns its argument as the value of the function call.
 *  return() will also end the execution of an eval() statement or script file.
 *  If called from the global scope, then execution of the current script file is ended.
 *  If the current script file was include()ed or require()ed, then control is passed back
 *  to the calling file. Furthermore, if the current script file was include()ed, then the value
 *  given to return() will be returned as the value of the include() call. If return() is called
 *  from within the main script file, then script execution end.
 *  Note that since return() is a language construct and not a function, the parentheses
 *  surrounding its arguments are not required. It is common to leave them out, and you actually
 *  should do so as JX9 has less work to do in this case. 
 *  Note: If no parameter is supplied, then the parentheses must be omitted and JX9 is returning NULL instead..
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileReturn</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* TRUE if there is a return value */</comment>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Jump the 'return' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Compile the expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>nRet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the done instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_DONE</name></expr></argument>, <argument><expr><name>nRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the die/exit language construct.
 * The role of these constructs is to terminate execution of the script.
 * Shutdown functions will always be executed even if exit() is called.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileHalt</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nExpr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Jump the die/exit keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Compile the expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>nExpr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Emit the HALT instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_HALT</name></expr></argument>, <argument><expr><name>nExpr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the static statement.
 * According to the JX9 language reference
 *  Another important feature of variable scoping is the static variable.
 *  A static variable exists only in a local function scope, but it does not lose its value
 *  when program execution leaves this scope.
 *  Static variables also provide one way to deal with recursive functions.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileStatic</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm_func_static_var</name></type> <name>sStatic</name></decl>;</decl_stmt> <comment type="block">/* Structure describing the static variable */</comment>
	<decl_stmt><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pFunc</name></decl>;</decl_stmt>             <comment type="block">/* Enclosing function */</comment>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Jump the static keyword */</comment>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Extract the enclosing function if any */</comment>
	<expr_stmt><expr><name>pBlock</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>pBlock</name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pBlock</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>GEN_BLOCK_FUNC</name></expr>)</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Point to the upper block */</comment>
		<expr_stmt><expr><name>pBlock</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pParent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>pBlock</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Static statement, called outside of a function body, treat it as a simple variable. */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_DOLLAR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Expected variable after 'static' keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<goto>goto <name>Synchronize</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Compile the expression holding the variable */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Emit the POP instruction */</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_POP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pFunc</name> <operator>=</operator> <operator>(</operator><name>jx9_vm_func</name> <operator>*</operator><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</expr_stmt>
	<comment type="block">/* Make sure we are dealing with a valid statement */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_DOLLAR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator>
		<operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nType</name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_ID</name><operator>|</operator><name>JX9_TK_KEYWORD</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Expected variable after 'static' keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Extract variable name */</comment>
	<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the var name */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SEMI</name><comment type="block">/*';'*/</comment><operator>|</operator><name>JX9_TK_EQUAL</name><comment type="block">/*'='*/</comment><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"static: Unexpected token '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the structure describing the static variable */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sStatic</name><operator>.</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sStatic</name><operator>.</operator><name>nIdx</name></name> <operator>=</operator> <name>SXU32_HIGH</name></expr>;</expr_stmt> <comment type="block">/* Not yet created */</comment>
	<comment type="block">/* Duplicate variable name */</comment>
	<expr_stmt><expr><name>zDup</name> <operator>=</operator> <call><name>SyMemBackendStrDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zDup</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Fatal, JX9 engine is running out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sStatic</name><operator>.</operator><name>sName</name></name></expr></argument>, <argument><expr><name>zDup</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Check if we have an expression to compile */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_EQUAL</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pInstrContainer</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the equal '=' sign */</comment>
		<comment type="block">/* Swap bytecode container */</comment>
		<expr_stmt><expr><name>pInstrContainer</name> <operator>=</operator> <call><name>jx9VmGetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sStatic</name><operator>.</operator><name>aByteCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Compile the expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Emit the done instruction */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_DONE</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Restore default bytecode container */</comment>
		<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pInstrContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Finally save the compiled static variable in the appropriate container */</comment>
	<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aStatic</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sStatic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
<label><name>Synchronize</name>:</label>
	<comment type="block">/* Synchronize with the first semi-colon ';', so we can avoid compiling this erroneous
	 * statement. 
	 */</comment>
	<while>while<condition>(<expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator>  <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the 'const' statement.
 * According to the JX9 language reference
 *  A constant is an identifier (name) for a simple value. As the name suggests, that value
 *  cannot change during the execution of the script (except for magic constants, which aren't actually constants).
 *  A constant is case-sensitive by default. By convention, constant identifiers are always uppercase.
 *  The name of a constant follows the same rules as any label in JX9. A valid constant name starts
 *  with a letter or underscore, followed by any number of letters, numbers, or underscores.
 *  As a regular expression it would be expressed thusly: [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]* 
 *  Syntax
 *  You can define a constant by using the define()-function or by using the const keyword outside
 *  a object definition. Once a constant is defined, it can never be changed or undefined.
 *  You can get the value of a constant by simply specifying its name. Unlike with variables
 *  you should not prepend a constant with a $. You can also use the function constant() to read
 *  a constant's value if you wish to obtain the constant's name dynamically. Use get_defined_constants()
 *  to get a list of all defined constants.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileConstant</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pConsCode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pInstrContainer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the 'const' keyword */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SSTR</name><operator>|</operator><name>JX9_TK_DSTR</name><operator>|</operator><name>JX9_TK_ID</name><operator>|</operator><name>JX9_TK_KEYWORD</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid constant name */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"const: Invalid constant name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Peek constant name */</comment>
	<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr>;</expr_stmt>
	<comment type="block">/* Make sure the constant name isn't reserved */</comment>
	<if_stmt><if>if<condition>( <expr><call><name>GenStateIsReservedID</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<comment type="block">/* Reserved constant */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"const: Cannot redeclare a reserved constant '%z'"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_EQUAL</name> <comment type="block">/* '=' */</comment><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid statement*/</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"const: Expected '=' after constant name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/*Jump the equal sign */</comment>
	<comment type="block">/* Allocate a new constant value container */</comment>
	<expr_stmt><expr><name>pConsCode</name> <operator>=</operator> <operator>(</operator><name>SySet</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SySet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pConsCode</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><name>pConsCode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Swap bytecode container */</comment>
	<expr_stmt><expr><name>pInstrContainer</name> <operator>=</operator> <call><name>jx9VmGetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pConsCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile constant value */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the done instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_DONE</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pInstrContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SySetSetUserData</name><argument_list>(<argument><expr><name>pConsCode</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Register the constant */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmRegisterConstant</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>jx9VmExpandConstantValue</name></expr></argument>, <argument><expr><name>pConsCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><name>pConsCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyMemBackendPoolFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name>pConsCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
<label><name>Synchronize</name>:</label>
	<comment type="block">/* Synchronize with the next-semi-colon and avoid compiling this erroneous statement */</comment>
	<while>while<condition>(<expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the uplink construct.
 * According to the JX9 language reference
 *  In JX9 global variables must be declared uplink inside a function if they are going
 *  to be used in that function.
 *  Example #1 Using global
 *   $a = 1;
 *   $b = 2;
 *   function Sum()
 *   {
 *    uplink $a, $b;
 *    $b = $a + $b;
 *   } 
 *   Sum();
 *   print $b;
 *  ?&gt;
 *  The above script will output 3. By declaring $a and $b global within the function
 *  all references to either variable will refer to the global version. There is no limit
 *  to the number of global variables that can be manipulated by a function.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileUplink</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nExpr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Jump the 'uplink' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing to process */</comment>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nExpr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>SXRET_OK</name> <operator>==</operator> <call><name>jx9GetNextExpr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name>pTmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNext</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name>pNext</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_DOLLAR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"uplink: Expected variable name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
					<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if><else>else<block>{<block_content>
				<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Emit a warning */</comment>
					<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_WARNING</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"uplink: Empty variable name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
						<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
					</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
						<expr_stmt><expr><name>nExpr</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Next expression in the stream */</comment>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
		<comment type="block">/* Jump trailing commas */</comment>
		<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name>pTmp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COMMA</name><operator>)</operator></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>
	<comment type="block">/* Restore token stream */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nExpr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Emit the uplink instruction */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_UPLINK</name></expr></argument>, <argument><expr><name>nExpr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a switch block.
 *  (See block-comment below for more information)
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileSwitchBlock</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxu32</name> <modifier>*</modifier></type><name>pBlockStart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name> <init>= <expr><name>SXRET_OK</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SEMI</name><comment type="block">/*';'*/</comment><operator>|</operator><name>JX9_TK_COLON</name><comment type="block">/*':'*/</comment><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Unexpected token */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Unexpected token '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* First instruction to execute in this block. */</comment>
	<expr_stmt><expr><operator>*</operator><name>pBlockStart</name> <operator>=</operator> <call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the block until we hit a case/default/endswitch keyword
	 * or the '}' token */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* No more input to process */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_CCB</name></expr> <comment type="block">/*'}' */</comment> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXERR_EOF</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<decl_stmt><decl><type><name>sxi32</name></type> <name>nKwrd</name></decl>;</decl_stmt>
			<comment type="block">/* Extract the keyword */</comment>
			<expr_stmt><expr><name>nKwrd</name> <operator>=</operator> <call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>nKwrd</name> <operator>==</operator> <name>JX9_TKWRD_CASE</name> <operator>||</operator> <name>nKwrd</name> <operator>==</operator> <name>JX9_TKWRD_DEFAULT</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/* Compile block */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a case eXpression.
 *  (See block-comment below for more information)
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileCaseExpr</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>jx9_case_expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pInstrContainer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pEnd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iNest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Delimit the expression */</comment>
	<expr_stmt><expr><name>pEnd</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>pEnd</name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pEnd</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_LPAREN</name></expr> <comment type="block">/*(*/</comment> )</condition><block>{<block_content>
			<comment type="block">/* Increment nesting level */</comment>
			<expr_stmt><expr><name>iNest</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pEnd</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_RPAREN</name></expr> <comment type="block">/*)*/</comment> )</condition><block>{<block_content>
			<comment type="block">/* Decrement nesting level */</comment>
			<expr_stmt><expr><name>iNest</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pEnd</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SEMI</name><comment type="block">/*';'*/</comment><operator>|</operator><name>JX9_TK_COLON</name><comment type="block">/*;'*/</comment><operator>)</operator> <operator>&amp;&amp;</operator> <name>iNest</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pEnd</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Empty case expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Swap token stream */</comment>
	<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pInstrContainer</name> <operator>=</operator> <call><name>jx9VmGetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the done instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_DONE</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pInstrContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<comment type="block">/* Update token stream */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name>  <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile the smart switch statement.
 * According to the JX9 language reference manual
 *  The switch statement is similar to a series of IF statements on the same expression.
 *  In many occasions, you may want to compare the same variable (or expression) with many
 *  different values, and execute a different piece of code depending on which value it equals to.
 *  This is exactly what the switch statement is for.
 *  Note: Note that unlike some other languages, the continue statement applies to switch and acts
 *  similar to break. If you have a switch inside a loop and wish to continue to the next iteration
 *  of the outer loop, use continue 2. 
 *  Note that switch/case does loose comparision. 
 *  It is important to understand how the switch statement is executed in order to avoid mistakes.
 *  The switch statement executes line by line (actually, statement by statement).
 *  In the beginning, no code is executed. Only when a case statement is found with a value that
 *  matches the value of the switch expression does JX9 begin to execute the statements.
 *  JX9 continues to execute the statements until the end of the switch block, or the first time
 *  it sees a break statement. If you don't write a break statement at the end of a case's statement list.
 *  In a switch statement, the condition is evaluated only once and the result is compared to each
 *  case statement. In an elseif statement, the condition is evaluated again. If your condition
 *  is more complicated than a simple compare and/or is in a tight loop, a switch may be faster.
 *  The statement list for a case can also be empty, which simply passes control into the statement
 *  list for the next case. 
 *  The case expression may be any expression that evaluates to a simple type, that is, integer
 *  or floating-point numbers and strings.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileSwitch</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pSwitchBlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jx9_switch</name> <modifier>*</modifier></type><name>pSwitch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<comment type="block">/* Jump the 'switch' keyword */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>    
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_LPAREN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Syntax error */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Expected '(' after 'switch' keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Jump the left parenthesis '(' */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> 
	<expr_stmt><expr><name>pEnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
	<comment type="block">/* Create the loop block */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEnterBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>GEN_BLOCK_LOOP</name><operator>|</operator><name>GEN_BLOCK_SWITCH</name></expr></argument>, 
		<argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSwitchBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Delimit the condition */</comment>
	<expr_stmt><expr><call><name>jx9DelimitNestedTokens</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><name>JX9_TK_LPAREN</name></expr></argument> <comment type="block">/* '(' */</comment>, <argument><expr><name>JX9_TK_RPAREN</name></expr></argument> <comment type="block">/* ')' */</comment>, <argument><expr><operator>&amp;</operator><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>==</operator> <name>pEnd</name> <operator>||</operator> <name>pEnd</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Empty expression */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Expected expression after 'switch' keyword"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Swap token streams */</comment>
	<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
	<comment type="block">/* Compile the expression */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Expression handler request an operation abort [i.e: Out-of-memory] */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Update token stream */</comment>
	<while>while<condition>(<expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, 
			<argument><expr><literal type="string">"Switch: Unexpected token '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name>  <operator>=</operator> <operator>&amp;</operator><name><name>pEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator>
		<operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_OCB</name><comment type="block">/*'{'*/</comment><operator>|</operator><name>JX9_TK_COLON</name><comment type="block">/*:*/</comment><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pTmp</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pTmp</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>pTmp</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Unexpected token */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Switch: Unexpected token '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTmp</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<goto>goto <name>Synchronize</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the leading curly braces/colons */</comment>
	<comment type="block">/* Create the switch blocks container */</comment>
	<expr_stmt><expr><name>pSwitch</name> <operator>=</operator> <operator>(</operator><name>jx9_switch</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_switch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pSwitch</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Abort compilation */</comment>
		<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pSwitch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_switch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initialize fields */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSwitch</name><operator>-&gt;</operator><name>aCaseExpr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_case_expr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the switch instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_SWITCH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pSwitch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile case blocks */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nKwrd</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* No more input to process */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>(  <expr><operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_CCB</name> <comment type="block">/*}*/</comment><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Unexpected token */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Switch: Unexpected token '%z'"</literal></expr></argument>, 
					<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
					<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* FALL THROUGH */</comment>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Block compiled */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Extract the keyword */</comment>
		<expr_stmt><expr><name>nKwrd</name> <operator>=</operator> <call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nKwrd</name> <operator>==</operator> <name>JX9_TKWRD_DEFAULT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/*
			 * Accroding to the JX9 language reference manual
			 *  A special case is the default case. This case matches anything
			 *  that wasn't matched by the other cases.
			 */</comment>
			<if_stmt><if>if<condition>( <expr><name><name>pSwitch</name><operator>-&gt;</operator><name>nDefault</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<comment type="block">/* Default case already compiled */</comment> 
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_WARNING</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Switch: 'default' case already compiled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
					<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the 'default' keyword */</comment>
			<comment type="block">/* Compile the default block */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileSwitchBlock</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pSwitch</name><operator>-&gt;</operator><name>nDefault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr>)</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_EOF</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nKwrd</name> <operator>==</operator> <name>JX9_TKWRD_CASE</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_case_expr</name></type> <name>sCase</name></decl>;</decl_stmt>
			<comment type="block">/* Standard case block */</comment>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the 'case' keyword */</comment>
			<comment type="block">/* initialize the structure */</comment>
			<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sCase</name><operator>.</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Compile the case expression */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileCaseExpr</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Compile the case block */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileSwitchBlock</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>sCase</name><operator>.</operator><name>nStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Insert in the switch container */</comment>
			<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSwitch</name><operator>-&gt;</operator><name>aCaseExpr</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr>)</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_EOF</name></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Unexpected token */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Switch: Unexpected token '%z'"</literal></expr></argument>, 
				<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Fix all jumps now the destination is resolved */</comment>
	<expr_stmt><expr><name><name>pSwitch</name><operator>-&gt;</operator><name>nOut</name></name> <operator>=</operator> <call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GenStateFixJumps</name><argument_list>(<argument><expr><name>pSwitchBlock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Release the loop block */</comment>
	<expr_stmt><expr><call><name>GenStateLeaveBlock</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Jump the trailing curly braces */</comment>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Statement successfully compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
<label><name>Synchronize</name>:</label>
	<comment type="block">/* Synchronize with the first semi-colon */</comment>
	<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Process default argument values. That is, a function may define C++-style default value
 * as follows:
 * function makecoffee($type = "cappuccino")
 * {
 *   return "Making a cup of $type.\n";
 * }
 * Some features:
 *  1 -) Default arguments value can be any complex expression [i.e: function call, annynoymous
 *      functions, array member, ..]
 * 2 -) Full type hinting: (Arguments are automatically casted to the desired type)
 *      Example:
 *           function a(string $a){} function b(int $a, string $c, float $d){}
 * 3 -) Function overloading!!
 *      Example:
 *      function foo($a) {
 *   	  return $a.JX9_EOL;
 *	    }
 *	    function foo($a, $b) {
 *   	  return $a + $b;
 *	    }
 *	    print foo(5); // Prints "5"
 *	    print foo(5, 2); // Prints "7"
 *      // Same arg
 *	   function foo(string $a)
 *	   {
 *	     print "a is a string\n";
 *	     dump($a);
 *	   }
 *	  function foo(int $a)
 *	  {
 *	    print "a is integer\n";
 *	    dump($a);
 *	  }
 *	  function foo(array $a)
 *	  {
 * 	    print "a is an array\n";
 * 	    dump($a);
 *	  }
 *	  foo('This is a great feature'); // a is a string [first foo]
 *	  foo(52); // a is integer [second foo] 
 *    foo(array(14, __TIME__, __DATE__)); // a is an array [third foo]
 * Please refer to the official documentation for more information on the powerful extension
 * introduced by the JX9 engine.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateProcessArgValue</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>jx9_vm_func_arg</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>, <parameter><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pEnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmpIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTmpEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pInstrContainer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Swap token stream */</comment>
	<expr_stmt><expr><call><name>SWAP_DELIMITER</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pInstrContainer</name> <operator>=</operator> <call><name>jx9VmGetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pArg</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the expression holding the argument value */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the done instruction */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_DONE</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pInstrContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><call><name>RE_SWAP_DELIMITER</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Collect function arguments one after one.
 * According to the JX9 language reference manual.
 * Information may be passed to functions via the argument list, which is a comma-delimited
 * list of expressions.
 * JX9 supports passing arguments by value (the default), passing by reference
 * and default argument values. Variable-length argument lists are also supported, 
 * see also the function references for func_num_args(), func_get_arg(), and func_get_args()
 * for more information.
 * Example #1 Passing arrays to functions
 * &lt;?jx9
 * function takes_array($input)
 * {
 *    print "$input[0] + $input[1] = ", $input[0]+$input[1];
 * }
 * ?&gt;
 * Making arguments be passed by reference
 * By default, function arguments are passed by value (so that if the value of the argument
 * within the function is changed, it does not get changed outside of the function).
 * To allow a function to modify its arguments, they must be passed by reference.
 * To have an argument to a function always passed by reference, prepend an ampersand (&amp;)
 * to the argument name in the function definition:
 * Example #2 Passing function parameters by reference
 * &lt;?jx9
 * function add_some_extra(&amp;$string)
 * {
 *   $string .= 'and something extra.';
 * }
 * $str = 'This is a string, ';
 * add_some_extra($str);
 * print $str;    // outputs 'This is a string, and something extra.'
 * ?&gt;
 *
 * JX9 have introduced powerful extension including full type hinting, function overloading
 * complex agrument values.Please refer to the official documentation for more information
 * on these extension.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCollectFuncArgs</name><parameter_list>(<parameter><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>, <parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <parameter><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pEnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm_func_arg</name></type> <name>sArg</name></decl>;</decl_stmt> <comment type="block">/* Current processed argument */</comment>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pCur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pIn</name></decl>;</decl_stmt>  <comment type="block">/* Token stream */</comment>
	<decl_stmt><decl><type><name>SyBlob</name></type> <name>sSig</name></decl>;</decl_stmt>         <comment type="block">/* Function signature */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDup</name></decl>;</decl_stmt>          <comment type="block">/* Copy of argument name */</comment>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pIn</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pCur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Process arguments one after one */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>pIn</name> <operator>&gt;=</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* No more arguments to process */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sArg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm_func_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sArg</name><operator>.</operator><name>aByteCode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VmInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_ID</name><operator>|</operator><name>JX9_TK_KEYWORD</name><operator>)</operator></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name></expr> )</condition><block>{<block_content>
				<decl_stmt><decl><type><name>sxu32</name></type> <name>nKey</name> <init>= <expr><operator>(</operator><name>sxu32</name><operator>)</operator><operator>(</operator><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pIn</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>( <expr><name>nKey</name> <operator>&amp;</operator> <name>JX9_TKWRD_BOOL</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>sArg</name><operator>.</operator><name>nType</name></name> <operator>=</operator> <name>MEMOBJ_BOOL</name></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nKey</name> <operator>&amp;</operator> <name>JX9_TKWRD_INT</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>sArg</name><operator>.</operator><name>nType</name></name> <operator>=</operator> <name>MEMOBJ_INT</name></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nKey</name> <operator>&amp;</operator> <name>JX9_TKWRD_STRING</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>sArg</name><operator>.</operator><name>nType</name></name> <operator>=</operator> <name>MEMOBJ_STRING</name></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nKey</name> <operator>&amp;</operator> <name>JX9_TKWRD_FLOAT</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name><name>sArg</name><operator>.</operator><name>nType</name></name> <operator>=</operator> <name>MEMOBJ_REAL</name></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_WARNING</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, 
						<argument><expr><literal type="string">"Invalid argument type '%z', Automatic cast will not be performed"</literal></expr></argument>, 
						<argument><expr><operator>&amp;</operator><name><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pIn</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>pIn</name> <operator>&gt;=</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Missing argument name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>rc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>pIn</name> <operator>&gt;=</operator> <name>pEnd</name> <operator>||</operator> <operator>(</operator><name><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_DOLLAR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>&amp;</operator><name><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name>pEnd</name> <operator>||</operator> <operator>(</operator><name><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nType</name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_ID</name><operator>|</operator><name>JX9_TK_KEYWORD</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Invalid argument */</comment> 
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid argument name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>rc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pIn</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the dollar sign */</comment>
		<comment type="block">/* Copy argument name */</comment>
		<expr_stmt><expr><name>zDup</name> <operator>=</operator> <call><name>SyMemBackendStrDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><call><name>SyStringData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>zDup</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sArg</name><operator>.</operator><name>sName</name></name></expr></argument>, <argument><expr><name>zDup</name></expr></argument>, <argument><expr><call><name>SyStringLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pIn</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pIn</name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_EQUAL</name></expr> )</condition><block>{<block_content>
				<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pDefend</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>sxi32</name></type> <name>iNest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>pIn</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the equal sign */</comment>
				<expr_stmt><expr><name>pDefend</name> <operator>=</operator> <name>pIn</name></expr>;</expr_stmt>
				<comment type="block">/* Process the default value associated with this argument */</comment>
				<while>while<condition>( <expr><name>pDefend</name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
					<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pDefend</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COMMA</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>iNest</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if<condition>( <expr><name><name>pDefend</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_LPAREN</name><comment type="block">/*'('*/</comment><operator>|</operator><name>JX9_TK_OCB</name><comment type="block">/*'{'*/</comment><operator>|</operator><name>JX9_TK_OSB</name><comment type="block">/*[*/</comment><operator>)</operator></expr> )</condition><block>{<block_content>
						<comment type="block">/* Increment nesting level */</comment>
						<expr_stmt><expr><name>iNest</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pDefend</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_RPAREN</name><comment type="block">/*')'*/</comment><operator>|</operator><name>JX9_TK_CCB</name><comment type="block">/*'}'*/</comment><operator>|</operator><name>JX9_TK_CSB</name><comment type="block">/*]*/</comment><operator>)</operator></expr> )</condition><block>{<block_content>
						<comment type="block">/* Decrement nesting level */</comment>
						<expr_stmt><expr><name>iNest</name><operator>--</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>pDefend</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
				<if_stmt><if>if<condition>( <expr><name>pIn</name> <operator>&gt;=</operator> <name>pDefend</name></expr> )</condition><block>{<block_content>
					<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Missing argument default value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>rc</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Process default value */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateProcessArgValue</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sArg</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>pDefend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
					<return>return <expr><name>rc</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Point beyond the default value */</comment>
				<expr_stmt><expr><name>pIn</name> <operator>=</operator> <name>pDefend</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>pIn</name> <operator>&lt;</operator> <name>pEnd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COMMA</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, <argument><expr><literal type="string">"Unexpected token '%z'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>rc</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pIn</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the trailing comma */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Append argument signature */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>sArg</name><operator>.</operator><name>nType</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt> <comment type="block">/* cc warning */</comment>
			<comment type="block">/* Type leading character */</comment>
			<switch>switch<condition>(<expr><name><name>sArg</name><operator>.</operator><name>nType</name></name></expr>)</condition><block>{<block_content>
				<case>case <expr><name>MEMOBJ_HASHMAP</name></expr>:</case>
					<comment type="block">/* Hashmap aka 'array' */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MEMOBJ_INT</name></expr>:</case>
					<comment type="block">/* Integer */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MEMOBJ_BOOL</name></expr>:</case>
					<comment type="block">/* Bool */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MEMOBJ_REAL</name></expr>:</case>
					<comment type="block">/* Float */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>MEMOBJ_STRING</name></expr>:</case>
					<comment type="block">/* String */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<break>break;</break>
				</block_content>}</block></switch>
				<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Save in the argument set */</comment>
		<expr_stmt><expr><call><name>SySetPut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aArgs</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>( <expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Save function signature */</comment>
		<expr_stmt><expr><call><name>SyStringInitFromBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>sSignature</name></name></expr></argument>, <argument><expr><call><name>SyBlobData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SyBlobLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile function [i.e: standard function, annonymous function or closure ] body.
 * Return SXRET_OK on success. Any other return value indicates failure
 * and this routine takes care of generating the appropriate error message.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileFuncBody</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,  <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>    <comment type="block">/* Function state */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SySet</name> <modifier>*</modifier></type><name>pInstrContainer</name></decl>;</decl_stmt> <comment type="block">/* Instruction container */</comment>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Attach the new function */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEnterBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>GEN_BLOCK_PROTECTED</name><operator>|</operator><name>GEN_BLOCK_FUNC</name></expr></argument>,<argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
		<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Swap bytecode containers */</comment>
	<expr_stmt><expr><name>pInstrContainer</name> <operator>=</operator> <call><name>jx9VmGetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>aByteCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Compile the body */</comment>
	<expr_stmt><expr><call><name>jx9CompileBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Emit the final return if not yet done */</comment>
	<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_DONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Restore the default container */</comment>
	<expr_stmt><expr><call><name>jx9VmSetByteCodeContainer</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pInstrContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Leave function block */</comment>
	<expr_stmt><expr><call><name>GenStateLeaveBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* All done, function body compiled */</comment>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a JX9 function whether is a Standard or Annonymous function.
 * According to the JX9 language reference manual.
 *  Function names follow the same rules as other labels in JX9. A valid function name
 *  starts with a letter or underscore, followed by any number of letters, numbers, or
 *  underscores. As a regular expression, it would be expressed thus:
 *     [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*. 
 *  Functions need not be defined before they are referenced.
 *  All functions and objectes in JX9 have the global scope - they can be called outside
 *  a function even if they were defined inside and vice versa.
 *  It is possible to call recursive functions in JX9. However avoid recursive function/method
 *  calls with over 32-64 recursion levels. 
 * 
 * JX9 have introduced powerful extension including full type hinting, function overloading, 
 * complex agrument values and more. Please refer to the official documentation for more information
 * on these extension.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileFunc</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>,     <comment type="block">/* Function name. NULL otherwise */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>,        <comment type="block">/* Control flags */</comment>
	<parameter><decl><type><name>jx9_vm_func</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFunc</name></decl></parameter> <comment type="block">/* OUT: function state */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_vm_func</name> <modifier>*</modifier></type><name>pFunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Extract line number */</comment>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<comment type="block">/* Jump the left parenthesis '(' */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* Delimit the function signature */</comment>
	<expr_stmt><expr><call><name>jx9DelimitNestedTokens</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><name>JX9_TK_LPAREN</name></expr></argument> <comment type="block">/* '(' */</comment>, <argument><expr><name>JX9_TK_RPAREN</name></expr></argument> <comment type="block">/* ')' */</comment>, <argument><expr><operator>&amp;</operator><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEnd</name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Syntax error */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Missing ')' after function '%z' signature"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr>;</expr_stmt>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Create the function state */</comment>
	<expr_stmt><expr><name>pFunc</name> <operator>=</operator> <operator>(</operator><name>jx9_vm_func</name> <operator>*</operator><operator>)</operator><call><name>SyMemBackendPoolAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_vm_func</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>pFunc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<goto>goto <name>OutOfMem</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* function ID */</comment>
	<expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>SyMemBackendStrDup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>zName</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
		<goto>goto <name>OutOfMem</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the function state */</comment>
	<expr_stmt><expr><call><name>jx9VmInitFuncState</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Collect function arguments */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCollectFuncArgs</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Don't worry about freeing memory, everything will be released shortly */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Compile function body */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pEnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Compile the body */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileFuncBody</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>ppFunc</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ppFunc</name> <operator>=</operator> <name>pFunc</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Finally register the function */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9VmInstallUserFunction</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
	<comment type="block">/* Fall through if something goes wrong */</comment>
<label><name>OutOfMem</name>:</label>
	<comment type="block">/* If the supplied memory subsystem is so sick that we are unable to allocate
	 * a tiny chunk of memory, there is no much we can do here.
	 */</comment>
	<return>return <expr><call><name>GenStateOutOfMem</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a standard JX9 function.
 *  Refer to the block-comment above for more information.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileFunction</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Jump the 'function' keyword */</comment>
	<expr_stmt><expr><name>iFlags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_ID</name><operator>|</operator><name>JX9_TK_KEYWORD</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Invalid function name */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Invalid function name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Sychronize with the next semi-colon or braces*/</comment>
		<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SEMI</name><operator>|</operator><name>JX9_TK_OCB</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pName</name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nLine</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr>;</expr_stmt>
	<comment type="block">/* Jump the function name */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>||</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_LPAREN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Syntax error */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><literal type="string">"Expected '(' after function name '%z'"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached, abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Sychronize with the next semi-colon or '{' */</comment>
		<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_SEMI</name><operator>|</operator><name>JX9_TK_OCB</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Compile function body */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileFunc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>,<argument><expr><name>pName</name></expr></argument>,<argument><expr><name>iFlags</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Generate bytecode for a given expression tree.
 * If something goes wrong while generating bytecode
 * for the expression tree (A very unlikely scenario)
 * this function takes care of generating the appropriate
 * error message.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateEmitExprCode</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,  <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>jx9_expr_node</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <comment type="block">/* Root of the expression tree */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter> <comment type="block">/* Control flags */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VmInstr</name> <modifier>*</modifier></type><name>pInstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>nJmpIdx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iP1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>iP2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p3</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iVmOp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>xCode</name></name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmpIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTmpEnd</name></decl>;</decl_stmt>
		<comment type="block">/* Compile node */</comment>
		<expr_stmt><expr><call><name>SWAP_DELIMITER</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pStart</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pNode</name><operator>-&gt;</operator><name>xCode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RE_SWAP_DELIMITER</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>pOp</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>jx9GenCompileError</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pStart</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>, 
			<argument><expr><literal type="string">"Invalid expression node, JX9 is aborting compilation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>iVmOp</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pOp</name><operator>-&gt;</operator><name>iVmOp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>pOp</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>EXPR_OP_QUESTY</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>sxu32</name></type> <name>nJz</name></decl>, <decl><type ref="prev"/><name>nJmp</name></decl>;</decl_stmt>
		<comment type="block">/* Ternary operator require special handling */</comment>
		<comment type="block">/* Phase#1: Compile the condition */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEmitExprCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pCond</name></name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>rc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nJz</name> <operator>=</operator> <name>nJmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* cc -O6 warning */</comment>
		<comment type="block">/* Phase#2: Emit the false jump */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Phase#3: Compile the 'then' expression  */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEmitExprCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>rc</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Phase#4: Emit the unconditional jump */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Phase#5: Fix the false jump now the jump destination is resolved. */</comment>
		<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmGetInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>nJz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>pInstr</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>=</operator> <call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Phase#6: Compile the 'else' expression */</comment>
		<if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEmitExprCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
				<return>return <expr><name>rc</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>nJmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Phase#7: Fix the unconditional jump */</comment>
			<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmGetInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>nJmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pInstr</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>=</operator> <call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* All done */</comment>
		<return>return <expr><name>SXRET_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Generate code for the left tree */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>iVmOp</name> <operator>==</operator> <name>JX9_OP_CALL</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_expr_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNode</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>sxi32</name></type> <name>n</name></decl>;</decl_stmt>
			<comment type="block">/* Recurse and generate bytecodes for function arguments */</comment>
			<expr_stmt><expr><name>apNode</name> <operator>=</operator> <operator>(</operator><name>jx9_expr_node</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>aNodeArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Read-only load */</comment>
			<expr_stmt><expr><name>iFlags</name> <operator>|=</operator> <name>EXPR_FLAG_RDONLY_LOAD</name></expr>;</expr_stmt>
			<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>aNodeArgs</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEmitExprCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name><name>apNode</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>iFlags</name><operator>&amp;</operator><operator>~</operator><name>EXPR_FLAG_LOAD_IDX_STORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
					<return>return <expr><name>rc</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<comment type="block">/* Total number of given arguments */</comment>
			<expr_stmt><expr><name>iP1</name> <operator>=</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>aNodeArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Remove stale flags now */</comment>
			<expr_stmt><expr><name>iFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>EXPR_FLAG_RDONLY_LOAD</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEmitExprCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
			<return>return <expr><name>rc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>iVmOp</name> <operator>==</operator> <name>JX9_OP_CALL</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmPeekInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pInstr</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if <condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_LOADC</name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Prevent constant expansion */</comment>
					<expr_stmt><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_MEMBER</name></expr> <comment type="block">/* $a.b(1, 2, 3) */</comment>  )</condition><block>{<block_content>
					<comment type="block">/* Annonymous function call, flag that */</comment>
					<expr_stmt><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iVmOp</name> <operator>==</operator> <name>JX9_OP_LOAD_IDX</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>jx9_expr_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNode</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>sxi32</name></type> <name>n</name></decl>;</decl_stmt>
			<comment type="block">/* Recurse and generate bytecodes for array index */</comment>
			<expr_stmt><expr><name>apNode</name> <operator>=</operator> <operator>(</operator><name>jx9_expr_node</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>aNodeArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>sxi32</name><operator>)</operator><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>aNodeArgs</name></name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEmitExprCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name><name>apNode</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>iFlags</name><operator>&amp;</operator><operator>~</operator><name>EXPR_FLAG_LOAD_IDX_STORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXRET_OK</name></expr> )</condition><block>{<block_content>
					<return>return <expr><name>rc</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>aNodeArgs</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>iP1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Node have an index associated with it */</comment>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>EXPR_FLAG_LOAD_IDX_STORE</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Create an empty entry when the desired index is not found */</comment>
				<expr_stmt><expr><name>iP2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>pOp</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>EXPR_OP_COMMA</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* POP the left node */</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_POP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nJmpIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Generate code for the right tree */</comment>
	<if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>iVmOp</name> <operator>==</operator> <name>JX9_OP_LAND</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Emit the false jump so we can short-circuit the logical and */</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JZ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument><comment type="block">/* Keep the value on the stack */</comment>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJmpIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>iVmOp</name> <operator>==</operator> <name>JX9_OP_LOR</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Emit the true jump so we can short-circuit the logical or*/</comment>
			<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_JNZ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument><comment type="block">/* Keep the value on the stack */</comment>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJmpIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>pOp</name><operator>-&gt;</operator><name>iPrec</name></name> <operator>==</operator> <literal type="number">18</literal></expr> <comment type="block">/* Combined binary operators [i.e: =, '.=', '+=', *=' ...] precedence */</comment> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iFlags</name> <operator>|=</operator> <name>EXPR_FLAG_LOAD_IDX_STORE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEmitExprCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iVmOp</name> <operator>==</operator> <name>JX9_OP_STORE</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmPeekInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pInstr</name></expr> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_MEMBER</name></expr> )</condition><block>{<block_content>
					<comment type="block">/* Perform a member store operation [i.e: $this.x = 50] */</comment>
					<expr_stmt><expr><name>iP2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<if_stmt><if>if<condition>( <expr><name><name>pInstr</name><operator>-&gt;</operator><name>iOp</name></name> <operator>==</operator> <name>JX9_OP_LOAD_IDX</name></expr> )</condition><block>{<block_content>
						<comment type="block">/* Transform the STORE instruction to STORE_IDX instruction */</comment>
						<expr_stmt><expr><name>iVmOp</name> <operator>=</operator> <name>JX9_OP_STORE_IDX</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>iP1</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>iP1</name></name></expr>;</expr_stmt>
					</block_content>}</block></if><else>else<block>{<block_content>
						<expr_stmt><expr><name>p3</name> <operator>=</operator> <name><name>pInstr</name><operator>-&gt;</operator><name>p3</name></name></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<comment type="block">/* POP the last dynamic load instruction */</comment>
					<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>jx9VmPopInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>iVmOp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>iVmOp</name> <operator>==</operator> <name>JX9_OP_INCR</name> <operator>||</operator> <name>iVmOp</name> <operator>==</operator> <name>JX9_OP_DECR</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>iFlags</name></name> <operator>&amp;</operator> <name>EXPR_NODE_PRE_INCR</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Pre-increment/decrement operator [i.e: ++$i, --$j ] */</comment>
				<expr_stmt><expr><name>iP1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Finally, emit the VM instruction associated with this operator */</comment>
		<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>iVmOp</name></expr></argument>, <argument><expr><name>iP1</name></expr></argument>, <argument><expr><name>iP2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>nJmpIdx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Fix short-circuited jumps now the destination is resolved */</comment>
			<expr_stmt><expr><name>pInstr</name> <operator>=</operator> <call><name>jx9VmGetInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>nJmpIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>pInstr</name></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name><name>pInstr</name><operator>-&gt;</operator><name>iP2</name></name> <operator>=</operator> <call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a JX9 expression.
 * According to the JX9 language reference manual:
 *  Expressions are the most important building stones of JX9.
 *  In JX9, almost anything you write is an expression.
 *  The simplest yet most accurate way to define an expression
 *  is "anything that has a value". 
 * If something goes wrong while compiling the expression, this
 * function takes care of generating the appropriate error
 * message.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>jx9CompileExpr</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>,        <comment type="block">/* Control flags */</comment>
	<parameter><function_decl><type><name>sxi32</name></type> (<modifier>*</modifier><name>xTreeValidator</name>)<parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>jx9_expr_node</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> <comment type="block">/* Node validator callback.NULL otherwise */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_expr_node</name> <modifier>*</modifier></type><name>pRoot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SySet</name></type> <name>sExprNode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>nExpr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>iNest</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* Initialize worker variables */</comment>
	<expr_stmt><expr><name>nExpr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pRoot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sExprNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_expr_node</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sExprNode</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
	<comment type="block">/* Delimit the expression */</comment>
	<expr_stmt><expr><name>pEnd</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>iNest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>pEnd</name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pEnd</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_OCB</name></expr> <comment type="block">/* '{' */</comment> )</condition><block>{<block_content>
			<comment type="block">/* Ticket 1433-30: Annonymous/Closure functions body */</comment>
			<expr_stmt><expr><name>iNest</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>pEnd</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_CCB</name></expr> <comment type="block">/* '}' */</comment> )</condition><block>{<block_content>
			<expr_stmt><expr><name>iNest</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pEnd</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name></expr> <comment type="block">/* ';' */</comment> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name>iNest</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pEnd</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>EXPR_FLAG_COMMA_STATEMENT</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pEnd2</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>iNest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="block">/* Stop at the first comma */</comment>
		<while>while<condition>( <expr><name>pEnd2</name> <operator>&lt;</operator> <name>pEnd</name></expr> )</condition><block>{<block_content>
			<if_stmt><if>if<condition>( <expr><name><name>pEnd2</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_OCB</name><comment type="block">/*'{'*/</comment><operator>|</operator><name>JX9_TK_OSB</name><comment type="block">/*'['*/</comment><operator>|</operator><name>JX9_TK_LPAREN</name><comment type="block">/*'('*/</comment><operator>)</operator></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>iNest</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>pEnd2</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <operator>(</operator><name>JX9_TK_CCB</name><comment type="block">/*'}'*/</comment><operator>|</operator><name>JX9_TK_CSB</name><comment type="block">/*']'*/</comment><operator>|</operator><name>JX9_TK_RPAREN</name><comment type="block">/*')'*/</comment><operator>)</operator></expr>)</condition><block>{<block_content>
				<expr_stmt><expr><name>iNest</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pEnd2</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_COMMA</name></expr> <comment type="block">/*','*/</comment> )</condition><block>{<block_content>
				<if_stmt><if>if<condition>( <expr><name>iNest</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pEnd2</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>pEnd2</name> <operator>&lt;</operator><name>pEnd</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>pEnd</name> <operator>=</operator> <name>pEnd2</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>( <expr><name>pEnd</name> <operator>&gt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><name>SyToken</name> <modifier>*</modifier></type><name>pTmp</name> <init>= <expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Swap delimiter */</comment>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
		<comment type="block">/* Try to get an expression tree */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9ExprMakeTree</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sExprNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXRET_OK</name> <operator>&amp;&amp;</operator> <name>pRoot</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>xTreeValidator</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Call the upper layer validator callback */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xTreeValidator</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Generate code for the given tree */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateEmitExprCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>nExpr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Release the whole tree */</comment>
		<expr_stmt><expr><call><name>jx9ExprFreeTree</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sExprNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Synchronize token stream */</comment>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name>  <operator>=</operator> <name>pEnd</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sExprNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sExprNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>nExpr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>SXRET_OK</name></expr> </then><else>: <expr><name>SXERR_EMPTY</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Return a pointer to the node construct handler associated
 * with a given node type [i.e: string, integer, float, ...].
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>ProcNodeConstruct</name></type> <name>jx9GetNodeHandler</name><parameter_list>(<parameter><decl><type><name>sxu32</name></type> <name>nNodeType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name>nNodeType</name> <operator>&amp;</operator> <name>JX9_TK_NUM</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Numeric literal: Either real or integer */</comment>
		<return>return <expr><name>jx9CompileNumLiteral</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nNodeType</name> <operator>&amp;</operator> <name>JX9_TK_DSTR</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Double quoted string */</comment>
		<return>return <expr><name>jx9CompileString</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nNodeType</name> <operator>&amp;</operator> <name>JX9_TK_SSTR</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Single quoted string */</comment>
		<return>return <expr><name>jx9CompileSimpleString</name></expr>;</return>
	</block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nNodeType</name> <operator>&amp;</operator> <name>JX9_TK_NOWDOC</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nowdoc */</comment>
		<return>return <expr><name>jx9CompileNowdoc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Jx9 Language construct table.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>LangConstruct</name></type> <name><name>aLangConstruct</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>JX9_TKWRD_IF</name></expr>,       <expr><name>jx9CompileIf</name></expr>     }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_FUNCTION</name></expr>, <expr><name>jx9CompileFunction</name></expr>  }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_FOREACH</name></expr>,  <expr><name>jx9CompileForeach</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_WHILE</name></expr>,    <expr><name>jx9CompileWhile</name></expr>  }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_FOR</name></expr>,      <expr><name>jx9CompileFor</name></expr>    }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_SWITCH</name></expr>,   <expr><name>jx9CompileSwitch</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_DIE</name></expr>,      <expr><name>jx9CompileHalt</name></expr>   }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_EXIT</name></expr>,     <expr><name>jx9CompileHalt</name></expr>   }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_RETURN</name></expr>,   <expr><name>jx9CompileReturn</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_BREAK</name></expr>,    <expr><name>jx9CompileBreak</name></expr>  }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_CONTINUE</name></expr>, <expr><name>jx9CompileContinue</name></expr>  }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_STATIC</name></expr>,   <expr><name>jx9CompileStatic</name></expr>    }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_UPLINK</name></expr>,   <expr><name>jx9CompileUplink</name></expr>  }</block></expr>,
	<expr><block>{ <expr><name>JX9_TKWRD_CONST</name></expr>,    <expr><name>jx9CompileConstant</name></expr>  }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Return a pointer to the statement handler routine associated
 * with a given JX9 keyword [i.e: if, for, while, ...].
 */</comment>
<function><type><specifier>static</specifier> <name>ProcLangConstruct</name></type> <name>GenStateGetStatementHandler</name><parameter_list>(
	<parameter><decl><type><name>sxu32</name></type> <name>nKeywordID</name></decl></parameter>   <comment type="block">/* Keyword  ID*/</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sxu32</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;=</operator> <call><name>SX_ARRAYSIZE</name><argument_list>(<argument><expr><name>aLangConstruct</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>aLangConstruct</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nID</name> <operator>==</operator> <name>nKeywordID</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Return a pointer to the handler.
			*/</comment>
			<return>return <expr><name><name>aLangConstruct</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>xConstruct</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Not a language construct */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a jx9 program.
 * If something goes wrong while compiling the Jx9 chunk, this function
 * takes care of generating the appropriate error message.
 */</comment>
<function><type><specifier>static</specifier> <name>sxi32</name></type> <name>GenStateCompileChunk</name><parameter_list>(
	<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>, <comment type="block">/* Code generator state */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>             <comment type="block">/* Compile flags */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ProcLangConstruct</name></type> <name>xCons</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SXRET_OK</name></expr>;</expr_stmt> <comment type="block">/* Prevent compiler warning */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&gt;=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name></expr> )</condition><block>{<block_content>
			<comment type="block">/* No more input to process */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>xCons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_KEYWORD</name></expr> )</condition><block>{<block_content>
			<decl_stmt><decl><type><name>sxu32</name></type> <name>nKeyword</name> <init>= <expr><operator>(</operator><name>sxu32</name><operator>)</operator><call><name>SX_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Try to extract a language construct handler */</comment>
			<expr_stmt><expr><name>xCons</name> <operator>=</operator> <call><name>GenStateGetStatementHandler</name><argument_list>(<argument><expr><name>nKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>( <expr><name>xCons</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>jx9IsLangConstruct</name><argument_list>(<argument><expr><name>nKeyword</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9GenCompileError</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><name>E_ERROR</name></expr></argument>, <argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nLine</name></name></expr></argument>,
					<argument><expr><literal type="string">"Syntax error: Unexpected keyword '%z'"</literal></expr></argument>,
					<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Synchronize with the first semi-colon and avoid compiling
				 * this erroneous statement.
				 */</comment>
				<expr_stmt><expr><name>xCons</name> <operator>=</operator> <name>jx9ErrorRecover</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>xCons</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Assume an expression an try to compile it */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jx9CompileExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(  <expr><name>rc</name> <operator>!=</operator> <name>SXERR_EMPTY</name></expr> )</condition><block>{<block_content>
				<comment type="block">/* Pop l-value */</comment>
				<expr_stmt><expr><call><name>jx9VmEmitInstr</name><argument_list>(<argument><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name></expr></argument>, <argument><expr><name>JX9_OP_POP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if><else>else<block>{<block_content>
			<comment type="block">/* Go compile the sucker */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xCons</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pGen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>==</operator> <name>SXERR_ABORT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Request to abort compilation */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Ignore trailing semi-colons ';' */</comment>
		<while>while<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>&lt;</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><operator>-&gt;</operator><name>nType</name></name> <operator>&amp;</operator> <name>JX9_TK_SEMI</name><operator>)</operator></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>( <expr><name>iFlags</name> <operator>&amp;</operator> <name>JX9_COMPILE_SINGLE_STMT</name></expr> )</condition><block>{<block_content>
			<comment type="block">/* Compile a single statement and return */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* LOOP ONE */</comment>
		<comment type="block">/* LOOP TWO */</comment>
		<comment type="block">/* LOOP THREE */</comment>
		<comment type="block">/* LOOP FOUR */</comment>
	</block_content>}</block></for>
	<comment type="block">/* Return compilation status */</comment>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Compile a raw chunk. The raw chunk can contain JX9 code embedded
 * in HTML, XML and so on. This function handle all the stuff.
 * This is the only compile interface exported from this file.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9CompileScript</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,        <comment type="block">/* Generate JX9 bytecodes for this Virtual Machine */</comment>
	<parameter><decl><type><name>SyString</name> <modifier>*</modifier></type><name>pScript</name></decl></parameter>,  <comment type="block">/* Script to compile */</comment>
	<parameter><decl><type><name>sxi32</name></type> <name>iFlags</name></decl></parameter>        <comment type="block">/* Compile flags */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SySet</name></type> <name>aToken</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sxi32</name></type> <name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name><name>pScript</name><operator>-&gt;</operator><name>nByte</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Nothing to compile */</comment>
		<return>return <expr><name>JX9_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Initialize the tokens containers */</comment>
	<expr_stmt><expr><call><name>SySetInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SyToken</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SySetAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aToken</name></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pGen</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sCodeGen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JX9_OK</name></expr>;</expr_stmt>
	<comment type="block">/* Tokenize the JX9 chunk first */</comment>
	<expr_stmt><expr><call><name>jx9Tokenize</name><argument_list>(<argument><expr><name><name>pScript</name><operator>-&gt;</operator><name>zString</name></name></expr></argument>,<argument><expr><name><name>pScript</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>aToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aToken</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
		<return>return <expr><name>SXERR_EMPTY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Point to the head and tail of the token stream. */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name>  <operator>=</operator> <operator>(</operator><name>SyToken</name> <operator>*</operator><operator>)</operator><call><name>SySetBasePtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name><index>[<expr><call><name>SySetUsed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aToken</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Compile the chunk */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GenStateCompileChunk</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>,<argument><expr><name>iFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Cleanup */</comment>
	<expr_stmt><expr><call><name>SySetRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Utility routines.Initialize the code generator.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9InitCodeGenerator</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,       <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>ProcConsumer</name></type> <name>xErr</name></decl></parameter>, <comment type="block">/* Error log consumer callabck  */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pErrData</name></decl></parameter>     <comment type="block">/* Last argument to xErr() */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name> <init>= <expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sCodeGen</name></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Zero the structure */</comment>
	<expr_stmt><expr><call><name>SyZero</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jx9_gen_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Initial state */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name></name>  <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>xErr</name></name> <operator>=</operator> <name>xErr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pErrData</name></name> <operator>=</operator> <name>pErrData</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyHashInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>hLiteral</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyHashInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>hVar</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sAllocator</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Create the global scope */</comment>
	<expr_stmt><expr><call><name>GenStateInitBlock</name><argument_list>(<argument><expr><name>pGen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>sGlobal</name></name></expr></argument>,<argument><expr><name>GEN_BLOCK_GLOBAL</name></expr></argument>,<argument><expr><call><name>jx9VmInstrLength</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pVm</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Point to the global scope */</comment>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>sGlobal</name></name></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Utility routines. Reset the code generator to it's initial state.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9ResetCodeGenerator</name><parameter_list>(
	<parameter><decl><type><name>jx9_vm</name> <modifier>*</modifier></type><name>pVm</name></decl></parameter>,       <comment type="block">/* Target VM */</comment>
	<parameter><decl><type><name>ProcConsumer</name></type> <name>xErr</name></decl></parameter>, <comment type="block">/* Error log consumer callabck  */</comment>
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pErrData</name></decl></parameter>     <comment type="block">/* Last argument to xErr() */</comment>
	)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name> <init>= <expr><operator>&amp;</operator><name><name>pVm</name><operator>-&gt;</operator><name>sCodeGen</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GenBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pParent</name></decl>;</decl_stmt>
	<comment type="block">/* Point to the global scope */</comment>
	<expr_stmt><expr><name>pBlock</name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name></expr>;</expr_stmt>
	<while>while<condition>( <expr><name><name>pBlock</name><operator>-&gt;</operator><name>pParent</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><name>pParent</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>pParent</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GenStateFreeBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pBlock</name> <operator>=</operator> <name>pParent</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>xErr</name></name> <operator>=</operator> <name>xErr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pErrData</name></name> <operator>=</operator> <name>pErrData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pCurrent</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>sGlobal</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name><name>pGen</name><operator>-&gt;</operator><name>pEnd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>nErr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>SXRET_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Generate a compile-time error message.
 * If the error count limit is reached (usually 15 error message)
 * this function return SXERR_ABORT.In that case upper-layers must
 * abort compilation immediately.
 */</comment>
<function><type><name>JX9_PRIVATE</name> <name>sxi32</name></type> <name>jx9GenCompileError</name><parameter_list>(<parameter><decl><type><name>jx9_gen_state</name> <modifier>*</modifier></type><name>pGen</name></decl></parameter>,<parameter><decl><type><name>sxi32</name></type> <name>nErrType</name></decl></parameter>,<parameter><decl><type><name>sxu32</name></type> <name>nLine</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SyBlob</name> <modifier>*</modifier></type><name>pWorker</name> <init>= <expr><operator>&amp;</operator><name><name>pGen</name><operator>-&gt;</operator><name>pVm</name><operator>-&gt;</operator><name>pEngine</name><operator>-&gt;</operator><name>xConf</name><operator>.</operator><name>sErrConsumer</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="string">"Error"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>( <expr><name>nErrType</name> <operator>==</operator> <name>E_ERROR</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Increment the error counter */</comment>
		<expr_stmt><expr><name><name>pGen</name><operator>-&gt;</operator><name>nErr</name></name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name><name>pGen</name><operator>-&gt;</operator><name>nErr</name></name> <operator>&gt;</operator> <literal type="number">15</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Error count limit reached */</comment>
			<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="string">"%u Error count limit reached, JX9 is aborting compilation\n"</literal></expr></argument>, <argument><expr><name>nLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			<comment type="block">/* Abort immediately */</comment>
			<return>return <expr><name>SXERR_ABORT</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<switch>switch<condition>(<expr><name>nErrType</name></expr>)</condition><block>{<block_content>
	<case>case <expr><name>E_WARNING</name></expr>:</case> <expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Warning"</literal></expr>;</expr_stmt>     <break>break;</break>
	<case>case <expr><name>E_PARSE</name></expr>:</case>   <expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Parse error"</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>E_NOTICE</name></expr>:</case>  <expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="string">"Notice"</literal></expr>;</expr_stmt>      <break>break;</break>
	<default>default:</default>
		<break>break;</break>
	</block_content>}</block></switch>
	<comment type="block">/* Format the error message */</comment>
	<expr_stmt><expr><call><name>SyBlobFormat</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><literal type="string">"%u %s: "</literal></expr></argument>, <argument><expr><name>nLine</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyBlobFormatAp</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Append a new line */</comment>
	<expr_stmt><expr><call><name>SyBlobAppend</name><argument_list>(<argument><expr><name>pWorker</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>JX9_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
