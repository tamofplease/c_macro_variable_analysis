<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/example/unqlite_tar.c"><comment type="block">/*
 * Compile this file together with the UnQLite database engine source code
 * to generate the executable. For example:
 *  gcc -W -Wall -O6 unqlite_tar.c unqlite.c -o unqlite_tar
*/</comment>
<comment type="block">/*
 * This simple program is a quick introduction on how to embed and start
 * experimenting with UnQLite without having to do a lot of tedious
 * reading and configuration.
 *
 * Turn a UnQLite database into a TAR-like archive with O(1) record lookup.
 *
 * Typical usage of this program:
 *
 * To store files in the database, simply invoke the program with the '-w' command as follows:
 *
 *  ./unqlite_tar test.db -w file1 file2 file3...
 *
 * To extract a stored file, use the '-r' as follows:
 *
 * ./unqlite_tar test.db -r file1 file2...
 *
 * To iterate (using the cursor interfaces) over the inserted records, use the '-i' command
 * as follows:
 *
 *  ./unqlite_tar test.db -i
 *
 * Only Key/Value store plus some utility interfaces are used in this example.
 *
 * For an introduction to the UnQLite C/C++ interface, please refer to:
 *        http://unqlite.org/api_intro.html
 * For the full C/C++ API reference guide, please refer to:
 *        http://unqlite.org/c_api.html
 * UnQLite in 5 Minutes or Less:
 *        http://unqlite.org/intro.html
 * The Architecture of the UnQLite Database Engine:
 *        http://unqlite.org/arch.html
 * For an introduction to Jx9 which is the scripting language which power
 * the Document-Store interface to UnQLite, please refer to:
 *        http://unqlite.org/jx9.html
 */</comment>
 <comment type="block">/* $SymiscID: unqlite_huge_insert.c v1.0 Solaris 2013-05-15 20:17 stable &lt;chm@symisc.net&gt; $ */</comment>
 <comment type="block">/*
  * Make sure you have the latest release of UnQLite from:
  *  http://unqlite.org/downloads.html
  */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>  <comment type="block">/* puts() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> <comment type="block">/* exit() */</comment>
  <comment type="block">/* Make sure this header file is available.*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unqlite.h"</cpp:file></cpp:include>
<comment type="block">/*
 * Banner.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zBanner</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"============================================================\n"</literal>
	<literal type="string">"UnQLite TAR                                                 \n"</literal>
	<literal type="string">"                                         http://unqlite.org/\n"</literal>
	<literal type="string">"============================================================\n"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Display the banner, a help message and exit.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>zBanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"unqlite_tar db_name (-r|-w|-i) file1 [file2 ...]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"\t-w: Store one or more files in the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"\t-r: Extract records from the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"\t-i: Iterate over the stored files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Exit immediately */</comment>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Extract the database error log and exit.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Fatal</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>pDb</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>iLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Stupid cc warning */</comment>

		<comment type="block">/* Extract the database error log */</comment>
		<expr_stmt><expr><call><name>unqlite_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>UNQLITE_CONFIG_ERR_LOG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>iLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Output the DB error log */</comment>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Always null terminated */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>zMsg</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Manually shutdown the library */</comment>
	<expr_stmt><expr><call><name>unqlite_lib_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Exit immediately */</comment>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* Forward declaration: Data consumer callback */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DataConsumerCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nDatalen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter> <comment type="block">/* Unused */</comment>)</parameter_list>;</function_decl>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>db_extract</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* TRUE to extract records from the dabase */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>db_store</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* TRUE to store files in the database */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>db_iterate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* TRUE to iterate over the inserted elements */</comment>
	<decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>                <comment type="block">/* Database handle */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Missing database name */</comment>
		<expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Missing command */</comment>
		<expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'i'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Iterate over the inserted elements */</comment>
		<expr_stmt><expr><name>db_iterate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Store some files */</comment>
		<expr_stmt><expr><name>db_store</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* Extract some records */</comment>
		<expr_stmt><expr><name>db_extract</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>


	<comment type="block">/* Open our database */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>db_store</name></expr> ?</condition><then> <expr><name>UNQLITE_OPEN_CREATE</name></expr> </then><else>: <expr><operator>(</operator><name>UNQLITE_OPEN_READONLY</name> <operator>|</operator> <name>UNQLITE_OPEN_MMAP</name><operator>)</operator></expr></else></ternary></expr></argument> <comment type="block">/* Read-only DB */</comment>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>db_store</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>          <comment type="block">/* Read-only memory view of the target file */</comment>
		<decl_stmt><decl><type><name>unqlite_int64</name></type> <name>nSize</name></decl>;</decl_stmt> <comment type="block">/* file size */</comment>

		<comment type="block">/* Start the insertion */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Inserting %s\t ... "</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Obtain a read-only memory view of the whole file */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_util_load_mmaped_file</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* Store the whole file */</comment>
				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_kv_store</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Discard this view */</comment>
				<expr_stmt><expr><call><name>unqlite_util_release_mmaped_file</name><argument_list>(<argument><expr><name>pMap</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <name>UNQLITE_OK</name></expr> ?</condition><then> <expr><literal type="string">"OK"</literal></expr> </then><else>: <expr><literal type="string">"Fail"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<comment type="block">/* Manually commit the transaction.
		 * In fact, a call to unqlite_commit() is not necessary since UnQLite
		 * will automatically commit the transaction during a call to unqlite_close().
		 */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_commit</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Rollback the transaction */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_rollback</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Something goes wrong, extract the database error log and exit */</comment>
			<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>db_iterate</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Iterate over the inserted records */</comment>
		<decl_stmt><decl><type><name>unqlite_kv_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>

		<comment type="block">/* Allocate a new cursor instance */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_kv_cursor_init</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Point to the first record */</comment>
		<expr_stmt><expr><call><name>unqlite_kv_cursor_first_entry</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Iterate over the entries */</comment>
		<while>while <condition>(<expr><call><name>unqlite_kv_cursor_valid_entry</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unqlite_int64</name></type> <name>nDataLen</name></decl>;</decl_stmt>

			<comment type="block">/* Consume the key */</comment>
			<expr_stmt><expr><call><name>unqlite_kv_cursor_key_callback</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><name>DataConsumerCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Extract the data size */</comment>
			<expr_stmt><expr><call><name>unqlite_kv_cursor_data</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">":\t %ld Bytes\n"</literal></expr></argument>, <argument><expr><name>nDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* unqlite_kv_cursor_data_callback(pCur,DataConsumerCallback,0); */</comment>

			<comment type="block">/* Point to the next entry */</comment>
			<expr_stmt><expr><call><name>unqlite_kv_cursor_next_entry</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<comment type="block">/* Finally, Release our cursor */</comment>
		<expr_stmt><expr><call><name>unqlite_kv_cursor_release</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* Extract one more records */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_kv_fetch_callback</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>DataConsumerCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>UNQLITE_NOTFOUND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No such record: %s\n"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* All done, close our database */</comment>
	<expr_stmt><expr><call><name>unqlite_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* Assume UNIX */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * The following define is used by the UNIX build process and have
 * no particular meaning on windows.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDOUT_FILENO</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDOUT_FILENO</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 <comment type="block">/*
  * Data consumer callback [unqlite_kv_fetch_callback(), unqlite_kv_cursor_key_callback(), etc.).
  *
  * Rather than allocating a static or dynamic buffer (Inefficient scenario for large data).
  * The caller simply need to supply a consumer callback which is responsible of consuming
  * the record data perhaps redirecting it (i.e. Record data) to its standard output (STDOUT),
  * disk file, connected peer and so forth.
  * Depending on how large the extracted data, the callback may be invoked more than once.
  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DataConsumerCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nDatalen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter> <comment type="block">/* Unused */</comment>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WriteFile</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nDatalen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Abort processing */</comment>
		<return>return <expr><name>UNQLITE_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>nWr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nWr</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nDatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nWr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Abort processing */</comment>
		<return>return <expr><name>UNQLITE_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __WINT__ */</comment>
	<comment type="block">/* All done, data was redirected to STDOUT */</comment>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
