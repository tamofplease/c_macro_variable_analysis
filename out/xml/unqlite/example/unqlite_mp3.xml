<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/unqlite/example/unqlite_mp3.c"><comment type="block">/*
 * Compile this file together with the UnQLite database engine source code
 * to generate the executable. For example: 
 *  gcc -W -Wall -O6 unqlite_mp3_tag.c unqlite.c -o unqlite_mp3
*/</comment>
<comment type="block">/*
 * This simple program is a quick introduction on how to embed and start
 * experimenting with UnQLite without having to do a lot of tedious
 * reading and configuration.
 *
 * Introduction to Jx9 IO facility:
 *
 * The Document store to UnQLite which is used to store JSON docs (i.e. Objects, Arrays, Strings, etc.)
 * in the database is powered by the Jx9 programming language.
 *
 * Jx9 is an embeddable scripting language also called extension language designed
 * to support general procedural programming with data description facilities.
 * Jx9 is a Turing-Complete, dynamically typed programming language based on JSON
 * and implemented as a library in the UnQLite core.
 *
 * Jx9 is built with a tons of features and has a clean and familiar syntax similar
 * to C and Javascript.
 * Being an extension language, Jx9 has no notion of a main program, it only works
 * embedded in a host application.
 * The host program (UnQLite in our case) can write and read Jx9 variables and can
 * register C/C++ functions to be called by Jx9 code. 
 *
 * For an introduction to the UnQLite C/C++ interface, please refer to:
 *        http://unqlite.org/api_intro.html
 * For an introduction to Jx9, please refer to:
 *        http://unqlite.org/jx9.html
 * For the full C/C++ API reference guide, please refer to:
 *        http://unqlite.org/c_api.html
 * UnQLite in 5 Minutes or Less:
 *        http://unqlite.org/intro.html
 * The Architecture of the UnQLite Database Engine:
 *        http://unqlite.org/arch.html
 */</comment>
<comment type="block">/* $SymiscID: unqlite_mp3_tag.c v1.0 Win7 2013-05-17 22:37 stable &lt;chm@symisc.net&gt; $ */</comment>
<comment type="block">/* 
 * Make sure you have the latest release of UnQLite from:
 *  http://unqlite.org/downloads.html
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>  <comment type="block">/* puts() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> <comment type="block">/* exit() */</comment>
<comment type="block">/* Make sure this header file is available.*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unqlite.h"</cpp:file></cpp:include>
<comment type="block">/*
 * Banner.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zBanner</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"============================================================\n"</literal>
	<literal type="string">"UnQLite Document-Store (Via Jx9) IO Intro (2)               \n"</literal>
	<literal type="string">"                                         http://unqlite.org/\n"</literal>
	<literal type="string">"============================================================\n"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Extract the database error log and exit.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Fatal</name><parameter_list>(<parameter><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>( <expr><name>pDb</name></expr> )</condition><block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>iLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Stupid cc warning */</comment>

		<comment type="block">/* Extract the database error log */</comment>
		<expr_stmt><expr><call><name>unqlite_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><name>UNQLITE_CONFIG_ERR_LOG</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<comment type="block">/* Output the DB error log */</comment>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Always null terminated */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if><else>else<block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>zMsg</name></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Manually shutdown the library */</comment>
	<expr_stmt><expr><call><name>unqlite_lib_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Exit immediately */</comment>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* Forward declaration: VM output consumer callback */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VmOutputConsumer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pOutput</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nOutLen</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter> <comment type="block">/* Unused */</comment>)</parameter_list>;</function_decl>
<comment type="block">/*
 * The following is the Jx9 Program to be executed later by the UnQLite VM:
 *
 * The program expects a command line
 * path from which all available MP3 are extrcated and their ID3v1 tags (if available)
 * are outputted.
 * To run this program, simply enter the executable name and the target directory as follows:
 *
 *  unqlite_mp3 /path/to/my/mp3s
 * 
 *  if( count($argv) &lt; 1 ){
 *   die("Missing MP3s directory");
 * }
 * $dir = $argv[0];
 * if( !chdir($dir) ){
 *	 die("Error while changing directory");
 * }
 * //Collect MP3 files
 * $pFiles = glob("*.mp3");
 * if( is_array($pFiles) ){
 *  foreach($pFiles as $pEntry){
 *    print "\nMP3: $pEntry ",size_format(filesize($pEntry)),JX9_EOL;// Give a nice presentation
 *	 // Open the file in a read only mode
 *	 $pHandle = fopen($pEntry,'r');
 *	 if( $pHandle == FALSE ){
 *	   print "IO error while opening $pEntry\n";
 *	   continue; // Ignore 
 *	 }
 *	 // Seek 128 bytes from the end
 *	 fseek($pHandle,-128,SEEK_END);
 *	 // Read the 128 raw data
 *	 $zBuf = fread($pHandle,128);
 *	 if( !$zBuf || strlen($zBuf) != 128 ){
 *		print "$pEntry: Read error\n";
 *		// Ignore
 *		continue;
 *	 }
 *	 if( $zBuf[0] == 'T' &amp;&amp; $zBuf[1] == 'A' &amp;&amp; $zBuf[2] == 'G'  ){
 *	    $nOfft = 3;
 *		// Extract the title
 *		$zTitle = substr($zBuf,$nOfft,30);
 *		// Remove trailing and leading NUL bytes and white spaces
 *		$zTitle = trim($zTitle);
 *		if( strlen($zTitle) &gt; 0 ){
 *				print "Title: $zTitle\n";
 *		}
 *		// Extract artist name
 *		$zArtist = substr($zBuf,$nOfft+30,30);
 *		// Remove trailing and leading NUL bytes and white spaces
 *		$zArtist = trim($zArtist);
 *		if( strlen($zArtist) &gt; 0 ){
 *				print "Artist: $zArtist\n";
 *		}
 *		// Extract album name 
 *		$zAlbum = substr($zBuf,$nOfft+30+30,30);
 *		// Remove trailing and leading NUL bytes and white spaces
 *		$zAlbum = trim($zAlbum);
 *		if( strlen($zAlbum) &gt; 0 ){
 *				print "Album: $zAlbum\n";
 *		}
 *		// Extract the Year 
 *		$zYear = substr($zBuf,$nOfft+30+30+30,4);
 *		// Remove trailing and leading NUL bytes and white spaces
 *		$zYear = trim($zYear);
 *		if( strlen($zYear) &gt; 0 ){
 *				print "Year: $zYear\n";
 *		}
 *		// Next entry
 *		print "------------------------------------------------------\n";
 *	 }
 *	 // All done whith this file, close the handle
 *	 fclose($pHandle);
 *  }
 * }
 * 
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JX9_PROG</name></cpp:macro> \
 <cpp:value>"if( count($argv) &lt; 1 ){"\
  " EXIT('Missing MP3s directory');"\
  "}"\
  "$dir = $argv[0];"\
  "if( !chdir($dir) ){"\
  "	EXIT('Error while changing directory');"\
  "}"\
  "/* Collect MP3 files */"\
  "$pFiles = glob('*.mp3');"\
  "if( is_array($pFiles) ){"\
  "foreach($pFiles as $pEntry){"\
  "   print \"\nMP3: $pEntry \",size_format(filesize($pEntry)),JX9_EOL;/* Give a nice presentation */"\
  "	 /* Open the file in a read only mode */"\
  "	 $pHandle = fopen($pEntry,'r');"\
  "	 if( $pHandle == FALSE ){"\
  "	   print \"IO error while opening $pEntry\n\";"\
  "	   continue; /* Ignore */"\
  "	 }"\
  "	 /* Seek 128 bytes from the end */"\
  "	 fseek($pHandle,-128,SEEK_END);"\
  "	 /* Read the 128 raw data */"\
  "	 $zBuf = fread($pHandle,128);"\
  "	 if( !$zBuf || strlen($zBuf) != 128 ){"\
  "		print \"$pEntry: Read error\n\";"\
  "		/* Ignore */"\
  "		continue;"\
  "	 }"\
  "	 if( $zBuf[0] == 'T' &amp;&amp; $zBuf[1] == 'A' &amp;&amp; $zBuf[2] == 'G'  ){"\
  "	    $nOfft = 3 /* TAG */;"\
  "		/* Extract the title */"\
  "		$zTitle = substr($zBuf,$nOfft,30);"\
  "		/* Remove trailing and leading NUL bytes and white spaces */"\
  "		$zTitle = trim($zTitle);"\
  "		if( strlen($zTitle) &gt; 0 ){"\
  "				print \"Title: $zTitle\n\";"\
  "		}"\
  "		/* Extract artist name */"\
  "		$zArtist = substr($zBuf,$nOfft+30,30);"\
  "		/* Remove trailing and leading NUL bytes and white spaces */"\
  "		$zArtist = trim($zArtist);"\
  "		if( strlen($zArtist) &gt; 0 ){"\
  "				print \"Artist: $zArtist\n\";"\
  "		}"\
  "		/* Extract album name */"\
  "		$zAlbum = substr($zBuf,$nOfft+30+30,30);"\
  "		/* Remove trailing and leading NUL bytes and white spaces */"\
  "		$zAlbum = trim($zAlbum);"\
  "		if( strlen($zAlbum) &gt; 0 ){"\
  "				print \"Album: $zAlbum\n\";"\
  "		}"\
  "		/* Extract the Year */"\
  "		$zYear = substr($zBuf,$nOfft+30+30+30,4);"\
  "		/* Remove trailing and leading NUL bytes and white spaces */"\
  "		$zYear = trim($zYear);"\
  "		if( strlen($zYear) &gt; 0 ){"\
  "				print \"Year: $zYear\n\";"\
  "		}"\
  "		/* Next entry */"\
  "		print \"------------------------------------------------------\n\";"\
  "	 }"\
  "	 /* All done whith this file,close the handle */"\
  "	 fclose($pHandle);"\
  " }"\
  "}"</cpp:value></cpp:define>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unqlite</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>       <comment type="block">/* Database handle */</comment>
	<decl_stmt><decl><type><name>unqlite_vm</name> <modifier>*</modifier></type><name>pVm</name></decl>;</decl_stmt>    <comment type="block">/* UnQLite VM resulting from successful compilation of the target Jx9 script */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>zBanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Open our database */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>,<argument><expr><literal type="string">":mem:"</literal></expr></argument> <comment type="block">/* In-mem DB */</comment>,<argument><expr><name>UNQLITE_OPEN_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<comment type="block">/* Compile our Jx9 script defined above */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_compile</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><name>JX9_PROG</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JX9_PROG</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Compile error, extract the compiler error log */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>iLen</name></decl>;</decl_stmt>
		<comment type="block">/* Extract error log */</comment>
		<expr_stmt><expr><call><name>unqlite_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><name>UNQLITE_CONFIG_JX9_ERR_LOG</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>zBuf</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>( <expr><name>iLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"Jx9 compile error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Register script agruments so we can access them later using the $argv[]
	 * array from the compiled Jx9 program.
	 */</comment>
	<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>argc</name></expr> ;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control><block>{<block_content>
		<expr_stmt><expr><call><name>unqlite_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>, <argument><expr><name>UNQLITE_VM_CONFIG_ARGV_ENTRY</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument><comment type="block">/* Argument value */</comment>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Install a VM output consumer callback */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_vm_config</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>,<argument><expr><name>UNQLITE_VM_CONFIG_OUTPUT</name></expr></argument>,<argument><expr><name>VmOutputConsumer</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<comment type="block">/* Execute our script */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unqlite_vm_exec</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>rc</name> <operator>!=</operator> <name>UNQLITE_OK</name></expr> )</condition><block>{<block_content>
		<expr_stmt><expr><call><name>Fatal</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Release our VM */</comment>
	<expr_stmt><expr><call><name>unqlite_vm_release</name><argument_list>(<argument><expr><name>pVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* Auto-commit the transaction and close our database */</comment>
	<expr_stmt><expr><call><name>unqlite_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* Assume UNIX */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * The following define is used by the UNIX build process and have
 * no particular meaning on windows.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDOUT_FILENO</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDOUT_FILENO</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * VM output consumer callback.
 * Each time the UnQLite VM generates some outputs, the following
 * function gets called by the underlying virtual machine to consume
 * the generated output.
 *
 * All this function does is redirecting the VM output to STDOUT.
 * This function is registered via a call to [unqlite_vm_config()]
 * with a configuration verb set to: UNQLITE_VM_CONFIG_OUTPUT.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>VmOutputConsumer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pOutput</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nOutLen</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter> <comment type="block">/* Unused */</comment>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__WINNT__</name></cpp:ifdef>
	<decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WriteFile</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>pOutput</name></expr></argument>,<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nOutLen</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition><block>{<block_content>
		<comment type="block">/* Abort processing */</comment>
		<return>return <expr><name>UNQLITE_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>nWr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nWr</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>,<argument><expr><name>pOutput</name></expr></argument>,<argument><expr><name>nOutLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>( <expr><name>nWr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
		<comment type="block">/* Abort processing */</comment>
		<return>return <expr><name>UNQLITE_ABORT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __WINT__ */</comment>
	
	<comment type="block">/* All done, data was redirected to STDOUT */</comment>
	<return>return <expr><name>UNQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
