<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/esp32_spi_flash/components/FlashDB/porting/fal_flash_esp32_port.c"><comment type="block">/*
 * Copyright (c) 2022, kaans, &lt;https://github.com/kaans&gt;
 *
 * SPDX-License-Identifier: Apache-2.0
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"esp_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;esp_partition.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASH_ERASE_MIN_SIZE</name></cpp:macro> <cpp:value>(4 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCKER_ENABLE</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCKER_ENABLE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"freertos/FreeRTOS.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"freertos/semphr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SemaphoreHandle_t</name></type> <name>s_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>esp_partition_t</name> <modifier>*</modifier></type><name>partition</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK</name><parameter_list>()</parameter_list></cpp:macro>                                 \
    <cpp:value>do                                         \
    {                                          \
        xSemaphoreTake(s_lock, portMAX_DELAY); \
    } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCK</name><parameter_list>()</parameter_list></cpp:macro>                \
    <cpp:value>do                          \
    {                           \
        xSemaphoreGive(s_lock); \
    } while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCKER_ENABLE</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>s_lock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>s_lock</name> <operator>=</operator> <call><name>xSemaphoreCreateCounting</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s_lock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// the values passed to esp_partition_find_first() must correspond to the</comment>
    <comment type="line">// values set in partitions.csv for the partition named "flashdb".</comment>
    <expr_stmt><expr><name>partition</name> <operator>=</operator> <call><name>esp_partition_find_first</name><argument_list>(<argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="string">"flashdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>partition</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>esp_err_t</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>esp_partition_read</name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>esp_err_t</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>esp_partition_write</name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>esp_err_t</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>erase_size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>FLASH_ERASE_MIN_SIZE</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>esp_partition_erase_range</name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>erase_size</name> <operator>*</operator> <name>FLASH_ERASE_MIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fal_flash_dev</name></name></type> <name>nor_flash0</name> <init>=
    <expr><block>{
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>NOR_FLASH_DEV_NAME</name></expr>,
        <expr><operator>.</operator><name>addr</name> <operator>=</operator> <literal type="number">0x0</literal></expr>,                      <comment type="line">// address is relative to beginning of partition; 0x0 is start of the partition</comment>
        <expr><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr>,                 <comment type="line">// size of the partition as specified in partitions.csv</comment>
        <expr><operator>.</operator><name>blk_size</name> <operator>=</operator> <name>FLASH_ERASE_MIN_SIZE</name></expr>, <comment type="line">// must be 4096 bytes</comment>
        <expr><operator>.</operator><name>ops</name> <operator>=</operator> <block>{<expr><name>init</name></expr>, <expr><name>read</name></expr>, <expr><name>write</name></expr>, <expr><name>erase</name></expr>}</block></expr>,
        <expr><operator>.</operator><name>write_gran</name> <operator>=</operator> <literal type="number">1</literal></expr>, <comment type="line">// 1 byte write granularity</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
