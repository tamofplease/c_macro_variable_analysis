<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/drivers/drv_usart.c"><comment type="block">/*
 * Copyright (c) 2006-2019, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2019-11-09     xiangxistu   first version
 * 2020-05-18     chenyaxing   modify stm32_uart_config struct
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stm32f4xx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uart_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;board.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>UART_HandleTypeDef</name></type> <name>handle</name></decl>;</decl_stmt>

<comment type="block">/* stm32 config class */</comment>
<struct>struct <name>stm32_uart_config</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>USART_TypeDef</name> <modifier>*</modifier></type><name>Instance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IRQn_Type</name></type> <name>irq_type</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tx_pin_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rx_pin_name</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stm32_uart_config</name></name> <modifier>*</modifier></type><name>_uart_config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stm32_uart_config</name></name></type> <name><name>uart_config</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART1</name></cpp:ifdef>
    <expr><name>UART1_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART2</name></cpp:ifdef>
    <expr><name>UART2_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART3</name></cpp:ifdef>
    <expr><name>UART3_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART4</name></cpp:ifdef>
    <expr><name>UART4_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART5</name></cpp:ifdef>
    <expr><name>UART5_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART6</name></cpp:ifdef>
    <expr><name>UART6_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART7</name></cpp:ifdef>
    <expr><name>UART7_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART8</name></cpp:ifdef>
    <expr><name>UART8_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_LPUART1</name></cpp:ifdef>
    <expr><name>LPUART1_CONFIG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>long</name></type> <name>stm32_uart_clk_enable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stm32_uart_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_UART_INSTANCE</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>Instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* uart clock enable */</comment>
    <switch>switch <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>Instance</name></name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART1</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART1</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART1_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART1 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART2</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART2</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART2_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART2 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART3</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART3</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART3_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART3 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART4</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F0</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32L0</name></expr></argument>)</argument_list></call> <operator>||</operator> \
   <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32G0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART4</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART4_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>UART4</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_UART4_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART4 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART5</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F0</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32L0</name></expr></argument>)</argument_list></call> <operator>||</operator> \
   <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32G0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART5</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART5_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>UART5</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_UART5_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART5 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART6</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART6</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART6_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART6 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART7</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART7</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART7_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>UART7</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_UART7_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART7 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_UART8</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F0</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>USART8</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_USART8_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>UART8</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_UART8_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_UART8 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BSP_USING_LPUART1</name></cpp:ifdef>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>LPUART1</name></expr>:</case>
       <expr_stmt><expr><call><name>__HAL_RCC_LPUART1_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BSP_USING_LPUART1 */</comment>
    <default>default:</default>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>stm32_gpio_clk_enable</name><parameter_list>(<parameter><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier></type><name>gpiox</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* check the parameters */</comment>
    <expr_stmt><expr><call><name>assert_param</name><argument_list>(<argument><expr><call><name>IS_GPIO_ALL_INSTANCE</name><argument_list>(<argument><expr><name>gpiox</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* gpio ports clock enable */</comment>
    <switch>switch <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>gpiox</name></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOA_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOA</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOA_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOB_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOB</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOB_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOC_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOC</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOC_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOD_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOD</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOD_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOE_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOE</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOE_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOF_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOF</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOF_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOG_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOG</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOG_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOH_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOH</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOH_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOI_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOI</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOI_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOJ_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOJ</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOJ_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAL_RCC_GPIOK_CLK_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>GPIOK</name></expr>:</case>
        <expr_stmt><expr><call><name>__HAL_RCC_GPIOK_CLK_ENABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <default>default:</default>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>up_char</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>c</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_pin_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pin_name</name></decl></parameter>, <parameter><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier><modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pin_num</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>pin_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>port_name</name> <init>= <expr><name><name>pin_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>up_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>up_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>GPIO_TypeDef</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>GPIOA</name>
            <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>port_name</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>GPIOB</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>GPIOA</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pin</name> <operator>=</operator> <operator>(</operator><name>GPIO_PIN_0</name> <operator>&lt;&lt;</operator> <name>pin_num</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>stm32_gpio_configure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stm32_uart_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>uart_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPIO_InitTypeDef</name></type> <name>GPIO_InitStruct</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier></type><name>tx_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GPIO_TypeDef</name> <modifier>*</modifier></type><name>rx_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>tx_pin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>rx_pin</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>uart_num</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>get_pin_by_name</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>rx_pin_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rx_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rx_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>get_pin_by_name</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tx_pin_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tx_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tx_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* gpio ports clock enable */</comment>
    <expr_stmt><expr><call><name>stm32_gpio_clk_enable</name><argument_list>(<argument><expr><name>tx_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tx_port</name> <operator>!=</operator> <name>rx_port</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>stm32_gpio_clk_enable</name><argument_list>(<argument><expr><name>rx_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* rx pin initialize */</comment>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pin</name></name> <operator>=</operator> <name>tx_pin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>GPIO_MODE_AF_PP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pull</name></name> <operator>=</operator> <name>GPIO_PULLUP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Speed</name></name> <operator>=</operator> <name>GPIO_SPEED_FREQ_HIGH</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F4</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32F7</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32G4</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32L1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOC_SERIES_STM32L4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPIO_AF7</name></cpp:macro>   <cpp:value>((uint8_t)0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPIO_AF8</name></cpp:macro>   <cpp:value>((uint8_t)0x08)</cpp:value></cpp:define>
    <comment type="block">/* uart1-3 -&gt; AF7, uart4-8 -&gt; AF8 */</comment>
    <if_stmt><if>if <condition>(<expr><name>uart_num</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Alternate</name></name> <operator>=</operator> <name>GPIO_AF7</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Alternate</name></name> <operator>=</operator> <name>GPIO_AF8</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>HAL_GPIO_Init</name><argument_list>(<argument><expr><name>tx_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GPIO_InitStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* rx pin initialize */</comment>
    <expr_stmt><expr><name><name>GPIO_InitStruct</name><operator>.</operator><name>Pin</name></name> <operator>=</operator> <name>rx_pin</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HAL_GPIO_Init</name><argument_list>(<argument><expr><name>rx_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GPIO_InitStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>stm32_configure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stm32_uart_config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>stm32_uart_clk_enable</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Instance</name></name>          <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>Instance</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>BaudRate</name></name>     <operator>=</operator> <literal type="number">115200</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>HwFlowCtl</name></name>    <operator>=</operator> <name>UART_HWCONTROL_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>Mode</name></name>         <operator>=</operator> <name>UART_MODE_TX_RX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>OverSampling</name></name> <operator>=</operator> <name>UART_OVERSAMPLING_16</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>WordLength</name></name>   <operator>=</operator> <name>UART_WORDLENGTH_8B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>StopBits</name></name>     <operator>=</operator> <name>UART_STOPBITS_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>.</operator><name>Init</name><operator>.</operator><name>Parity</name></name>       <operator>=</operator> <name>UART_PARITY_NONE</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>HAL_UART_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HAL_OK</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rt_hw_usart_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>_uart_config</name> <operator>=</operator> <operator>&amp;</operator><name><name>uart_config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stm32_gpio_configure</name><argument_list>(<argument><expr><name>_uart_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stm32_configure</name><argument_list>(<argument><expr><name>_uart_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>HAL_UART_Transmit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>c</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
