<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FlashDB/demos/stm32f405rg/applications/syscall_newlib.c"><comment type="block">/*
 * Copyright (c) 2006-2020, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2020-05-31     RT-Thread    first version
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>errno</name></cpp:undef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_end</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>print_char</name><parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>caddr_t</name></type> <name>_sbrk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>incr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>prev_heap</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>heap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>heap</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>_end</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>prev_heap</name> <operator>=</operator> <name>heap</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>heap</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>caddr_t</name><operator>)</operator> <name>prev_heap</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>link</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_fstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <name>S_IFCHR</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_isatty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_lseek</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>abort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Abort called */</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>print_char</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>print_char</name><argument_list>(<argument><expr><name><name>pBuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>
</unit>
